{"version":3,"file":"static/js/1988.44a5ef28.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedpeAdapter/BedpeAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature, SimpleFeature } from '@jbrowse/core/util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function featureData(\n  line: string,\n  uniqueId: string,\n  flip: boolean,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const ref1 = l[flip ? 3 : 0]\n  const start1 = +l[flip ? 4 : 1]\n  const end1 = +l[flip ? 5 : 2]\n  const ref2 = +l[!flip ? 3 : 0]\n  const start2 = +l[!flip ? 4 : 1]\n  const end2 = +l[!flip ? 5 : 2]\n  const name = l[6]\n  const score = +l[7]\n  const strand1 = parseStrand(l[8])\n  const strand2 = parseStrand(l[9])\n  const extra = l.slice(9)\n  const rest = names\n    ? Object.fromEntries(names.slice(9).map((n, idx) => [n, extra[idx]]))\n    : extra\n\n  return new SimpleFeature({\n    start: start1,\n    end: end1,\n    refName: ref1,\n    strand: strand1,\n    name,\n    ...rest,\n    score,\n    uniqueId,\n    mate: { refName: ref2, start: start2, end: end2, strand: strand2 },\n  })\n}\n\nfunction parseStrand(strand: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else if (strand === '.') {\n    return 0\n  } else {\n    return undefined\n  }\n}\n\nexport default class BedpeAdapter extends BaseFeatureDataAdapter {\n  protected bedpeFeatures?: Promise<{\n    header: string\n    feats1: Record<string, string[]>\n    feats2: Record<string, string[]>\n    columnNames: string[]\n  }>\n\n  protected intervalTrees: {\n    [key: string]: Promise<IntervalTree | undefined> | undefined\n  } = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedpeLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const feats1 = {} as Record<string, string[]>\n    const feats2 = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const cols = line.split('\\t')\n      const r1 = cols[0]\n      const r2 = cols[3]\n      if (!feats1[r1]) {\n        feats1[r1] = []\n      }\n      if (!feats2[r2]) {\n        feats2[r2] = []\n      }\n      feats1[r1].push(line)\n      feats2[r2].push(line)\n    }\n    const columnNames = this.getConf('columnNames')\n\n    return {\n      header,\n      feats1,\n      feats2,\n      columnNames,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedpeFeatures) {\n      this.bedpeFeatures = this.loadDataP(opts).catch(e => {\n        this.bedpeFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedpeFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { feats1, feats2 } = await this.loadData(opts)\n    return [...new Set([...Object.keys(feats1), ...Object.keys(feats2)])]\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs[defs.length - 1]\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureTreeP(refName: string) {\n    const { feats1, feats2 } = await this.loadData()\n    const lines1 = feats1[refName]\n    const lines2 = feats2[refName]\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret1 = lines1?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, false, names)\n    })\n    const ret2 = lines2?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, true, names)\n    })\n\n    for (let i = 0; i < ret1.length; i++) {\n      const obj = ret1[i]\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n\n    for (let i = 0; i < ret2.length; i++) {\n      const obj = ret2[i]\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n\n    return intervalTree\n  }\n\n  private async loadFeatureTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureTreeP(refName).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["isGzip","buf","featureData","line","uniqueId","flip","names","l","split","ref1","start1","end1","ref2","start2","end2","name","score","strand1","parseStrand","strand2","extra","slice","rest","Object","fromEntries","map","n","idx","SimpleFeature","_objectSpread","start","end","refName","strand","mate","BedpeAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","bedpeFeatures","intervalTrees","_createClass","key","value","_loadDataP","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","pm","bedLoc","buffer","data","lines","headerLines","i","header","feats1","feats2","cols","r1","r2","columnNames","_args","wrap","_context","prev","next","undefined","this","pluginManager","getConf","openLocation","readFile","sent","unzip","t0","Error","TextDecoder","fatal","decode","filter","f","startsWith","push","join","abrupt","stop","_loadData","_callee2","_this2","_args2","_context2","loadDataP","catch","e","_getRefNames","_callee3","_yield$this$loadData","_args3","_context3","loadData","_toConsumableArray","Set","keys","_getHeader","_callee4","_yield$this$loadData2","_args4","_context4","_getNames","_callee5","_yield$this$loadData3","defs","defline","_context5","includes","field","trim","_loadFeatureTreeP","_callee6","_yield$this$loadData4","lines1","lines2","intervalTree","ret1","ret2","obj","_i","_obj","_this3","_context6","getNames","IntervalTree","id","insert","get","_x","_loadFeatureTree","_callee7","_this4","_context7","loadFeatureTreeP","_x2","query","_this5","ObservableCreate","_ref","_callee8","observer","_context8","loadFeatureTree","search","forEach","complete","_x3","signal","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}