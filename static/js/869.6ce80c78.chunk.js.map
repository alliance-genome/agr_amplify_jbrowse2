{"version":3,"file":"static/js/869.6ce80c78.chunk.js","mappings":"2XAuFA,GAnEsBA,EAAAA,EAAAA,WAAS,YAa3B,IAZFC,EAAS,EAATA,UACAC,EAAwB,EAAxBA,yBACAC,EAAsB,EAAtBA,uBAeA,IAAQC,EAAeH,EAAUI,QAAzBD,WAER,OACE,SAACE,EAAA,EAAc,CAACC,UAAWC,EAAAA,EAAM,UAC/B,UAACC,EAAA,EAAK,YACJ,SAACC,EAAA,EAAS,WACR,UAACC,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,UAAC,UACX,SAACA,EAAA,EAAS,UAAC,kBACX,SAACA,EAAA,EAAS,UAAC,aACX,SAACA,EAAA,EAAS,UAAC,kBAGf,SAACC,EAAA,EAAS,UACPT,EAAWU,KAAI,SAAAC,GACd,IAAMC,GAAOC,EAAAA,EAAAA,gBAAeF,EAAU,QAChCG,GAAcD,EAAAA,EAAAA,gBAAeF,EAAU,eACvCI,GAAUF,EAAAA,EAAAA,gBAAeF,EAAU,WACzC,OACE,UAACJ,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,UAAEI,KACZ,SAACJ,EAAA,EAAS,UAAEM,KACZ,SAACN,EAAA,EAAS,UAAEO,EAAUA,EAAQC,WAAa,MAC3C,UAACR,EAAA,EAAS,YACR,SAACS,EAAA,EAAU,CACT,wBAAgBL,EAAI,SACpBM,QAAS,WACPpB,GAAyB,GACzBC,EAAuBY,EACzB,EAAE,UAEF,SAACQ,EAAA,EAAU,CAACC,MAAM,eAEpB,SAACH,EAAA,EAAU,CACT,wBAAgBL,EAAI,WACpBM,QAAS,kBAvC3B,SAAwBN,GACtBf,EAAUI,QAAQoB,mBAAmBT,EACvC,CAqCiCU,CAAeV,EAAK,EAAC,UAEpC,SAACW,EAAA,EAAU,CAACH,MAAM,iBAlBTR,EAuBnB,UAKV,I,iCC5EMY,GAAkB5B,EAAAA,EAAAA,WAAS,YAQ7B,IAPF6B,EAAgB,EAAhBA,iBACAC,EAAmB,EAAnBA,oBACAC,EAAY,EAAZA,aAMA,OACE,SAACC,EAAA,EAAS,CACRC,MAAOJ,EACPK,MAAM,OACNC,QAAM,EACNC,WAAW,yBACXC,WAAS,EACTC,SAAU,SAAAC,GAAK,OAAIT,EAAoBS,EAAMC,OAAOP,MAAM,EAAC,SAE1DF,EAAajB,KAAI,SAAA2B,GAAG,OACnB,SAACC,EAAA,EAAQ,CAAWT,MAAOQ,EAAI,SAC5BA,GADYA,EAEJ,KAInB,IAEME,GAAe3C,EAAAA,EAAAA,WACnB,YAwBO,IAvBL6B,EAAgB,EAAhBA,iBACAe,EAAa,EAAbA,cACAC,EAAgB,EAAhBA,iBACAC,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAC,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBACAC,EAAkB,EAAlBA,mBACAC,EAAqB,EAArBA,sBAcA,MACuB,wBAArBxB,GACqB,sBAArBA,GAGE,UAACyB,EAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE,WACzB,SAACF,EAAA,GAAI,CAACG,MAAI,YACR,SAAC,EAAAC,aAAY,CACX1C,KAAK,gBACL2C,SAAUf,EACVgB,YAAa,SAAAC,GAAG,OAAIhB,EAAiBgB,EAAI,OAG7C,SAACP,EAAA,GAAI,CAACG,MAAI,YACR,SAAC,EAAAC,aAAY,CACX1C,KAAK,cACL2C,SAAUb,EACVc,YAAa,SAAAC,GAAG,OAAId,EAAec,EAAI,MAGrB,sBAArBhC,GACC,SAACyB,EAAA,GAAI,CAACG,MAAI,YACR,SAAC,EAAAC,aAAY,CACX1C,KAAK,cACL2C,SAAUX,EACVY,YAAa,SAAAC,GAAG,OAAIZ,EAAeY,EAAI,MAGzC,QAKe,kBAArBhC,GAEA,UAACyB,EAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE,WACzB,SAACF,EAAA,GAAI,CAACG,MAAI,YACR,SAAC,EAAAC,aAAY,CACX1C,KAAK,iBACL2C,SAAUT,EACVU,YAAa,SAAAC,GAAG,OAAIV,EAAkBU,EAAI,OAG9C,SAACP,EAAA,GAAI,CAACG,MAAI,YACR,SAAC,EAAAC,aAAY,CACX1C,KAAK,+FACL2C,SAAUP,EACVQ,YAAa,SAAAC,GAAG,OAAIR,EAAsBQ,EAAI,SAOjD,IACT,IAGIC,EAAQ,CAAEC,IAAK,IAiIrB,GA/HwB/D,EAAAA,EAAAA,WAAS,YAO7B,IANFC,EAAS,EAATA,UACA+D,EAAW,EAAXA,YAMMjC,EAAe,CACnB,sBACA,oBACA,iBAGF,GAAwCkC,EAAAA,EAAAA,UAAS,IAAG,eAA7CC,EAAY,KAAEC,EAAe,KACpC,GAAsDF,EAAAA,EAAAA,UAAS,IAAG,eAA3DG,EAAmB,KAAEC,EAAsB,KAClD,GAAgDJ,EAAAA,EAAAA,UAASlC,EAAa,IAAG,eAAlEF,EAAgB,KAAEC,EAAmB,KAC5C,GAA0CmC,EAAAA,EAAAA,UAASH,GAAM,eAAlDlB,EAAa,KAAEC,EAAgB,KACtC,GAAsCoB,EAAAA,EAAAA,UAASH,GAAM,eAA9ChB,EAAW,KAAEC,EAAc,KAClC,GAAsCkB,EAAAA,EAAAA,UAASH,GAAM,eAA9Cd,EAAW,KAAEC,EAAc,KAClC,GAA4CgB,EAAAA,EAAAA,UAASH,GAAM,eAApDZ,EAAc,KAAEC,EAAiB,KACxC,GAAoDc,EAAAA,EAAAA,UAASH,GAAM,eAA5DV,EAAkB,KAAEC,EAAqB,KAsDhD,OACE,4BACE,UAAC7C,EAAA,EAAK,YACJ,SAACwB,EAAA,EAAS,CACRsC,GAAG,gBACHC,WAAY,CAAE,cAAe,iBAC7BrC,MAAM,gBACNE,WAAW,8BACXoC,QAAQ,WACRvC,MAAOiC,EACP5B,SAAU,SAAAC,GAAK,OAAI4B,EAAgB5B,EAAMC,OAAOP,MAAM,KAExD,SAACD,EAAA,EAAS,CACRsC,GAAG,gBACHC,WAAY,CAAE,cAAe,yBAC7BrC,MAAM,wBACNE,WAAW,4EACXoC,QAAQ,WACRvC,MAAOmC,EACP9B,SAAU,SAAAC,GAAK,OAAI8B,EAAuB9B,EAAMC,OAAOP,MAAM,KAE/D,SAACL,EAAe,CACdC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,aAAcA,KAEhB,SAACY,EAAY,CACXd,iBAAkBA,EAClBe,cAAeA,EACfC,iBAAkBA,EAClBC,YAAaA,EACbC,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,EACnBC,mBAAoBA,EACpBC,sBAAuBA,QAG3B,SAACoB,EAAA,EAAM,CACLD,QAAQ,YACRhD,MAAM,YACNkD,WAAW,SAACC,EAAA,EAAO,IACnBrD,QAhGN,WAKI,IAAIsD,EAJe,KAAjBV,EACFjE,EAAU4E,QAAQC,OAAO,4CAEzBd,GAAY,GAEa,wBAArBnC,EACF+C,EAAc,CACZ5D,KAAMkD,EACNhD,YAAakD,EACbW,SAAU,CACRC,QAAS,CACPC,KAAM,sBACNrC,cAAAA,EACAE,YAAAA,KAIwB,sBAArBjB,EACT+C,EAAc,CACZ5D,KAAMkD,EACNhD,YAAakD,EACbW,SAAU,CACRC,QAAS,CACPC,KAAM,oBACNrC,cAAAA,EACAE,YAAAA,EACAE,YAAAA,KAIwB,kBAArBnB,IACT+C,EAAc,CACZ5D,KAAMkD,EACNhD,YAAakD,EACbW,SAAU,CACRC,QAAS,CACPC,KAAM,gBACN/B,eAAAA,EACAE,mBAAAA,MAKRnD,EAAUI,QAAQ6E,gBAAgBN,GAClC3E,EAAU4E,QAAQC,OAAO,sBAAD,OACAZ,EAAY,0BAClC,WAGN,EA8C8B,SACzB,0BAKP,I,WCpOA,GAfuBlE,EAAAA,EAAAA,WACrB,YAKO,IAJLe,EAAQ,EAARA,SAKA,OACE,gBAAKoE,MAAO,CAAEC,UAAW,IAAKC,SAAU,QAAS,UAC/C,SAAC,KAAmB,CAACC,MAAO,CAAE9C,OAAQzB,MAG5C,ICmEF,GArEwBf,EAAAA,EAAAA,WAAS,YAO7B,IANFC,EAAS,EAATA,UACAsF,EAAO,EAAPA,QAMA,GAAkCtB,EAAAA,EAAAA,WAAS,GAAM,eAA1CuB,EAAU,KAAExB,EAAW,KAC9B,GAA0DC,EAAAA,EAAAA,WAAS,GAAM,eAAlEwB,EAAqB,KAAEvF,EAAwB,KACtD,GACE+D,EAAAA,EAAAA,YAAiC,eAD5ByB,EAAmB,KAAEvF,EAAsB,KAG5CwF,GAAqBH,IAAeC,EAE1C,OACE,UAAC,EAAAG,OAAM,CAACC,MAAI,EAACN,QAAS,kBAAMA,GAAQ,EAAM,EAAEO,MAAM,mBAAkB,WAClE,UAACC,EAAA,EAAa,WACXJ,GACC,SAAC,EAAa,CACZ1F,UAAWA,EACXC,yBAA0BA,EAC1BC,uBAAwBA,IAExB,KACHsF,GACC,SAAC,EAAc,CAAC1E,SAAU2E,IACxB,KACHF,GACC,SAAC,EAAe,CAACvF,UAAWA,EAAW+D,YAAaA,IAClD,SAEN,UAACgC,EAAA,EAAa,WACXR,GACC,SAACf,EAAA,EAAM,CAACD,QAAQ,YAAYlD,QAAS,kBAAM0C,GAAY,EAAM,EAAC,SAAC,SAG7D,KACHyB,GACC,SAAChB,EAAA,EAAM,CACLD,QAAQ,YACRlD,QAAS,kBAAMpB,GAAyB,EAAM,EAAC,SAChD,SAGC,KACHyF,GACC,iCACE,SAAClB,EAAA,EAAM,CACLjD,MAAM,YACNgD,QAAQ,YACRlD,QAAS,kBAAMiE,GAAQ,EAAM,EAAC,SAC/B,WAGD,SAACd,EAAA,EAAM,CACLD,QAAQ,YACRE,WAAW,SAACC,EAAA,EAAO,IACnBrD,QAAS,kBAAM0C,GAAY,EAAK,EAAC,SAClC,wBAID,UAIZ,G,4BC/EIiC,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,yJACD,UACJN,EAAQ,EAAUG,C","sources":["../../../plugins/data-management/src/AssemblyManager/AssemblyTable.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyAddForm.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyEditor.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyManager.tsx","../../../node_modules/@mui/icons-material/Create.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\n\nimport CreateIcon from '@mui/icons-material/Create'\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst AssemblyTable = observer(function ({\n  rootModel,\n  setIsAssemblyBeingEdited,\n  setAssemblyBeingEdited,\n}: {\n  rootModel: {\n    jbrowse: {\n      removeAssemblyConf: (arg: string) => void\n      assemblies: AnyConfigurationModel[]\n    }\n  }\n  setIsAssemblyBeingEdited(arg: boolean): void\n  setAssemblyBeingEdited(arg: AnyConfigurationModel): void\n}) {\n  function removeAssembly(name: string) {\n    rootModel.jbrowse.removeAssemblyConf(name)\n  }\n\n  const { assemblies } = rootModel.jbrowse\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Display name</TableCell>\n            <TableCell>Aliases</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assemblies.map(assembly => {\n            const name = readConfObject(assembly, 'name')\n            const displayName = readConfObject(assembly, 'displayName')\n            const aliases = readConfObject(assembly, 'aliases')\n            return (\n              <TableRow key={name}>\n                <TableCell>{name}</TableCell>\n                <TableCell>{displayName}</TableCell>\n                <TableCell>{aliases ? aliases.toString() : ''}</TableCell>\n                <TableCell>\n                  <IconButton\n                    data-testid={`${name}-edit`}\n                    onClick={() => {\n                      setIsAssemblyBeingEdited(true)\n                      setAssemblyBeingEdited(assembly)\n                    }}\n                  >\n                    <CreateIcon color=\"primary\" />\n                  </IconButton>\n                  <IconButton\n                    data-testid={`${name}-delete`}\n                    onClick={() => removeAssembly(name)}\n                  >\n                    <DeleteIcon color=\"error\" />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            )\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n})\n\nexport default AssemblyTable\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, Grid, MenuItem, Paper, TextField } from '@mui/material'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { FileLocation } from '@jbrowse/core/util/types'\n\n// icons\nimport AddIcon from '@mui/icons-material/Add'\n\nconst AdapterSelector = observer(function ({\n  adapterSelection,\n  setAdapterSelection,\n  adapterTypes,\n}: {\n  adapterSelection: string\n  setAdapterSelection: Function\n  adapterTypes: string[]\n}) {\n  return (\n    <TextField\n      value={adapterSelection}\n      label=\"Type\"\n      select\n      helperText=\"Type of adapter to use\"\n      fullWidth\n      onChange={event => setAdapterSelection(event.target.value)}\n    >\n      {adapterTypes.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst AdapterInput = observer(\n  ({\n    adapterSelection,\n    fastaLocation,\n    setFastaLocation,\n    faiLocation,\n    setFaiLocation,\n    gziLocation,\n    setGziLocation,\n    twoBitLocation,\n    setTwoBitLocation,\n    chromSizesLocation,\n    setChromSizesLocation,\n  }: {\n    adapterSelection: string\n    fastaLocation: FileLocation\n    setFastaLocation: Function\n    faiLocation: FileLocation\n    setFaiLocation: Function\n    gziLocation: FileLocation\n    setGziLocation: Function\n    twoBitLocation: FileLocation\n    setTwoBitLocation: Function\n    chromSizesLocation: FileLocation\n    setChromSizesLocation: Function\n  }) => {\n    if (\n      adapterSelection === 'IndexedFastaAdapter' ||\n      adapterSelection === 'BgzipFastaAdapter'\n    ) {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"fastaLocation\"\n              location={fastaLocation}\n              setLocation={loc => setFastaLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"faiLocation\"\n              location={faiLocation}\n              setLocation={loc => setFaiLocation(loc)}\n            />\n          </Grid>\n          {adapterSelection === 'BgzipFastaAdapter' ? (\n            <Grid item>\n              <FileSelector\n                name=\"gziLocation\"\n                location={gziLocation}\n                setLocation={loc => setGziLocation(loc)}\n              />\n            </Grid>\n          ) : null}\n        </Grid>\n      )\n    }\n\n    if (adapterSelection === 'TwoBitAdapter') {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"twoBitLocation\"\n              location={twoBitLocation}\n              setLocation={loc => setTwoBitLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\"\n              location={chromSizesLocation}\n              setLocation={loc => setChromSizesLocation(loc)}\n            />\n          </Grid>\n        </Grid>\n      )\n    }\n\n    return null\n  },\n)\n\nconst blank = { uri: '' } as FileLocation\n\nconst AssemblyAddForm = observer(function ({\n  rootModel,\n  setFormOpen,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rootModel: any\n  setFormOpen: Function\n}) {\n  const adapterTypes = [\n    'IndexedFastaAdapter',\n    'BgzipFastaAdapter',\n    'TwoBitAdapter',\n  ]\n\n  const [assemblyName, setAssemblyName] = useState('')\n  const [assemblyDisplayName, setAssemblyDisplayName] = useState('')\n  const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0])\n  const [fastaLocation, setFastaLocation] = useState(blank)\n  const [faiLocation, setFaiLocation] = useState(blank)\n  const [gziLocation, setGziLocation] = useState(blank)\n  const [twoBitLocation, setTwoBitLocation] = useState(blank)\n  const [chromSizesLocation, setChromSizesLocation] = useState(blank)\n\n  function createAssembly() {\n    if (assemblyName === '') {\n      rootModel.session.notify(\"Can't create an assembly without a name\")\n    } else {\n      setFormOpen(false)\n      let newAssembly\n      if (adapterSelection === 'IndexedFastaAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'IndexedFastaAdapter',\n              fastaLocation,\n              faiLocation,\n            },\n          },\n        }\n      } else if (adapterSelection === 'BgzipFastaAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'BgzipFastaAdapter',\n              fastaLocation,\n              faiLocation,\n              gziLocation,\n            },\n          },\n        }\n      } else if (adapterSelection === 'TwoBitAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'TwoBitAdapter',\n              twoBitLocation,\n              chromSizesLocation,\n            },\n          },\n        }\n      }\n      rootModel.jbrowse.addAssemblyConf(newAssembly)\n      rootModel.session.notify(\n        `Successfully added ${assemblyName} assembly to JBrowse 2`,\n        'success',\n      )\n    }\n  }\n\n  return (\n    <div>\n      <Paper>\n        <TextField\n          id=\"assembly-name\"\n          inputProps={{ 'data-testid': 'assembly-name' }}\n          label=\"Assembly name\"\n          helperText=\"The assembly name e.g. hg38\"\n          variant=\"outlined\"\n          value={assemblyName}\n          onChange={event => setAssemblyName(event.target.value)}\n        />\n        <TextField\n          id=\"assembly-name\"\n          inputProps={{ 'data-testid': 'assembly-display-name' }}\n          label=\"Assembly display name\"\n          helperText='A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"'\n          variant=\"outlined\"\n          value={assemblyDisplayName}\n          onChange={event => setAssemblyDisplayName(event.target.value)}\n        />\n        <AdapterSelector\n          adapterSelection={adapterSelection}\n          setAdapterSelection={setAdapterSelection}\n          adapterTypes={adapterTypes}\n        />\n        <AdapterInput\n          adapterSelection={adapterSelection}\n          fastaLocation={fastaLocation}\n          setFastaLocation={setFastaLocation}\n          faiLocation={faiLocation}\n          setFaiLocation={setFaiLocation}\n          gziLocation={gziLocation}\n          setGziLocation={setGziLocation}\n          twoBitLocation={twoBitLocation}\n          setTwoBitLocation={setTwoBitLocation}\n          chromSizesLocation={chromSizesLocation}\n          setChromSizesLocation={setChromSizesLocation}\n        />\n      </Paper>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<AddIcon />}\n        onClick={createAssembly}\n      >\n        Create new assembly\n      </Button>\n    </div>\n  )\n})\n\nexport default AssemblyAddForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\n\nconst AssemblyEditor = observer(\n  ({\n    assembly,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assembly: any\n  }) => {\n    return (\n      <div style={{ maxHeight: 600, overflow: 'auto' }}>\n        <ConfigurationEditor model={{ target: assembly }} />\n      </div>\n    )\n  },\n)\n\nexport default AssemblyEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\n\n// icons\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport AssemblyTable from './AssemblyTable'\nimport AssemblyAddForm from './AssemblyAddForm'\nimport AssemblyEditor from './AssemblyEditor'\n\nconst AssemblyManager = observer(function ({\n  rootModel,\n  onClose,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rootModel: any\n  onClose: (arg: boolean) => void\n}) {\n  const [isFormOpen, setFormOpen] = useState(false)\n  const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false)\n  const [assemblyBeingEdited, setAssemblyBeingEdited] =\n    useState<AnyConfigurationModel>()\n\n  const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited\n\n  return (\n    <Dialog open onClose={() => onClose(false)} title=\"Assembly manager\">\n      <DialogContent>\n        {showAssemblyTable ? (\n          <AssemblyTable\n            rootModel={rootModel}\n            setIsAssemblyBeingEdited={setIsAssemblyBeingEdited}\n            setAssemblyBeingEdited={setAssemblyBeingEdited}\n          />\n        ) : null}\n        {isAssemblyBeingEdited ? (\n          <AssemblyEditor assembly={assemblyBeingEdited} />\n        ) : null}\n        {isFormOpen ? (\n          <AssemblyAddForm rootModel={rootModel} setFormOpen={setFormOpen} />\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        {isFormOpen ? (\n          <Button variant=\"contained\" onClick={() => setFormOpen(false)}>\n            Back\n          </Button>\n        ) : null}\n        {isAssemblyBeingEdited ? (\n          <Button\n            variant=\"contained\"\n            onClick={() => setIsAssemblyBeingEdited(false)}\n          >\n            Back\n          </Button>\n        ) : null}\n        {showAssemblyTable ? (\n          <>\n            <Button\n              color=\"secondary\"\n              variant=\"contained\"\n              onClick={() => onClose(false)}\n            >\n              Close\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={() => setFormOpen(true)}\n            >\n              Add new assembly\n            </Button>\n          </>\n        ) : null}\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default AssemblyManager\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\nexports.default = _default;"],"names":["observer","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","assemblies","jbrowse","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","assembly","name","readConfObject","displayName","aliases","toString","IconButton","onClick","Create","color","removeAssemblyConf","removeAssembly","Delete","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","value","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","chromSizesLocation","setChromSizesLocation","Grid","container","spacing","item","FileSelector","location","setLocation","loc","blank","uri","setFormOpen","useState","assemblyName","setAssemblyName","assemblyDisplayName","setAssemblyDisplayName","id","inputProps","variant","Button","startIcon","Add","newAssembly","session","notify","sequence","adapter","type","addAssemblyConf","style","maxHeight","overflow","model","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","open","title","DialogContent","DialogActions","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}