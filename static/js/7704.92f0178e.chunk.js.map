{"version":3,"file":"static/js/7704.92f0178e.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts"],"sourcesContent":["import Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException !== 'undefined') {\n      // eslint-disable-next-line  no-undef\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    if (dif !== 0) {\n      return dif\n    } else {\n      return c0.minv.dataPosition - c1.minv.dataPosition\n    }\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n    // else {\n    //   console.log(`skipping chunk ${chunk}`)\n    // }\n  })\n\n  return mergedChunks\n}\n","export default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  /**\n   * @param {VirtualOffset} minv\n   * @param {VirtualOffset} maxv\n   * @param {number} bin\n   * @param {number} [fetchedSize]\n   */\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport VirtualOffset from './virtualOffset'\nimport Chunk from './chunk'\n\nexport interface Options {\n  // support having some unknown parts of the options\n  [key: string]: unknown\n  signal?: AbortSignal\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private _parseCache: any\n\n  /**\n   * @param {filehandle} filehandle\n   * @param {function} [renameRefSeqs]\n   */\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<{\n    refNameToId: { [key: string]: number }\n    refIdToName: string[]\n  }>\n\n  public async getMetadata(opts: Options = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this._parseCache) {\n      this._parseCache = new AbortablePromiseCache({\n        cache: new QuickLRU({ maxSize: 1 }),\n        fill: () => this._parse(opts),\n      })\n    }\n    return this._parseCache.get('index', null, undefined)\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    return !!((await this.parse(opts)).indices[seqId] || {}).binIndex\n  }\n}\n","import Long from 'long'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { longToNumber, optimizeChunks, checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  // memoize\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip((await this.filehandle.readFile(opts)) as Buffer)\n    checkAbortSignal(opts.signal)\n\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n      // TODO: do we need to support big-endian TBI files?\n    }\n\n    // number of reference sequences in the index\n    const refCount = bytes.readInt32LE(4)\n    const formatFlags = bytes.readInt32LE(8)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: { [key: number]: string } = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(12),\n      start: bytes.readInt32LE(16),\n      end: bytes.readInt32LE(20),\n    }\n    const metaValue = bytes.readInt32LE(24)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(28)\n\n    // read sequence dictionary\n    const nameSectionLength = bytes.readInt32LE(32)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: number]: Chunk[] } = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return { binIndex, linearIndex, stats }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 16, offset + 24) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import Long from 'long'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { longToNumber, optimizeChunks } from './util'\n\nimport IndexFile, { Options } from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n  async indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n    return []\n  }\n\n  parseAuxData(bytes: Buffer, offset: number, auxLength: number) {\n    if (auxLength < 30) {\n      return {\n        refIdToName: [],\n        refNameToId: {},\n      }\n    }\n\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = (\n      { 0: 'generic', 1: 'SAM', 2: 'VCF' } as {\n        [key: number]: string\n      }\n    )[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : ''\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.slice(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip((await this.filehandle.readFile(opts)) as Buffer)\n\n    // check TBI magic numbers\n    let csiVersion\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n\n    const auxLength = bytes.readInt32LE(12)\n    let aux: {\n      refIdToName: string[]\n      refNameToId: { [key: string]: number }\n    } = {\n      refIdToName: [],\n      refNameToId: {},\n    }\n    if (auxLength) {\n      aux = this.parseAuxData(bytes, 16, auxLength)\n    }\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: string]: Chunk[] } = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information\n          // about the reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = bytes.readInt32LE(currOffset + 12)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            // this._findFirstData(data, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        Array.prototype.slice.call(bytes, offset + 28, offset + 36),\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from 'quick-lru'\nimport { GenericFilehandle, LocalFile } from 'generic-filehandle'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nimport Chunk from './chunk'\nimport TBI from './tbi'\nimport CSI from './csi'\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8') : undefined\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\nfunction timeout(time: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, time)\n  })\n}\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private chunkSizeLimit: number\n  private renameRefSeq: (n: string) => string\n  private chunkCache: any\n  /**\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {filehandle} [args.filehandle]\n   * @param {string} [args.tbiPath]\n   * @param {filehandle} [args.tbiFilehandle]\n   * @param {string} [args.csiPath]\n   * @param {filehandle} [args.csiFilehandle]\n   * @param {chunkSizeLimit} default 50MiB\n   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform\n   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is\n   * not altered, just the names of the reference sequences that are used for querying.\n   * @param {number} [args.chunkCacheSize] maximum size in bytes of the chunk cache. default 5MB\n   * @param {number} [args.blockCacheSize] maximum size in bytes of the block cache. default 5MB\n   */\n  constructor({\n    path,\n    filehandle,\n    tbiPath,\n    tbiFilehandle,\n    csiPath,\n    csiFilehandle,\n    chunkSizeLimit = 50000000,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    tbiPath?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    chunkSizeLimit?: number\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath',\n      )\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit\n    this.renameRefSeq = renameRefSeqs\n    this.chunkCache = new AbortablePromiseCache({\n      cache: new LRU({\n        maxSize: Math.floor(chunkCacheSize / (1 << 16)),\n      }),\n\n      fill: this.readChunk.bind(this),\n    })\n  }\n\n  /**\n   * @param {string} refName name of the reference sequence\n   * @param {number} start start of the region (in 0-based half-open coordinates)\n   * @param {number} end end of the region (in 0-based half-open coordinates)\n   * @param {function|object} lineCallback callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc\n   * @returns {Promise} resolved when the whole read is finished, rejected on error\n   */\n  async getLines(\n    refName: string,\n    start: number,\n    end: number,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n    if (typeof opts === 'undefined') {\n      throw new TypeError('line callback must be provided')\n    }\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n    }\n    if (refName === undefined) {\n      throw new TypeError('must provide a reference sequence name')\n    }\n    if (!callback) {\n      throw new TypeError('line callback must be provided')\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = metadata.maxRefLength\n    }\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n\n    // check the chunks for any that are over the size limit.  if\n    // any are, don't fetch any of them\n    for (let i = 0; i < chunks.length; i += 1) {\n      const size = chunks[i].fetchedSize()\n      if (size > this.chunkSizeLimit) {\n        throw new Error(\n          `Too much data. Chunk size ${size.toLocaleString()} bytes exceeds chunkSizeLimit of ${this.chunkSizeLimit.toLocaleString()}.`,\n        )\n      }\n    }\n\n    // now go through each chunk and parse and filter the lines out of it\n    let last = Date.now()\n    for (let chunkNum = 0; chunkNum < chunks.length; chunkNum += 1) {\n      let previousStartCoordinate: number | undefined\n      const c = chunks[chunkNum]\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n        signal,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n      while (blockStart < buffer.length) {\n        const n = buffer.indexOf('\\n', blockStart)\n        if (n === -1) {\n          break\n        }\n        const b = buffer.subarray(blockStart, n)\n        const line = decoder?.decode(b) || b.toString()\n\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        // do a small check just to make sure that the lines are really sorted\n        // by start coordinate\n        if (\n          previousStartCoordinate !== undefined &&\n          startCoordinate !== undefined &&\n          previousStartCoordinate > startCoordinate\n        ) {\n          throw new Error(\n            `Lines not sorted by start coordinate (${previousStartCoordinate} > ${startCoordinate}), this file is not usable with Tabix.`,\n          )\n        }\n        previousStartCoordinate = startCoordinate\n\n        if (overlaps) {\n          callback(\n            line.trim(),\n            // cpositions[pos] refers to actual file offset of a bgzip block boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a \"unique\"\n            // address space so that data in that block could never overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset from\n            // that bgzip block boundary, and since the cpositions are multiplied by\n            // (1 << 8) these uncompressed offsets get a unique space\n            cpositions[pos] * (1 << 8) +\n              (blockStart - dpositions[pos]) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so\n          // we must be at the end of the relevant data and we can stop\n          // processing data now\n          return\n        }\n\n        // yield if we have emitted beyond the yield limit\n        if (last - Date.now() > 500) {\n          last = Date.now()\n          checkAbortSignal(signal)\n          await timeout(1)\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of\n   * the file, which are the bytes up to the first\n   * non-meta line\n   *\n   * @returns {Promise} for a buffer\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } = await this.getMetadata(\n      opts,\n    )\n    checkAbortSignal(opts.signal)\n    const maxFetch =\n      firstDataLine && firstDataLine.blockPosition\n        ? firstDataLine.blockPosition + maxBlockSize\n        : maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header\n    // actually takes up more than one block? this case is not covered here\n\n    let bytes = await this._readRegion(0, maxFetch, opts)\n    checkAbortSignal(opts.signal)\n    try {\n      bytes = await unzip(bytes)\n    } catch (e) {\n      console.error(e)\n      throw new Error(\n        //@ts-ignore\n        `error decompressing block ${e.code} at 0 (length ${maxFetch}) ${e}`,\n      )\n    }\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      bytes = bytes.slice(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the\n   * file, is the portion up to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const bytes = await this.getHeaderBuffer(opts)\n    checkAbortSignal(opts.signal)\n    return bytes.toString('utf8')\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which\n   * they occur in the file.\n   *\n   * reference sequence renaming is not applied to these names.\n   *\n   * @returns {Promise} for an array of string sequence names\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index,\n   * containing columnNumbers, metaChar, and format\n   * @param {string} regionRefName\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   * @param {array[string]} line\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    {\n      columnNumbers,\n      metaChar,\n      coordinateType,\n      format,\n    }: {\n      columnNumbers: { ref: number; start: number; end: number }\n      metaChar: string\n      coordinateType: string\n      format: string\n    },\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    // skip meta lines\n    if (line.charAt(0) === metaChar) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast.\n    // basically, we want to avoid doing a split, because if the lines are really long\n    // that could lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    for (let i = 0; i < line.length + 1; i += 1) {\n      if (line[i] === '\\t' || i === line.length) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return { overlaps: false }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return { startCoordinate, overlaps: false }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return { startCoordinate, overlaps: false }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          let endCoordinate\n          // this will never match if there is no end column\n          if (format === 'VCF') {\n            endCoordinate = this._getVcfEnd(\n              startCoordinate,\n              refSeq,\n              line.slice(currentColumnStart, i),\n            )\n          } else {\n            endCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          }\n          if (endCoordinate <= regionStart) {\n            return { overlaps: false }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return { startCoordinate, overlaps: true }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END\n    // as being on a different chromosome\n    // if CHR2 is on the same chromosome, still ignore it\n    // because there should be another pairwise feature\n    // at the end of this one\n    const isTRA = info.indexOf('SVTYPE=TRA') !== -1\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference sequence\n   * @param {string} refSeq reference sequence name\n   * @returns {Promise} for number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  async _readRegion(\n    position: number,\n    compressedSize: number,\n    opts: Options = {},\n  ) {\n    const { bytesRead, buffer } = await this.filehandle.read(\n      Buffer.alloc(compressedSize),\n      0,\n      compressedSize,\n      position,\n      opts,\n    )\n\n    return bytesRead < compressedSize ? buffer.slice(0, bytesRead) : buffer\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   * @param {Chunk} chunk\n   * @returns {Promise} for a string chunk of the file\n   */\n  async readChunk(chunk: Chunk, opts: Options = {}) {\n    // fetch the uncompressed data, uncompress carefully a block at a time,\n    // and stop when done\n\n    const compressedData = await this._readRegion(\n      chunk.minv.blockPosition,\n      chunk.fetchedSize(),\n      opts,\n    )\n    try {\n      return unzipChunkSlice(compressedData, chunk)\n    } catch (e) {\n      throw new Error(`error decompressing chunk ${chunk.toString()} ${e}`)\n    }\n  }\n}\n"],"names":["longToNumber","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","Error","toNumber","AbortError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","checkAbortSignal","signal","aborted","DOMException","e","code","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","length","sort","c0","c1","dif","minv","blockPosition","dataPosition","forEach","chunk","chunk1","chunk2","maxv","compareTo","push","VirtualOffset","this","key","value","concat","b","min","i","_len","args","Array","_key","fromBytes","bytes","offset","undefined","Chunk","bin","fetchedSize","_fetchedSize","toUniqueString","IndexFile","_ref","filehandle","_ref$renameRefSeqs","renameRefSeqs","n","renameRefSeq","_getMetadata","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_yield$this$parse","rest","_args","wrap","_context","prev","next","parse","sent","indices","_objectWithoutProperties","_excluded","abrupt","stop","currentFdl","virtualOffset","_parse","_callee2","_this","_args2","_context2","_parseCache","AbortablePromiseCache","cache","QuickLRU","maxSize","fill","get","_hasRefSeq","_callee3","seqId","_args3","_context3","t1","t0","binIndex","_x","TBI_MAGIC","TAD_LIDX_SHIFT","reg2bins","beg","end","TabixIndex","_IndexFile","_lineCount","refName","indexData","refId","stats","refNameToId","lineCount","_parse2","refCount","formatFlags","coordinateType","format","columnNumbers","metaValue","maxBinNumber","maxRefLength","metaChar","skipLines","nameSectionLength","_this$_parseNameBytes","refIdToName","currOffset","firstDataLine","unzip","readFile","readUInt32LE","readInt32LE","ref","start","Math","pow","String","fromCharCode","_parseNameBytes","slice","map","binCount","j","chunkCount","parsePseudoBin","k","u","v","_findFirstData","linearCount","linearIndex","maxBlockSize","Long","namesBytes","currRefId","currNameStart","toString","_blocksForRange","max","ba","overlappingBins","_iterator","_step","_step$value","binChunks","c","nintv","minLin","maxLin","vp","console","warn","_createForOfIteratorHelper","s","done","_slicedToArray","err","f","_x2","_x3","_x4","CSI1_MAGIC","CSI2_MAGIC","rshift","num","bits","floor","CSI","call","depth","minShift","_indexCov","auxLength","csiVersion","aux","_this2","parseAuxData","loffset","_objectSpread","csi","prototype","_callee4","_args4","_context4","l","t","bins","decoder","TextDecoder","timeout","time","Promise","resolve","setTimeout","TabixIndexedFile","path","tbiPath","tbiFilehandle","csiPath","csiFilehandle","_ref$chunkSizeLimit","chunkSizeLimit","_ref$chunkCacheSize","chunkCacheSize","TypeError","LocalFile","index","TBI","chunkCache","LRU","readChunk","bind","_getLines","options","callback","metadata","size","last","chunkNum","previousStartCoordinate","_yield$this$chunkCach","buffer","cpositions","dpositions","blockStart","pos","line","_this$checkLine","startCoordinate","overlaps","lineCallback","getMetadata","blocksForRange","toLocaleString","Date","now","indexOf","subarray","decode","checkLine","trim","_getHeaderBuffer","_yield$this$getMetada","maxFetch","lastNewline","newlineByte","metaByte","_readRegion","error","charCodeAt","_getHeader","getHeaderBuffer","_getReferenceSequenceNames","_callee5","_args5","_context5","_ref2","regionRefName","regionStart","regionEnd","charAt","maxColumn","currentColumnNumber","currentColumnStart","refSeq","Infinity","parseInt","_getVcfEnd","info","endCoordinate","isTRA","prevChar","valueEnd","_callee6","_args6","_context6","_x5","_readRegion2","_callee7","position","compressedSize","_yield$this$filehandl","bytesRead","_args7","_context7","read","Buffer","alloc","_x6","_x7","_readChunk","_callee8","compressedData","_args8","_context8","unzipChunkSlice","_x8"],"sourceRoot":""}