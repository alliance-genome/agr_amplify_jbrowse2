{"version":3,"file":"static/js/6646.c6ede5d1.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/CramAdapter/CramSlightlyLazyFeature.ts","../../../plugins/alignments/src/CramAdapter/CramAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { CramRecord } from '@gmod/cram'\nimport CramAdapter from './CramAdapter'\n\nexport interface Mismatch {\n  qual?: number\n  start: number\n  length: number\n  type: string\n  base: string\n  altbase?: string\n  seq?: string\n  cliplen?: number\n}\n\nexport default class CramSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n\n  constructor(private record: CramRecord, private _store: CramAdapter) {}\n\n  _get_name() {\n    return this.record.readName\n  }\n\n  _get_start() {\n    return this.record.alignmentStart - 1\n  }\n\n  _get_end() {\n    return this.record.alignmentStart + (this.record.lengthOnRef ?? 1) - 1\n  }\n\n  _get_cram_read_features() {\n    return this.record.readFeatures\n  }\n\n  _get_type() {\n    return 'match'\n  }\n\n  _get_score() {\n    return this.record.mappingQuality\n  }\n\n  _get_flags() {\n    return this.record.flags\n  }\n\n  _get_strand() {\n    return this.record.isReverseComplemented() ? -1 : 1\n  }\n\n  _read_group_id() {\n    const rg = this._store.samHeader.readGroups\n    return rg ? rg[this.record.readGroupId] : undefined\n  }\n\n  _get_qual() {\n    return (this.record.qualityScores || []).join(' ')\n  }\n\n  qualRaw() {\n    return this.record.qualityScores\n  }\n\n  _get_seq_id() {\n    return this._store.refIdToName(this.record.sequenceId)\n  }\n\n  _get_refName() {\n    return this._get_seq_id()\n  }\n\n  _get_is_paired() {\n    return !!this.record.mate\n  }\n\n  _get_pair_orientation() {\n    return this.record.isPaired() ? this.record.getPairOrientation() : undefined\n  }\n\n  _get_template_length() {\n    return this.record.templateLength || this.record.templateSize\n  }\n\n  _get_next_seq_id() {\n    return this.record.mate\n      ? this._store.refIdToName(this.record.mate.sequenceId)\n      : undefined\n  }\n\n  _get_next_pos() {\n    return this.record.mate ? this.record.mate.alignmentStart : undefined\n  }\n\n  _get_next_segment_position() {\n    return this.record.mate\n      ? `${this._store.refIdToName(this.record.mate.sequenceId)}:${\n          this.record.mate.alignmentStart\n        }`\n      : undefined\n  }\n\n  _get_tags() {\n    const RG = this._read_group_id()\n    const { tags } = this.record\n    // avoids a tag copy if no RG, but just copy if there is one\n    return RG !== undefined ? { ...tags, RG } : tags\n  }\n\n  _get_seq() {\n    return this.record.getReadBases()\n  }\n\n  // generate a CIGAR, based on code from jkbonfield\n  _get_CIGAR() {\n    let seq = ''\n    let cigar = ''\n    let op = 'M'\n    let oplen = 0\n    if (!this.record._refRegion) {\n      return ''\n    }\n\n    // not sure I should access these, but...\n    const ref = this.record._refRegion.seq\n    const refStart = this.record._refRegion.start\n    let last_pos = this.record.alignmentStart\n    let sublen = 0\n    if (typeof this.record.readFeatures !== 'undefined') {\n      let insLen = 0\n      // @ts-ignore\n      for (let i = 0; i < this.record.readFeatures.length; i++) {\n        const { code, refPos, sub, data } = this.record.readFeatures[i]\n        sublen = refPos - last_pos\n        seq += ref.substring(last_pos - refStart, refPos - refStart)\n        last_pos = refPos\n\n        if (oplen && op !== 'M') {\n          cigar += oplen + op\n          oplen = 0\n        }\n        if (sublen) {\n          op = 'M'\n          oplen += sublen\n        }\n        if (insLen > 0 && code !== 'i') {\n          cigar += `${insLen}I`\n          insLen = 0\n        }\n\n        if (code === 'b') {\n          // An array of bases stored verbatim\n          const ret = data.split(',')\n          const added = String.fromCharCode(...ret)\n          seq += added\n          last_pos += added.length\n          oplen += added.length\n        } else if (code === 'B') {\n          // Single base (+ qual score)\n          seq += sub\n          last_pos++\n          oplen++\n        } else if (code === 'X') {\n          // Substitution\n          seq += sub\n          last_pos++\n          oplen++\n        } else if (code === 'D' || code === 'N') {\n          // Deletion or Ref Skip\n          last_pos += data\n          if (oplen) {\n            cigar += oplen + op\n          }\n          cigar += data + code\n          oplen = 0\n        } else if (code === 'I' || code === 'S') {\n          // Insertion or soft-clip\n          seq += data\n          if (oplen) {\n            cigar += oplen + op\n          }\n          cigar += data.length + code\n          oplen = 0\n        } else if (code === 'i') {\n          // Single base insertion\n          // seq += data\n          if (oplen) {\n            cigar += oplen + op\n          }\n          insLen++\n          oplen = 0\n        } else if (code === 'P') {\n          // Padding\n          if (oplen) {\n            cigar += oplen + op\n          }\n          cigar += `${data}P`\n        } else if (code === 'H') {\n          // Hard clip\n          if (oplen) {\n            cigar += oplen + op\n          }\n          cigar += `${data}H`\n          oplen = 0\n        } // else q or Q\n      }\n    } else {\n      sublen = this.record.readLength - seq.length\n    }\n    if (seq.length !== this.record.readLength) {\n      sublen = this.record.readLength - seq.length\n      seq += ref.substring(last_pos - refStart, last_pos - refStart + sublen)\n\n      if (oplen && op !== 'M') {\n        cigar += oplen + op\n        oplen = 0\n      }\n      op = 'M'\n      oplen += sublen\n    }\n    if (oplen) {\n      cigar += oplen + op\n    }\n    return cigar\n  }\n\n  tags() {\n    const properties = Object.getOwnPropertyNames(\n      CramSlightlyLazyFeature.prototype,\n    )\n    return properties\n      .filter(\n        prop =>\n          prop.startsWith('_get_') &&\n          prop !== '_get_mismatches' &&\n          prop !== '_get_cram_read_features',\n      )\n      .map(methodName => methodName.replace('_get_', ''))\n  }\n\n  id() {\n    return `${this._store.id}-${this.record.uniqueId}`\n  }\n\n  get(field: string) {\n    const methodName = `_get_${field}`\n    // @ts-ignore\n    if (this[methodName]) {\n      // @ts-ignore\n      return this[methodName]()\n    }\n    return undefined\n  }\n\n  parent(): undefined | Feature {\n    return undefined\n  }\n\n  children(): undefined | Feature[] {\n    return undefined\n  }\n\n  set(): void {}\n\n  pairedFeature() {\n    return false\n  }\n\n  _get_clipPos() {\n    const mismatches = this.get('mismatches')\n    if (mismatches.length) {\n      const record =\n        this.get('strand') === -1\n          ? mismatches[mismatches.length - 1]\n          : mismatches[0]\n      const { type, cliplen } = record\n      if (type === 'softclip' || type === 'hardclip') {\n        return cliplen\n      }\n    }\n    return 0\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...Object.fromEntries(\n        this.tags()\n          .map(t => [t, this.get(t)])\n          .filter(elt => elt[1] !== undefined),\n      ),\n      uniqueId: this.id(),\n    }\n  }\n\n  _get_mismatches(): Mismatch[] {\n    const readFeatures = this.get('cram_read_features')\n    const qual = this.qualRaw()\n    if (!readFeatures) {\n      return []\n    }\n    const start = this.get('start')\n    const mismatches: Mismatch[] = new Array(readFeatures.length)\n    let j = 0\n    let insLen = 0\n\n    let refPos = 0\n    for (let i = 0; i < readFeatures.length; i++) {\n      const f = readFeatures[i]\n      const { code, pos, data, sub, ref } = f\n      if (insLen > 0 && code !== 'i') {\n        mismatches[j++] = {\n          start: refPos,\n          type: 'insertion',\n          base: `${insLen}`,\n          length: 0,\n        }\n        insLen = 0\n      }\n      refPos = f.refPos - 1 - start\n\n      if (code === 'X') {\n        // substitution\n        mismatches[j++] = {\n          start: refPos,\n          length: 1,\n          base: sub,\n          qual: qual?.[pos],\n          altbase: ref,\n          type: 'mismatch',\n        }\n      } else if (code === 'I') {\n        // insertion\n        mismatches[j++] = {\n          start: refPos,\n          type: 'insertion',\n          base: `${data.length}`,\n          length: 0,\n        }\n      } else if (code === 'N') {\n        // reference skip\n        mismatches[j++] = {\n          type: 'skip',\n          length: data,\n          start: refPos,\n          base: 'N',\n        }\n      } else if (code === 'S') {\n        // soft clip\n        const len = data.length\n        mismatches[j++] = {\n          start: refPos,\n          type: 'softclip',\n          base: `S${len}`,\n          cliplen: len,\n          length: 1,\n        }\n      } else if (code === 'P') {\n        // padding\n      } else if (code === 'H') {\n        // hard clip\n        const len = data\n        mismatches[j++] = {\n          start: refPos,\n          type: 'hardclip',\n          base: `H${len}`,\n          cliplen: len,\n          length: 1,\n        }\n      } else if (code === 'D') {\n        // deletion\n        mismatches[j++] = {\n          type: 'deletion',\n          length: data,\n          start: refPos,\n          base: '*',\n        }\n      } else if (code === 'b') {\n        // stretch of bases\n      } else if (code === 'q') {\n        // stretch of qual scores\n      } else if (code === 'B') {\n        // a pair of [base, qual]\n      } else if (code === 'i') {\n        // single-base insertion\n        // insertion\n        insLen++\n      } else if (code === 'Q') {\n        // single quality value\n      }\n    }\n    return mismatches.slice(0, j)\n  }\n}\n","import { CraiIndex, IndexedCramFile, CramRecord } from '@gmod/cram'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n  BaseSequenceAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { checkAbortSignal, Region, Feature } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { toArray } from 'rxjs/operators'\nimport CramSlightlyLazyFeature from './CramSlightlyLazyFeature'\n\ninterface Header {\n  idToName?: string[]\n  nameToId?: Record<string, number>\n  readGroups?: (string | undefined)[]\n}\n\ninterface FilterBy {\n  flagInclude: number\n  flagExclude: number\n  tagFilter: { tag: string; value: unknown }\n  readName: string\n}\n\nexport default class CramAdapter extends BaseFeatureDataAdapter {\n  samHeader: Header = {}\n\n  private setupP?: Promise<{\n    samHeader: Header\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  private configureP?: Promise<{\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  // maps a refname to an id\n  private seqIdToRefName: string[] | undefined\n\n  // maps a seqId to original refname, passed specially to render args, to a seqid\n  private seqIdToOriginalRefName: string[] = []\n\n  public async configurePre() {\n    const cramLocation = this.getConf('cramLocation')\n    const craiLocation = this.getConf('craiLocation')\n    if (!cramLocation) {\n      throw new Error('missing cramLocation argument')\n    }\n    if (!craiLocation) {\n      throw new Error('missing craiLocation argument')\n    }\n    const pm = this.pluginManager\n\n    const cram = new IndexedCramFile({\n      cramFilehandle: openLocation(cramLocation, pm),\n      index: new CraiIndex({ filehandle: openLocation(craiLocation, pm) }),\n      seqFetch: (...args) => this.seqFetch(...args),\n      checkSequenceMD5: false,\n      fetchSizeLimit: 200_000_000, // just make this a large size to avoid hitting it\n    })\n\n    if (!this.getSubAdapter) {\n      throw new Error('Error getting subadapter')\n    }\n\n    const seqConf = this.getConf('sequenceAdapter')\n    const subadapter = await this.getSubAdapter(seqConf)\n\n    return {\n      cram,\n      sequenceAdapter: subadapter.dataAdapter as BaseSequenceAdapter,\n    }\n  }\n\n  public async configure() {\n    if (!this.configureP) {\n      this.configureP = this.configurePre().catch(e => {\n        this.configureP = undefined\n        throw e\n      })\n    }\n    return this.configureP\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    return cram.cram.getHeaderText()\n  }\n\n  private async seqFetch(\n    seqId: number,\n    start: number,\n    end: number,\n  ): Promise<string> {\n    start -= 1 // convert from 1-based closed to interbase\n\n    const { sequenceAdapter } = await this.configure()\n    const refName = this.refIdToOriginalName(seqId) || this.refIdToName(seqId)\n    if (!refName) {\n      throw new Error('unknown')\n    }\n\n    const seqChunks = await sequenceAdapter\n      .getFeatures({\n        refName,\n        start,\n        end,\n        assemblyName: '',\n      })\n      .pipe(toArray())\n      .toPromise()\n\n    const sequence = seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .map(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        return chunkSeq.substr(trimStart, trimLength)\n      })\n      .join('')\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const conf = await this.configure()\n    statusCallback('Downloading index')\n    const { cram } = conf\n    const samHeader = await cram.cram.getSamHeader()\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ID numbers and names\n    const idToName: string[] = []\n    const nameToId: Record<string, number> = {}\n    samHeader\n      .filter(l => l.tag === 'SQ')\n      .forEach((sqLine, refId) => {\n        sqLine.data.forEach(item => {\n          if (item.tag === 'SN') {\n            // this is the ref name\n            const refName = item.value\n            nameToId[refName] = refId\n            idToName[refId] = refName\n          }\n        })\n      })\n\n    const readGroups = samHeader\n      .filter(l => l.tag === 'RG')\n      .map(rgLine => rgLine.data.find(item => item.tag === 'ID')?.value)\n\n    const data = { idToName, nameToId, readGroups }\n    statusCallback('')\n    this.samHeader = data\n    return { samHeader: data, ...conf }\n  }\n\n  private async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { samHeader } = await this.setup(opts)\n    if (!samHeader.idToName) {\n      throw new Error('CRAM file has no header lines')\n    }\n    return samHeader.idToName\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refNameToId(refName: string) {\n    if (this.samHeader.nameToId) {\n      return this.samHeader.nameToId[refName]\n    }\n    if (this.seqIdToRefName) {\n      return this.seqIdToRefName.indexOf(refName)\n    }\n    return undefined\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refIdToName(refId: number) {\n    return this.samHeader.idToName?.[refId] || this.seqIdToRefName?.[refId]\n  }\n\n  refIdToOriginalName(refId: number) {\n    return this.seqIdToOriginalRefName[refId]\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions & {\n      filterBy: FilterBy\n    },\n  ) {\n    const { signal, filterBy, statusCallback = () => {} } = opts || {}\n    const { refName, start, end, originalRefName } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const { cram } = await this.setup(opts)\n\n      const refId = this.refNameToId(refName)\n      if (refId === undefined) {\n        console.warn('Unknown refName', refName)\n        observer.complete()\n        return\n      }\n\n      if (originalRefName) {\n        this.seqIdToOriginalRefName[refId] = originalRefName\n      }\n      statusCallback('Downloading alignments')\n      const records = await cram.getRecordsForRange(refId, start, end)\n      checkAbortSignal(signal)\n      const {\n        flagInclude = 0,\n        flagExclude = 0,\n        tagFilter,\n        readName,\n      } = filterBy || {}\n\n      let filtered = records.filter(record => {\n        const flags = record.flags\n        return (flags & flagInclude) === flagInclude && !(flags & flagExclude)\n      })\n\n      if (tagFilter) {\n        filtered = filtered.filter(record => {\n          // @ts-ignore\n          const val = record[tagFilter.tag]\n          return val === '*' ? val !== undefined : val === tagFilter.value\n        })\n      }\n\n      if (readName) {\n        filtered = filtered.filter(record => record.readName === readName)\n      }\n\n      filtered.forEach(record => {\n        observer.next(this.cramRecordToFeature(record))\n      })\n      statusCallback('')\n      observer.complete()\n    }, signal)\n  }\n\n  freeResources(/* { region } */): void {}\n\n  cramRecordToFeature(record: CramRecord) {\n    return new CramSlightlyLazyFeature(record, this)\n  }\n\n  // we return the configured fetchSizeLimit, and the bytes for the region\n  async estimateRegionsStats(regions: Region[], opts?: BaseOptions) {\n    const bytes = await this.bytesForRegions(regions, opts)\n    const fetchSizeLimit = this.getConf('fetchSizeLimit')\n    return {\n      bytes,\n      fetchSizeLimit,\n    }\n  }\n\n  /**\n   * get the approximate number of bytes queried from the file for the given\n   * query regions\n   * @param regions - list of query regions\n   */\n  private async bytesForRegions(regions: Region[], _opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    const blockResults = await Promise.all(\n      regions.map(region => {\n        const { refName, start, end } = region\n        const chrId = this.refNameToId(refName)\n        return chrId !== undefined\n          ? cram.index.getEntriesForRange(chrId, start, end)\n          : [{ sliceBytes: 0 }]\n      }),\n    )\n\n    return blockResults.flat().reduce((a, b) => a + b.sliceBytes, 0)\n  }\n}\n"],"names":["CramSlightlyLazyFeature","record","_store","this","readName","alignmentStart","lengthOnRef","readFeatures","mappingQuality","flags","isReverseComplemented","rg","samHeader","readGroups","readGroupId","undefined","qualityScores","join","refIdToName","sequenceId","_get_seq_id","mate","isPaired","getPairOrientation","templateLength","templateSize","RG","_read_group_id","tags","getReadBases","seq","cigar","op","oplen","_refRegion","ref","refStart","start","last_pos","sublen","insLen","i","length","code","refPos","sub","data","substring","ret","split","added","String","fromCharCode","readLength","Object","getOwnPropertyNames","prototype","filter","prop","startsWith","map","methodName","replace","id","uniqueId","field","mismatches","get","type","cliplen","fromEntries","t","elt","qual","qualRaw","Array","j","f","pos","base","altbase","len","slice","CramAdapter","setupP","configureP","seqIdToRefName","seqIdToOriginalRefName","cramLocation","getConf","craiLocation","Error","pm","pluginManager","cram","IndexedCramFile","cramFilehandle","openLocation","index","CraiIndex","filehandle","seqFetch","checkSequenceMD5","fetchSizeLimit","getSubAdapter","seqConf","subadapter","sequenceAdapter","dataAdapter","configurePre","catch","e","opts","configure","getHeaderText","seqId","end","refName","refIdToOriginalName","getFeatures","assemblyName","pipe","toArray","toPromise","seqChunks","sequence","sort","a","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","substr","toLocaleString","statusCallback","conf","getSamHeader","idToName","nameToId","l","tag","forEach","sqLine","refId","item","value","rgLine","find","setupPre","setup","indexOf","region","signal","filterBy","originalRefName","ObservableCreate","observer","refNameToId","console","warn","complete","getRecordsForRange","records","checkAbortSignal","flagInclude","flagExclude","tagFilter","filtered","val","next","cramRecordToFeature","regions","bytesForRegions","bytes","_opts","Promise","all","chrId","getEntriesForRange","sliceBytes","blockResults","flat","reduce","BaseFeatureDataAdapter"],"sourceRoot":""}