{"version":3,"sources":["../../../node_modules/@material-ui/icons/Email.js","../../../plugins/trackhub-registry/src/trackhub-registry/HubDetails.js","../../../plugins/trackhub-registry/src/trackhub-registry/SelectBox.js","../../../plugins/trackhub-registry/src/trackhub-registry/TrackHubRegistrySelect.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","HubDetails","props","useState","hubFile","setHubFile","errorMessage","setErrorMessage","hub","hubUrl","url","longLabel","shortLabel","useEffect","_getHubTxt","a","_context","hubHandle","openLocation","uri","locationType","readFile","hubTxt","message","newHubFile","HubFile","error","getHubTxt","Card","CardContent","Typography","color","CardHeader","title","__dangerouslySetInnerHTML","DOMPurify","sanitize","CardActions","IconButton","href","get","rel","target","EmailIcon","URL","OpenInNewIcon","LinearProgress","variant","useStyles","makeStyles","theme","formControl","minWidth","marginLeft","spacing","marginRight","SelectBox","selectList","selectedItem","handleSelect","label","helpText","classes","FormControl","className","InputLabel","Select","onChange","map","item","description","name","synonyms","join","MenuItem","key","FormHelperText","QueryStatus","status","Wire","children","hubList","maxHeight","overflowY","genomeSelector","marginTop","TrackHubRegistrySelect","model","setModelReady","assemblies","setAssemblies","selectedSpecies","setSelectedSpecies","selectedAssembly","setSelectedAssembly","Map","hubs","setHubs","allHubsRetrieved","setAllHubsRetrieved","selectedHub","setSelectedHub","getHubs","_getHubs","signal","reset","newHubs","page","Math","floor","size","_context2","doPost","entries_per_page","body","JSON","stringify","assembly","response","_iterator","items","startsWith","stat","set","id","total_entries","doGet","_doGet","params","options","urlParams","keys","param","_context3","fetch","rawResponse","isAbortException","ok","statusText","json","_doPost","_context4","method","controller","AbortController","_getAssemblies","undefined","pingResponse","ping","assembliesResponse","getAssemblies","abort","renderItems","push","speciesList","sort","filter","toLowerCase","includes","event","ret","s","FormLabel","RadioGroup","newHub","assemblyNames","trackDbId","Array","from","values","formControlProps","Tooltip","SanitizedHTML","html","placement","interactive","FormControlLabel","disabled","Boolean","control","Radio"],"mappings":"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","file":"static/js/34.3a2503c7.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"\n}), 'Email');\n\nexports.default = _default;","import { openLocation } from '@jbrowse/core/util/io'\nimport { HubFile } from '@gmod/ucsc-hub'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Typography from '@material-ui/core/Typography'\nimport EmailIcon from '@material-ui/icons/Email'\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew'\nimport PropTypes from 'prop-types'\nimport DOMPurify from 'dompurify'\nimport React, { useEffect, useState } from 'react'\n\nfunction HubDetails(props) {\n  const [hubFile, setHubFile] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const { hub } = props\n\n  const { url: hubUrl, longLabel, shortLabel } = hub\n\n  useEffect(() => {\n    async function getHubTxt() {\n      let hubTxt\n      try {\n        const hubHandle = openLocation({\n          uri: hubUrl,\n          locationType: 'UriLocation',\n        })\n        hubTxt = await hubHandle.readFile('utf8')\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Error retrieving hub</strong> {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n        return\n      }\n      try {\n        const newHubFile = new HubFile(hubTxt)\n        setHubFile(newHubFile)\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Could not parse genomes file:</strong> <br />\n            {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n      }\n    }\n\n    getHubTxt()\n  }, [hubUrl])\n  if (errorMessage) {\n    return (\n      <Card>\n        <CardContent>\n          <Typography color=\"error\">{errorMessage}</Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n  if (hubFile) {\n    return (\n      <Card>\n        <CardHeader title={shortLabel} />\n        <CardContent>\n          <div __dangerouslySetInnerHTML={DOMPurify.sanitize(longLabel)} />\n        </CardContent>\n        <CardActions>\n          <IconButton\n            href={`mailto:${hubFile.get('email')}`}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            color=\"secondary\"\n          >\n            <EmailIcon />\n          </IconButton>\n          {hubFile.get('descriptionUrl') ? (\n            <IconButton\n              href={\n                new URL(hubFile.get('descriptionUrl'), new URL(hubUrl)).href\n              }\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <OpenInNewIcon color=\"secondary\" />\n            </IconButton>\n          ) : null}\n        </CardActions>\n      </Card>\n    )\n  }\n  return <LinearProgress variant=\"query\" />\n}\n\nHubDetails.propTypes = {\n  hub: PropTypes.shape().isRequired,\n}\n\nexport default HubDetails\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 192,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}))\n\nfunction SelectBox({\n  selectList,\n  selectedItem,\n  handleSelect,\n  label,\n  helpText,\n}) {\n  const classes = useStyles()\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel>{label}</InputLabel>\n      <Select value={selectedItem} onChange={handleSelect}>\n        {selectList.map(item => {\n          let value\n          let description\n          if (item.name) {\n            value = item.name\n            description = `${item.name} (${item.synonyms.join(' ')})`\n          }\n          return (\n            <MenuItem key={description || item} value={value || item}>\n              {description || item}\n            </MenuItem>\n          )\n        })}\n      </Select>\n      <FormHelperText>{selectedItem ? '' : helpText}</FormHelperText>\n    </FormControl>\n  )\n}\n\nSelectBox.propTypes = {\n  selectList: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),\n  ).isRequired,\n  selectedItem: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  helpText: PropTypes.string.isRequired,\n}\n\nexport default SelectBox\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  LinearProgress,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { isAbortException } from '@jbrowse/core/util'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport PropTypes from 'prop-types'\nimport HubDetails from './HubDetails'\nimport SelectBox from './SelectBox'\n\nfunction QueryStatus(props) {\n  const { status } = props\n  return (\n    <>\n      <LinearProgress variant=\"query\" />\n      <Typography>{status}</Typography>\n    </>\n  )\n}\n\nQueryStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n}\n\n// Need this for FormControlLabel to work with Tooltip\n// https://github.com/mui-org/material-ui/issues/2225#issuecomment-460041878\nfunction Wire({ children, ...props }) {\n  return children(props)\n}\n\nconst useStyles = makeStyles(theme => ({\n  hubList: {\n    maxHeight: 400,\n    overflowY: 'auto',\n  },\n  genomeSelector: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nfunction TrackHubRegistrySelect({ model, setModelReady }) {\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [assemblies, setAssemblies] = useState(null)\n  const [selectedSpecies, setSelectedSpecies] = useState('')\n  const [selectedAssembly, setSelectedAssembly] = useState('')\n  const [hubs, setHubs] = useState(new Map())\n  const [allHubsRetrieved, setAllHubsRetrieved] = useState(false)\n  const [selectedHub, setSelectedHub] = useState('')\n  const classes = useStyles()\n\n  useEffect(() => {\n    if (selectedHub) {\n      setModelReady(true)\n    } else {\n      setModelReady(false)\n    }\n  }, [selectedHub, setModelReady])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    async function getAssemblies() {\n      const pingResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/ping',\n        undefined,\n        { signal },\n      )\n      if (!pingResponse) {\n        return\n      }\n      if (pingResponse.ping !== 1) {\n        setErrorMessage('Registry is not available')\n        return\n      }\n      const assembliesResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/assemblies',\n        undefined,\n        { signal },\n      )\n      if (assembliesResponse) {\n        setAssemblies(assembliesResponse)\n      }\n    }\n\n    getAssemblies()\n\n    return () => {\n      controller.abort()\n    }\n  }, [])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    if (!errorMessage) {\n      if (selectedAssembly && !hubs.size) {\n        getHubs(signal, true)\n      } else if (hubs.size && !allHubsRetrieved) {\n        getHubs(signal)\n      }\n    }\n\n    return () => {\n      controller.abort()\n    }\n  })\n\n  async function getHubs(signal, reset) {\n    const entriesPerPage = 10\n    const newHubs = reset ? new Map() : new Map(hubs)\n    const page = Math.floor(hubs.size / entriesPerPage) + 1\n    const response = await doPost(\n      'https://www.trackhubregistry.org/api/search',\n      { page, entries_per_page: entriesPerPage },\n      { body: JSON.stringify({ assembly: selectedAssembly }), signal },\n    )\n    if (response) {\n      for (const item of response.items) {\n        if (item.hub.url.startsWith('ftp://')) {\n          item.error = 'JBrowse cannot add connections from FTP sources'\n        } else {\n          const hub = openLocation({\n            uri: item.hub.url,\n            locationType: 'UriLocation',\n          })\n          try {\n            await hub.stat()\n          } catch (error) {\n            item.error = error.message\n          }\n        }\n        newHubs.set(item.id, item)\n      }\n      setHubs(newHubs)\n      if (newHubs.size === response.total_entries) {\n        setAllHubsRetrieved(true)\n      }\n    }\n  }\n\n  function handleSelectSpecies(event) {\n    setSelectedSpecies(event.target.value)\n    setSelectedAssembly('')\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectAssembly(event) {\n    setSelectedAssembly(event.target.value)\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectHub(event) {\n    const newHub = event.target.value\n    setSelectedHub(newHub)\n    model.target.name.set(hubs.get(newHub).hub.shortLabel)\n    model.target.assemblyNames.set([selectedAssembly])\n    model.target.trackDbId.set(newHub)\n  }\n\n  async function doGet(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(\n        `${url}${urlParams ? `?${urlParams}` : ''}`,\n        options,\n      )\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  async function doPost(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(`${url}${urlParams ? `?${urlParams}` : ''}`, {\n        ...options,\n        method: 'POST',\n      })\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  const renderItems = [\n    <Typography key=\"heading\" variant=\"h6\">\n      The Track Hub Registry\n    </Typography>,\n  ]\n\n  if (errorMessage) {\n    renderItems.push(\n      <Typography key=\"errorMessage\" color=\"error\">\n        {errorMessage}\n      </Typography>,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  if (!assemblies) {\n    renderItems.push(\n      <QueryStatus key=\"queryStatus\" status=\"Connecting to registry...\" />,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  const speciesList = Object.keys(assemblies)\n    .sort()\n    .filter(item => item.toLowerCase().includes('sapiens'))\n\n  renderItems.push(\n    <SelectBox\n      key=\"speciesSelect\"\n      selectList={speciesList}\n      selectedItem={selectedSpecies}\n      handleSelect={handleSelectSpecies}\n      label=\"Species\"\n      helpText=\"Select a species\"\n    />,\n  )\n\n  if (selectedSpecies) {\n    const ret = assemblies[selectedSpecies].filter(\n      s => !(s.name === 'GRCh37' && s.synonyms[0] === 'hg38'),\n    )\n    renderItems.push(\n      <SelectBox\n        key=\"assemblySelect\"\n        selectList={ret}\n        selectedItem={selectedAssembly}\n        handleSelect={handleSelectAssembly}\n        label=\"Assembly\"\n        helpText=\"Select an assembly\"\n      />,\n    )\n  }\n\n  if (selectedAssembly) {\n    renderItems.push(\n      <div key=\"hubSelect\">\n        <FormControl>\n          <FormLabel>Hubs:</FormLabel>\n          <div className={classes.hubList}>\n            <RadioGroup value={selectedHub} onChange={handleSelectHub}>\n              {Array.from(hubs.values())\n                .filter(\n                  hub =>\n                    hub.assembly.name === selectedAssembly ||\n                    hub.assembly.synonyms.includes(selectedAssembly),\n                )\n                .map(hub => {\n                  const {\n                    error,\n                    id,\n                    hub: { shortLabel, longLabel },\n                  } = hub\n                  return (\n                    <Wire key={id} value={id}>\n                      {formControlProps => (\n                        <Tooltip\n                          title={error || <SanitizedHTML html={longLabel} />}\n                          placement=\"left\"\n                          interactive\n                        >\n                          <FormControlLabel\n                            key={id}\n                            value={id}\n                            label={<SanitizedHTML html={shortLabel} />}\n                            disabled={Boolean(error)}\n                            control={<Radio />}\n                            {...formControlProps}\n                          />\n                        </Tooltip>\n                      )}\n                    </Wire>\n                  )\n                })}\n            </RadioGroup>\n          </div>\n        </FormControl>\n      </div>,\n    )\n    if (!allHubsRetrieved) {\n      renderItems.push(<QueryStatus key=\"hubStatus\" status=\"Retrieving hubs\" />)\n    }\n  }\n\n  if (selectedHub) {\n    renderItems.push(\n      <HubDetails key=\"hubDetails\" hub={hubs.get(selectedHub).hub} />,\n    )\n  }\n\n  return <>{renderItems}</>\n}\n\nexport default TrackHubRegistrySelect\n"],"sourceRoot":""}