{"version":3,"sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.js"],"names":["useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","fontFamily","fontSize","observer","slot","classes","useState","value","code","setCode","error","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","stringToJexlExpression","getEnv","pluginManager","_getEnv$pluginManager","jexl","set","e","React","FormControl","InputLabel","shrink","htmlFor","name","Editor","className","split","onValueChange","newCode","highlight","padding","style","background","undefined","FormHelperText","description","Tooltip","title","contextVariable","arrow","IconButton","color","onClick","newWindow","window","open","opener","HelpIcon","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","onChange","displayed","setDisplayed","TextField","InputProps","borderRightWidth","borderRightStyle","borderRightColor","event","target","Suspense","fallback","Object","r","g","b","a","serializeColor","rgb","defaultProps","helperText","fullWidth","StringEditor","evt","TextEditor","multiline","SvgCheckbox","SvgIcon","d","StringArrayEditor","setValue","List","disablePadding","map","val","idx","ListItem","key","disableGutters","setAtIndex","endAdornment","InputAdornment","position","removeAtIndex","DeleteIcon","placeholder","add","disabled","AddIcon","useMapEditorStyles","card","spacing","StringArrayMapEditor","Array","from","Card","raised","CardHeader","action","remove","CardContent","strValue","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","NumberMapEditor","NumberEditor","numValue","setVal","num","parseFloat","Number","isNaN","reset","type","IntegerEditor","parseInt","booleanEditor","FormControlLabel","control","Checkbox","checked","stringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","numberMap","number","integer","ColorEditor","stringEnum","boolean","frozen","JsonEditor","configRelationships","useSlotEditorStyles","paper","display","marginBottom","overflow","paperContent","flex","slotModeSwitch","width","secondary","light","justifyContent","alignItems","SlotEditor","ValueComponent","isCallback","CallbackEditor","console","warn","Paper","length","slotModeIcon","convertToValue","convertToCallback","RadioButtonUncheckedIcon","TypeSelector","typeNameChoices","slotName","subSchemaContainer","marginLeft","borderLeft","main","paddingLeft","root","default","overflowX","Member","typeSelector","schema","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","setSubschema","FormLabel","FormGroup","Schema","isConfigurationSlotType","iterMap","entries","getMembers","properties","ConfigurationEditor","model","readConfObject"],"mappings":"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","file":"static/js/44.a1cda682.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  Tooltip,\n  IconButton,\n  makeStyles,\n} from '@material-ui/core'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer, PropTypes } from 'mobx-react'\nimport Editor from 'react-simple-code-editor'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    fontFamily,\n    fontSize,\n  },\n}))\n\nfunction CallbackEditor({ slot }) {\n  const classes = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode) // slot.set `jexl:${debouncedCode}`\n      setCodeError(null)\n    } catch (e) {\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      <FormControl>\n        <InputLabel shrink htmlFor=\"callback-editor\">\n          {slot.name}\n        </InputLabel>\n        <Editor\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onValueChange={newCode => {\n            setCode(newCode)\n          }}\n          highlight={newCode => newCode}\n          padding={10}\n          style={{ background: error ? '#fdd' : undefined }}\n        />\n        <FormHelperText>{slot.description}</FormHelperText>\n      </FormControl>\n      <Tooltip\n        title={\n          <div>\n            Callbacks are written in Jexl format. Click to learn more.\n            <br /> Names of available context items: {slot.contextVariable}\n          </div>\n        }\n        arrow\n      >\n        <IconButton\n          color=\"primary\"\n          onClick={() => {\n            const newWindow = window.open(\n              'https://github.com/TomFrost/Jexl',\n              '_blank',\n              'noopener,noreferrer',\n            )\n            if (newWindow) {\n              newWindow.opener = null\n            }\n          }}\n        >\n          <HelpIcon />\n        </IconButton>\n      </Tooltip>\n    </>\n  )\n}\nCallbackEditor.propTypes = {\n  slot: PropTypes.objectOrObservableObject.isRequired,\n}\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ReactPropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\nimport { Color, RGBColor } from 'react-color'\n\nconst ColorPicker = lazy(() => import('./ColorPicker'))\n\n// this is needed because passing a entire color object into the react-color\n// for alpha, can't pass in an rgba string for example\nfunction serializeColor(color: Color) {\n  if (color instanceof Object) {\n    const { r, g, b, a } = color as RGBColor\n    return a === undefined ? `rgb(${r},${g},${b})` : `rgba(${r},${g},${b},${a})`\n  }\n  return color\n}\n\nexport const ColorSlot = (props: {\n  value: string\n  label: string\n  TextFieldProps: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value, label, TextFieldProps, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <>\n      <TextField\n        value={value}\n        label={label}\n        InputProps={{\n          style: {\n            color: value,\n            borderRightWidth: '25px',\n            borderRightStyle: 'solid',\n            borderRightColor: value,\n          },\n        }}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      {displayed ? (\n        <React.Suspense fallback={<div />}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(serializeColor(event.rgb))\n            }}\n          />\n        </React.Suspense>\n      ) : null}\n    </>\n  )\n}\nColorSlot.propTypes = {\n  onChange: ReactPropTypes.func.isRequired,\n  label: ReactPropTypes.string,\n  TextFieldProps: ReactPropTypes.shape({}),\n  value: ReactPropTypes.string,\n}\nColorSlot.defaultProps = {\n  label: '',\n  value: '#000',\n  TextFieldProps: {},\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={(color: string) => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\nColorEditorSlot.propTypes = {\n  slot: ReactPropTypes.shape({\n    name: ReactPropTypes.string.isRequired,\n    description: ReactPropTypes.string,\n    value: ReactPropTypes.string.isRequired,\n    set: ReactPropTypes.func.isRequired,\n  }).isRequired,\n}\nexport default observer(ColorEditorSlot)\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, getEnv } from 'mobx-state-tree'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  MenuItem,\n  Paper,\n  SvgIcon,\n  TextField,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon from '@material-ui/icons/Add'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\n\n// locals\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\n\nconst StringEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    // error={filterError}\n    helperText={slot.description}\n    fullWidth\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\nconst TextEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    helperText={slot.description}\n    fullWidth\n    multiline\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst StringArrayEditor = observer(({ slot }) => {\n  const [value, setValue] = useState('')\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={idx} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      color=\"secondary\"\n                      onClick={() => slot.removeAtIndex(idx)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ))}\n        <ListItem disableGutters>\n          <TextField\n            value={value}\n            placeholder=\"add new\"\n            onChange={event => setValue(event.target.value)}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => {\n                      slot.add(value)\n                      setValue('')\n                    }}\n                    disabled={value === ''}\n                    color=\"secondary\"\n                    data-testid={`stringArrayAdd-${slot.name}`}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </ListItem>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst useMapEditorStyles = makeStyles(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx, strValue) => {\n                  slot.setAtKeyIndex(key, idx, strValue)\n                },\n                removeAtIndex: idx => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: strValue => {\n                  slot.addToKey(key, strValue)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: numValue => slot.add(key, numValue),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseFloat(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    } else {\n      slot.reset()\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst IntegerEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst booleanEditor = observer(({ slot }) => (\n  <FormControl>\n    <FormControlLabel\n      label={slot.name}\n      control={\n        <Checkbox\n          checked={slot.value}\n          onChange={evt => slot.set(evt.target.checked)}\n        />\n      }\n    />\n    <FormHelperText>{slot.description}</FormHelperText>\n  </FormControl>\n))\n\nconst stringEnumEditor = observer(({ slot, slotSchema }) => {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n  ).map(t => t.value)\n\n  return (\n    <TextField\n      value={slot.value}\n      label={slot.name}\n      select\n      // error={filterError}\n      helperText={slot.description}\n      fullWidth\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(({ slot }) => {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: stringEnumEditor,\n  boolean: booleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n    overflow: 'visible',\n  },\n  paperContent: {\n    flex: 'auto',\n    padding: theme.spacing(1),\n    overflow: 'auto',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(({ slot, slotSchema }) => {\n  const classes = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback ? CallbackEditor : valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            className={classes.slotModeIcon}\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n            color=\"secondary\"\n          >\n            {!slot.isCallback ? <RadioButtonUncheckedIcon /> : <SvgCheckbox />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport { observer } from 'mobx-react'\nimport React from 'react'\nimport { useSlotEditorStyles } from './SlotEditor'\n\nconst TypeSelector = observer(\n  ({ typeNameChoices, slot, slotName, onChange }) => {\n    const classes = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            // error={filterError}\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n} from '@jbrowse/core/configuration'\n\nimport { iterMap } from '@jbrowse/core/util'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\nimport React from 'react'\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nconst useStyles = makeStyles(theme => ({\n  subSchemaContainer: {\n    marginLeft: theme.spacing(1),\n    borderLeft: `1px solid ${theme.palette.secondary.main}`,\n    paddingLeft: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n    background: theme.palette.background.default,\n    overflowX: 'hidden',\n  },\n}))\n\nconst Member = observer(props => {\n  const classes = useStyles()\n  const { slotName, slotSchema, schema, slot = schema[slotName] } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return (\n        <>\n          {slot.map((subslot, slotIndex) => {\n            const key = `${singular(slotName)} ${slotIndex + 1}`\n            return <Member {...props} key={key} slot={subslot} slotName={key} />\n          })}\n        </>\n      )\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <>\n        <FormLabel>{slotName}</FormLabel>\n        <div className={classes.subSchemaContainer}>\n          {typeSelector}\n          <FormGroup>\n            <Schema schema={slot} />\n          </FormGroup>\n        </div>\n      </>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(({ schema }) => {\n  return iterMap(\n    Object.entries(getMembers(schema).properties),\n    ([slotName, slotSchema]) => (\n      <Member key={slotName} {...{ slotName, slotSchema, schema }} />\n    ),\n  )\n})\n\nconst ConfigurationEditor = observer(({ model }) => {\n  const classes = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const key = model.target && readConfObject(model.target, 'trackId')\n  return (\n    <div className={classes.root} key={key} data-testid=\"configEditor\">\n      {!model.target ? 'no target set' : <Schema schema={model.target} />}\n    </div>\n  )\n})\n\nexport default ConfigurationEditor\n"],"sourceRoot":""}