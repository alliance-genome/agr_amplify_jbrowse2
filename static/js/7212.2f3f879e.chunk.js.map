{"version":3,"file":"static/js/7212.2f3f879e.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MashMapAdapter/MashMapAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { parseLineByLine } from '../util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class MashMapAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const outLoc = openLocation(this.getConf('outLocation'), this.pluginManager)\n    const buffer = (await outLoc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parseMashMapLine)\n  }\n}\n\nfunction parseMashMapLine(line: string) {\n  const fields = line.split(' ')\n  if (fields.length < 9) {\n    // xref https://github.com/marbl/MashMap/issues/38\n    throw new Error('improperly formatted line: ' + line)\n  }\n  const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] = fields\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      mappingQual: +mq,\n    },\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["isGzip","buf","MashMapAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","outLoc","buffer","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","abrupt","parseLineByLine","parseMashMapLine","stop","_x","PAFAdapter","line","fields","split","length","Error","_fields","_slicedToArray","qname","qstart","qend","strand","tname","tstart","tend","extra","mappingQual","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","i","entry","quals","len","push","blockLen","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","_line$split","_line$split2","_toArray","numMatches","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_this2","setupPre","catch","e","undefined","_callee2","pm","pafLocation","_context2","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_iterator","_step","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","_createForOfIteratorHelper","s","n","done","add","err","f","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","TextDecoder","fatal","t1","t2","decode","a","decoder","cb","blockStart","toString","trim"],"sourceRoot":""}