{"version":3,"file":"static/js/7297.2aa61b97.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/ImportFormRefNameAutocomplete.tsx","../../../plugins/linear-genome-view/src/LinearGenomeView/components/ImportForm.tsx","../../../node_modules/@mui/system/esm/Container/createContainer.js","../../../node_modules/@mui/material/Container/Container.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults'\n\n// locals\nimport RefNameAutocomplete from './RefNameAutocomplete'\nimport { fetchResults } from './util'\nimport { LinearGenomeViewModel } from '..'\n\ntype LGV = LinearGenomeViewModel\n\nconst ImportFormRefNameAutocomplete = observer(function ({\n  model,\n  selectedAsm,\n  value,\n  setValue,\n  setOption,\n}: {\n  value: string\n  setValue: (arg: string) => void\n  model: LGV\n  selectedAsm: string\n  setOption: (arg: BaseResult) => void\n}) {\n  const session = getSession(model)\n  const { assemblyManager, textSearchManager } = session\n  const { rankSearchResults } = model\n  const searchScope = model.searchScope(selectedAsm)\n  const assembly = assemblyManager.get(selectedAsm)\n  return (\n    <RefNameAutocomplete\n      fetchResults={queryString =>\n        fetchResults({\n          queryString,\n          assembly,\n          textSearchManager,\n          rankSearchResults,\n          searchScope,\n        })\n      }\n      model={model}\n      assemblyName={selectedAsm}\n      value={value}\n      minWidth={270}\n      onChange={str => setValue(str)}\n      onSelect={val => setOption(val)}\n      TextFieldProps={{\n        variant: 'outlined',\n        helperText: 'Enter sequence name, feature name, or location',\n      }}\n    />\n  )\n})\n\nexport default ImportFormRefNameAutocomplete\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  FormControl,\n  Container,\n  Grid,\n  CircularProgress,\n} from '@mui/material'\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults'\n\n// icons\nimport CloseIcon from '@mui/icons-material/Close'\n\n// locals\nimport { LinearGenomeViewModel } from '..'\nimport { handleSelectedRegion, navToOption } from '../../searchUtils'\nimport ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(2),\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  container: {\n    padding: theme.spacing(4),\n  },\n}))\n\ntype LGV = LinearGenomeViewModel\n\nconst LinearGenomeViewImportForm = observer(function ({\n  model,\n}: {\n  model: LGV\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames, assemblyManager } = session\n  const { error } = model\n  const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0])\n  const [option, setOption] = useState<BaseResult>()\n  const assembly = assemblyManager.get(selectedAsm)\n  const assemblyError = assemblyNames.length\n    ? assembly?.error\n    : 'No configured assemblies'\n  const displayError = assemblyError || error\n  const [value, setValue] = useState('')\n  const regions = assembly?.regions\n  const assemblyLoaded = !!regions\n  const r0 = regions ? regions[0]?.refName : ''\n\n  // useEffect resets to an \"initial state\" of displaying first region from\n  // assembly after assembly change. needs to react to selectedAsm as well as\n  // r0 because changing assembly will run setValue('') and then r0 may not\n  // change if assembly names are the same across assemblies, but it still\n  // needs to be reset\n  useEffect(() => {\n    setValue(r0)\n  }, [r0, selectedAsm])\n\n  // implementation notes:\n  // having this wrapped in a form allows intuitive use of enter key to submit\n  return (\n    <div className={classes.container}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Container className={classes.importFormContainer}>\n        <form\n          onSubmit={async event => {\n            event.preventDefault()\n            model.setError(undefined)\n            if (value) {\n              // has it's own error handling\n              try {\n                if (\n                  option?.getDisplayString() === value &&\n                  option.hasLocation()\n                ) {\n                  await navToOption({\n                    option,\n                    model,\n                    assemblyName: selectedAsm,\n                  })\n                } else if (option?.results?.length) {\n                  model.setSearchResults(\n                    option.results,\n                    option.getLabel(),\n                    selectedAsm,\n                  )\n                } else if (assembly) {\n                  await handleSelectedRegion({ input: value, assembly, model })\n                }\n              } catch (e) {\n                console.error(e)\n                session.notify(`${e}`, 'warning')\n              }\n            }\n          }}\n        >\n          <Grid\n            container\n            spacing={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <FormControl>\n                <AssemblySelector\n                  onChange={val => setSelectedAsm(val)}\n                  localStorageKey=\"lgv\"\n                  session={session}\n                  selected={selectedAsm}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item>\n              {selectedAsm ? (\n                assemblyError ? (\n                  <CloseIcon style={{ color: 'red' }} />\n                ) : assemblyLoaded ? (\n                  <FormControl>\n                    <ImportFormRefNameAutocomplete\n                      value={value}\n                      setValue={setValue}\n                      selectedAsm={selectedAsm}\n                      setOption={setOption}\n                      model={model}\n                    />\n                  </FormControl>\n                ) : (\n                  <CircularProgress size={20} disableShrink />\n                )\n              ) : null}\n            </Grid>\n            <Grid item>\n              <FormControl>\n                <Button\n                  type=\"submit\"\n                  disabled={!value}\n                  className={classes.button}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Open\n                </Button>\n              </FormControl>\n              <FormControl>\n                <Button\n                  disabled={!value}\n                  className={classes.button}\n                  onClick={() => {\n                    model.setError(undefined)\n                    model.showAllRegionsInAssembly(selectedAsm)\n                  }}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Show all regions in assembly\n                </Button>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </form>\n      </Container>\n    </div>\n  )\n})\n\nexport default LinearGenomeViewImportForm\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\", \"classes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, unstable_composeClasses as composeClasses, unstable_generateUtilityClass as generateUtilityClass } from '@mui/utils';\nimport useThemePropsSystem from '../useThemeProps';\nimport systemStyled from '../styled';\nimport createTheme from '../createTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => _extends({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    display: 'block'\n  }, !ownerState.disableGutters && {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => _extends({}, ownerState.maxWidth === 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('xs')]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }\n  }, ownerState.maxWidth &&\n  // @ts-ignore module augmentation fails if custom breakpoints are used\n  ownerState.maxWidth !== 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up(ownerState.maxWidth)]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n    }\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n        className,\n        component = 'div',\n        disableGutters = false,\n        fixed = false,\n        maxWidth = 'lg'\n      } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n    const ownerState = _extends({}, props, {\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    });\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, _extends({\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref\n      }, other))\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["observer","model","selectedAsm","value","setValue","setOption","session","getSession","assemblyManager","textSearchManager","rankSearchResults","searchScope","assembly","get","React","RefNameAutocomplete","fetchResults","queryString","assemblyName","minWidth","onChange","str","onSelect","val","TextFieldProps","variant","helperText","useStyles","makeStyles","theme","importFormContainer","padding","spacing","button","margin","container","classes","assemblyNames","error","setSelectedAsm","useState","option","assemblyError","length","displayError","regions","assemblyLoaded","r0","refName","useEffect","className","ErrorMessage","Container","onSubmit","async","event","preventDefault","setError","undefined","getDisplayString","hasLocation","navToOption","results","setSearchResults","getLabel","handleSelectedRegion","input","e","console","notify","Grid","justifyContent","alignItems","item","FormControl","AssemblySelector","localStorageKey","selected","CloseIcon","style","color","ImportFormRefNameAutocomplete","CircularProgress","size","disableShrink","Button","type","disabled","onClick","showAllRegionsInAssembly","_excluded","defaultTheme","createTheme","defaultCreateStyledComponent","name","slot","overridesResolver","props","styles","ownerState","root","capitalize","String","maxWidth","fixed","disableGutters","useThemePropsDefault","inProps","useThemeProps","options","createStyledComponent","componentName","ContainerRoot","width","marginLeft","boxSizing","marginRight","display","paddingLeft","paddingRight","breakpoints","up","Object","keys","values","reduce","acc","breakpointValueKey","breakpoint","unit","Math","max","xs","ref","component","other","slots","composeClasses","generateUtilityClass","useUtilityClasses","as","clsx","createContainer"],"sourceRoot":""}