{"version":3,"file":"static/js/9132.639c93bc.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MCScanSimpleAnchorsAdapter/MCScanSimpleAnchorsAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { doesIntersect2 } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readFile, parseBed } from '../util'\n\ninterface BareFeature {\n  refName: string\n  start: number\n  end: number\n  score: number\n  name: string\n}\n\ntype Row = [\n  BareFeature,\n  BareFeature,\n  BareFeature,\n  BareFeature,\n  number,\n  number,\n  number,\n]\n\nexport default class MCScanAnchorsAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    assemblyNames: string[]\n    feats: Row[]\n  }>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n  async setupPre(opts: BaseOptions) {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    const pm = this.pluginManager\n    const bed1 = openLocation(this.getConf('bed1Location'), pm)\n    const bed2 = openLocation(this.getConf('bed2Location'), pm)\n    const mcscan = openLocation(this.getConf('mcscanSimpleAnchorsLocation'), pm)\n    const [bed1text, bed2text, mcscantext] = await Promise.all(\n      [bed1, bed2, mcscan].map(r => readFile(r, opts)),\n    )\n    const bed1Map = parseBed(bed1text)\n    const bed2Map = parseBed(bed2text)\n    const feats = mcscantext\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && f !== '###')\n      .map((line, index) => {\n        const [n11, n12, n21, n22, score, strand] = line.split('\\t')\n        const r11 = bed1Map.get(n11)\n        const r12 = bed1Map.get(n12)\n        const r21 = bed2Map.get(n21)\n        const r22 = bed2Map.get(n22)\n        if (!r11 || !r12 || !r21 || !r22) {\n          throw new Error(\n            `feature not found, ${n11} ${n12} ${n21} ${n22} ${r11} ${r12} ${r21} ${r22}`,\n          )\n        }\n        return [\n          r11,\n          r12,\n          r21,\n          r22,\n          +score,\n          strand === '-' ? -1 : 1,\n          index,\n        ] as Row\n      })\n\n    return {\n      assemblyNames,\n      feats,\n    }\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseFeatureDataAdapter filters it out)\n    return true\n  }\n\n  async getRefNames() {\n    // we cannot determine this accurately\n    return []\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyNames, feats } = await this.setup(opts)\n\n      // The index of the assembly name in the region list corresponds to\n      // the adapter in the subadapters list\n      const index = assemblyNames.indexOf(region.assemblyName)\n      if (index !== -1) {\n        const flip = index === 0\n        feats.forEach(f => {\n          const [f11, f12, f21, f22, score, strand, rowNum] = f\n          let r1 = {\n            refName: f11.refName,\n            start: Math.min(f11.start, f12.start),\n            end: Math.max(f11.end, f12.end),\n          }\n          let r2 = {\n            refName: f21.refName,\n            start: Math.min(f21.start, f22.start),\n            end: Math.max(f21.end, f22.end),\n          }\n          if (!flip) {\n            ;[r2, r1] = [r1, r2]\n          }\n          if (\n            r1.refName === region.refName &&\n            doesIntersect2(r1.start, r1.end, region.start, region.end)\n          ) {\n            observer.next(\n              new SimpleFeature({\n                ...r1,\n                uniqueId: `${rowNum}`,\n                syntenyId: rowNum,\n                assemblyName: assemblyNames[+!flip],\n                score,\n                strand,\n                mate: {\n                  ...r2,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          }\n        })\n      }\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["MCScanAnchorsAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","setupP","_createClass","key","value","_setup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_this2","wrap","_context","prev","next","this","setupPre","catch","e","undefined","abrupt","stop","_x","_setupPre","_callee2","assemblyNames","pm","bed1","bed2","mcscan","_yield$Promise$all","_yield$Promise$all2","bed1text","bed2text","mcscantext","bed1Map","bed2Map","feats","_context2","getConf","pluginManager","openLocation","Promise","all","map","r","readFile","sent","_slicedToArray","parseBed","split","filter","f","line","index","_line$split","_line$split2","n11","n12","n21","n22","score","strand","r11","get","r12","r21","r22","Error","_x2","_hasDataForRefName","_callee3","_context3","_getRefNames","_callee4","_context4","region","_this3","ObservableCreate","_ref","_callee5","observer","_yield$_this3$setup","flip","_context5","setup","indexOf","assemblyName","forEach","_f","f11","f12","f21","f22","rowNum","r1","refName","start","Math","min","end","max","r2","_ref2","doesIntersect2","SimpleFeature","_objectSpread","uniqueId","syntenyId","mate","complete","_x3","BaseFeatureDataAdapter","capabilities","isGzip","buf","text","Map","startsWith","name","_readFile","file","buffer","t0","TextDecoder","fatal","unzip","t1","t2","decode","zip","a","b","i","decoder","parseLineByLine","cb","blockStart","entries","n","slice","toString","trim","push"],"sourceRoot":""}