{"version":3,"file":"static/js/6617.f9bab0f3.chunk.js","mappings":"+LASMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,YAAa,CACXC,WAAYF,EAAMG,QAAQC,UAAUC,KACpCC,OAAQ,GAEVC,UAAW,CACTC,QAAS,QAEXC,QAAS,CACPD,QAAS,OACTE,MAAO,OACPC,SAAU,MACV,SAAU,CACRC,OAAQ,YACRC,KAAM,SAGVC,QAAS,CACPH,SAAU,OAEb,IAEKI,GAAsBC,EAAAA,EAAAA,WAAS,SAAAC,GAIjC,IAHFC,EAAKD,EAALC,MAIQC,EAAYrB,IAAZqB,QACAC,EAAUF,EAAVE,MACAC,GAAkBC,EAAAA,EAAAA,QAAOJ,GAAzBG,cACFE,GAAMC,EAAAA,EAAAA,QAAO,MAEnB,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWT,EAAQZ,UAAUmB,SAAA,EAChCD,EAAAA,EAAAA,KAAA,OAAKG,UAAWT,EAAQL,QAAQY,UAC9BD,EAAAA,EAAAA,KAAA,OAAKI,MAAO,CAAEC,SAAU,YAAaJ,SAClCN,EAAMW,KAAI,SAACC,EAAMC,GAChB,IAAQC,EAAmBb,EAAcc,YAAYH,EAAKI,MAAlDF,eACFG,GACJZ,EAAAA,EAAAA,KAACS,EAAc,CAAehB,MAAOc,GAAhBA,EAAKM,IAE5B,OAAIL,IAAQb,EAAMmB,OAAS,EAClBF,EAEF,CACLA,GACAZ,EAAAA,EAAAA,KAAA,OAEEG,UAAWT,EAAQlB,aAAY,GAAAuC,OADvBR,EAAKM,GAAE,aAIrB,SAGJb,EAAAA,EAAAA,KAAA,OAAKG,UAAWT,EAAQV,QAAQiB,UAC9BD,EAAAA,EAAAA,KAAA,OACEF,IAAKA,EACLM,MAAO,CACLnB,MAAO,OACP+B,OAAQ,GACRC,cAAexB,EAAMyB,qBAAkBC,EAAY,QACnDlB,SAEDR,EAAM2B,cAAcd,KAAI,SAAAe,GAAK,OAO5BrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAO,CACNC,UAAWzB,EAEXL,MAAOA,EACP+B,QAASH,EAAMI,cAAcD,SAFxBH,EAAMI,cAAcD,QAGzB,YAOhB,IAEA,W,yKC9DA,SAASE,EAAOC,EAAYC,GAC1B,IAAMC,EAAOF,EAAEG,IAAI,QACnB,OAAOD,EAAOA,EAAKD,GAAOD,EAAEG,IAAIF,EAClC,C,0BCpBApC,EAAwB,CAAC,EAAG,EAAG,EAAG,GAA3BuC,EAAIvC,EAAA,GAAIwC,EAAKxC,EAAA,GAsJpB,GApJ6BD,EAAAA,EAAAA,WAAS,SAAA0C,GAUlC,IATFxC,EAAKwC,EAALxC,MACA+B,EAAOS,EAAPT,QACAD,EAASU,EAATV,UACAW,EAAoBD,EAApBC,qBAOQvC,EAA8BF,EAA9BE,MAAOwC,EAAuB1C,EAAvB0C,mBACT5D,GAAQ6D,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,YAAW7C,GACrB8C,GAAOC,EAAAA,EAAAA,aAAY/C,GAEnBgD,EADsBJ,EAApBK,gBACyBZ,IAAInC,EAAM,GAAGgD,cAAc,KAC5DC,EAAAA,EAAAA,IAAaL,GACb,IAAMM,EAAcpD,EAAMqD,iBAAiBtB,GACrCuB,GAAYC,EAAAA,EAAAA,UAAQ,kBD2BrB,SAAwBC,GAAiC,IAC7BC,EAD4BC,GAAAC,EAAAA,EAAAA,GAC7CH,EAASI,UAAQ,IAAjC,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MACE,GAAqB,EADXN,EAAAO,MACJ3B,IAAI,SACR,OAAO,CAEV,OAAA4B,GAAAP,EAAAQ,EAAAD,EAAA,SAAAP,EAAAxB,GAAA,CACD,OAAO,CACT,CClCkCiC,CAAef,EAAY,GAAE,CAACA,IAExDgB,GAAgBb,EAAAA,EAAAA,UAAQ,WAC5B,IAAMa,EAAgBpE,EAAMqE,2BAC1BtC,EACAuB,EDnCC,SAAkCE,GACvC,IAIuCc,EAJjCC,EAAa,IAAIC,IACjBC,EAAc,IAAIC,IAExBC,GAAAhB,EAAAA,EAAAA,GACsBH,EAASI,UAAQ,IAAvC,IAAAe,EAAAd,MAAAS,EAAAK,EAAAb,KAAAC,MAAyC,CAAC,IAA/Ba,EAAON,EAAAN,MACVa,EAAQD,EAAQvC,IAAI,SACpBjB,EAAKwD,EAAQxD,KACb0D,EAAmB,EAARD,EACXE,EAA0B,EAARF,EAExB,IAAKJ,EAAYO,IAAI5D,KAAQ2D,IAAoBD,EAAU,CACzD,IAAMhB,EAAIc,EAAQvC,IAAI,QAClB4C,EAAMV,EAAWlC,IAAIyB,GACpBmB,IACHA,EAAM,GACNV,EAAWW,IAAIpB,EAAGmB,IAEpBA,EAAIE,KAAKP,EACX,CACAH,EAAYW,IAAIR,EAAQxD,KAC1B,CAAC,OAAA6C,GAAAU,EAAAT,EAAAD,EAAA,SAAAU,EAAAzC,GAAA,CAED,OAAOmD,EAAAA,EAAAA,GAAId,EAAWX,UAAU0B,QAAO,SAAAC,GAAC,OAAIA,EAAElE,OAAS,CAAC,GAC1D,CCYUmE,CAAyBpC,GDH5B,SAAqCI,GAC1C,IAIuCiC,EAJjClB,EAAa,IAAIC,IACjBC,EAAc,IAAIC,IAExBgB,GAAA/B,EAAAA,EAAAA,GACsBH,EAASI,UAAQ,IAAvC,IAAA8B,EAAA7B,MAAA4B,EAAAC,EAAA5B,KAAAC,MAAyC,CAAC,IAA/Ba,EAAOa,EAAAzB,MACV5C,EAAKwD,EAAQxD,KACb0D,EAAkC,EAAvBF,EAAQvC,IAAI,SACvBsD,IAAU1D,EAAO2C,EAAS,MAChC,IAAKH,EAAYO,IAAI5D,KAAQ0D,GAAYa,EAAO,CAC9C,IAAM7B,EAAIc,EAAQvC,IAAI,QAClB4C,EAAMV,EAAWlC,IAAIyB,GACpBmB,IACHA,EAAM,GACNV,EAAWW,IAAIpB,EAAGmB,IAEpBA,EAAIE,KAAKP,EACX,CACAH,EAAYW,IAAIR,EAAQxD,KAC1B,CAAC,OAAA6C,GAAAyB,EAAAxB,EAAAD,EAAA,SAAAyB,EAAAxD,GAAA,CAED,OAAOmD,EAAAA,EAAAA,GAAId,EAAWX,UAAU0B,QAAO,SAAAC,GAAC,OAAIA,EAAElE,OAAS,CAAC,GAC1D,CClBUuE,CAA4BxC,IAOlC,OALKE,GACHc,EAAcyB,SAAQ,SAAAC,GACpBA,EAAEC,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEpB,QAAQvC,IAAI,WAAa4D,EAAErB,QAAQvC,IAAI,UAAU,GACtE,IAEK+B,CACT,GAAG,CAAChB,EAAarB,EAASuB,EAAWtD,IAErCkG,GAAwCC,EAAAA,EAAAA,YAAkBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEhCI,EAAU,EACd,GAAI1E,EAAU2E,QAAS,CACrB,IAAMC,EAAO5E,EAAU2E,QAAQE,wBAC/BH,EAAUE,EAAKE,GACjB,CAEA,OAAK5D,GAKHzC,EAAAA,EAAAA,KAAA,KACEsG,OAAQ/H,EAAMG,QAAQ6H,KAAKC,SAC3BpH,KAAK,OACL,cAAayE,EAAc/C,OAAM,GAAAC,OAAMS,EAAO,WAAYA,EAAQvB,SAEjE4D,EAAcvD,KAAI,SAAAmG,GAIjB,IAHA,IAsFCC,EAtFKC,EAAM,GAEZC,EAAA,WAEE,IAAAC,EAAmDJ,EAAMK,GAAzCC,EAAEF,EAAVG,OAAqBC,EAAEJ,EAAXxC,QAAoB6C,EAAML,EAAbM,MACjCC,EAAmDX,EAAMK,EAAI,GAA7CO,EAAED,EAAVJ,OAAqBM,EAAEF,EAAX/C,QAAoBkD,EAAMH,EAAbD,MAEjC,IAAKJ,IAAOM,EACgD,OAA1DG,QAAQC,KAAK,8CAA6C,CAAAzC,EACnD,MAIT,IAAK7C,GAAsB+E,IAAWK,EAAS,MAAD,CAAAvC,EACrC,MAET,IAAM0C,EAAQjF,EAASkF,oBAAoBV,EAAGnF,IAAI,YAC5C8F,EAAQnF,EAASkF,oBAAoBL,EAAGxF,IAAI,YAElD,IAAK4F,IAAUE,EACb,MAAM,IAAIC,MAAM,0BAAD9G,OAA2B2G,GAASE,IAGrD,IAAME,EAAKb,EAAGnF,IAAI,UACZiG,EAAKT,EAAGxF,IAAI,UACZkG,EAAKjB,GAAW,IAARe,EAAY/F,EAAOC,GAC3BiG,GAAc,IAARF,EACNG,EAAKnF,EAAYsE,EAAGY,EAAMlG,EAAOC,GAASqF,EAAGY,EAAMjG,EAAQD,GAC3DoG,GAAKC,EAAAA,EAAAA,IAAoBzI,EAAMuH,GAASQ,EAAOM,GAC/CK,GAAKD,EAAAA,EAAAA,IAAoBzI,EAAM4H,GAASK,EAAOM,GAC/CI,EAAY3I,EAAMuH,GAAQqB,OAAOJ,GAAIK,SACrCC,EAAY9I,EAAM4H,GAAQgB,OAAOF,GAAIG,SACrCE,EAAS/I,EAAMW,KAAI,SAAA0E,GAAC,OAAIA,EAAE2D,SAASnH,EAAQ,IAC3CoH,GACJC,EAAAA,EAAAA,IAAKrH,EAAS0F,EAAQvH,EAAO+I,EAAQ3B,EAAI7E,GACzC+D,EACI6C,GACJD,EAAAA,EAAAA,IAAKrH,EAAS+F,EAAQ5H,EAAO+I,EAAQrB,EAAInF,GACzC+D,EAII8C,EAAO,CACX,IACAZ,EACAS,EACA,IACAT,EAAK,IAAMlB,EAAGnF,IAAI,WAAawG,GAAa,EAAI,GAChDM,EACAP,EACE,IACEf,EAAGxF,IAAI,WACN2G,GAAa,EAAI,IACjB1F,GAAa,EAAI,GACtB+F,EACAT,EACAS,GACAE,KAAK,KACDnI,EAAE,GAAAE,OAAMkG,EAAGpG,KAAI,KAAAE,OAAIuG,EAAGzG,MAC5B8F,EAAI/B,MACF5E,EAAAA,EAAAA,KAAA,QACEiJ,EAAGF,EAEH,cAAY,KACZG,YAAanD,IAAiBlF,EAAK,EAAI,EACvCsI,QAAS,WAAO,IAADC,EAAAC,EACPC,EAAiC,QAApBF,EAAG/G,EAAQkH,iBAAS,IAAAH,OAAA,EAAjBA,EAAAI,KAAAnH,EACpB,6BACA,uBACA,CACEoH,YAAa,CACXC,UACE7G,EAAYf,IAAImF,EAAGpG,OAAS,CAAE8I,OAAQ,WAAO,IAC7CA,SACFC,UACE/G,EAAYf,IAAIwF,EAAGzG,OAAS,CAAE8I,OAAQ,WAAO,IAC7CA,YAIU,QAAlBN,EAAAhH,EAAQwH,kBAAU,IAAAR,GAAlBA,EAAAG,KAAAnH,EAAqBiH,EACvB,EACAQ,YAAa,kBAAM9D,EAAgBnF,EAAG,EACtCkJ,WAAY,kBAAM/D,OAAgB7E,EAAU,GArBvCN,GAwBX,EAnFSiG,EAAI,EAAGA,EAAIL,EAAM3F,OAAS,EAAGgG,IAAG,GAAAJ,EAAAE,IAAC,OAADF,EAAA1B,EAoFzC,OAAO2B,CACT,MAlGK,IAqGX,ICvBA,GAhIkBpH,EAAAA,EAAAA,WAAS,SAAA0C,GAUvB,IATFxC,EAAKwC,EAALxC,MACA+B,EAAOS,EAAPT,QACW1B,EAAGmC,EAAdV,UACAW,EAAoBD,EAApBC,qBAOQvC,EAAUF,EAAVE,MACF0C,GAAUC,EAAAA,EAAAA,YAAW7C,GACnBiD,EAAoBL,EAApBK,gBACFsH,EAAgBvK,EAAMqD,iBAAiBtB,GACvCqC,GAAgBb,EAAAA,EAAAA,UACpB,kBACEvD,EAAMqE,2BACJtC,EFyDD,SAAoCyI,GACzC,IAG8BC,EAHxBlG,EAAa,IAAIC,IACjBC,EAAc,IAAIC,IAAagG,GAAA/G,EAAAA,EAAAA,GAErB6G,EAAM5G,UAAQ,QAAAuD,EAAA,WAAG,IAAtBjF,EAACuI,EAAAzG,MACV,IAAKS,EAAYO,IAAI9C,EAAEd,OAA2B,aAAlBc,EAAEG,IAAI,QAAwB,CAC5D,IAAMsI,EAAOzI,EAAEG,IAAI,OACf,OAAJsI,QAAI,IAAJA,GAAAA,EAAM9E,SAAQ,SAAAG,GACZ,IAAM4E,EAAG,GAAAtJ,OAAMY,EAAEG,IAAI,WAAU,KAAAf,OAAIY,EAAEG,IAAI,SAAW,GAC9CwI,GAAMC,EAAAA,EAAAA,GAAc9E,GAC1B,GAAI6E,EAAK,CACP,IAAM5F,EAAMV,EAAWlC,IAAIuI,GACtB3F,EAGHA,EAAIE,KAAKjD,GAFTqC,EAAWW,IAAI2F,EAAIE,cAAgB,OAAQ,CAAC7I,GAIhD,CACF,GACF,CACAuC,EAAYW,IAAIlD,EAAEd,KACpB,EAjBA,IAAAsJ,EAAA7G,MAAA4G,EAAAC,EAAA5G,KAAAC,MAAAoD,GAiBC,OAAAlD,GAAAyG,EAAAxG,EAAAD,EAAA,SAAAyG,EAAAxI,GAAA,CAED,OAAOmD,EAAAA,EAAAA,GAAId,EAAWX,UAAU0B,QAAO,SAAAC,GAAC,OAAIA,EAAElE,OAAS,CAAC,GAC1D,CEhFQ2J,CAA2BT,GAC5B,GACH,CAACA,EAAexI,EAAS/B,IAG3BkG,GAAwCC,EAAAA,EAAAA,YAAkBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BtD,GAAOC,EAAAA,EAAAA,aAAY/C,IACzBmD,EAAAA,EAAAA,IAAaL,GACb,IAAME,EAAWC,EAAgBZ,IAAInC,EAAM,GAAGgD,cAAc,IAE5D,IAAKF,EACH,OAAO,KAGT,IAAIiI,EAAO,EACX,GAAI5K,EAAIoG,QAAS,CACf,IAAMC,EAAOrG,EAAIoG,QAAQE,wBACzBsE,EAAOvE,EAAKE,GACd,CAEA,OACErG,EAAAA,EAAAA,KAAA,KACEsG,OAAO,QACP4C,YAAa,EACb9J,KAAK,OACL,cAAayE,EAAc/C,OAAM,GAAAC,OAAMS,EAAO,WAAYA,EAAQvB,SAEjE4D,EAAcvD,KAAI,SAAAmG,GAIjB,IAHA,IA0ECC,EA1EKC,EAAM,GAEZC,EAAA,WAEE,IAAAC,EAAmDJ,EAAMK,GAAzCC,EAAEF,EAAVG,OAAqBC,EAAEJ,EAAXxC,QAAoB6C,EAAML,EAAbM,MACjCC,EAAmDX,EAAMK,EAAI,GAA7CO,EAAED,EAAVJ,OAAqBM,EAAEF,EAAX/C,QAAoBkD,EAAMH,EAAbD,MAC3BtG,EAAKoG,EAAGpG,KAER8J,EFKT,SAAyBC,EAAgBC,GAC9C,IAAMT,EAAOQ,EAAM9I,IAAI,OACvB,GAAIsI,EACF,OAAO,IAAInG,IACL,OAAJmG,QAAI,IAAJA,OAAI,EAAJA,EACI9J,KAAI,SAAAwK,GAAG,OAAIP,EAAAA,EAAAA,GAAcO,EAAI,IAC9B/F,OAAOgG,EAAAA,UACPzK,KAAI,SAAAgK,GAAG,MAAI,CAACA,EAAIE,aAAcF,EAAI,KACrCxI,IAAI,GAADf,OAAI8J,EAAM/I,IAAI,WAAU,KAAAf,OAAI8J,EAAM/I,IAAI,SAAW,GAG1D,CEhB8BkJ,CAAgB/D,EAAIK,GACxC,IAAKP,IAAOM,EAAK,MAAD,CAAArC,EACP,MAET,IAAMiG,EAAYhE,EAAGnF,IAAI,WACnBoJ,EAAY5D,EAAGxF,IAAI,WACnB4F,EAAQjF,EAASkF,oBAAoBsD,GACrCrD,EAAQnF,EAASkF,oBAAoBuD,GAC3C,IAAKxD,IAAUE,EACb,MAAM,IAAIC,MAAM,0BAAD9G,OAA2B2G,GAASE,IAErD,IAAMO,GAAKC,EAAAA,EAAAA,IAAoBzI,EAAMuH,GAASQ,EAAOX,EApE/C,IAqEAsB,GAAKD,EAAAA,EAAAA,IAAoBzI,EAAM4H,GAASK,EAAOP,EArE/C,IAsEAiB,EAAY3I,EAAMuH,GAAQqB,OAAOJ,GAAIK,SACrCC,EAAY9I,EAAM4H,GAAQgB,OAAOF,GAAIG,SAErCE,EAAS/I,EAAMW,KAAI,SAAA0E,GAAC,OAAIA,EAAE2D,SAASnH,EAAQ,IAC3CoH,GACJC,EAAAA,EAAAA,IAAKrH,EAAS0F,EAAQvH,EAAO+I,EAAQ3B,EAAI7E,GACzCwI,EACI5B,GACJD,EAAAA,EAAAA,IAAKrH,EAAS+F,EAAQ5H,EAAO+I,EAAQrB,EAAInF,GACzCwI,EACF,GAAKC,EAEE,CACL,IAAM5B,EAAO,CACX,IACAZ,EACE,IACwB,SAArBwC,EAAYQ,MAAmB,EAAI,IACnC7C,GAAa,EAAI,GACtBM,EACA,IACAT,EACAS,EACA,IACAP,EACAS,EACA,IACAT,EACE,IACiC,SAA9BsC,EAAYS,cAA2B,GAAK,IAC5C3C,GAAa,EAAI,GACtBK,GACAE,KAAK,KACPrC,EAAI/B,MACF5E,EAAAA,EAAAA,KAAA,QACEiJ,EAAGF,EAEHG,YAAarI,IAAOkF,EAAe,GAAK,EACxCoD,QAAS,WAAO,IAADC,EAAAiC,EAAAhC,EACPC,EAAiC,QAApBF,EAAG/G,EAAQkH,iBAAS,IAAAH,OAAA,EAAjBA,EAAAI,KAAAnH,EACpB,uBACA,iBACA,CACEoH,YAAkC,QAAvB4B,EAAErB,EAAclI,IAAIjB,UAAG,IAAAwK,OAAA,EAArBA,EAAuB1B,WAGtB,QAAlBN,EAAAhH,EAAQwH,kBAAU,IAAAR,GAAlBA,EAAAG,KAAAnH,EAAqBiH,EACvB,EACAQ,YAAa,kBAAM9D,EAAgBnF,EAAG,EACtCkJ,WAAY,kBAAM/D,OAAgB7E,EAAU,GAbvCmK,KAAKC,UAAUxC,IAgB1B,MAzCEvB,QAAQC,KAAK,uDA0CjB,EAvESX,EAAI,EAAGA,EAAIL,EAAM3F,OAAS,EAAGgG,GAAK,EAAC,GAAAJ,EAAAE,IAAC,OAADF,EAAA1B,EAwE5C,OAAO2B,CACT,KAGN,ICQA,GAtIuBpH,EAAAA,EAAAA,WAAS,SAAA0C,GAU5B,IATFxC,EAAKwC,EAALxC,MACA+B,EAAOS,EAAPT,QACW1B,EAAGmC,EAAdV,UACAW,EAAoBD,EAApBC,qBAOQvC,EAAUF,EAAVE,MACF0C,GAAUC,EAAAA,EAAAA,YAAW7C,GACnBiD,EAAoBL,EAApBK,gBACFsH,EAAgBvK,EAAMqD,iBAAiBtB,GACvCqC,GAAgBb,EAAAA,EAAAA,UACpB,kBACEvD,EAAMqE,2BACJtC,EHoFD,SAAyCyI,GAC9C,IAG8BuB,EAHxB7E,EAAmB,GACnBzC,EAAc,IAAIC,IAAasH,GAAArI,EAAAA,EAAAA,GAErB6G,EAAM5G,UAAQ,IAA9B,IAAAoI,EAAAnI,MAAAkI,EAAAC,EAAAlI,KAAAC,MAAgC,CAAC,IAAtB7B,EAAC6J,EAAA/H,MACLS,EAAYO,IAAI9C,EAAEd,OAA6B,UAApBc,EAAEG,IAAI,OAAO,IAC3C6E,EAAI/B,KAAK,CAACjD,IAEZuC,EAAYW,IAAIlD,EAAEd,KACpB,CAAC,OAAA6C,GAAA+H,EAAA9H,EAAAD,EAAA,SAAA+H,EAAA9J,GAAA,CAED,OAAOgF,CACT,CG/FQ+E,CAAgC1B,GACjC,GAEH,CAACA,EAAexI,EAAS/B,IAG3BkG,GAAwCC,EAAAA,EAAAA,YAAkBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BtD,GAAOC,EAAAA,EAAAA,aAAY/C,GAIzB,IAHAmD,EAAAA,EAAAA,IAAaL,IAEIG,EAAgBZ,IAAInC,EAAM,GAAGgD,cAAc,IAE1D,OAAO,KAGT,IAAIsD,EAAU,EACd,GAAInG,EAAIoG,QAAS,CACf,IAAMC,EAAOrG,EAAIoG,QAAQE,wBACzBH,EAAUE,EAAKE,GACjB,CAMA,OAAI1G,EAAMmB,OAAS,EACV,MAGPd,EAAAA,EAAAA,KAAA,KACEZ,KAAK,OACLkH,OAAO,QACP4C,YAAa,EACb,cAAarF,EAAc/C,OAAM,GAAAC,OAAMS,EAAO,WAAYA,EAAQvB,SAEjE4D,EAAcvD,KAAI,SAAAmG,GAIjB,IADA,IAsECC,EAtEKC,EAAM,GAAEC,EAAA,WAEZ,IAAAC,EAAmDJ,EAAMK,GAAzCC,EAAEF,EAAVG,OAAqBC,EAAEJ,EAAXxC,QAAoB6C,EAAML,EAAbM,MAC3BI,EAAoB,IAAXL,EAAe,EAAI,EAC5BrG,EAAKoG,EAAGpG,KACd,IAAKkG,EAAK,MAAD,CAAA/B,EACA,MAGT,IAAM2G,EAAO1E,EAAGnF,IAAI,QACd8J,EAAOD,EAAKE,KAAK,GACjBC,EAAOH,EAAKI,IAAI,GACtBC,EAAqCL,EAAKM,QAAQ,GAAGC,MAAM,IAAGC,GAAArG,EAAAA,EAAAA,GAAAkG,EAAA,GAAvDI,EAAWD,EAAA,GAAEE,EAAaF,EAAA,GAE3BG,GAAIlE,EAAAA,EAAAA,IAAoBzI,EAAM4H,GAASqE,EAAME,GACnD,GAAIQ,EAAG,CACL,IAAMjF,EAAmB,CAACiF,EAAG,EAAGA,EAAI,EAAG,GACjCnE,GAAKC,EAAAA,EAAAA,IACTzI,EAAMuH,GACND,EAAGnF,IAAI,WACPiF,EA/EE,IAiFEsB,EAAKiE,EACLhE,EAAY3I,EAAMuH,GAAQqB,OAAOJ,GAAIK,SACrCC,EAAY9I,EAAM4H,GAAQgB,OAAOF,GAAIG,SAErCE,EAAS/I,EAAMW,KAAI,SAAA0E,GAAC,OAAIA,EAAE2D,SAASnH,EAAQ,IAC3CoH,GACJC,EAAAA,EAAAA,IAAKrH,EAAS0F,EAAQvH,EAAO+I,EAAQ3B,EAAI7E,GACzC+D,EACI6C,GACJD,EAAAA,EAAAA,IAAKrH,EAAS+F,EAAQ5H,EAAO+I,EAAQrB,EAAInF,GACzC+D,EAEI8C,EAAO,CACX,IACAZ,EAAK,IAAsB,MAAhBiE,EAAsB,GAAK,IAAM9D,GAAa,EAAI,GAC7DM,EACA,IACAT,EACAS,EACA,IACAP,EACAS,EACA,IACAT,EAAK,IAAwB,MAAlBgE,EAAwB,GAAK,IAAM5D,GAAa,EAAI,GAC/DK,GACAE,KAAK,KACPrC,EAAI/B,MACF5E,EAAAA,EAAAA,KAAA,QACEiJ,EAAGF,EAEHG,YAAarI,IAAOkF,EAAe,GAAK,EACxCoD,QAAS,WAAO,IAADC,EAAAC,EACPC,EAAiC,QAApBF,EAAG/G,EAAQkH,iBAAS,IAAAH,OAAA,EAAjBA,EAAAI,KAAAnH,EACpB,uBACA,iBACA,CACEoH,aACEO,EAAclI,IAAIjB,IAAO,CAAE8I,OAAQ,WAAO,IAC1CA,WAGY,QAAlBN,EAAAhH,EAAQwH,kBAAU,IAAAR,GAAlBA,EAAAG,KAAAnH,EAAqBiH,EACvB,EACAQ,YAAa,kBAAM9D,EAAgBnF,EAAG,EACtCkJ,WAAY,kBAAM/D,OAAgB7E,EAAU,GAfvCmK,KAAKC,UAAUxC,IAkB1B,CACF,EArESjC,EAAI,EAAGA,EAAIL,EAAM3F,OAAQgG,GAAK,EAAC,GAAAJ,EAAAE,IAAC,OAADF,EAAA1B,EAsExC,OAAO2B,CACT,KAGN,ICvIA,GAAepH,EAAAA,EAAAA,WAAS,SAAUgN,GAK9B,IAADC,EAAAC,EACOhN,EAAmB8M,EAAnB9M,MAAO+B,EAAY+K,EAAZ/K,QACTkH,EAASjJ,EAAMiN,iBAAiBlL,GACtC,MAAwB,qBAAX,QAATgL,EAAA9D,EAAO,UAAE,IAAA8D,OAAA,EAATA,EAAW7L,OACNX,EAAAA,EAAAA,KAAC2M,GAAoBC,EAAAA,EAAAA,GAAA,GAAKL,IAEX,kBAAX,QAATE,EAAA/D,EAAO,UAAE,IAAA+D,OAAA,EAATA,EAAW9L,MACNlB,EAAMoN,kBAAkBrL,IAC7BxB,EAAAA,EAAAA,KAAC8M,GAAcF,EAAAA,EAAAA,GAAA,GAAKL,KAEpBvM,EAAAA,EAAAA,KAAC+M,GAASH,EAAAA,EAAAA,GAAA,GAAKL,IAGZ,IACT,G","sources":["../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitView.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/util.ts","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/AlignmentConnections.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Breakends.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Translocations.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Overlay.tsx"],"sourcesContent":["import React, { useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport { BreakpointViewModel } from '../model'\nimport Overlay from './Overlay'\n\nconst useStyles = makeStyles()(theme => ({\n  viewDivider: {\n    background: theme.palette.secondary.main,\n    height: 3,\n  },\n  container: {\n    display: 'grid',\n  },\n  overlay: {\n    display: 'flex',\n    width: '100%',\n    gridArea: '1/1',\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n  content: {\n    gridArea: '1/1',\n  },\n}))\n\nconst BreakpointSplitView = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n  const ref = useRef(null)\n\n  return (\n    <div>\n      <div className={classes.container}>\n        <div className={classes.content}>\n          <div style={{ position: 'relative' }}>\n            {views.map((view, idx) => {\n              const { ReactComponent } = pluginManager.getViewType(view.type)\n              const viewComponent = (\n                <ReactComponent key={view.id} model={view} />\n              )\n              if (idx === views.length - 1) {\n                return viewComponent\n              }\n              return [\n                viewComponent,\n                <div\n                  key={`${view.id}-divider`}\n                  className={classes.viewDivider}\n                />,\n              ]\n            })}\n          </div>\n        </div>\n        <div className={classes.overlay}>\n          <svg\n            ref={ref}\n            style={{\n              width: '100%',\n              zIndex: 10,\n              pointerEvents: model.interactToggled ? undefined : 'none',\n            }}\n          >\n            {model.matchedTracks.map(track => (\n              // note: we must pass ref down, because the child component\n              // needs to getBoundingClientRect on the this components SVG,\n              // and we cannot rely on using getBoundingClientRect in this\n              // component to make sure this works because if it gets\n              // shifted around by another element, this will not re-render\n              // necessarily\n              <Overlay\n                parentRef={ref}\n                key={track.configuration.trackId}\n                model={model}\n                trackId={track.configuration.trackId}\n              />\n            ))}\n          </svg>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default BreakpointSplitView\n","import { Feature, notEmpty } from '@jbrowse/core/util'\n\nimport { parseBreakend } from '@gmod/vcf'\n\n// this finds candidate alignment features, aimed at plotting split reads from\n// BAM/CRAM files\nexport function getBadlyPairedAlignments(features: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  // this finds candidate features that share the same name\n  for (const feature of features.values()) {\n    const flags = feature.get('flags')\n    const id = feature.id()\n    const unmapped = flags & 4\n    const correctlyPaired = flags & 2\n\n    if (!alreadySeen.has(id) && !correctlyPaired && !unmapped) {\n      const n = feature.get('name')\n      let val = candidates.get(n)\n      if (!val) {\n        val = []\n        candidates.set(n, val)\n      }\n      val.push(feature)\n    }\n    alreadySeen.add(feature.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\nfunction getTag(f: Feature, tag: string) {\n  const tags = f.get('tags')\n  return tags ? tags[tag] : f.get(tag)\n}\n\n// this finds candidate alignment features, aimed at plotting split reads from\n// BAM/CRAM files\nexport function getMatchedAlignmentFeatures(features: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  // this finds candidate features that share the same name\n  for (const feature of features.values()) {\n    const id = feature.id()\n    const unmapped = feature.get('flags') & 4\n    const hasSA = !!getTag(feature, 'SA')\n    if (!alreadySeen.has(id) && !unmapped && hasSA) {\n      const n = feature.get('name')\n      let val = candidates.get(n)\n      if (!val) {\n        val = []\n        candidates.set(n, val)\n      }\n      val.push(feature)\n    }\n    alreadySeen.add(feature.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\nexport function hasPairedReads(features: Map<string, Feature>) {\n  for (const f of features.values()) {\n    if (f.get('flags') & 1) {\n      return true\n    }\n  }\n  return false\n}\n\nexport function findMatchingAlt(feat1: Feature, feat2: Feature) {\n  const alts = feat1.get('ALT') as string[] | undefined\n  if (alts) {\n    return new Map(\n      alts\n        ?.map(alt => parseBreakend(alt))\n        .filter(notEmpty)\n        .map(bnd => [bnd.MatePosition, bnd]),\n    ).get(`${feat2.get('refName')}:${feat2.get('start') + 1}`)\n  }\n  return undefined\n}\n\n// Returns paired BND features across multiple views by inspecting the ALT\n// field to get exact coordinate matches\nexport function getMatchedBreakendFeatures(feats: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  for (const f of feats.values()) {\n    if (!alreadySeen.has(f.id()) && f.get('type') === 'breakend') {\n      const alts = f.get('ALT') as string[] | undefined\n      alts?.forEach(a => {\n        const cur = `${f.get('refName')}:${f.get('start') + 1}`\n        const bnd = parseBreakend(a)\n        if (bnd) {\n          const val = candidates.get(cur)\n          if (!val) {\n            candidates.set(bnd.MatePosition || 'none', [f])\n          } else {\n            val.push(f)\n          }\n        }\n      })\n    }\n    alreadySeen.add(f.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\n// Getting \"matched\" TRA means just return all TRA\nexport function getMatchedTranslocationFeatures(feats: Map<string, Feature>) {\n  const ret: Feature[][] = []\n  const alreadySeen = new Set<string>()\n\n  for (const f of feats.values()) {\n    if (!alreadySeen.has(f.id()) && f.get('ALT')[0] === '<TRA>') {\n      ret.push([f])\n    }\n    alreadySeen.add(f.id())\n  }\n\n  return ret\n}\n","import React, { useMemo, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { useTheme } from '@mui/material'\nimport { getSession } from '@jbrowse/core/util'\n\n// locals\nimport {\n  getBadlyPairedAlignments,\n  getMatchedAlignmentFeatures,\n  hasPairedReads,\n} from './util'\nimport { yPos, useNextFrame, getPxFromCoordinate } from '../util'\nimport { BreakpointViewModel } from '../model'\n\nconst [LEFT, , RIGHT] = [0, 1, 2, 3]\n\nconst AlignmentConnections = observer(function ({\n  model,\n  trackId,\n  parentRef,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views, showIntraviewLinks } = model\n  const theme = useTheme()\n  const session = getSession(model)\n  const snap = getSnapshot(model)\n  const { assemblyManager } = session\n  const assembly = assemblyManager.get(views[0].assemblyNames[0])\n  useNextFrame(snap)\n  const allFeatures = model.getTrackFeatures(trackId)\n  const hasPaired = useMemo(() => hasPairedReads(allFeatures), [allFeatures])\n\n  const layoutMatches = useMemo(() => {\n    const layoutMatches = model.getMatchedFeaturesInLayout(\n      trackId,\n      hasPaired\n        ? getBadlyPairedAlignments(allFeatures)\n        : getMatchedAlignmentFeatures(allFeatures),\n    )\n    if (!hasPaired) {\n      layoutMatches.forEach(m => {\n        m.sort((a, b) => a.feature.get('clipPos') - b.feature.get('clipPos'))\n      })\n    }\n    return layoutMatches\n  }, [allFeatures, trackId, hasPaired, model])\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n\n  let yOffset = 0\n  if (parentRef.current) {\n    const rect = parentRef.current.getBoundingClientRect()\n    yOffset = rect.top\n  }\n\n  if (!assembly) {\n    return null\n  }\n\n  return (\n    <g\n      stroke={theme.palette.text.disabled}\n      fill=\"none\"\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        const ret = []\n        // we follow a path in the list of chunks, not from top to bottom, just in series\n        // following x1,y1 -> x2,y2\n        for (let i = 0; i < chunk.length - 1; i++) {\n          const { layout: c1, feature: f1, level: level1 } = chunk[i]\n          const { layout: c2, feature: f2, level: level2 } = chunk[i + 1]\n\n          if (!c1 || !c2) {\n            console.warn('received null layout for a overlay feature')\n            return null\n          }\n\n          // disable rendering connections in a single level\n          if (!showIntraviewLinks && level1 === level2) {\n            return null\n          }\n          const f1ref = assembly.getCanonicalRefName(f1.get('refName'))\n          const f2ref = assembly.getCanonicalRefName(f2.get('refName'))\n\n          if (!f1ref || !f2ref) {\n            throw new Error(`unable to find ref for ${f1ref || f2ref}`)\n          }\n\n          const s1 = f1.get('strand')\n          const s2 = f2.get('strand')\n          const p1 = c1[s1 === -1 ? LEFT : RIGHT]\n          const sn1 = s2 === -1\n          const p2 = hasPaired ? c2[sn1 ? LEFT : RIGHT] : c2[sn1 ? RIGHT : LEFT]\n          const x1 = getPxFromCoordinate(views[level1], f1ref, p1)\n          const x2 = getPxFromCoordinate(views[level2], f2ref, p2)\n          const reversed1 = views[level1].pxToBp(x1).reversed\n          const reversed2 = views[level2].pxToBp(x2).reversed\n          const tracks = views.map(v => v.getTrack(trackId))\n          const y1 =\n            yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n            yOffset\n          const y2 =\n            yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n            yOffset\n\n          // possible todo: use totalCurveHeight to possibly make alternative\n          // squiggle if the S is too small\n          const path = [\n            'M',\n            x1,\n            y1,\n            'C',\n            x1 + 200 * f1.get('strand') * (reversed1 ? -1 : 1),\n            y1,\n            x2 -\n              200 *\n                f2.get('strand') *\n                (reversed2 ? -1 : 1) *\n                (hasPaired ? -1 : 1),\n            y2,\n            x2,\n            y2,\n          ].join(' ')\n          const id = `${f1.id()}-${f2.id()}`\n          ret.push(\n            <path\n              d={path}\n              key={id}\n              data-testid=\"r1\"\n              strokeWidth={mouseoverElt === id ? 5 : 1}\n              onClick={() => {\n                const featureWidget = session.addWidget?.(\n                  'BreakpointAlignmentsWidget',\n                  'breakpointAlignments',\n                  {\n                    featureData: {\n                      feature1: (\n                        allFeatures.get(f1.id()) || { toJSON: () => {} }\n                      ).toJSON(),\n                      feature2: (\n                        allFeatures.get(f2.id()) || { toJSON: () => {} }\n                      ).toJSON(),\n                    },\n                  },\n                )\n                session.showWidget?.(featureWidget)\n              }}\n              onMouseOver={() => setMouseoverElt(id)}\n              onMouseOut={() => setMouseoverElt(undefined)}\n            />,\n          )\n        }\n        return ret\n      })}\n    </g>\n  )\n})\n\nexport default AlignmentConnections\n","import React, { useState, useMemo } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\n// locals\nimport { findMatchingAlt, getMatchedBreakendFeatures } from './util'\nimport { yPos, getPxFromCoordinate, useNextFrame } from '../util'\nimport { BreakpointViewModel } from '../model'\n\nconst [LEFT] = [0, 1, 2, 3]\n\nconst Breakends = observer(function ({\n  model,\n  trackId,\n  parentRef: ref,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views } = model\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const totalFeatures = model.getTrackFeatures(trackId)\n  const layoutMatches = useMemo(\n    () =>\n      model.getMatchedFeaturesInLayout(\n        trackId,\n        getMatchedBreakendFeatures(totalFeatures),\n      ),\n    [totalFeatures, trackId, model],\n  )\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n  const snap = getSnapshot(model)\n  useNextFrame(snap)\n  const assembly = assemblyManager.get(views[0].assemblyNames[0])\n\n  if (!assembly) {\n    return null\n  }\n\n  let yoff = 0\n  if (ref.current) {\n    const rect = ref.current.getBoundingClientRect()\n    yoff = rect.top\n  }\n\n  return (\n    <g\n      stroke=\"green\"\n      strokeWidth={5}\n      fill=\"none\"\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        const ret = []\n        // we follow a path in the list of chunks, not from top to bottom, just\n        // in series following x1,y1 -> x2,y2\n        for (let i = 0; i < chunk.length - 1; i += 1) {\n          const { layout: c1, feature: f1, level: level1 } = chunk[i]\n          const { layout: c2, feature: f2, level: level2 } = chunk[i + 1]\n          const id = f1.id()\n\n          const relevantAlt = findMatchingAlt(f1, f2)\n          if (!c1 || !c2) {\n            return null\n          }\n          const f1origref = f1.get('refName')\n          const f2origref = f2.get('refName')\n          const f1ref = assembly.getCanonicalRefName(f1origref)\n          const f2ref = assembly.getCanonicalRefName(f2origref)\n          if (!f1ref || !f2ref) {\n            throw new Error(`unable to find ref for ${f1ref || f2ref}`)\n          }\n          const x1 = getPxFromCoordinate(views[level1], f1ref, c1[LEFT])\n          const x2 = getPxFromCoordinate(views[level2], f2ref, c2[LEFT])\n          const reversed1 = views[level1].pxToBp(x1).reversed\n          const reversed2 = views[level2].pxToBp(x2).reversed\n\n          const tracks = views.map(v => v.getTrack(trackId))\n          const y1 =\n            yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n            yoff\n          const y2 =\n            yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n            yoff\n          if (!relevantAlt) {\n            console.warn('the relevant ALT allele was not found, cannot render')\n          } else {\n            const path = [\n              'M', // move to\n              x1 -\n                20 *\n                  (relevantAlt.Join === 'left' ? -1 : 1) *\n                  (reversed1 ? -1 : 1),\n              y1,\n              'L', // line to\n              x1,\n              y1,\n              'L', // line to\n              x2,\n              y2,\n              'L', // line to\n              x2 -\n                20 *\n                  (relevantAlt.MateDirection === 'left' ? 1 : -1) *\n                  (reversed2 ? -1 : 1),\n              y2,\n            ].join(' ')\n            ret.push(\n              <path\n                d={path}\n                key={JSON.stringify(path)}\n                strokeWidth={id === mouseoverElt ? 10 : 5}\n                onClick={() => {\n                  const featureWidget = session.addWidget?.(\n                    'VariantFeatureWidget',\n                    'variantFeature',\n                    {\n                      featureData: totalFeatures.get(id)?.toJSON(),\n                    },\n                  )\n                  session.showWidget?.(featureWidget)\n                }}\n                onMouseOver={() => setMouseoverElt(id)}\n                onMouseOut={() => setMouseoverElt(undefined)}\n              />,\n            )\n          }\n        }\n        return ret\n      })}\n    </g>\n  )\n})\n\nexport default Breakends\n","import React, { useState, useMemo } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\n// locals\nimport { getMatchedTranslocationFeatures } from './util'\nimport { yPos, getPxFromCoordinate, useNextFrame } from '../util'\nimport { BreakpointViewModel, LayoutRecord } from '../model'\n\nconst [LEFT] = [0, 1, 2, 3]\n\nconst Translocations = observer(function ({\n  model,\n  trackId,\n  parentRef: ref,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views } = model\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const totalFeatures = model.getTrackFeatures(trackId)\n  const layoutMatches = useMemo(\n    () =>\n      model.getMatchedFeaturesInLayout(\n        trackId,\n        getMatchedTranslocationFeatures(totalFeatures),\n      ),\n\n    [totalFeatures, trackId, model],\n  )\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n  const snap = getSnapshot(model)\n  useNextFrame(snap)\n\n  const assembly = assemblyManager.get(views[0].assemblyNames[0])\n  if (!assembly) {\n    return null\n  }\n\n  let yOffset = 0\n  if (ref.current) {\n    const rect = ref.current.getBoundingClientRect()\n    yOffset = rect.top\n  }\n\n  // we hardcode the TRA to go to the \"other view\" and if there is none, we\n  // just return null here note: would need to do processing of the INFO\n  // CHR2/END and see which view could contain those coordinates to really do\n  // it properly\n  if (views.length < 2) {\n    return null\n  }\n  return (\n    <g\n      fill=\"none\"\n      stroke=\"green\"\n      strokeWidth={5}\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        // we follow a path in the list of chunks, not from top to bottom,\n        // just in series following x1,y1 -> x2,y2\n        const ret = []\n        for (let i = 0; i < chunk.length; i += 1) {\n          const { layout: c1, feature: f1, level: level1 } = chunk[i]\n          const level2 = level1 === 0 ? 1 : 0\n          const id = f1.id()\n          if (!c1) {\n            return null\n          }\n\n          const info = f1.get('INFO')\n          const chr2 = info.CHR2[0]\n          const end2 = info.END[0]\n          const [myDirection, mateDirection] = info.STRANDS[0].split('')\n\n          const r = getPxFromCoordinate(views[level2], chr2, end2)\n          if (r) {\n            const c2: LayoutRecord = [r, 0, r + 1, 0]\n            const x1 = getPxFromCoordinate(\n              views[level1],\n              f1.get('refName'),\n              c1[LEFT],\n            )\n            const x2 = r\n            const reversed1 = views[level1].pxToBp(x1).reversed\n            const reversed2 = views[level2].pxToBp(x2).reversed\n\n            const tracks = views.map(v => v.getTrack(trackId))\n            const y1 =\n              yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n              yOffset\n            const y2 =\n              yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n              yOffset\n\n            const path = [\n              'M', // move to\n              x1 - 20 * (myDirection === '+' ? 1 : -1) * (reversed1 ? -1 : 1),\n              y1,\n              'L', // line to\n              x1,\n              y1,\n              'L', // line to\n              x2,\n              y2,\n              'L', // line to\n              x2 - 20 * (mateDirection === '+' ? 1 : -1) * (reversed2 ? -1 : 1),\n              y2,\n            ].join(' ')\n            ret.push(\n              <path\n                d={path}\n                key={JSON.stringify(path)}\n                strokeWidth={id === mouseoverElt ? 10 : 5}\n                onClick={() => {\n                  const featureWidget = session.addWidget?.(\n                    'VariantFeatureWidget',\n                    'variantFeature',\n                    {\n                      featureData: (\n                        totalFeatures.get(id) || { toJSON: () => {} }\n                      ).toJSON(),\n                    },\n                  )\n                  session.showWidget?.(featureWidget)\n                }}\n                onMouseOver={() => setMouseoverElt(id)}\n                onMouseOut={() => setMouseoverElt(undefined)}\n              />,\n            )\n          }\n        }\n        return ret\n      })}\n    </g>\n  )\n})\n\nexport default Translocations\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { BreakpointViewModel } from '../model'\nimport AlignmentConnections from './AlignmentConnections'\nimport Breakends from './Breakends'\nimport Translocations from './Translocations'\n\nexport default observer(function (props: {\n  parentRef: React.RefObject<SVGSVGElement>\n  model: BreakpointViewModel\n  trackId: string\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { model, trackId } = props\n  const tracks = model.getMatchedTracks(trackId)\n  if (tracks[0]?.type === 'AlignmentsTrack') {\n    return <AlignmentConnections {...props} />\n  }\n  if (tracks[0]?.type === 'VariantTrack') {\n    return model.hasTranslocations(trackId) ? (\n      <Translocations {...props} />\n    ) : (\n      <Breakends {...props} />\n    )\n  }\n  return null\n})\n"],"names":["useStyles","makeStyles","theme","viewDivider","background","palette","secondary","main","height","container","display","overlay","width","gridArea","cursor","fill","content","BreakpointSplitView","observer","_ref","model","classes","views","pluginManager","getEnv","ref","useRef","_jsx","children","_jsxs","className","style","position","map","view","idx","ReactComponent","getViewType","type","viewComponent","id","length","concat","zIndex","pointerEvents","interactToggled","undefined","matchedTracks","track","Overlay","parentRef","trackId","configuration","getTag","f","tag","tags","get","LEFT","RIGHT","_ref2","getTrackYPosOverride","showIntraviewLinks","useTheme","session","getSession","snap","getSnapshot","assembly","assemblyManager","assemblyNames","useNextFrame","allFeatures","getTrackFeatures","hasPaired","useMemo","features","_step3","_iterator3","_createForOfIteratorHelper","values","s","n","done","value","err","e","hasPairedReads","layoutMatches","getMatchedFeaturesInLayout","_step","candidates","Map","alreadySeen","Set","_iterator","feature","flags","unmapped","correctlyPaired","has","val","set","push","add","_toConsumableArray","filter","v","getBadlyPairedAlignments","_step2","_iterator2","hasSA","getMatchedAlignmentFeatures","forEach","m","sort","a","b","_useState","useState","_useState2","_slicedToArray","mouseoverElt","setMouseoverElt","yOffset","current","rect","getBoundingClientRect","top","stroke","text","disabled","chunk","_ret","ret","_loop","_chunk$i","i","c1","layout","f1","level1","level","_chunk","c2","f2","level2","console","warn","f1ref","getCanonicalRefName","f2ref","Error","s1","s2","p1","sn1","p2","x1","getPxFromCoordinate","x2","reversed1","pxToBp","reversed","reversed2","tracks","getTrack","y1","yPos","y2","path","join","d","strokeWidth","onClick","_session$addWidget","_session$showWidget","featureWidget","addWidget","call","featureData","feature1","toJSON","feature2","showWidget","onMouseOver","onMouseOut","totalFeatures","feats","_step4","_iterator4","alts","cur","bnd","parseBreakend","MatePosition","getMatchedBreakendFeatures","yoff","relevantAlt","feat1","feat2","alt","notEmpty","findMatchingAlt","f1origref","f2origref","Join","MateDirection","_totalFeatures$get","JSON","stringify","_step5","_iterator5","getMatchedTranslocationFeatures","info","chr2","CHR2","end2","END","_info$STRANDS$0$split","STRANDS","split","_info$STRANDS$0$split2","myDirection","mateDirection","r","props","_tracks$","_tracks$2","getMatchedTracks","AlignmentConnections","_objectSpread","hasTranslocations","Translocations","Breakends"],"sourceRoot":""}