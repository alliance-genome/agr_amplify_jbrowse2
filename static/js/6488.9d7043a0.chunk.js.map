{"version":3,"file":"static/js/6488.9d7043a0.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string[]\n      setAtIndex: Function\n      removeAtIndex: Function\n      add: Function\n      description: string\n    }\n  }) => {\n    const [value, setValue] = useState('')\n    const [addNew, setAddNew] = useState(false)\n    return (\n      <>\n        {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n        <List disablePadding>\n          {slot.value.map((val, idx) => (\n            <ListItem key={idx} disableGutters>\n              <TextField\n                value={val}\n                onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={() => slot.removeAtIndex(idx)}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ))}\n\n          {addNew ? (\n            <ListItem disableGutters>\n              <TextField\n                value={value}\n                placeholder=\"add new\"\n                onChange={event => setValue(event.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ) : null}\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            style={{ margin: 4 }}\n            disabled={addNew}\n            onClick={() => setAddNew(true)}\n          >\n            Add item\n          </Button>\n        </List>\n        <FormHelperText>{slot.description}</FormHelperText>\n      </>\n    )\n  },\n)\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nfunction CallbackEditor({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => setCode(event.target.value)}\n          style={{ background: error ? '#fdd' : undefined }}\n          InputProps={{\n            classes: {\n              input: classes.textAreaFont,\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n}\n\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\n\nconst ColorPicker = lazy(() => import('@jbrowse/core/ui/ColorPicker'))\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => onChange(event.target.value)}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={<div />}>\n          <ColorPicker color={value} onChange={event => onChange(event)} />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => slot.set(color)}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\n\nexport default observer(ColorEditorSlot)\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) =>\n                  slot.setAtKeyIndex(key, idx, val),\n                removeAtIndex: (idx: number) => slot.removeAtKeyIndex(key, idx),\n                add: (val: string) => slot.addToKey(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n","import React from 'react'\nimport { TextField, TextFieldProps } from '@mui/material'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      FormHelperTextProps={{\n        // @ts-ignore\n        component: 'div',\n      }}\n      fullWidth\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ConfigurationTextField from './ConfigurationTextField'\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseFloat(val)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    } else {\n      slot.reset?.()\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => slot.add(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => slot.set(evt.target.checked)}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport NumberMapEditor from './NumberMapEditor'\nimport NumberEditor from './NumberEditor'\nimport BooleanEditor from './BooleanEditor'\n\nconst StringEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\nconst TextEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string\n      description: string\n      set: (num: number) => void\n    }\n  }) => {\n    const [val, setVal] = useState(slot.value)\n    useEffect(() => {\n      const num = parseInt(val, 10)\n      if (!Number.isNaN(num)) {\n        slot.set(num)\n      }\n    }, [slot, val])\n    return (\n      <ConfigurationTextField\n        label={slot.name}\n        helperText={slot.description}\n        value={val}\n        type=\"number\"\n        onChange={evt => setVal(evt.target.value)}\n      />\n    )\n  },\n)\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n  ).map(t => t.value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ({ slot, slotSchema }: { slot: any; slotSchema: IAnyType }) => {\n    const { classes } = useSlotEditorStyles()\n    const { type } = slot\n    let ValueComponent = slot.isCallback\n      ? CallbackEditor\n      : // @ts-ignore\n        valueComponents[type]\n    if (!ValueComponent) {\n      console.warn(`no slot editor defined for ${type}, editing as string`)\n      ValueComponent = StringEditor\n    }\n    if (!(type in valueComponents)) {\n      console.warn(`SlotEditor needs to implement ${type}`)\n    }\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <ValueComponent slot={slot} slotSchema={slotSchema} />\n        </div>\n        <div className={classes.slotModeSwitch}>\n          {slot.contextVariable.length ? (\n            <IconButton\n              onClick={() =>\n                slot.isCallback\n                  ? slot.convertToValue()\n                  : slot.convertToCallback()\n              }\n              title={`convert to ${\n                slot.isCallback ? 'regular value' : 'callback'\n              }`}\n            >\n              {!slot.isCallback ? (\n                <RadioButtonUncheckedIcon />\n              ) : (\n                <SvgCheckbox />\n              )}\n            </IconButton>\n          ) : null}\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { useSlotEditorStyles } from './SlotEditor'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(\n  ({\n    typeNameChoices,\n    slot,\n    slotName,\n    onChange,\n  }: {\n    typeNameChoices: string[]\n    slot: AnyConfigurationModel\n    slotName: string\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  }) => {\n    const { classes } = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: theme.palette.tertiary?.contrastText || '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = `${singular(slotName)} ${slotIndex + 1}`\n        return <Member {...props} key={key} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeSelector}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const { target } = model\n  const key = target && readConfObject(target, 'trackId')\n  const name = target && readConfObject(target, 'name')\n  return (\n    <>\n      <Accordion key={key} defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{name ?? 'Configuration'}</Typography>\n        </AccordionSummary>\n        <AccordionDetails\n          className={classes.expansionPanelDetails}\n          data-testid=\"configEditor\"\n        >\n          {!target ? 'no target set' : <Schema schema={target} />}\n        </AccordionDetails>\n      </Accordion>\n\n      {/* blank space at the bottom of screen allows scroll */}\n      <div style={{ height: 300 }} />\n    </>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","_ref","slot","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","addNew","setAddNew","_jsxs","_Fragment","children","name","_jsx","InputLabel","List","disablePadding","map","val","idx","ListItem","disableGutters","TextField","onChange","evt","setAtIndex","target","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","removeAtIndex","DeleteIcon","placeholder","event","Button","color","variant","style","margin","concat","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","_getEnv$pluginManager","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","input","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","HelpIcon","ColorPicker","lazy","ColorSlot","props","_props$value","_props$label","label","_props$TextFieldProps","TextFieldProps","displayed","setDisplayed","display","_objectSpread","React","fallback","helperText","fullWidth","card","spacing","Array","from","_ref2","_ref3","key","Card","raised","CardHeader","action","remove","CardContent","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","AddIcon","ConfigurationTextField","SanitizedHTML","html","FormHelperTextProps","component","setVal","_slot$reset","num","parseFloat","Number","isNaN","reset","call","type","NumberEditor","FormControl","FormControlLabel","control","Checkbox","checked","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","_ref4","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","MenuItem","FileSelectorWrapper","_ref5","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","_ref6","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","_theme$palette$tertia","expandIcon","tertiary","contrastText","root","padding","expansionPanelDetails","accordion","border","primary","noOverflow","Member","typeSelector","schema","_props$slot","_props$path","path","isConfigurationSchemaType","subslot","slotIndex","singular","_createElement","getTypeNamesFromExplicitlyTypedUnion","TypeSelector","setSubschema","Accordion","defaultExpanded","AccordionSummary","ExpandMoreIcon","Typography","_toConsumableArray","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","SlotEditor","_ref$path","properties","getMembers","Object","entries","model","readConfObject","height"],"sourceRoot":""}