{"version":3,"file":"static/js/6488.9d7043a0.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string[]\n      setAtIndex: Function\n      removeAtIndex: Function\n      add: Function\n      description: string\n    }\n  }) => {\n    const [value, setValue] = useState('')\n    const [addNew, setAddNew] = useState(false)\n    return (\n      <>\n        {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n        <List disablePadding>\n          {slot.value.map((val, idx) => (\n            <ListItem key={idx} disableGutters>\n              <TextField\n                value={val}\n                onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={() => slot.removeAtIndex(idx)}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ))}\n\n          {addNew ? (\n            <ListItem disableGutters>\n              <TextField\n                value={value}\n                placeholder=\"add new\"\n                onChange={event => setValue(event.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ) : null}\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            style={{ margin: 4 }}\n            disabled={addNew}\n            onClick={() => setAddNew(true)}\n          >\n            Add item\n          </Button>\n        </List>\n        <FormHelperText>{slot.description}</FormHelperText>\n      </>\n    )\n  },\n)\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nfunction CallbackEditor({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => setCode(event.target.value)}\n          style={{ background: error ? '#fdd' : undefined }}\n          InputProps={{\n            classes: {\n              input: classes.textAreaFont,\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n}\n\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\n\nconst ColorPicker = lazy(() => import('@jbrowse/core/ui/ColorPicker'))\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => onChange(event.target.value)}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={<div />}>\n          <ColorPicker color={value} onChange={event => onChange(event)} />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => slot.set(color)}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\n\nexport default observer(ColorEditorSlot)\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) =>\n                  slot.setAtKeyIndex(key, idx, val),\n                removeAtIndex: (idx: number) => slot.removeAtKeyIndex(key, idx),\n                add: (val: string) => slot.addToKey(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n","import React from 'react'\nimport { TextField, TextFieldProps } from '@mui/material'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      FormHelperTextProps={{\n        // @ts-ignore\n        component: 'div',\n      }}\n      fullWidth\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ConfigurationTextField from './ConfigurationTextField'\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseFloat(val)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    } else {\n      slot.reset?.()\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => slot.add(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\n\nexport default observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => slot.set(evt.target.checked)}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport NumberMapEditor from './NumberMapEditor'\nimport NumberEditor from './NumberEditor'\nimport BooleanEditor from './BooleanEditor'\n\nconst StringEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\nconst TextEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string\n      description: string\n      set: (num: number) => void\n    }\n  }) => {\n    const [val, setVal] = useState(slot.value)\n    useEffect(() => {\n      const num = parseInt(val, 10)\n      if (!Number.isNaN(num)) {\n        slot.set(num)\n      }\n    }, [slot, val])\n    return (\n      <ConfigurationTextField\n        label={slot.name}\n        helperText={slot.description}\n        value={val}\n        type=\"number\"\n        onChange={evt => setVal(evt.target.value)}\n      />\n    )\n  },\n)\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n  ).map(t => t.value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ({ slot, slotSchema }: { slot: any; slotSchema: IAnyType }) => {\n    const { classes } = useSlotEditorStyles()\n    const { type } = slot\n    let ValueComponent = slot.isCallback\n      ? CallbackEditor\n      : // @ts-ignore\n        valueComponents[type]\n    if (!ValueComponent) {\n      console.warn(`no slot editor defined for ${type}, editing as string`)\n      ValueComponent = StringEditor\n    }\n    if (!(type in valueComponents)) {\n      console.warn(`SlotEditor needs to implement ${type}`)\n    }\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <ValueComponent slot={slot} slotSchema={slotSchema} />\n        </div>\n        <div className={classes.slotModeSwitch}>\n          {slot.contextVariable.length ? (\n            <IconButton\n              onClick={() =>\n                slot.isCallback\n                  ? slot.convertToValue()\n                  : slot.convertToCallback()\n              }\n              title={`convert to ${\n                slot.isCallback ? 'regular value' : 'callback'\n              }`}\n            >\n              {!slot.isCallback ? (\n                <RadioButtonUncheckedIcon />\n              ) : (\n                <SvgCheckbox />\n              )}\n            </IconButton>\n          ) : null}\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { useSlotEditorStyles } from './SlotEditor'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(\n  ({\n    typeNameChoices,\n    slot,\n    slotName,\n    onChange,\n  }: {\n    typeNameChoices: string[]\n    slot: AnyConfigurationModel\n    slotName: string\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  }) => {\n    const { classes } = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: theme.palette.tertiary?.contrastText || '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = `${singular(slotName)} ${slotIndex + 1}`\n        return <Member {...props} key={key} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeSelector}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const { target } = model\n  const key = target && readConfObject(target, 'trackId')\n  const name = target && readConfObject(target, 'name')\n  return (\n    <>\n      <Accordion key={key} defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{name ?? 'Configuration'}</Typography>\n        </AccordionSummary>\n        <AccordionDetails\n          className={classes.expansionPanelDetails}\n          data-testid=\"configEditor\"\n        >\n          {!target ? 'no target set' : <Schema schema={target} />}\n        </AccordionDetails>\n      </Accordion>\n\n      {/* blank space at the bottom of screen allows scroll */}\n      <div style={{ height: 300 }} />\n    </>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","useState","value","setValue","addNew","setAddNew","name","InputLabel","List","disablePadding","map","val","idx","ListItem","disableGutters","TextField","onChange","evt","setAtIndex","target","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","removeAtIndex","Delete","placeholder","event","Button","color","variant","style","margin","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","input","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","Help","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","displayed","setDisplayed","display","fallback","helperText","fullWidth","card","spacing","Array","from","key","Card","raised","CardHeader","action","remove","CardContent","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","Add","ConfigurationTextField","SanitizedHTML","html","FormHelperTextProps","component","setVal","num","parseFloat","Number","isNaN","reset","type","NumberEditor","FormControl","FormControlLabel","control","Checkbox","checked","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","StringArrayEditor","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUnchecked","typeNameChoices","slotName","expandIcon","tertiary","contrastText","root","padding","expansionPanelDetails","accordion","border","primary","noOverflow","Member","typeSelector","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","setSubschema","Accordion","defaultExpanded","AccordionSummary","ExpandMore","Typography","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","properties","getMembers","Object","entries","model","readConfObject","height"],"sourceRoot":""}