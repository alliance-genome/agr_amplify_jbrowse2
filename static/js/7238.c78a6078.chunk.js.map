{"version":3,"file":"static/js/7238.c78a6078.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/ImportCustomTrack.tsx","../../../plugins/dotplot-view/src/DotplotView/components/ImportSyntenyTrackSelector.tsx","../../../plugins/dotplot-view/src/DotplotView/components/ImportForm.tsx","../../../plugins/dotplot-view/src/DotplotView/components/CursorIcon.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Header.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx","../../../plugins/dotplot-view/src/DotplotView/components/DotplotView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { SnapshotIn } from 'mobx-state-tree'\nimport path from 'path'\nimport {\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\nimport { ErrorMessage, FileSelector } from '@jbrowse/core/ui'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nfunction getName(\n  sessionTrackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return sessionTrackData\n    ? // @ts-ignore\n      sessionTrackData.uri ||\n        // @ts-ignore\n        sessionTrackData.localPath ||\n        // @ts-ignore\n        sessionTrackData.name\n    : undefined\n}\n\nfunction stripGz(fileName: string) {\n  return fileName.endsWith('.gz')\n    ? fileName.slice(0, fileName.length - 3)\n    : fileName\n}\n\nfunction getAdapter({\n  radioOption,\n  assembly1,\n  assembly2,\n  fileLocation,\n  bed1Location,\n  bed2Location,\n}: {\n  radioOption: string\n  assembly1: string\n  assembly2: string\n  fileLocation?: FileLocation\n  bed1Location?: FileLocation\n  bed2Location?: FileLocation\n}) {\n  if (radioOption === '.paf') {\n    return {\n      type: 'PAFAdapter',\n      pafLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.out') {\n    return {\n      type: 'MashMapAdapter',\n      outLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.delta') {\n    return {\n      type: 'DeltaAdapter',\n      deltaLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.chain') {\n    return {\n      type: 'ChainAdapter',\n      chainLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.anchors') {\n    return {\n      type: 'MCScanAnchorsAdapter',\n      mcscanAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.anchors.simple') {\n    return {\n      type: 'MCScanSimpleAnchorsAdapter',\n      mcscanSimpleAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else {\n    throw new Error('Unknown type')\n  }\n}\n\ntype Conf = SnapshotIn<AnyConfigurationModel>\n\nconst OpenTrack = observer(\n  ({\n    sessionTrackData,\n    assembly1,\n    assembly2,\n    setSessionTrackData,\n  }: {\n    sessionTrackData: Conf\n    assembly1: string\n    assembly2: string\n    setSessionTrackData: (arg: Conf) => void\n  }) => {\n    const [bed2Location, setBed2Location] = useState<FileLocation>()\n    const [bed1Location, setBed1Location] = useState<FileLocation>()\n    const [fileLocation, setFileLocation] = useState<FileLocation>()\n    const [value, setValue] = useState('')\n    const [error, setError] = useState<unknown>()\n    const fileName = getName(fileLocation)\n\n    const radioOption =\n      value || (fileName ? path.extname(stripGz(fileName)) : '')\n\n    useEffect(() => {\n      try {\n        if (fileLocation) {\n          const fn = fileName ? path.basename(fileName) : 'MyTrack'\n          const trackId = `${fn}-${Date.now()}`\n          setError(undefined)\n\n          setSessionTrackData({\n            trackId,\n            name: fn,\n            assemblyNames: [assembly2, assembly1],\n            type: 'SyntenyTrack',\n            adapter: getAdapter({\n              radioOption,\n              assembly1,\n              assembly2,\n              fileLocation,\n              bed1Location,\n              bed2Location,\n            }),\n          })\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    }, [\n      fileName,\n      assembly1,\n      assembly2,\n      bed1Location,\n      bed2Location,\n      fileLocation,\n      radioOption,\n      setSessionTrackData,\n    ])\n    return (\n      <Paper style={{ padding: 12 }}>\n        {error ? <ErrorMessage error={error} /> : null}\n        <Typography style={{ textAlign: 'center' }}>\n          Add a .paf, .out (MashMap), .delta (Mummer), .chain, .anchors or\n          .anchors.simple (MCScan) file to view in the dotplot. These file types\n          can also be gzipped. The first assembly should be the query sequence\n          (e.g. left column of the PAF) and the second assembly should be the\n          target sequence (e.g. right column of the PAF)\n        </Typography>\n        <RadioGroup\n          value={radioOption}\n          onChange={event => setValue(event.target.value)}\n        >\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <FormControlLabel value=\".paf\" control={<Radio />} label=\".paf\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel value=\".out\" control={<Radio />} label=\".out\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".delta\"\n                control={<Radio />}\n                label=\".delta\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".chain\"\n                control={<Radio />}\n                label=\".chain\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors\"\n                control={<Radio />}\n                label=\".anchors\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors.simple\"\n                control={<Radio />}\n                label=\".anchors.simple\"\n              />\n            </Grid>\n          </Grid>\n        </RadioGroup>\n        <Grid container justifyContent=\"center\">\n          <Grid item>\n            {value === '.anchors' || value === '.anchors.simple' ? (\n              <div>\n                <div style={{ margin: 20 }}>\n                  Open the {value} and .bed files for both genome assemblies\n                  from the MCScan (Python verson) pipeline{' '}\n                  <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n                    (more info)\n                  </a>\n                </div>\n                <div style={{ display: 'flex' }}>\n                  <div>\n                    <FileSelector\n                      name=\".anchors file\"\n                      description=\"\"\n                      location={fileLocation}\n                      setLocation={loc => setFileLocation(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 1 .bed (left column of anchors file)\"\n                      description=\"\"\n                      location={bed1Location}\n                      setLocation={loc => setBed1Location(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 2 .bed (right column of anchors file)\"\n                      description=\"\"\n                      location={bed2Location}\n                      setLocation={loc => setBed2Location(loc)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <FileSelector\n                name={value ? value + ' location' : ''}\n                description=\"\"\n                location={fileLocation}\n                setLocation={loc => setFileLocation(loc)}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n    )\n  },\n)\n\nexport default OpenTrack\n","import React, { useState, useEffect } from 'react'\nimport { Select, MenuItem, Paper, Typography } from '@mui/material'\nimport { getSession } from '@jbrowse/core/util'\n\nimport { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\n\nimport { observer } from 'mobx-react'\nimport { DotplotViewModel } from '../model'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nfunction f(track: AnyConfigurationModel, assembly1: string, assembly2: string) {\n  const assemblyNames = readConfObject(track, 'assemblyNames')\n  return (\n    assemblyNames.includes(assembly1) &&\n    assemblyNames.includes(assembly2) &&\n    track.type.includes('Synteny')\n  )\n}\n\nconst Selector = observer(\n  ({\n    model,\n    assembly1,\n    assembly2,\n    setShowTrackId,\n  }: {\n    model: DotplotViewModel\n    assembly1: string\n    assembly2: string\n    setShowTrackId: (arg: string) => void\n  }) => {\n    const session = getSession(model)\n    const { tracks, sessionTracks } = session\n    const allTracks = [...tracks, ...sessionTracks] as AnyConfigurationModel[]\n    const filteredTracks = allTracks.filter(t => f(t, assembly2, assembly1))\n    const resetTrack = filteredTracks[0]?.trackId || ''\n    const [value, setValue] = useState(resetTrack)\n    useEffect(() => {\n      // if assembly1/assembly2 changes, then we will want to use this effect to change\n      // the state of the useState because it otherwise gets locked to a stale value\n      setValue(resetTrack)\n    }, [resetTrack])\n\n    useEffect(() => {\n      // sets track data in a useEffect because the initial load is needed as well as\n      // onChange's to the select box\n      setShowTrackId(value)\n    }, [value, setShowTrackId])\n    return (\n      <Paper style={{ padding: 12 }}>\n        <Typography paragraph>\n          Select a track from the select box below, the track will be shown when\n          you hit \"Launch\".\n        </Typography>\n\n        <Typography paragraph>\n          Note: there is a track selector <i>inside</i> the DotplotView, which\n          can turn on one or more SyntenyTracks (more than one can be displayed\n          at once). Look for the track selector icon <TrackSelectorIcon />\n        </Typography>\n        {filteredTracks.length ? (\n          <Select\n            value={value}\n            onChange={event => setValue(event.target.value)}\n          >\n            {filteredTracks.map(track => (\n              <MenuItem key={track.trackId} value={track.trackId}>\n                {getTrackName(track, session)}\n              </MenuItem>\n            ))}\n          </Select>\n        ) : (\n          <ErrorMessage\n            error={`No synteny tracks found for ${assembly1},${assembly2}`}\n          />\n        )}\n      </Paper>\n    )\n  },\n)\n\nexport default Selector\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { transaction } from 'mobx'\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\n\n// locals\nimport { DotplotViewModel } from '../model'\nimport ImportCustomTrack from './ImportCustomTrack'\nimport ImportSyntenyTrackSelector from './ImportSyntenyTrackSelector'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n    margin: '0 auto',\n  },\n  assemblySelector: {\n    width: '75%',\n    margin: '0 auto',\n  },\n}))\n\nconst DotplotImportForm = observer(({ model }: { model: DotplotViewModel }) => {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const [assembly2, setAssembly2] = useState(\n    assemblyNames.length ? assemblyNames[0] : '',\n  )\n  const [assembly1, setAssembly1] = useState(\n    assemblyNames.length ? assemblyNames[0] : '',\n  )\n  const [error, setError] = useState<unknown>()\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [sessionTrackData, setSessionTrackData] = useState<any>()\n  const [showTrackId, setShowTrackId] = useState<string>()\n  const [choice, setChoice] = useState('none')\n\n  function onOpenClick() {\n    try {\n      if (!isSessionWithAddTracks(session)) {\n        return\n      }\n      setError(undefined)\n      model.setError(undefined)\n      transaction(() => {\n        if (sessionTrackData) {\n          session.addTrackConf(sessionTrackData)\n          model.toggleTrack(sessionTrackData.trackId)\n        } else if (showTrackId) {\n          model.showTrack(showTrackId)\n        }\n\n        model.setViews([\n          { bpPerPx: 0.1, offsetPx: 0 },\n          { bpPerPx: 0.1, offsetPx: 0 },\n        ])\n        model.setAssemblyNames(assembly2, assembly1)\n      })\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }\n\n  // this is a combination of any displayed error message we have\n  const displayError = error || model.error\n  return (\n    <Container className={classes.importFormContainer}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Grid\n        container\n        spacing={1}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.assemblySelector}\n      >\n        <Grid item>\n          <Paper style={{ padding: 12 }}>\n            <p style={{ textAlign: 'center' }}>\n              Select assemblies for dotplot view\n            </p>\n            <Grid\n              container\n              spacing={1}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <AssemblySelector\n                  extra={0}\n                  selected={assembly1}\n                  onChange={val => setAssembly1(val)}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <AssemblySelector\n                  extra={1}\n                  selected={assembly2}\n                  onChange={val => setAssembly2(val)}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <FormControl>\n                  <Button\n                    onClick={onOpenClick}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Launch\n                  </Button>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Paper>\n          <FormControl>\n            <FormLabel id=\"group-label\">\n              (Optional) Select or add a synteny track\n            </FormLabel>\n            <RadioGroup\n              row\n              value={choice}\n              onChange={event => setChoice(event.target.value)}\n              aria-labelledby=\"group-label\"\n            >\n              <FormControlLabel value=\"none\" control={<Radio />} label=\"None\" />\n              <FormControlLabel\n                value=\"tracklist\"\n                control={<Radio />}\n                label=\"Existing track\"\n              />\n              <FormControlLabel\n                value=\"custom\"\n                control={<Radio />}\n                label=\"New track\"\n              />\n            </RadioGroup>\n          </FormControl>\n          {choice === 'custom' ? (\n            <ImportCustomTrack\n              setSessionTrackData={setSessionTrackData}\n              sessionTrackData={sessionTrackData}\n              assembly2={assembly2}\n              assembly1={assembly1}\n            />\n          ) : null}\n          {choice === 'tracklist' ? (\n            <ImportSyntenyTrackSelector\n              model={model}\n              assembly1={assembly1}\n              assembly2={assembly2}\n              setShowTrackId={setShowTrackId}\n            />\n          ) : null}\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n\nexport default DotplotImportForm\n","import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon'\nimport React from 'react'\n\nexport function CursorMove(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M13,6V11H18V7.75L22.25,12L18,16.25V13H13V18H16.25L12,22.25L7.75,18H11V13H6V16.25L1.75,12L6,7.75V11H11V6H7.75L12,1.75L16.25,6H13Z\"\n      />\n    </SvgIcon>\n  )\n}\n\nexport function CursorMouse(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M10.07,14.27C10.57,14.03 11.16,14.25 11.4,14.75L13.7,19.74L15.5,18.89L13.19,13.91C12.95,13.41 13.17,12.81 13.67,12.58L13.95,12.5L16.25,12.05L8,5.12V15.9L9.82,14.43L10.07,14.27M13.64,21.97C13.14,22.21 12.54,22 12.31,21.5L10.13,16.76L7.62,18.78C7.45,18.92 7.24,19 7,19A1,1 0 0,1 6,18V3A1,1 0 0,1 7,2C7.24,2 7.47,2.09 7.64,2.23L7.65,2.22L19.14,11.86C19.57,12.22 19.62,12.85 19.27,13.27C19.12,13.45 18.91,13.57 18.7,13.61L15.54,14.23L17.74,18.96C18,19.46 17.76,20.05 17.26,20.28L13.64,21.97Z\"\n      />\n    </SvgIcon>\n  )\n}\n","import React, { lazy, useState } from 'react'\nimport { Alert, Button, IconButton, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\nimport { getBpDisplayStr } from '@jbrowse/core/util'\nimport { Menu } from '@jbrowse/core/ui'\n\n// icons\nimport ZoomOut from '@mui/icons-material/ZoomOut'\nimport ZoomIn from '@mui/icons-material/ZoomIn'\nimport MoreVert from '@mui/icons-material/MoreVert'\nimport { CursorMouse, CursorMove } from './CursorIcon'\nimport { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons'\n\n// locals\nimport { DotplotViewModel } from '../model'\n\n// lazy components\nconst WarningDialog = lazy(() => import('./WarningDialog'))\n\nconst useStyles = makeStyles()({\n  iconButton: {\n    margin: 5,\n  },\n  bp: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 10,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  headerBar: {\n    display: 'flex',\n  },\n})\n\nconst DotplotControls = observer(({ model }: { model: DotplotViewModel }) => {\n  const { classes } = useStyles()\n  const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>()\n  return (\n    <div>\n      <IconButton\n        onClick={model.zoomOutButton}\n        className={classes.iconButton}\n        color=\"secondary\"\n      >\n        <ZoomOut />\n      </IconButton>\n\n      <IconButton\n        onClick={model.zoomInButton}\n        className={classes.iconButton}\n        title=\"zoom in\"\n        color=\"secondary\"\n      >\n        <ZoomIn />\n      </IconButton>\n\n      <IconButton\n        onClick={model.activateTrackSelector}\n        className={classes.iconButton}\n        title=\"Open track selector\"\n        data-testid=\"circular_track_select\"\n        color=\"secondary\"\n      >\n        <TrackSelectorIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={event => setMenuAnchorEl(event.currentTarget)}\n        className={classes.iconButton}\n        color=\"secondary\"\n      >\n        <MoreVert />\n      </IconButton>\n\n      {menuAnchorEl ? (\n        <Menu\n          anchorEl={menuAnchorEl}\n          open\n          onMenuItemClick={(_event, callback) => {\n            callback()\n            setMenuAnchorEl(undefined)\n          }}\n          menuItems={[\n            {\n              onClick: () => model.squareView(),\n              label: 'Square view - same base pairs per pixel',\n            },\n            {\n              onClick: () => model.squareViewProportional(),\n              label: 'Rectanglular view - same total bp',\n            },\n            {\n              onClick: () => model.setDrawCigar(!model.drawCigar),\n              type: 'checkbox',\n              label: 'Draw CIGAR',\n              checked: model.drawCigar,\n            },\n            {\n              onClick: () => model.setCursorMode('move'),\n              label: 'Cursor mode - click and drag to move',\n              icon: CursorMove,\n              type: 'radio',\n              checked: model.cursorMode === 'move',\n            },\n            {\n              onClick: () => model.setCursorMode('crosshair'),\n              label: 'Cursor mode - select region',\n              icon: CursorMouse,\n              type: 'radio',\n              checked: model.cursorMode === 'crosshair',\n            },\n          ]}\n          onClose={() => setMenuAnchorEl(undefined)}\n        />\n      ) : null}\n    </div>\n  )\n})\nconst Warnings = observer(({ model }: { model: DotplotViewModel }) => {\n  const tracksWithWarnings = model.tracks.filter(\n    t => t.displays[0].warnings?.length,\n  )\n  const [shown, setShown] = useState(false)\n  return tracksWithWarnings.length ? (\n    <Alert severity=\"warning\">\n      Warnings during render{' '}\n      <Button onClick={() => setShown(true)}>More info</Button>\n      {shown ? (\n        <WarningDialog\n          tracksWithWarnings={tracksWithWarnings}\n          handleClose={() => setShown(false)}\n        />\n      ) : null}\n    </Alert>\n  ) : null\n})\n\nconst Header = observer(\n  ({\n    model,\n    selection,\n  }: {\n    model: DotplotViewModel\n    selection?: { width: number; height: number }\n  }) => {\n    const { classes } = useStyles()\n    const { hview, vview } = model\n    return (\n      <div className={classes.headerBar}>\n        <DotplotControls model={model} />\n        <Typography\n          className={classes.bp}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >\n          x: {hview.assemblyNames.join(',')} {getBpDisplayStr(hview.currBp)}\n          <br />\n          y: {vview.assemblyNames.join(',')} {getBpDisplayStr(vview.currBp)}\n        </Typography>\n        {selection ? (\n          <Typography\n            className={classes.bp}\n            variant=\"body2\"\n            color=\"textSecondary\"\n          >\n            {`width:${getBpDisplayStr(hview.bpPerPx * selection.width)}`} <br />\n            {`height:${getBpDisplayStr(vview.bpPerPx * selection.height)}`}\n          </Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        <Warnings model={model} />\n      </div>\n    )\n  },\n)\nexport default Header\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { DotplotViewModel } from '../model'\n\nfunction Grid({\n  model,\n  children,\n  stroke = '#0003',\n}: {\n  model: DotplotViewModel\n  children: React.ReactNode\n  stroke?: string\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0]?.offsetPx - hview.offsetPx\n  const vbottom = vblocks[0]?.offsetPx - vview.offsetPx\n\n  // Uses math.max/math.min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n  return (\n    <svg\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n      width={viewWidth}\n      height={viewHeight}\n    >\n      <rect x={rx} y={ry} width={w} height={h} fill=\"#fff\" />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          return (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              stroke={stroke}\n            />\n          )\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          return (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              stroke={stroke}\n            />\n          )\n        })}\n        <line x1={htop} y1={0} x2={htop} y2={viewHeight} stroke={stroke} />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          stroke={stroke}\n        />\n      </g>\n      {children}\n    </svg>\n  )\n}\nexport default observer(Grid)\n","import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getBlockLabelKeysToHide } from './util'\nimport { getTickDisplayStr } from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  majorTickLabel: {\n    fontSize: '11px',\n  },\n  majorTick: {\n    stroke: '#555',\n  },\n  minorTick: {\n    stroke: '#999',\n  },\n}))\n\nexport const HorizontalAxis = observer(\n  ({ model }: { model: DotplotViewModel }) => {\n    const { classes } = useStyles()\n    const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n    const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n    const dblocks = dynamicBlocks.contentBlocks\n    const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n    const hviewSnap = {\n      ...getSnapshot(hview),\n      width,\n      staticBlocks: hview.staticBlocks,\n    }\n    return (\n      <svg width={viewWidth} height={borderY} className={classes.htext}>\n        {dblocks\n          .filter(region => !hide.includes(region.key))\n          .map(region => {\n            const x = region.offsetPx\n            const y = 0\n            const xoff = x - hview.offsetPx\n            return (\n              <text\n                transform={`rotate(${htextRotation},${xoff},${y})`}\n                key={JSON.stringify(region)}\n                x={xoff}\n                y={y + 1}\n                fill=\"#000000\"\n                dominantBaseline=\"hanging\"\n                textAnchor=\"end\"\n              >\n                {[\n                  region.refName,\n                  region.start !== 0 ? Math.floor(region.start) : '',\n                ]\n                  .filter(f => !!f)\n                  .join(':')}\n              </text>\n            )\n          })}\n        {hticks.map(tick => {\n          const x =\n            (bpToPx({\n              refName: tick.refName,\n              coord: tick.base,\n              self: hviewSnap,\n            })?.offsetPx || 0) - offsetPx\n          return (\n            <line\n              key={`line-${JSON.stringify(tick)}`}\n              x1={x}\n              x2={x}\n              y1={0}\n              y2={tick.type === 'major' ? 6 : 4}\n              strokeWidth={1}\n              stroke={tick.type === 'major' ? '#555' : '#999'}\n              className={\n                tick.type === 'major' ? classes.majorTick : classes.minorTick\n              }\n              data-bp={tick.base}\n            />\n          )\n        })}\n        {hticks\n          .filter(tick => tick.type === 'major')\n          .map(tick => {\n            const x =\n              (bpToPx({\n                refName: tick.refName,\n                coord: tick.base,\n                self: hviewSnap,\n              })?.offsetPx || 0) - offsetPx\n            const y = 0\n            return (\n              <text\n                x={x - 7}\n                y={y}\n                transform={`rotate(${htextRotation},${x},${y})`}\n                key={`text-${JSON.stringify(tick)}`}\n                style={{ fontSize: '11px' }}\n                className={classes.majorTickLabel}\n                dominantBaseline=\"middle\"\n                textAnchor=\"end\"\n              >\n                {getTickDisplayStr(tick.base + 1, bpPerPx)}\n              </text>\n            )\n          })}\n        {hview.assemblyNames.length === 1 ? (\n          <text\n            y={borderY - 12}\n            x={(viewWidth - borderX) / 2}\n            fill=\"black\"\n            textAnchor=\"middle\"\n          >\n            {hview.assemblyNames[0]}\n          </text>\n        ) : null}\n      </svg>\n    )\n  },\n)\nexport const VerticalAxis = observer(\n  ({ model }: { model: DotplotViewModel }) => {\n    const { classes } = useStyles()\n    const { borderX, viewHeight, borderY, vview, vtextRotation, vticks } = model\n    const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n    const dblocks = dynamicBlocks.contentBlocks\n    const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n    const vviewSnap = {\n      ...getSnapshot(vview),\n      width,\n      staticBlocks: vview.staticBlocks,\n    }\n    return (\n      <svg className={classes.vtext} width={borderX} height={viewHeight}>\n        {dblocks\n          .filter(region => !hide.includes(region.key))\n          .map(region => {\n            const y = region.offsetPx\n            const x = borderX\n            return (\n              <text\n                transform={`rotate(${vtextRotation},${x},${y})`}\n                key={JSON.stringify(region)}\n                x={x}\n                y={viewHeight - y + offsetPx}\n                fill=\"#000000\"\n                textAnchor=\"end\"\n              >\n                {[\n                  region.refName,\n                  region.start !== 0 ? Math.floor(region.start) : '',\n                ]\n                  .filter(f => !!f)\n                  .join(':')}\n              </text>\n            )\n          })}\n        {vticks.map(tick => {\n          const y =\n            (bpToPx({\n              refName: tick.refName,\n              coord: tick.base,\n              self: vviewSnap,\n            })?.offsetPx || 0) - offsetPx\n          return (\n            <line\n              key={`line-${JSON.stringify(tick)}`}\n              y1={viewHeight - y}\n              y2={viewHeight - y}\n              x1={borderX}\n              x2={borderX - (tick.type === 'major' ? 6 : 4)}\n              strokeWidth={1}\n              stroke={tick.type === 'major' ? '#555' : '#999'}\n              className={\n                tick.type === 'major' ? classes.majorTick : classes.minorTick\n              }\n              data-bp={tick.base}\n            />\n          )\n        })}\n        {vticks\n          .filter(tick => tick.type === 'major')\n          .map(tick => {\n            const y =\n              (bpToPx({\n                refName: tick.refName,\n                coord: tick.base,\n                self: vviewSnap,\n              })?.offsetPx || 0) - offsetPx\n            return (\n              <text\n                y={viewHeight - y - 3}\n                x={borderX - 7}\n                key={`text-${JSON.stringify(tick)}`}\n                textAnchor=\"end\"\n                dominantBaseline=\"hanging\"\n                style={{ fontSize: '11px' }}\n                className={classes.majorTickLabel}\n              >\n                {getTickDisplayStr(tick.base + 1, bpPerPx)}\n              </text>\n            )\n          })}\n        {vview.assemblyNames.length === 1 ? (\n          <text\n            y={(viewHeight - borderY) / 2}\n            x={12}\n            transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n            textAnchor=\"middle\"\n          >\n            {vview.assemblyNames[0]}\n          </text>\n        ) : null}\n      </svg>\n    )\n  },\n)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { LoadingEllipses, Menu, ResizeHandle } from '@jbrowse/core/ui'\nimport { observer } from 'mobx-react'\nimport { transaction } from 'mobx'\nimport { makeStyles } from 'tss-react/mui'\nimport normalizeWheel from 'normalize-wheel'\n\n// locals\nimport { DotplotViewModel } from '../model'\nimport { locstr } from './util'\nimport ImportForm from './ImportForm'\nimport Header from './Header'\nimport Grid from './Grid'\nimport { HorizontalAxis, VerticalAxis } from './Axes'\n\nconst blank = { left: 0, top: 0, width: 0, height: 0 }\n\nconst useStyles = makeStyles()(theme => ({\n  spacer: {\n    gridColumn: '1/2',\n    gridRow: '2/2',\n  },\n  root: {\n    position: 'relative',\n    marginBottom: theme.spacing(1),\n    overflow: 'hidden',\n  },\n\n  container: {\n    display: 'grid',\n    padding: 5,\n    position: 'relative',\n  },\n  overlay: {\n    pointerEvents: 'none',\n    overflow: 'hidden',\n    display: 'flex',\n    width: '100%',\n    gridRow: '1/2',\n    gridColumn: '2/2',\n    zIndex: 100, // needs to be below controls\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n\n  content: {\n    position: 'relative',\n    gridColumn: '2/2',\n    gridRow: '1/2',\n  },\n\n  popover: {\n    background: '#fff',\n    maxWidth: 400,\n    wordBreak: 'break-all',\n    zIndex: 1000,\n    border: '1px solid black',\n    pointerEvents: 'none',\n    position: 'absolute',\n  },\n}))\n\ntype Coord = [number, number] | undefined\ntype Rect = { left: number; top: number }\n\n// produces offsetX/offsetY coordinates from a clientX and an element's\n// getBoundingClientRect\nfunction getOffset(coord: Coord, rect: Rect) {\n  return coord && ([coord[0] - rect.left, coord[1] - rect.top] as Coord)\n}\n\nconst RenderedComponent = observer(({ model }: { model: DotplotViewModel }) => {\n  const { classes } = useStyles()\n  return (\n    <div className={classes.overlay}>\n      {model.tracks.map(track => {\n        const [display] = track.displays\n        const { RenderingComponent } = display\n        return RenderingComponent ? (\n          <RenderingComponent\n            key={track.configuration.trackId}\n            model={display}\n          />\n        ) : null\n      })}\n    </div>\n  )\n})\n\nconst TooltipWhereMouseovered = observer(\n  ({\n    model,\n    mouserect,\n    xdistance,\n    ydistance,\n  }: {\n    model: DotplotViewModel\n    mouserect: Coord\n    xdistance: number\n    ydistance: number\n  }) => {\n    const { classes } = useStyles()\n    const { hview, vview, viewHeight } = model\n    const ref = useRef<HTMLDivElement>(null)\n    const rect = ref.current?.getBoundingClientRect() || blank\n    const offset = 6\n    const w = rect.height + offset * 2\n    return (\n      <>\n        {mouserect ? (\n          <div\n            ref={ref}\n            className={classes.popover}\n            style={{\n              left: offset + mouserect[0] - (xdistance < 0 ? w : 0),\n              top: offset + mouserect[1] - (ydistance < 0 ? w : 0),\n            }}\n          >\n            {`x - ${locstr(mouserect[0], hview)}`}\n            <br />\n            {`y - ${locstr(viewHeight - mouserect[1], vview)}`}\n            <br />\n          </div>\n        ) : null}\n      </>\n    )\n  },\n)\nconst TooltipWhereClicked = observer(\n  ({\n    model,\n    mousedown,\n    xdistance,\n    ydistance,\n  }: {\n    model: DotplotViewModel\n    mousedown: Coord\n    xdistance: number\n    ydistance: number\n  }) => {\n    const { classes } = useStyles()\n    const { hview, vview, viewHeight } = model\n    const ref = useRef<HTMLDivElement>(null)\n    const rect = ref.current?.getBoundingClientRect() || blank\n    return (\n      <>\n        {mousedown && Math.abs(xdistance) > 3 && Math.abs(ydistance) > 3 ? (\n          <div\n            ref={ref}\n            className={classes.popover}\n            style={{\n              left: mousedown[0] - (xdistance < 0 ? 0 : rect.width),\n              top: mousedown[1] - (ydistance < 0 ? 0 : rect.height),\n            }}\n          >\n            {`x - ${locstr(mousedown[0], hview)}`}\n            <br />\n            {`y - ${locstr(viewHeight - mousedown[1], vview)}`}\n            <br />\n          </div>\n        ) : null}\n      </>\n    )\n  },\n)\n\nconst DotplotViewInternal = observer(\n  ({ model }: { model: DotplotViewModel }) => {\n    const { cursorMode } = model\n    const { classes } = useStyles()\n    const [mousecurrClient, setMouseCurrClient] = useState<Coord>()\n    const [mousedownClient, setMouseDownClient] = useState<Coord>()\n    const [mouseOvered, setMouseOvered] = useState(false)\n    const [mouseupClient, setMouseUpClient] = useState<Coord>()\n    const ref = useRef<HTMLDivElement>(null)\n    const root = useRef<HTMLDivElement>(null)\n    const distanceX = useRef(0)\n    const distanceY = useRef(0)\n    const scheduled = useRef(false)\n    const svg = ref.current?.getBoundingClientRect() || blank\n    const mousedown = getOffset(mousedownClient, svg)\n    const mousecurr = getOffset(mousecurrClient, svg)\n    const mouseup = getOffset(mouseupClient, svg)\n    const mouserect = mouseup || mousecurr\n    const xdistance = mousedown && mouserect ? mouserect[0] - mousedown[0] : 0\n    const ydistance = mousedown && mouserect ? mouserect[1] - mousedown[1] : 0\n\n    // use non-React wheel handler to properly prevent body scrolling\n    useEffect(() => {\n      function onWheel(origEvent: WheelEvent) {\n        const event = normalizeWheel(origEvent)\n        origEvent.preventDefault()\n\n        distanceX.current += event.pixelX\n        distanceY.current -= event.pixelY\n        if (!scheduled.current) {\n          scheduled.current = true\n\n          window.requestAnimationFrame(() => {\n            transaction(() => {\n              model.hview.scroll(distanceX.current)\n              model.vview.scroll(distanceY.current)\n            })\n            scheduled.current = false\n            distanceX.current = 0\n            distanceY.current = 0\n          })\n        }\n      }\n      if (ref.current) {\n        const curr = ref.current\n        curr.addEventListener('wheel', onWheel)\n        return () => curr.removeEventListener('wheel', onWheel)\n      }\n      return () => {}\n    }, [model.hview, model.vview])\n\n    useEffect(() => {\n      function globalMouseMove(event: MouseEvent) {\n        setMouseCurrClient([event.clientX, event.clientY])\n\n        if (mousecurrClient && mousedownClient && cursorMode === 'move') {\n          model.hview.scroll(-event.clientX + mousecurrClient[0])\n          model.vview.scroll(event.clientY - mousecurrClient[1])\n        }\n      }\n\n      window.addEventListener('mousemove', globalMouseMove)\n      return () => window.removeEventListener('mousemove', globalMouseMove)\n    }, [mousecurrClient, mousedownClient, cursorMode, model.hview, model.vview])\n\n    // detect a mouseup after a mousedown was submitted, autoremoves mouseup\n    // once that single mouseup is set\n    useEffect(() => {\n      let cleanup = () => {}\n\n      function globalMouseUp(event: MouseEvent) {\n        if (\n          Math.abs(xdistance) > 3 &&\n          Math.abs(ydistance) > 3 &&\n          cursorMode === 'crosshair'\n        ) {\n          setMouseUpClient([event.clientX, event.clientY])\n        } else {\n          setMouseDownClient(undefined)\n        }\n      }\n\n      if (mousedown && !mouseup) {\n        window.addEventListener('mouseup', globalMouseUp, true)\n        cleanup = () =>\n          window.removeEventListener('mouseup', globalMouseUp, true)\n      }\n      return cleanup\n    }, [mousedown, mousecurr, mouseup, xdistance, ydistance, cursorMode])\n\n    return (\n      <div>\n        <Header\n          model={model}\n          selection={\n            cursorMode === 'move' || !(mousedown && mouserect)\n              ? undefined\n              : {\n                  width: Math.abs(xdistance),\n                  height: Math.abs(ydistance),\n                }\n          }\n        />\n        <div\n          ref={root}\n          className={classes.root}\n          onMouseLeave={() => setMouseOvered(false)}\n          onMouseEnter={() => setMouseOvered(true)}\n        >\n          <div\n            className={classes.container}\n            style={{\n              transform: `scaleX(${model.hview.scaleFactor}) scaleY(${model.vview.scaleFactor})`,\n            }}\n          >\n            <VerticalAxis model={model} />\n            <HorizontalAxis model={model} />\n            <div ref={ref} className={classes.content}>\n              {mouseOvered && cursorMode === 'crosshair' ? (\n                <TooltipWhereMouseovered\n                  model={model}\n                  mouserect={mouserect}\n                  xdistance={xdistance}\n                  ydistance={ydistance}\n                />\n              ) : null}\n              {cursorMode === 'crosshair' ? (\n                <TooltipWhereClicked\n                  model={model}\n                  mousedown={mousedown}\n                  xdistance={xdistance}\n                  ydistance={ydistance}\n                />\n              ) : null}\n              <div\n                style={{ cursor: cursorMode }}\n                onMouseDown={event => {\n                  if (event.button === 0) {\n                    setMouseDownClient([event.clientX, event.clientY])\n                    setMouseCurrClient([event.clientX, event.clientY])\n                  }\n                }}\n              >\n                <Grid model={model}>\n                  {cursorMode === 'crosshair' && mousedown && mouserect ? (\n                    <rect\n                      fill=\"rgba(255,0,0,0.3)\"\n                      x={Math.min(mouserect[0], mousedown[0])}\n                      y={Math.min(mouserect[1], mousedown[1])}\n                      width={Math.abs(xdistance)}\n                      height={Math.abs(ydistance)}\n                    />\n                  ) : null}\n                </Grid>\n              </div>\n              <div className={classes.spacer} />\n            </div>\n            <RenderedComponent model={model} />\n            <Menu\n              open={Boolean(mouseup)}\n              onMenuItemClick={(_, callback) => {\n                callback()\n                setMouseUpClient(undefined)\n                setMouseDownClient(undefined)\n              }}\n              onClose={() => {\n                setMouseUpClient(undefined)\n                setMouseDownClient(undefined)\n              }}\n              anchorReference=\"anchorPosition\"\n              anchorPosition={\n                mouseupClient\n                  ? {\n                      top: mouseupClient[1] + 30,\n                      left: mouseupClient[0] + 30,\n                    }\n                  : undefined\n              }\n              style={{ zIndex: 10000 }}\n              menuItems={[\n                {\n                  label: 'Zoom in',\n                  onClick: () => {\n                    if (mousedown && mouseup) {\n                      model.zoomIn(mousedown, mouseup)\n                    }\n                  },\n                },\n                {\n                  label: 'Open linear synteny view',\n                  onClick: () => {\n                    if (mousedown && mouseup) {\n                      model.onDotplotView(mousedown, mouseup)\n                    }\n                  },\n                },\n              ]}\n            />\n          </div>\n          <ResizeHandle\n            onDrag={n => model.setHeight(model.height + n)}\n            style={{\n              height: 4,\n              background: '#ccc',\n              boxSizing: 'border-box',\n              borderTop: '1px solid #fafafa',\n            }}\n          />\n        </div>\n      </div>\n    )\n  },\n)\nconst DotplotView = observer(({ model }: { model: DotplotViewModel }) => {\n  const { initialized, loading, error } = model\n\n  if ((!initialized && !loading) || error) {\n    return <ImportForm model={model} />\n  }\n\n  if (loading) {\n    return <LoadingEllipses variant=\"h5\" />\n  }\n\n  return <DotplotViewInternal model={model} />\n})\n\nexport default DotplotView\n"],"names":["getAdapter","radioOption","assembly1","assembly2","fileLocation","bed1Location","bed2Location","type","pafLocation","queryAssembly","targetAssembly","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","assemblyNames","mcscanSimpleAnchorsLocation","Error","observer","sessionTrackData","setSessionTrackData","useState","setBed2Location","setBed1Location","setFileLocation","value","setValue","error","setError","fileName","uri","localPath","name","undefined","getName","path","endsWith","slice","length","stripGz","useEffect","fn","trackId","Date","now","adapter","e","console","Paper","style","padding","ErrorMessage","Typography","textAlign","RadioGroup","onChange","event","target","Grid","container","justifyContent","item","FormControlLabel","control","Radio","label","margin","href","display","FileSelector","description","location","setLocation","loc","model","setShowTrackId","session","getSession","tracks","sessionTracks","filteredTracks","filter","t","track","readConfObject","includes","f","resetTrack","paragraph","Select","map","MenuItem","getTrackName","useStyles","makeStyles","theme","importFormContainer","spacing","assemblySelector","width","classes","setAssembly2","setAssembly1","showTrackId","choice","setChoice","displayError","Container","className","alignItems","AssemblySelector","extra","selected","val","FormControl","Button","onClick","isSessionWithAddTracks","transaction","addTrackConf","toggleTrack","showTrack","setViews","bpPerPx","offsetPx","setAssemblyNames","variant","color","FormLabel","id","row","ImportCustomTrack","ImportSyntenyTrackSelector","CursorMove","props","SvgIcon","fill","d","CursorMouse","WarningDialog","lazy","iconButton","bp","marginLeft","spacer","flexGrow","headerBar","DotplotControls","menuAnchorEl","setMenuAnchorEl","IconButton","zoomOutButton","ZoomOut","Z","zoomInButton","title","ZoomIn","activateTrackSelector","currentTarget","MoreVert","Menu","anchorEl","open","onMenuItemClick","_event","callback","menuItems","squareView","squareViewProportional","setDrawCigar","drawCigar","checked","setCursorMode","icon","cursorMode","onClose","Warnings","tracksWithWarnings","displays","warnings","shown","setShown","Alert","severity","handleClose","selection","hview","vview","join","getBpDisplayStr","currBp","height","children","stroke","viewWidth","viewHeight","hblocks","dynamicBlocks","contentBlocks","vblocks","htop","displayedRegionsTotalPx","vtop","hbottom","vbottom","rx","Math","max","ry","w","min","h","background","x","y","region","x1","y1","x2","y2","JSON","stringify","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","majorTickLabel","fontSize","majorTick","minorTick","HorizontalAxis","borderX","borderY","htextRotation","hticks","dblocks","hide","getBlockLabelKeysToHide","hviewSnap","getSnapshot","staticBlocks","key","xoff","transform","dominantBaseline","textAnchor","refName","start","floor","tick","bpToPx","coord","base","self","strokeWidth","getTickDisplayStr","VerticalAxis","vtextRotation","vticks","vviewSnap","blank","left","top","root","position","marginBottom","overflow","overlay","zIndex","cursor","content","popover","maxWidth","wordBreak","border","getOffset","rect","RenderedComponent","RenderingComponent","configuration","TooltipWhereMouseovered","mouserect","xdistance","ydistance","ref","useRef","current","getBoundingClientRect","offset","locstr","TooltipWhereClicked","mousedown","abs","DotplotViewInternal","mousecurrClient","setMouseCurrClient","mousedownClient","setMouseDownClient","mouseOvered","setMouseOvered","mouseupClient","setMouseUpClient","distanceX","distanceY","scheduled","svg","mousecurr","mouseup","onWheel","origEvent","normalizeWheel","preventDefault","pixelX","pixelY","window","requestAnimationFrame","scroll","curr","addEventListener","removeEventListener","globalMouseMove","clientX","clientY","cleanup","globalMouseUp","onMouseLeave","onMouseEnter","scaleFactor","onMouseDown","button","Boolean","_","anchorReference","anchorPosition","zoomIn","onDotplotView","ResizeHandle","onDrag","n","setHeight","boxSizing","borderTop","initialized","loading","ImportForm","LoadingEllipses"],"sourceRoot":""}