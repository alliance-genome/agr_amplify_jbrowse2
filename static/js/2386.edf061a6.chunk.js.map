{"version":3,"file":"static/js/2386.edf061a6.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["const decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\n/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(buffer: Buffer) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n\n  let blockStart = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const l = (decoder?.decode(b) || b.toString()).trim()\n    blockStart = n + 1\n    const l_tab = l.replaceAll(' ', '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return paf_chain2paf(buf)\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["decoder","TextDecoder","undefined","generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","paf_chain2paf","buffer","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","blockStart","length","n","indexOf","b","slice","l_vec","decode","toString","trim","replaceAll","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","isGzip","buf","ChainAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","loc","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","abrupt","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","i","entry","quals","len","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","meanScore","min","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","line","_line$split","_line$split2","_toArray","fields","rest","field","r","_objectSpread","flipCigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_this2","setupPre","catch","e","_callee2","pm","pafLocation","_context2","parseLineByLine","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_iterator","_step","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","_createForOfIteratorHelper","s","done","add","err","f","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","_objectWithoutProperties","_excluded","join","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","fatal","t1","t2","a","cb"],"sourceRoot":""}