{"version":3,"file":"static/js/4958.4c2337cc.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/bbi/src/bigint-polyfill/pure.ts","../../../node_modules/@gmod/bbi/src/bigint-polyfill/polyfill.ts","../../../node_modules/binary-parser/lib/binary_parser.ts","../../../node_modules/@gmod/bbi/src/range.ts","../../../node_modules/@gmod/bbi/src/util.ts","../../../node_modules/@gmod/bbi/src/block-view.ts","../../../node_modules/@gmod/bbi/src/unzip-pako.ts","../../../node_modules/@gmod/bbi/src/bbi.ts","../../../node_modules/@gmod/bbi/src/bigwig.ts","../../../node_modules/@gmod/bbi/src/bigbed.ts"],"sourcesContent":["const BigInt32 = BigInt(32)\n\nexport function getBigInt64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  return (\n    (BigInt(\n      dataView.getInt32(byteOffset, littleEndian) * bigEndianMask +\n        dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask,\n    ) <<\n      BigInt32) |\n    BigInt(\n      dataView.getUint32(byteOffset, littleEndian) * littleEndianMask +\n        dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask,\n    )\n  )\n}\n\nexport function getBigUint64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const a = dataView.getUint32(byteOffset, littleEndian)\n  const b = dataView.getUint32(byteOffset + 4, littleEndian)\n\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  // This branch-less optimization is 77x faster than normal ternary operator.\n  // and only 3% slower than native implementation\n  // https://jsbench.me/p8kyhg1eqv/1\n  return (\n    (BigInt(a * bigEndianMask + b * littleEndianMask) << BigInt32) |\n    BigInt(a * littleEndianMask + b * bigEndianMask)\n  )\n}\n\nexport function setBigInt64(\n  dataView: DataView,\n  byteOffset: number,\n  value: bigint,\n  littleEndian: boolean | undefined,\n) {\n  const hi = Number(value >> BigInt32)\n  const lo = Number(value & BigInt(0xffffffff))\n\n  if (littleEndian) {\n    dataView.setInt32(byteOffset + 4, hi, littleEndian)\n    dataView.setUint32(byteOffset, lo, littleEndian)\n  } else {\n    dataView.setInt32(byteOffset, hi, littleEndian)\n    dataView.setUint32(byteOffset + 4, lo, littleEndian)\n  }\n}\n\nexport function setBigUint64(\n  dataView: DataView,\n  byteOffset: number,\n  value: bigint,\n  littleEndian: boolean | undefined,\n) {\n  const hi = Number(value >> BigInt32)\n  const lo = Number(value & BigInt(0xffffffff))\n\n  if (littleEndian) {\n    dataView.setUint32(byteOffset + 4, hi, littleEndian)\n    dataView.setUint32(byteOffset, lo, littleEndian)\n  } else {\n    dataView.setUint32(byteOffset, hi, littleEndian)\n    dataView.setUint32(byteOffset + 4, lo, littleEndian)\n  }\n}\n","import { getBigInt64, getBigUint64, setBigInt64, setBigUint64 } from './pure'\n\nif (!('getBigInt64' in DataView)) {\n  DataView.prototype.getBigInt64 = function (byteOffset, littleEndian) {\n    return getBigInt64(this, byteOffset, littleEndian)\n  }\n}\n\nif (!('getBigUint64' in DataView)) {\n  DataView.prototype.getBigUint64 = function (byteOffset, littleEndian) {\n    return getBigUint64(this, byteOffset, littleEndian)\n  }\n}\n\nif (!('setBigInt64' in DataView)) {\n  DataView.prototype.setBigInt64 = function (byteOffset, value, littleEndian) {\n    setBigInt64(this, byteOffset, value, littleEndian)\n  }\n}\n\nif (!('setBigUint64' in DataView)) {\n  DataView.prototype.setBigUint64 = function (byteOffset, value, littleEndian) {\n    setBigUint64(this, byteOffset, value, littleEndian)\n  }\n}\n","class Context {\n  code = \"\";\n  scopes = [[\"vars\"]];\n  bitFields: Parser[] = [];\n  tmpVariableCount = 0;\n  references = new Map<string, { resolved: boolean; requested: boolean }>();\n  importPath: string;\n  imports: any[] = [];\n  reverseImports = new Map<any, number>();\n  useContextVariables = false;\n\n  constructor(importPath: string, useContextVariables: boolean) {\n    this.importPath = importPath;\n    this.useContextVariables = useContextVariables;\n  }\n\n  generateVariable(name?: string): string {\n    const scopes = [...this.scopes[this.scopes.length - 1]];\n    if (name) {\n      scopes.push(name);\n    }\n\n    return scopes.join(\".\");\n  }\n\n  generateOption(val: number | string | Function): string {\n    switch (typeof val) {\n      case \"number\":\n        return val.toString();\n      case \"string\":\n        return this.generateVariable(val);\n      case \"function\":\n        return `${this.addImport(val)}.call(${this.generateVariable()}, vars)`;\n    }\n  }\n\n  generateError(err: string) {\n    this.pushCode(`throw new Error(${err});`);\n  }\n\n  generateTmpVariable(): string {\n    return \"$tmp\" + this.tmpVariableCount++;\n  }\n\n  pushCode(code: string) {\n    this.code += code + \"\\n\";\n  }\n\n  pushPath(name: string) {\n    if (name) {\n      this.scopes[this.scopes.length - 1].push(name);\n    }\n  }\n\n  popPath(name: string) {\n    if (name) {\n      this.scopes[this.scopes.length - 1].pop();\n    }\n  }\n\n  pushScope(name: string) {\n    this.scopes.push([name]);\n  }\n\n  popScope() {\n    this.scopes.pop();\n  }\n\n  addImport(im: any): string {\n    if (!this.importPath) return `(${im})`;\n    let id = this.reverseImports.get(im);\n    if (!id) {\n      id = this.imports.push(im) - 1;\n      this.reverseImports.set(im, id);\n    }\n    return `${this.importPath}[${id}]`;\n  }\n\n  addReference(alias: string) {\n    if (!this.references.has(alias)) {\n      this.references.set(alias, { resolved: false, requested: false });\n    }\n  }\n\n  markResolved(alias: string) {\n    const reference = this.references.get(alias);\n\n    if (reference) {\n      reference.resolved = true;\n    }\n  }\n\n  markRequested(aliasList: string[]) {\n    aliasList.forEach((alias) => {\n      const reference = this.references.get(alias);\n\n      if (reference) {\n        reference.requested = true;\n      }\n    });\n  }\n\n  getUnresolvedReferences(): string[] {\n    return Array.from(this.references)\n      .filter(([_, reference]) => !reference.resolved && !reference.requested)\n      .map(([alias, _]) => alias);\n  }\n}\n\nconst aliasRegistry = new Map<string, Parser>();\nconst FUNCTION_PREFIX = \"___parser_\";\n\ninterface ParserOptions {\n  length?: number | string | ((item: any) => number);\n  assert?: number | string | ((item: number | string) => boolean);\n  lengthInBytes?: number | string | ((item: any) => number);\n  type?: string | Parser;\n  formatter?: (item: any) => any;\n  encoding?: string;\n  readUntil?: \"eof\" | ((item: any, buffer: Buffer) => boolean);\n  greedy?: boolean;\n  choices?: { [key: number]: string | Parser };\n  defaultChoice?: string | Parser;\n  zeroTerminated?: boolean;\n  clone?: boolean;\n  stripNull?: boolean;\n  key?: string;\n  tag?: string | ((item: any) => number);\n  offset?: number | string | ((item: any) => number);\n  wrapper?: (buffer: Buffer) => Buffer;\n}\n\ntype Types = PrimitiveTypes | ComplexTypes;\n\ntype ComplexTypes =\n  | \"bit\"\n  | \"string\"\n  | \"buffer\"\n  | \"array\"\n  | \"choice\"\n  | \"nest\"\n  | \"seek\"\n  | \"pointer\"\n  | \"saveOffset\"\n  | \"wrapper\"\n  | \"\";\n\ntype Endianness = \"be\" | \"le\";\n\ntype PrimitiveTypes =\n  | \"uint8\"\n  | \"uint16le\"\n  | \"uint16be\"\n  | \"uint32le\"\n  | \"uint32be\"\n  | \"uint64le\"\n  | \"uint64be\"\n  | \"int8\"\n  | \"int16le\"\n  | \"int16be\"\n  | \"int32le\"\n  | \"int32be\"\n  | \"int64le\"\n  | \"int64be\"\n  | \"floatle\"\n  | \"floatbe\"\n  | \"doublele\"\n  | \"doublebe\";\n\ntype PrimitiveTypesWithoutEndian =\n  | \"uint8\"\n  | \"uint16\"\n  | \"uint32\"\n  | \"int8\"\n  | \"int16\"\n  | \"int32\"\n  | \"int64\"\n  | \"uint64\";\n\ntype BitSizes =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28\n  | 29\n  | 30\n  | 31\n  | 32;\n\nconst PRIMITIVE_SIZES: { [key in PrimitiveTypes]: number } = {\n  uint8: 1,\n  uint16le: 2,\n  uint16be: 2,\n  uint32le: 4,\n  uint32be: 4,\n  int8: 1,\n  int16le: 2,\n  int16be: 2,\n  int32le: 4,\n  int32be: 4,\n  int64be: 8,\n  int64le: 8,\n  uint64be: 8,\n  uint64le: 8,\n  floatle: 4,\n  floatbe: 4,\n  doublele: 8,\n  doublebe: 8,\n};\n\nconst PRIMITIVE_NAMES: { [key in PrimitiveTypes]: string } = {\n  uint8: \"Uint8\",\n  uint16le: \"Uint16\",\n  uint16be: \"Uint16\",\n  uint32le: \"Uint32\",\n  uint32be: \"Uint32\",\n  int8: \"Int8\",\n  int16le: \"Int16\",\n  int16be: \"Int16\",\n  int32le: \"Int32\",\n  int32be: \"Int32\",\n  int64be: \"BigInt64\",\n  int64le: \"BigInt64\",\n  uint64be: \"BigUint64\",\n  uint64le: \"BigUint64\",\n  floatle: \"Float32\",\n  floatbe: \"Float32\",\n  doublele: \"Float64\",\n  doublebe: \"Float64\",\n};\n\nconst PRIMITIVE_LITTLE_ENDIANS: { [key in PrimitiveTypes]: boolean } = {\n  uint8: false,\n  uint16le: true,\n  uint16be: false,\n  uint32le: true,\n  uint32be: false,\n  int8: false,\n  int16le: true,\n  int16be: false,\n  int32le: true,\n  int32be: false,\n  int64be: false,\n  int64le: true,\n  uint64be: false,\n  uint64le: true,\n  floatle: true,\n  floatbe: false,\n  doublele: true,\n  doublebe: false,\n};\n\nexport class Parser {\n  varName = \"\";\n  type: Types = \"\";\n  options: ParserOptions = {};\n  next?: Parser;\n  head?: Parser;\n  compiled?: Function;\n  endian: Endianness = \"be\";\n  constructorFn?: Function;\n  alias?: string;\n  useContextVariables = false;\n\n  constructor() {}\n\n  static start() {\n    return new Parser();\n  }\n\n  private primitiveGenerateN(type: PrimitiveTypes, ctx: Context) {\n    const typeName = PRIMITIVE_NAMES[type];\n    const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type];\n    ctx.pushCode(\n      `${ctx.generateVariable(\n        this.varName\n      )} = dataView.get${typeName}(offset, ${littleEndian});`\n    );\n    ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type]};`);\n  }\n\n  private primitiveN(\n    type: PrimitiveTypes,\n    varName: string,\n    options: ParserOptions\n  ): this {\n    return this.setNextParser(type as Types, varName, options);\n  }\n\n  private useThisEndian(type: PrimitiveTypesWithoutEndian): PrimitiveTypes {\n    return (type + this.endian.toLowerCase()) as PrimitiveTypes;\n  }\n\n  uint8(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint8\", varName, options);\n  }\n\n  uint16(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"uint16\"), varName, options);\n  }\n\n  uint16le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint16le\", varName, options);\n  }\n\n  uint16be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint16be\", varName, options);\n  }\n\n  uint32(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"uint32\"), varName, options);\n  }\n\n  uint32le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint32le\", varName, options);\n  }\n\n  uint32be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint32be\", varName, options);\n  }\n\n  int8(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int8\", varName, options);\n  }\n\n  int16(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"int16\"), varName, options);\n  }\n\n  int16le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int16le\", varName, options);\n  }\n\n  int16be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int16be\", varName, options);\n  }\n\n  int32(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"int32\"), varName, options);\n  }\n\n  int32le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int32le\", varName, options);\n  }\n\n  int32be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int32be\", varName, options);\n  }\n\n  private bigIntVersionCheck() {\n    if (!DataView.prototype.getBigInt64)\n      throw new Error(\"BigInt64 is unsupported on this runtime\");\n  }\n\n  int64(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(this.useThisEndian(\"int64\"), varName, options);\n  }\n\n  int64be(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"int64be\", varName, options);\n  }\n\n  int64le(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"int64le\", varName, options);\n  }\n\n  uint64(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(this.useThisEndian(\"uint64\"), varName, options);\n  }\n\n  uint64be(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"uint64be\", varName, options);\n  }\n\n  uint64le(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"uint64le\", varName, options);\n  }\n\n  floatle(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"floatle\", varName, options);\n  }\n\n  floatbe(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"floatbe\", varName, options);\n  }\n\n  doublele(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"doublele\", varName, options);\n  }\n\n  doublebe(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"doublebe\", varName, options);\n  }\n\n  private bitN(size: BitSizes, varName: string, options: ParserOptions): this {\n    options.length = size;\n    return this.setNextParser(\"bit\", varName, options);\n  }\n\n  bit1(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(1, varName, options);\n  }\n\n  bit2(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(2, varName, options);\n  }\n\n  bit3(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(3, varName, options);\n  }\n\n  bit4(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(4, varName, options);\n  }\n\n  bit5(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(5, varName, options);\n  }\n\n  bit6(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(6, varName, options);\n  }\n\n  bit7(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(7, varName, options);\n  }\n\n  bit8(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(8, varName, options);\n  }\n\n  bit9(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(9, varName, options);\n  }\n\n  bit10(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(10, varName, options);\n  }\n\n  bit11(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(11, varName, options);\n  }\n\n  bit12(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(12, varName, options);\n  }\n\n  bit13(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(13, varName, options);\n  }\n\n  bit14(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(14, varName, options);\n  }\n\n  bit15(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(15, varName, options);\n  }\n\n  bit16(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(16, varName, options);\n  }\n\n  bit17(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(17, varName, options);\n  }\n\n  bit18(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(18, varName, options);\n  }\n\n  bit19(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(19, varName, options);\n  }\n\n  bit20(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(20, varName, options);\n  }\n\n  bit21(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(21, varName, options);\n  }\n\n  bit22(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(22, varName, options);\n  }\n\n  bit23(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(23, varName, options);\n  }\n\n  bit24(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(24, varName, options);\n  }\n\n  bit25(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(25, varName, options);\n  }\n\n  bit26(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(26, varName, options);\n  }\n\n  bit27(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(27, varName, options);\n  }\n\n  bit28(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(28, varName, options);\n  }\n\n  bit29(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(29, varName, options);\n  }\n\n  bit30(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(30, varName, options);\n  }\n\n  bit31(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(31, varName, options);\n  }\n\n  bit32(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(32, varName, options);\n  }\n\n  namely(alias: string): this {\n    aliasRegistry.set(alias, this);\n    this.alias = alias;\n    return this;\n  }\n\n  skip(length: ParserOptions[\"length\"], options: ParserOptions = {}): this {\n    return this.seek(length, options);\n  }\n\n  seek(relOffset: ParserOptions[\"length\"], options: ParserOptions = {}): this {\n    if (options.assert) {\n      throw new Error(\"assert option on seek is not allowed.\");\n    }\n\n    return this.setNextParser(\"seek\", \"\", { length: relOffset });\n  }\n\n  string(varName: string, options: ParserOptions): this {\n    if (!options.zeroTerminated && !options.length && !options.greedy) {\n      throw new Error(\n        \"One of length, zeroTerminated, or greedy must be defined for string.\"\n      );\n    }\n\n    if ((options.zeroTerminated || options.length) && options.greedy) {\n      throw new Error(\n        \"greedy is mutually exclusive with length and zeroTerminated for string.\"\n      );\n    }\n\n    if (options.stripNull && !(options.length || options.greedy)) {\n      throw new Error(\n        \"length or greedy must be defined if stripNull is enabled.\"\n      );\n    }\n\n    options.encoding = options.encoding || \"utf8\";\n\n    return this.setNextParser(\"string\", varName, options);\n  }\n\n  buffer(varName: string, options: ParserOptions): this {\n    if (!options.length && !options.readUntil) {\n      throw new Error(\"length or readUntil must be defined for buffer.\");\n    }\n\n    return this.setNextParser(\"buffer\", varName, options);\n  }\n\n  wrapped(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options || !options.wrapper || !options.type) {\n      throw new Error(\"Both wrapper and type must be defined for wrapped.\");\n    }\n\n    if (!options.length && !options.readUntil) {\n      throw new Error(\"length or readUntil must be defined for wrapped.\");\n    }\n\n    return this.setNextParser(\"wrapper\", varName as string, options);\n  }\n\n  array(varName: string, options: ParserOptions): this {\n    if (!options.readUntil && !options.length && !options.lengthInBytes) {\n      throw new Error(\n        \"One of readUntil, length and lengthInBytes must be defined for array.\"\n      );\n    }\n\n    if (!options.type) {\n      throw new Error(\"type is required for array.\");\n    }\n\n    if (\n      typeof options.type === \"string\" &&\n      !aliasRegistry.has(options.type) &&\n      !(options.type in PRIMITIVE_SIZES)\n    ) {\n      throw new Error(`Array element type \"${options.type}\" is unkown.`);\n    }\n\n    return this.setNextParser(\"array\", varName, options);\n  }\n\n  choice(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options) {\n      throw new Error(\"tag and choices are are required for choice.\");\n    }\n\n    if (!options.tag) {\n      throw new Error(\"tag is requird for choice.\");\n    }\n\n    if (!options.choices) {\n      throw new Error(\"choices is required for choice.\");\n    }\n\n    for (const keyString in options.choices) {\n      const key = parseInt(keyString, 10);\n      const value = options.choices[key];\n\n      if (isNaN(key)) {\n        throw new Error(`Choice key \"${keyString}\" is not a number.`);\n      }\n\n      if (\n        typeof value === \"string\" &&\n        !aliasRegistry.has(value) &&\n        !((value as string) in PRIMITIVE_SIZES)\n      ) {\n        throw new Error(`Choice type \"${value}\" is unkown.`);\n      }\n    }\n\n    return this.setNextParser(\"choice\", varName as string, options);\n  }\n\n  nest(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options || !options.type) {\n      throw new Error(\"type is required for nest.\");\n    }\n\n    if (!(options.type instanceof Parser) && !aliasRegistry.has(options.type)) {\n      throw new Error(\"type must be a known parser name or a Parser object.\");\n    }\n\n    if (!(options.type instanceof Parser) && !varName) {\n      throw new Error(\n        \"type must be a Parser object if the variable name is omitted.\"\n      );\n    }\n\n    return this.setNextParser(\"nest\", varName as string, options);\n  }\n\n  pointer(varName: string, options: ParserOptions): this {\n    if (!options.offset) {\n      throw new Error(\"offset is required for pointer.\");\n    }\n\n    if (!options.type) {\n      throw new Error(\"type is required for pointer.\");\n    }\n\n    if (\n      typeof options.type === \"string\" &&\n      !(options.type in PRIMITIVE_SIZES) &&\n      !aliasRegistry.has(options.type)\n    ) {\n      throw new Error(`Pointer type \"${options.type}\" is unkown.`);\n    }\n\n    return this.setNextParser(\"pointer\", varName, options);\n  }\n\n  saveOffset(varName: string, options: ParserOptions = {}): this {\n    return this.setNextParser(\"saveOffset\", varName, options);\n  }\n\n  endianness(endianness: \"little\" | \"big\"): this {\n    switch (endianness.toLowerCase()) {\n      case \"little\":\n        this.endian = \"le\";\n        break;\n      case \"big\":\n        this.endian = \"be\";\n        break;\n      default:\n        throw new Error('endianness must be one of \"little\" or \"big\"');\n    }\n\n    return this;\n  }\n\n  endianess(endianess: \"little\" | \"big\"): this {\n    return this.endianness(endianess);\n  }\n\n  useContextVars(useContextVariables = true): this {\n    this.useContextVariables = useContextVariables;\n\n    return this;\n  }\n\n  create(constructorFn: Function): this {\n    if (!(constructorFn instanceof Function)) {\n      throw new Error(\"Constructor must be a Function object.\");\n    }\n\n    this.constructorFn = constructorFn;\n\n    return this;\n  }\n\n  private getContext(importPath: string): Context {\n    const ctx = new Context(importPath, this.useContextVariables);\n\n    ctx.pushCode(\n      \"var dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);\"\n    );\n\n    if (!this.alias) {\n      this.addRawCode(ctx);\n    } else {\n      this.addAliasedCode(ctx);\n      ctx.pushCode(`return ${FUNCTION_PREFIX + this.alias}(0).result;`);\n    }\n\n    return ctx;\n  }\n\n  getCode(): string {\n    const importPath = \"imports\";\n    return this.getContext(importPath).code;\n  }\n\n  private addRawCode(ctx: Context) {\n    ctx.pushCode(\"var offset = 0;\");\n    ctx.pushCode(\n      `var vars = ${this.constructorFn ? \"new constructorFn()\" : \"{}\"};`\n    );\n\n    ctx.pushCode(\"vars.$parent = null;\");\n    ctx.pushCode(\"vars.$root = vars;\");\n\n    this.generate(ctx);\n    this.resolveReferences(ctx);\n\n    ctx.pushCode(\"delete vars.$parent;\");\n    ctx.pushCode(\"delete vars.$root;\");\n\n    ctx.pushCode(\"return vars;\");\n  }\n\n  private addAliasedCode(ctx: Context) {\n    ctx.pushCode(`function ${FUNCTION_PREFIX + this.alias}(offset, context) {`);\n    ctx.pushCode(\n      `var vars = ${this.constructorFn ? \"new constructorFn()\" : \"{}\"};`\n    );\n    ctx.pushCode(\n      \"var ctx = Object.assign({$parent: null, $root: vars}, context || {});\"\n    );\n    ctx.pushCode(`vars = Object.assign(vars, ctx);`);\n\n    this.generate(ctx);\n\n    ctx.markResolved(this.alias!);\n    this.resolveReferences(ctx);\n\n    ctx.pushCode(\n      \"Object.keys(ctx).forEach(function (item) { delete vars[item]; });\"\n    );\n    ctx.pushCode(\"return { offset: offset, result: vars };\");\n    ctx.pushCode(\"}\");\n\n    return ctx;\n  }\n\n  private resolveReferences(ctx: Context) {\n    const references = ctx.getUnresolvedReferences();\n    ctx.markRequested(references);\n    references.forEach((alias) => {\n      aliasRegistry.get(alias)?.addAliasedCode(ctx);\n    });\n  }\n\n  compile() {\n    const importPath = \"imports\";\n    const ctx = this.getContext(importPath);\n    this.compiled = new Function(\n      importPath,\n      \"TextDecoder\",\n      `return function (buffer, constructorFn) { ${ctx.code} };`\n    )(ctx.imports, TextDecoder);\n  }\n\n  sizeOf(): number {\n    let size = NaN;\n\n    if (Object.keys(PRIMITIVE_SIZES).indexOf(this.type) >= 0) {\n      size = PRIMITIVE_SIZES[this.type as PrimitiveTypes];\n\n      // if this is a fixed length string\n    } else if (\n      this.type === \"string\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      size = this.options.length;\n\n      // if this is a fixed length buffer\n    } else if (\n      this.type === \"buffer\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      size = this.options.length;\n\n      // if this is a fixed length array\n    } else if (\n      this.type === \"array\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      let elementSize = NaN;\n      if (typeof this.options.type === \"string\") {\n        elementSize = PRIMITIVE_SIZES[this.options.type as PrimitiveTypes];\n      } else if (this.options.type instanceof Parser) {\n        elementSize = this.options.type.sizeOf();\n      }\n      size = this.options.length * elementSize;\n\n      // if this a skip\n    } else if (this.type === \"seek\") {\n      size = this.options.length as number;\n\n      // if this is a nested parser\n    } else if (this.type === \"nest\") {\n      size = (this.options.type as Parser).sizeOf();\n    } else if (!this.type) {\n      size = 0;\n    }\n\n    if (this.next) {\n      size += this.next.sizeOf();\n    }\n\n    return size;\n  }\n\n  // Follow the parser chain till the root and start parsing from there\n  parse(buffer: Buffer | Uint8Array) {\n    if (!this.compiled) {\n      this.compile();\n    }\n\n    return this.compiled!(buffer, this.constructorFn);\n  }\n\n  private setNextParser(\n    type: Types,\n    varName: string,\n    options: ParserOptions\n  ): this {\n    const parser = new Parser();\n\n    parser.type = type;\n    parser.varName = varName;\n    parser.options = options;\n    parser.endian = this.endian;\n\n    if (this.head) {\n      this.head.next = parser;\n    } else {\n      this.next = parser;\n    }\n    this.head = parser;\n\n    return this;\n  }\n\n  // Call code generator for this parser\n  private generate(ctx: Context) {\n    if (this.type) {\n      switch (this.type) {\n        case \"uint8\":\n        case \"uint16le\":\n        case \"uint16be\":\n        case \"uint32le\":\n        case \"uint32be\":\n        case \"int8\":\n        case \"int16le\":\n        case \"int16be\":\n        case \"int32le\":\n        case \"int32be\":\n        case \"int64be\":\n        case \"int64le\":\n        case \"uint64be\":\n        case \"uint64le\":\n        case \"floatle\":\n        case \"floatbe\":\n        case \"doublele\":\n        case \"doublebe\":\n          this.primitiveGenerateN(this.type, ctx);\n          break;\n        case \"bit\":\n          this.generateBit(ctx);\n          break;\n        case \"string\":\n          this.generateString(ctx);\n          break;\n        case \"buffer\":\n          this.generateBuffer(ctx);\n          break;\n        case \"seek\":\n          this.generateSeek(ctx);\n          break;\n        case \"nest\":\n          this.generateNest(ctx);\n          break;\n        case \"array\":\n          this.generateArray(ctx);\n          break;\n        case \"choice\":\n          this.generateChoice(ctx);\n          break;\n        case \"pointer\":\n          this.generatePointer(ctx);\n          break;\n        case \"saveOffset\":\n          this.generateSaveOffset(ctx);\n          break;\n        case \"wrapper\":\n          this.generateWrapper(ctx);\n          break;\n      }\n      if (this.type !== \"bit\") this.generateAssert(ctx);\n    }\n\n    const varName = ctx.generateVariable(this.varName);\n    if (this.options.formatter && this.type !== \"bit\") {\n      this.generateFormatter(ctx, varName, this.options.formatter);\n    }\n\n    return this.generateNext(ctx);\n  }\n\n  private generateAssert(ctx: Context) {\n    if (!this.options.assert) {\n      return;\n    }\n\n    const varName = ctx.generateVariable(this.varName);\n\n    switch (typeof this.options.assert) {\n      case \"function\":\n        {\n          const func = ctx.addImport(this.options.assert);\n          ctx.pushCode(`if (!${func}.call(vars, ${varName})) {`);\n        }\n        break;\n      case \"number\":\n        ctx.pushCode(`if (${this.options.assert} !== ${varName}) {`);\n        break;\n      case \"string\":\n        ctx.pushCode(\n          `if (${JSON.stringify(this.options.assert)} !== ${varName}) {`\n        );\n        break;\n      default:\n        throw new Error(\n          \"assert option must be a string, number or a function.\"\n        );\n    }\n    ctx.generateError(\n      `\"Assertion error: ${varName} is \" + ${JSON.stringify(\n        this.options.assert.toString()\n      )}`\n    );\n    ctx.pushCode(\"}\");\n  }\n\n  // Recursively call code generators and append results\n  private generateNext(ctx: Context): Context {\n    if (this.next) {\n      ctx = this.next.generate(ctx);\n    }\n\n    return ctx;\n  }\n\n  private generateBit(ctx: Context) {\n    // TODO find better method to handle nested bit fields\n    const parser = JSON.parse(JSON.stringify(this));\n    parser.options = this.options;\n    parser.generateAssert = this.generateAssert.bind(this);\n    parser.generateFormatter = this.generateFormatter.bind(this);\n    parser.varName = ctx.generateVariable(parser.varName);\n    ctx.bitFields.push(parser);\n\n    if (\n      !this.next ||\n      (this.next && [\"bit\", \"nest\"].indexOf(this.next.type) < 0)\n    ) {\n      const val = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${val} = 0;`);\n\n      const getMaxBits = (from = 0) => {\n        let sum = 0;\n        for (let i = from; i < ctx.bitFields.length; i++) {\n          const length = ctx.bitFields[i].options.length as number;\n          if (sum + length > 32) break;\n          sum += length;\n        }\n        return sum;\n      };\n\n      const getBytes = (sum: number) => {\n        if (sum <= 8) {\n          ctx.pushCode(`${val} = dataView.getUint8(offset);`);\n          sum = 8;\n        } else if (sum <= 16) {\n          ctx.pushCode(`${val} = dataView.getUint16(offset);`);\n          sum = 16;\n        } else if (sum <= 24) {\n          ctx.pushCode(\n            `${val} = (dataView.getUint16(offset) << 8) | dataView.getUint8(offset + 2);`\n          );\n          sum = 24;\n        } else {\n          ctx.pushCode(`${val} = dataView.getUint32(offset);`);\n          sum = 32;\n        }\n        ctx.pushCode(`offset += ${sum / 8};`);\n        return sum;\n      };\n\n      let bitOffset = 0;\n      const isBigEndian = this.endian === \"be\";\n\n      let sum = 0;\n      let rem = 0;\n\n      ctx.bitFields.forEach((parser, i) => {\n        let length = parser.options.length as number;\n        if (length > rem) {\n          if (rem) {\n            const mask = -1 >>> (32 - rem);\n            ctx.pushCode(\n              `${parser.varName} = (${val} & 0x${mask.toString(16)}) << ${\n                length - rem\n              };`\n            );\n            length -= rem;\n          }\n          bitOffset = 0;\n          rem = sum = getBytes(getMaxBits(i) - rem);\n        }\n        const offset = isBigEndian ? sum - bitOffset - length : bitOffset;\n        const mask = -1 >>> (32 - length);\n\n        ctx.pushCode(\n          `${parser.varName} ${\n            length < (parser.options.length as number) ? \"|=\" : \"=\"\n          } ${val} >> ${offset} & 0x${mask.toString(16)};`\n        );\n\n        // Ensure value is unsigned\n        if ((parser.options.length as number) === 32) {\n          ctx.pushCode(`${parser.varName} >>>= 0`);\n        }\n\n        if (parser.options.assert) {\n          parser.generateAssert(ctx);\n        }\n\n        if (parser.options.formatter) {\n          parser.generateFormatter(\n            ctx,\n            parser.varName,\n            parser.options.formatter\n          );\n        }\n\n        bitOffset += length;\n        rem -= length;\n      });\n\n      ctx.bitFields = [];\n    }\n  }\n\n  private generateSeek(ctx: Context) {\n    const length = ctx.generateOption(this.options.length!);\n    ctx.pushCode(`offset += ${length};`);\n  }\n\n  private generateString(ctx: Context) {\n    const name = ctx.generateVariable(this.varName);\n    const start = ctx.generateTmpVariable();\n    const encoding = this.options.encoding!;\n    const isHex = encoding.toLowerCase() === \"hex\";\n    const toHex = 'b => b.toString(16).padStart(2, \"0\")';\n\n    if (this.options.length && this.options.zeroTerminated) {\n      const len = this.options.length;\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\n        `while(dataView.getUint8(offset++) !== 0 && offset - ${start} < ${len});`\n      );\n      const end = `offset - ${start} < ${len} ? offset - 1 : offset`;\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, ${end}), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, ${end}));`\n      );\n    } else if (this.options.length) {\n      const len = ctx.generateOption(this.options.length);\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(offset, offset + ${len}), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(offset, offset + ${len}));`\n      );\n      ctx.pushCode(`offset += ${len};`);\n    } else if (this.options.zeroTerminated) {\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\"while(dataView.getUint8(offset++) !== 0);\");\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, offset - 1), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset - 1));`\n      );\n    } else if (this.options.greedy) {\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\"while(buffer.length > offset++);\");\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, offset), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset));`\n      );\n    }\n    if (this.options.stripNull) {\n      ctx.pushCode(`${name} = ${name}.replace(/\\\\x00+$/g, '')`);\n    }\n  }\n\n  private generateBuffer(ctx: Context) {\n    const varName = ctx.generateVariable(this.varName);\n\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const start = ctx.generateTmpVariable();\n      const cur = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(`var ${cur} = 0;`);\n      ctx.pushCode(`while (offset < buffer.length) {`);\n      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `if (${func}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`\n      );\n      ctx.pushCode(`offset += 1;`);\n      ctx.pushCode(`}`);\n      ctx.pushCode(`${varName} = buffer.subarray(${start}, offset);`);\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(`${varName} = buffer.subarray(offset);`);\n    } else {\n      const len = ctx.generateOption(this.options.length!);\n\n      ctx.pushCode(`${varName} = buffer.subarray(offset, offset + ${len});`);\n      ctx.pushCode(`offset += ${len};`);\n    }\n\n    if (this.options.clone) {\n      ctx.pushCode(`${varName} = buffer.constructor.from(${varName});`);\n    }\n  }\n\n  private generateArray(ctx: Context) {\n    const length = ctx.generateOption(this.options.length!);\n    const lengthInBytes = ctx.generateOption(this.options.lengthInBytes!);\n    const type = this.options.type;\n    const counter = ctx.generateTmpVariable();\n    const lhs = ctx.generateVariable(this.varName);\n    const item = ctx.generateTmpVariable();\n    const key = this.options.key;\n    const isHash = typeof key === \"string\";\n\n    if (isHash) {\n      ctx.pushCode(`${lhs} = {};`);\n    } else {\n      ctx.pushCode(`${lhs} = [];`);\n    }\n    if (typeof this.options.readUntil === \"function\") {\n      ctx.pushCode(\"do {\");\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(\n        `for (var ${counter} = 0; offset < buffer.length; ${counter}++) {`\n      );\n    } else if (lengthInBytes !== undefined) {\n      ctx.pushCode(\n        `for (var ${counter} = offset + ${lengthInBytes}; offset < ${counter}; ) {`\n      );\n    } else {\n      ctx.pushCode(\n        `for (var ${counter} = ${length}; ${counter} > 0; ${counter}--) {`\n      );\n    }\n\n    if (typeof type === \"string\") {\n      if (!aliasRegistry.get(type)) {\n        const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n        ctx.pushCode(\n          `var ${item} = dataView.get${typeName}(offset, ${littleEndian});`\n        );\n        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]};`);\n      } else {\n        const tempVar = ctx.generateTmpVariable();\n        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type}(offset, {`);\n        if (ctx.useContextVariables) {\n          const parentVar = ctx.generateVariable();\n          ctx.pushCode(`$parent: ${parentVar},`);\n          ctx.pushCode(`$root: ${parentVar}.$root,`);\n          if (!this.options.readUntil && lengthInBytes === undefined) {\n            ctx.pushCode(`$index: ${length} - ${counter},`);\n          }\n        }\n        ctx.pushCode(`});`);\n        ctx.pushCode(\n          `var ${item} = ${tempVar}.result; offset = ${tempVar}.offset;`\n        );\n        if (type !== this.alias) ctx.addReference(type);\n      }\n    } else if (type instanceof Parser) {\n      ctx.pushCode(`var ${item} = {};`);\n      const parentVar = ctx.generateVariable();\n      ctx.pushScope(item);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`${item}.$parent = ${parentVar};`);\n        ctx.pushCode(`${item}.$root = ${parentVar}.$root;`);\n        if (!this.options.readUntil && lengthInBytes === undefined) {\n          ctx.pushCode(`${item}.$index = ${length} - ${counter};`);\n        }\n      }\n\n      type.generate(ctx);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`delete ${item}.$parent;`);\n        ctx.pushCode(`delete ${item}.$root;`);\n        ctx.pushCode(`delete ${item}.$index;`);\n      }\n      ctx.popScope();\n    }\n\n    if (isHash) {\n      ctx.pushCode(`${lhs}[${item}.${key}] = ${item};`);\n    } else {\n      ctx.pushCode(`${lhs}.push(${item});`);\n    }\n\n    ctx.pushCode(\"}\");\n\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `while (!${func}.call(${ctx.generateVariable()}, ${item}, buffer.subarray(offset)));`\n      );\n    }\n  }\n\n  private generateChoiceCase(\n    ctx: Context,\n    varName: string,\n    type: string | Parser\n  ) {\n    if (typeof type === \"string\") {\n      const varName = ctx.generateVariable(this.varName);\n      if (!aliasRegistry.has(type)) {\n        const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n        ctx.pushCode(\n          `${varName} = dataView.get${typeName}(offset, ${littleEndian});`\n        );\n        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]}`);\n      } else {\n        const tempVar = ctx.generateTmpVariable();\n        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type}(offset, {`);\n        if (ctx.useContextVariables) {\n          ctx.pushCode(`$parent: ${varName}.$parent,`);\n          ctx.pushCode(`$root: ${varName}.$root,`);\n        }\n        ctx.pushCode(`});`);\n        ctx.pushCode(\n          `${varName} = ${tempVar}.result; offset = ${tempVar}.offset;`\n        );\n        if (type !== this.alias) ctx.addReference(type);\n      }\n    } else if (type instanceof Parser) {\n      ctx.pushPath(varName);\n      type.generate(ctx);\n      ctx.popPath(varName);\n    }\n  }\n\n  private generateChoice(ctx: Context) {\n    const tag = ctx.generateOption(this.options.tag!);\n    const nestVar = ctx.generateVariable(this.varName);\n\n    if (this.varName) {\n      ctx.pushCode(`${nestVar} = {};`);\n\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n      }\n    }\n    ctx.pushCode(`switch(${tag}) {`);\n    for (const tagString in this.options.choices) {\n      const tag = parseInt(tagString, 10);\n      const type = this.options.choices[tag];\n\n      ctx.pushCode(`case ${tag}:`);\n      this.generateChoiceCase(ctx, this.varName, type);\n      ctx.pushCode(\"break;\");\n    }\n    ctx.pushCode(\"default:\");\n    if (this.options.defaultChoice) {\n      this.generateChoiceCase(ctx, this.varName, this.options.defaultChoice);\n    } else {\n      ctx.generateError(`\"Met undefined tag value \" + ${tag} + \" at choice\"`);\n    }\n    ctx.pushCode(\"}\");\n\n    if (this.varName && ctx.useContextVariables) {\n      ctx.pushCode(`delete ${nestVar}.$parent;`);\n      ctx.pushCode(`delete ${nestVar}.$root;`);\n    }\n  }\n\n  private generateNest(ctx: Context) {\n    const nestVar = ctx.generateVariable(this.varName);\n\n    if (this.options.type instanceof Parser) {\n      if (this.varName) {\n        ctx.pushCode(`${nestVar} = {};`);\n\n        if (ctx.useContextVariables) {\n          const parentVar = ctx.generateVariable();\n          ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n          ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n        }\n      }\n\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n\n      if (this.varName && ctx.useContextVariables) {\n        if (ctx.useContextVariables) {\n          ctx.pushCode(`delete ${nestVar}.$parent;`);\n          ctx.pushCode(`delete ${nestVar}.$root;`);\n        }\n      }\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(offset, {`\n      );\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`$parent: ${parentVar},`);\n        ctx.pushCode(`$root: ${parentVar}.$root,`);\n      }\n      ctx.pushCode(`});`);\n      ctx.pushCode(\n        `${nestVar} = ${tempVar}.result; offset = ${tempVar}.offset;`\n      );\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    }\n  }\n\n  private generateWrapper(ctx: Context) {\n    const wrapperVar = ctx.generateVariable(this.varName);\n    const wrappedBuf = ctx.generateTmpVariable();\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const start = ctx.generateTmpVariable();\n      const cur = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(`var ${cur} = 0;`);\n      ctx.pushCode(`while (offset < buffer.length) {`);\n      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `if (${func}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`\n      );\n      ctx.pushCode(`offset += 1;`);\n      ctx.pushCode(`}`);\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(${start}, offset);`);\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset);`);\n    } else {\n      const len = ctx.generateOption(this.options.length!);\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset, offset + ${len});`);\n      ctx.pushCode(`offset += ${len};`);\n    }\n\n    if (this.options.clone) {\n      ctx.pushCode(`${wrappedBuf} = buffer.constructor.from(${wrappedBuf});`);\n    }\n\n    const tempBuf = ctx.generateTmpVariable();\n    const tempOff = ctx.generateTmpVariable();\n    const tempView = ctx.generateTmpVariable();\n    const func = ctx.addImport(this.options.wrapper);\n    ctx.pushCode(\n      `${wrappedBuf} = ${func}.call(this, ${wrappedBuf}).subarray(0);`\n    );\n    ctx.pushCode(`var ${tempBuf} = buffer;`);\n    ctx.pushCode(`var ${tempOff} = offset;`);\n    ctx.pushCode(`var ${tempView} = dataView;`);\n    ctx.pushCode(`buffer = ${wrappedBuf};`);\n    ctx.pushCode(`offset = 0;`);\n    ctx.pushCode(\n      `dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);`\n    );\n    if (this.options.type instanceof Parser) {\n      if (this.varName) {\n        ctx.pushCode(`${wrapperVar} = {};`);\n      }\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(0);`\n      );\n      ctx.pushCode(`${wrapperVar} = ${tempVar}.result;`);\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    }\n    ctx.pushCode(`buffer = ${tempBuf};`);\n    ctx.pushCode(`dataView = ${tempView};`);\n    ctx.pushCode(`offset = ${tempOff};`);\n  }\n\n  private generateFormatter(\n    ctx: Context,\n    varName: string,\n    formatter: Function\n  ) {\n    if (typeof formatter === \"function\") {\n      const func = ctx.addImport(formatter);\n      ctx.pushCode(\n        `${varName} = ${func}.call(${ctx.generateVariable()}, ${varName});`\n      );\n    }\n  }\n\n  private generatePointer(ctx: Context) {\n    const type = this.options.type;\n    const offset = ctx.generateOption(this.options.offset!);\n    const tempVar = ctx.generateTmpVariable();\n    const nestVar = ctx.generateVariable(this.varName);\n\n    // Save current offset\n    ctx.pushCode(`var ${tempVar} = offset;`);\n\n    // Move offset\n    ctx.pushCode(`offset = ${offset};`);\n\n    if (this.options.type instanceof Parser) {\n      ctx.pushCode(`${nestVar} = {};`);\n\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n      }\n\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`delete ${nestVar}.$parent;`);\n        ctx.pushCode(`delete ${nestVar}.$root;`);\n      }\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(offset, {`\n      );\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`$parent: ${parentVar},`);\n        ctx.pushCode(`$root: ${parentVar}.$root,`);\n      }\n      ctx.pushCode(`});`);\n      ctx.pushCode(\n        `${nestVar} = ${tempVar}.result; offset = ${tempVar}.offset;`\n      );\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    } else if (Object.keys(PRIMITIVE_SIZES).indexOf(this.options.type!) >= 0) {\n      const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n      const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n      ctx.pushCode(\n        `${nestVar} = dataView.get${typeName}(offset, ${littleEndian});`\n      );\n      ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]};`);\n    }\n\n    // Restore offset\n    ctx.pushCode(`offset = ${tempVar};`);\n  }\n\n  private generateSaveOffset(ctx: Context) {\n    const varName = ctx.generateVariable(this.varName);\n    ctx.pushCode(`${varName} = offset`);\n  }\n}\n","/**\n * Adapted from a combination of Range and _Compound in the\n * Dalliance Genome Explorer, (c) Thomas Down 2006-2010.\n */\n\nexport interface IRange {\n  min: number\n  max: number\n}\nexport default class Range {\n  public ranges: IRange[]\n\n  public constructor(arg1: IRange[]) {\n    this.ranges = arg1\n  }\n\n  get min() {\n    return this.ranges[0].min\n  }\n\n  get max() {\n    return this.ranges[this.ranges.length - 1].max\n  }\n\n  public contains(pos: number) {\n    for (const r of this.ranges) {\n      if (r.min <= pos && r.max >= pos) {\n        return true\n      }\n    }\n    return false\n  }\n\n  public isContiguous(): boolean {\n    return this.ranges.length > 1\n  }\n\n  public getRanges() {\n    return this.ranges.map(r => new Range([{ min: r.min, max: r.max }]))\n  }\n\n  public toString(): string {\n    return this.ranges.map(r => `[${r.min}-${r.max}]`).join(',')\n  }\n\n  public union(s1: Range) {\n    const ranges = [...this.getRanges(), ...s1.getRanges()].sort((a, b) => {\n      if (a.min < b.min) {\n        return -1\n      } else if (a.min > b.min) {\n        return 1\n      } else if (a.max < b.max) {\n        return -1\n      } else if (b.max > a.max) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    const oranges = [] as Range[]\n    let current = ranges[0]\n\n    for (const nxt of ranges) {\n      if (nxt.min > current.max + 1) {\n        oranges.push(current)\n        current = nxt\n      } else if (nxt.max > current.max) {\n        current = new Range([{ min: current.min, max: nxt.max }])\n      }\n    }\n    oranges.push(current)\n\n    return oranges.length === 1 ? oranges[0] : new Range(oranges)\n  }\n}\n","export class AbortError extends Error {\n  public code: string\n\n  public constructor(message: string) {\n    super(message)\n    this.code = 'ERR_ABORTED'\n  }\n}\n// sort blocks by file offset and\n// group blocks that are within 2KB of eachother\nexport function groupBlocks(blocks: { offset: bigint; length: bigint }[]) {\n  blocks.sort((b0, b1) => Number(b0.offset) - Number(b1.offset))\n\n  const blockGroups = []\n  let lastBlock\n  let lastBlockEnd\n  for (const block of blocks) {\n    if (\n      lastBlock &&\n      lastBlockEnd &&\n      Number(block.offset) - lastBlockEnd <= 2000\n    ) {\n      lastBlock.length = BigInt(\n        Number(lastBlock.length) +\n          Number(block.length) -\n          lastBlockEnd +\n          Number(block.offset),\n      )\n      lastBlock.blocks.push(block)\n    } else {\n      blockGroups.push(\n        (lastBlock = {\n          blocks: [block],\n          length: block.length,\n          offset: block.offset,\n        }),\n      )\n    }\n    lastBlockEnd = Number(lastBlock.offset) + Number(lastBlock.length)\n  }\n\n  return blockGroups\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal): void {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal): Promise<void> {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n","import { Buffer } from 'buffer'\nimport { Observer } from 'rxjs'\nimport { Parser } from 'binary-parser'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport QuickLRU from 'quick-lru'\n\n// locals\nimport Range from './range'\nimport { unzip } from './unzip'\nimport { Feature } from './bbi'\nimport { groupBlocks, checkAbortSignal } from './util'\n\ninterface CoordRequest {\n  chrId: number\n  start: number\n  end: number\n}\ninterface DataBlock {\n  blockOffset: bigint\n  blockSize: bigint\n  startChrom: number\n  endChrom: number\n  startBase: number\n  endBase: number\n  validCnt: number\n  minVal: number\n  maxVal: number\n  sumData: number\n  sumSqData: number\n}\n\ninterface ReadData {\n  offset: bigint | number\n  length: bigint | number\n}\n\ninterface Options {\n  signal?: AbortSignal\n  request?: CoordRequest\n}\n\nconst BIG_WIG_TYPE_GRAPH = 1\nconst BIG_WIG_TYPE_VSTEP = 2\nconst BIG_WIG_TYPE_FSTEP = 3\n\nfunction coordFilter(s1: number, e1: number, s2: number, e2: number): boolean {\n  return s1 < e2 && e1 >= s2\n}\n\nfunction getParsers(isBigEndian: boolean) {\n  const le = isBigEndian ? 'big' : 'little'\n  const summaryParser = new Parser()\n    .endianess(le)\n    .uint32('chromId')\n    .uint32('start')\n    .uint32('end')\n    .uint32('validCnt')\n    .floatle('minScore')\n    .floatle('maxScore')\n    .floatle('sumData')\n    .floatle('sumSqData')\n    .saveOffset('offset')\n\n  const leafParser = new Parser()\n    .endianess(le)\n    .uint8('isLeaf')\n    .skip(1)\n    .uint16('cnt')\n    .choice({\n      tag: 'isLeaf',\n      choices: {\n        1: new Parser().endianess(le).array('blocksToFetch', {\n          length: 'cnt',\n          type: new Parser()\n            .endianess(le)\n            .uint32('startChrom')\n            .uint32('startBase')\n            .uint32('endChrom')\n            .uint32('endBase')\n            .uint64('blockOffset')\n            .uint64('blockSize')\n            .saveOffset('offset'),\n        }),\n        0: new Parser().array('recurOffsets', {\n          length: 'cnt',\n          type: new Parser()\n            .endianess(le)\n            .uint32('startChrom')\n            .uint32('startBase')\n            .uint32('endChrom')\n            .uint32('endBase')\n            .uint64('blockOffset')\n            .saveOffset('offset'),\n        }),\n      },\n    })\n  const bigBedParser = new Parser()\n    .endianess(le)\n    .uint32('chromId')\n    .int32('start')\n    .int32('end')\n    .string('rest', {\n      zeroTerminated: true,\n    })\n    .saveOffset('offset')\n\n  const bigWigParser = new Parser()\n    .endianess(le)\n    .skip(4)\n    .int32('blockStart')\n    .skip(4)\n    .uint32('itemStep')\n    .uint32('itemSpan')\n    .uint8('blockType')\n    .skip(1)\n    .uint16('itemCount')\n    .choice({\n      tag: 'blockType',\n      choices: {\n        [BIG_WIG_TYPE_FSTEP]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser().floatle('score'),\n        }),\n        [BIG_WIG_TYPE_VSTEP]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser().endianess(le).int32('start').floatle('score'),\n        }),\n        [BIG_WIG_TYPE_GRAPH]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser()\n            .endianess(le)\n            .int32('start')\n            .int32('end')\n            .floatle('score'),\n        }),\n      },\n    })\n  return {\n    bigWigParser,\n    bigBedParser,\n    summaryParser,\n    leafParser,\n  }\n}\n\n/**\n * View into a subset of the data in a BigWig file.\n *\n * Adapted by Robert Buels and Colin Diesh from bigwig.js in the Dalliance Genome\n * Explorer by Thomas Down.\n * @constructs\n */\n\nexport class BlockView {\n  private cirTreePromise?: Promise<{ bytesRead: number; buffer: Buffer }>\n\n  private featureCache = new AbortablePromiseCache<ReadData, Buffer>({\n    cache: new QuickLRU({ maxSize: 1000 }),\n\n    fill: async (requestData, signal) => {\n      const len = Number(requestData.length)\n      const off = Number(requestData.offset)\n      const { buffer } = await this.bbi.read(Buffer.alloc(len), 0, len, off, {\n        signal,\n      })\n      return buffer\n    },\n  })\n\n  private leafParser: ReturnType<typeof getParsers>['leafParser']\n\n  private bigBedParser: ReturnType<typeof getParsers>['bigBedParser']\n\n  public constructor(\n    private bbi: GenericFilehandle,\n    private refsByName: any,\n    private cirTreeOffset: number,\n    private isBigEndian: boolean,\n    private isCompressed: boolean,\n    private blockType: string,\n  ) {\n    if (!(cirTreeOffset >= 0)) {\n      throw new Error('invalid cirTreeOffset!')\n    }\n\n    const parsers = getParsers(isBigEndian)\n    this.leafParser = parsers.leafParser\n    this.bigBedParser = parsers.bigBedParser\n  }\n\n  public async readWigData(\n    chrName: string,\n    start: number,\n    end: number,\n    observer: Observer<Feature[]>,\n    opts?: Options,\n  ) {\n    try {\n      const { refsByName, bbi, cirTreeOffset, isBigEndian } = this\n      const chrId = refsByName[chrName]\n      if (chrId === undefined) {\n        observer.complete()\n      }\n      const request = { chrId, start, end }\n      if (!this.cirTreePromise) {\n        this.cirTreePromise = bbi.read(\n          Buffer.alloc(48),\n          0,\n          48,\n          Number(cirTreeOffset),\n          opts,\n        )\n      }\n      const { buffer } = await this.cirTreePromise\n      const cirBlockSize = isBigEndian\n        ? buffer.readUInt32BE(4)\n        : buffer.readUInt32LE(4)\n      let blocksToFetch: any[] = []\n      let outstanding = 0\n\n      const cirFobRecur2 = (\n        cirBlockData: Buffer,\n        offset: number,\n        level: number,\n      ) => {\n        try {\n          const data = cirBlockData.subarray(offset)\n\n          const p = this.leafParser.parse(data) as {\n            blocksToFetch: DataBlock[]\n            recurOffsets: DataBlock[]\n          }\n          if (p.blocksToFetch) {\n            blocksToFetch = blocksToFetch.concat(\n              p.blocksToFetch\n                .filter(f => filterFeats(f))\n                .map(l => ({\n                  offset: l.blockOffset,\n                  length: l.blockSize,\n                })),\n            )\n          }\n          if (p.recurOffsets) {\n            const recurOffsets = p.recurOffsets\n              .filter(f => filterFeats(f))\n              .map(l => Number(l.blockOffset))\n            if (recurOffsets.length > 0) {\n              cirFobRecur(recurOffsets, level + 1)\n            }\n          }\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n\n      const filterFeats = (b: DataBlock) => {\n        const { startChrom, startBase, endChrom, endBase } = b\n        return (\n          (startChrom < chrId || (startChrom === chrId && startBase <= end)) &&\n          (endChrom > chrId || (endChrom === chrId && endBase >= start))\n        )\n      }\n\n      const cirFobStartFetch = async (\n        off: number[],\n        fr: Range,\n        level: number,\n      ) => {\n        try {\n          const length = fr.max - fr.min\n          const offset = fr.min\n          const resultBuffer: Buffer = await this.featureCache.get(\n            `${length}_${offset}`,\n            { length, offset },\n            opts?.signal,\n          )\n          for (const element of off) {\n            if (fr.contains(element)) {\n              cirFobRecur2(resultBuffer, element - offset, level)\n              outstanding -= 1\n              if (outstanding === 0) {\n                this.readFeatures(observer, blocksToFetch, {\n                  ...opts,\n                  request,\n                }).catch(e => observer.error(e))\n              }\n            }\n          }\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n      const cirFobRecur = (offset: number[], level: number) => {\n        try {\n          outstanding += offset.length\n\n          // Upper bound on size, based on a completely full leaf node.\n          const maxCirBlockSpan = 4 + Number(cirBlockSize) * 32\n          let spans = new Range([\n            { min: offset[0], max: offset[0] + maxCirBlockSpan },\n          ])\n          for (let i = 1; i < offset.length; i += 1) {\n            const blockSpan = new Range([\n              { min: offset[i], max: offset[i] + maxCirBlockSpan },\n            ])\n            spans = spans.union(blockSpan)\n          }\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          spans.getRanges().map(fr => cirFobStartFetch(offset, fr, level))\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n\n      return cirFobRecur([Number(cirTreeOffset) + 48], 1)\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n\n  private parseSummaryBlock(\n    buffer: Buffer,\n    startOffset: number,\n    request?: CoordRequest,\n  ) {\n    const features = [] as any[]\n    let offset = startOffset\n\n    const dataView = new DataView(\n      buffer.buffer,\n      buffer.byteOffset,\n      buffer.length,\n    )\n    while (offset < buffer.byteLength) {\n      // this was extracted from looking at the runtime code generated by\n      // binary-parser\n      const chromId = dataView.getUint32(offset, true)\n      offset += 4\n      const start = dataView.getUint32(offset, true)\n      offset += 4\n      const end = dataView.getUint32(offset, true)\n      offset += 4\n      const validCnt = dataView.getUint32(offset, true)\n      offset += 4\n      const minScore = dataView.getFloat32(offset, true)\n      offset += 4\n      const maxScore = dataView.getFloat32(offset, true)\n      offset += 4\n      const sumData = dataView.getFloat32(offset, true)\n      offset += 4\n      // unused\n      // const sumSqData = dataView.getFloat32(offset, true)\n      offset += 4\n\n      if (\n        request\n          ? chromId === request.chrId &&\n            coordFilter(start, end, request.start, request.end)\n          : true\n      ) {\n        features.push({\n          start,\n          end,\n          maxScore,\n          minScore,\n          summary: true,\n          score: sumData / (validCnt || 1),\n        })\n      }\n    }\n\n    return features\n  }\n\n  private parseBigBedBlock(\n    data: Buffer,\n    startOffset: number,\n    offset: number,\n    request?: CoordRequest,\n  ) {\n    const items = [] as Feature[]\n    let currOffset = startOffset\n    while (currOffset < data.byteLength) {\n      const res = this.bigBedParser.parse(data.subarray(currOffset))\n      res.uniqueId = `bb-${offset + currOffset}`\n      items.push(res)\n      currOffset += res.offset\n    }\n\n    return request\n      ? items.filter((f: any) =>\n          coordFilter(f.start, f.end, request.start, request.end),\n        )\n      : items\n  }\n\n  private parseBigWigBlock(\n    buffer: Buffer,\n    startOffset: number,\n    request?: CoordRequest,\n  ) {\n    const b = buffer.subarray(startOffset)\n\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n    let offset = 0\n    offset += 4\n    const blockStart = dataView.getInt32(offset, true)\n    offset += 8\n    const itemStep = dataView.getUint32(offset, true)\n    offset += 4\n    const itemSpan = dataView.getUint32(offset, true)\n    offset += 4\n    const blockType = dataView.getUint8(offset)\n    offset += 2\n    const itemCount = dataView.getUint16(offset, true)\n    offset += 2\n    const items = new Array(itemCount)\n    switch (blockType) {\n      case 1: {\n        for (let i = 0; i < itemCount; i++) {\n          const start = dataView.getInt32(offset, true)\n          offset += 4\n          const end = dataView.getInt32(offset, true)\n          offset += 4\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          items[i] = { start, end, score }\n        }\n        break\n      }\n      case 2: {\n        for (let i = 0; i < itemCount; i++) {\n          const start = dataView.getInt32(offset, true)\n          offset += 4\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          items[i] = { score, start, end: start + itemSpan }\n        }\n        break\n      }\n      case 3: {\n        for (let i = 0; i < itemCount; i++) {\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          const start = blockStart + i * itemStep\n          items[i] = { score, start, end: start + itemSpan }\n        }\n        break\n      }\n    }\n\n    return request\n      ? items.filter((f: any) =>\n          coordFilter(f.start, f.end, request.start, request.end),\n        )\n      : items\n  }\n\n  public async readFeatures(\n    observer: Observer<Feature[]>,\n    blocks: { offset: bigint; length: bigint }[],\n    opts: Options = {},\n  ) {\n    try {\n      const { blockType, isCompressed } = this\n      const { signal, request } = opts\n      const blockGroupsToFetch = groupBlocks(blocks)\n      checkAbortSignal(signal)\n      await Promise.all(\n        blockGroupsToFetch.map(async blockGroup => {\n          checkAbortSignal(signal)\n          const { length, offset } = blockGroup\n          const data = await this.featureCache.get(\n            `${length}_${offset}`,\n            blockGroup,\n            signal,\n          )\n          for (const block of blockGroup.blocks) {\n            checkAbortSignal(signal)\n            let blockOffset = Number(block.offset) - Number(blockGroup.offset)\n            let resultData = data\n            if (isCompressed) {\n              resultData = unzip(data.subarray(blockOffset))\n              blockOffset = 0\n            }\n            checkAbortSignal(signal)\n\n            switch (blockType) {\n              case 'summary': {\n                observer.next(\n                  this.parseSummaryBlock(resultData, blockOffset, request),\n                )\n                break\n              }\n              case 'bigwig': {\n                observer.next(\n                  this.parseBigWigBlock(resultData, blockOffset, request),\n                )\n                break\n              }\n              case 'bigbed': {\n                observer.next(\n                  this.parseBigBedBlock(\n                    resultData,\n                    blockOffset,\n                    Number(block.offset) * (1 << 8),\n                    request,\n                  ),\n                )\n                break\n              }\n              default: {\n                console.warn(`Don't know what to do with ${blockType}`)\n              }\n            }\n          }\n        }),\n      )\n      observer.complete()\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n}\n","import { Buffer } from 'buffer'\nimport { inflateRaw } from 'pako'\n\nexport function unzip(input: Buffer) {\n  return inflateRaw(input.subarray(2))\n}\n","import { Buffer } from 'buffer'\nimport { Parser } from 'binary-parser'\nimport { LocalFile, RemoteFile, GenericFilehandle } from 'generic-filehandle'\nimport { firstValueFrom, Observable } from 'rxjs'\nimport { toArray } from 'rxjs/operators'\nimport { BlockView } from './block-view'\n\nconst BIG_WIG_MAGIC = -2003829722\nconst BIG_BED_MAGIC = -2021002517\n\nfunction toString(arr: Uint8Array) {\n  return new TextDecoder().decode(arr)\n}\n\nexport interface Feature {\n  start: number\n  end: number\n  score: number\n  rest?: string // for bigbed line\n  minScore?: number // for summary line\n  maxScore?: number // for summary line\n  summary?: boolean // is summary line\n  uniqueId?: string // for bigbed contains uniqueId calculated from file offset\n  field?: number // used in bigbed searching\n}\ninterface Statistics {\n  scoreSum: number\n  basesCovered: number\n  scoreSumSquares: number\n}\n\ninterface RefInfo {\n  name: string\n  id: number\n  length: number\n}\nexport interface Header {\n  version: number\n  autoSql: string\n  totalSummary: Statistics\n  zoomLevels: any\n  unzoomedIndexOffset: number\n  unzoomedDataOffset: number\n  definedFieldCount: number\n  uncompressBufSize: number\n  chromTreeOffset: number\n  fileSize: number\n  extHeaderOffset: number\n  isBigEndian: boolean\n  fileType: string\n  refsByName: Record<string, number>\n  refsByNumber: Record<number, RefInfo>\n}\n\n/**\n * get the compiled parsers for different sections of the bigwig file\n *\n * @param isBE - is big endian, typically false\n * @return an object with compiled parsers\n */\nfunction getParsers(isBE: boolean) {\n  const le = isBE ? 'big' : 'little'\n  const headerParser = new Parser()\n    .endianess(le)\n    .int32('magic')\n    .uint16('version')\n    .uint16('numZoomLevels')\n    .uint64('chromTreeOffset')\n    .uint64('unzoomedDataOffset')\n    .uint64('unzoomedIndexOffset')\n    .uint16('fieldCount')\n    .uint16('definedFieldCount')\n    .uint64('asOffset') // autoSql offset, used in bigbed\n    .uint64('totalSummaryOffset')\n    .uint32('uncompressBufSize')\n    .uint64('extHeaderOffset') // name index offset, used in bigbed\n    .array('zoomLevels', {\n      length: 'numZoomLevels',\n      type: new Parser()\n        .endianess(le)\n        .uint32('reductionLevel')\n        .uint32('reserved')\n        .uint64('dataOffset')\n        .uint64('indexOffset'),\n    })\n\n  const totalSummaryParser = new Parser()\n    .endianess(le)\n    .uint64('basesCovered')\n    .doublele('scoreMin')\n    .doublele('scoreMax')\n    .doublele('scoreSum')\n    .doublele('scoreSumSquares')\n\n  const chromTreeParser = new Parser()\n    .endianess(le)\n    .uint32('magic')\n    .uint32('blockSize')\n    .uint32('keySize')\n    .uint32('valSize')\n    .uint64('itemCount')\n\n  const isLeafNode = new Parser()\n    .endianess(le)\n    .uint8('isLeafNode')\n    .skip(1)\n    .uint16('cnt')\n    .saveOffset('offset')\n\n  return {\n    chromTreeParser,\n    totalSummaryParser,\n    headerParser,\n    isLeafNode,\n  }\n}\n\nexport interface RequestOptions {\n  signal?: AbortSignal\n  headers?: Record<string, string>\n  [key: string]: unknown\n}\n\nexport abstract class BBI {\n  protected bbi: GenericFilehandle\n\n  private headerP?: Promise<Header>\n\n  protected renameRefSeqs: (a: string) => string\n\n  public getHeader(opts?: RequestOptions) {\n    if (!this.headerP) {\n      this.headerP = this._getHeader(opts).catch(e => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  /*\n   * @param filehandle - a filehandle from generic-filehandle or implementing something similar to the node10 fs.promises API\n   *\n   * @param path - a Local file path as a string\n   *\n   * @param url - a URL string\n   *\n   * @param renameRefSeqs - an optional method to rename the internal reference\n   * sequences using a mapping function\n   */\n  public constructor(args: {\n    filehandle?: GenericFilehandle\n    path?: string\n    url?: string\n    renameRefSeqs?: (a: string) => string\n  }) {\n    const { filehandle, renameRefSeqs = s => s, path, url } = args\n    this.renameRefSeqs = renameRefSeqs\n    if (filehandle) {\n      this.bbi = filehandle\n    } else if (url) {\n      this.bbi = new RemoteFile(url)\n    } else if (path) {\n      this.bbi = new LocalFile(path)\n    } else {\n      throw new Error('no file given')\n    }\n  }\n\n  private async _getHeader(opts?: RequestOptions) {\n    const header = await this._getMainHeader(opts)\n    const chroms = await this._readChromTree(header, opts)\n    return { ...header, ...chroms }\n  }\n\n  private async _getMainHeader(\n    opts?: RequestOptions,\n    requestSize = 2000,\n  ): Promise<Header> {\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(requestSize),\n      0,\n      requestSize,\n      0,\n      opts,\n    )\n    const isBigEndian = this._isBigEndian(buffer)\n    const ret = getParsers(isBigEndian)\n    const header = ret.headerParser.parse(buffer)\n    const { magic, asOffset, totalSummaryOffset } = header\n    header.fileType = magic === BIG_BED_MAGIC ? 'bigbed' : 'bigwig'\n    if (asOffset > requestSize || totalSummaryOffset > requestSize) {\n      return this._getMainHeader(opts, requestSize * 2)\n    }\n    if (asOffset) {\n      const off = Number(header.asOffset)\n      header.autoSql = toString(buffer.subarray(off, buffer.indexOf(0, off)))\n    }\n\n    // refetch header if it is too large on first pass,\n    // 8*5 is the sizeof the totalSummary struct\n    if (header.totalSummaryOffset > requestSize - 8 * 5) {\n      return this._getMainHeader(opts, requestSize * 2)\n    }\n\n    if (header.totalSummaryOffset) {\n      const tail = buffer.subarray(Number(header.totalSummaryOffset))\n      const sum = ret.totalSummaryParser.parse(tail)\n      header.totalSummary = { ...sum, basesCovered: Number(sum.basesCovered) }\n    }\n    return { ...header, isBigEndian }\n  }\n\n  private _isBigEndian(buffer: Buffer) {\n    let ret = buffer.readInt32LE(0)\n    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {\n      return false\n    }\n    ret = buffer.readInt32BE(0)\n    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {\n      return true\n    }\n    throw new Error('not a BigWig/BigBed file')\n  }\n\n  // todo: add progress if long running\n  private async _readChromTree(\n    header: Header,\n    opts?: { signal?: AbortSignal },\n  ) {\n    const isBE = header.isBigEndian\n    const le = isBE ? 'big' : 'little'\n    const refsByNumber: Record<\n      number,\n      { name: string; id: number; length: number }\n    > = []\n    const refsByName: Record<string, number> = {}\n\n    let unzoomedDataOffset = Number(header.unzoomedDataOffset)\n    const chromTreeOffset = Number(header.chromTreeOffset)\n    while (unzoomedDataOffset % 4 !== 0) {\n      unzoomedDataOffset += 1\n    }\n    const off = unzoomedDataOffset - chromTreeOffset\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(off),\n      0,\n      off,\n      Number(chromTreeOffset),\n      opts,\n    )\n\n    const p = getParsers(isBE)\n    const { keySize } = p.chromTreeParser.parse(buffer)\n    const leafNodeParser = new Parser()\n      .endianess(le)\n      .string('key', { stripNull: true, length: keySize })\n      .uint32('refId')\n      .uint32('refSize')\n      .saveOffset('offset')\n    const nonleafNodeParser = new Parser()\n      .endianess(le)\n      .skip(keySize)\n      .uint64('childOffset')\n      .saveOffset('offset')\n    const rootNodeOffset = 32\n    const bptReadNode = async (currentOffset: number) => {\n      let offset = currentOffset\n      if (offset >= buffer.length) {\n        throw new Error('reading beyond end of buffer')\n      }\n      const ret = p.isLeafNode.parse(buffer.subarray(offset))\n      const { isLeafNode, cnt } = ret\n      offset += ret.offset\n      if (isLeafNode) {\n        for (let n = 0; n < cnt; n += 1) {\n          const leafRet = leafNodeParser.parse(buffer.subarray(offset))\n          offset += leafRet.offset\n          const { key, refId, refSize } = leafRet\n          const refRec = { name: key, id: refId, length: refSize }\n          refsByName[this.renameRefSeqs(key)] = refId\n          refsByNumber[refId] = refRec\n        }\n      } else {\n        // parse index node\n        const nextNodes = []\n        for (let n = 0; n < cnt; n += 1) {\n          const nonleafRet = nonleafNodeParser.parse(buffer.subarray(offset))\n          const { childOffset } = nonleafRet\n          offset += nonleafRet.offset\n          nextNodes.push(\n            bptReadNode(Number(childOffset) - Number(chromTreeOffset)),\n          )\n        }\n        await Promise.all(nextNodes)\n      }\n    }\n    await bptReadNode(rootNodeOffset)\n    return {\n      refsByName,\n      refsByNumber,\n    }\n  }\n\n  /*\n   * fetches the \"unzoomed\" view of the bigwig data. this is the default for bigbed\n   * @param abortSignal - a signal to optionally abort this operation\n   */\n  protected async getUnzoomedView(opts?: RequestOptions) {\n    const {\n      unzoomedIndexOffset,\n      refsByName,\n      uncompressBufSize,\n      isBigEndian,\n      fileType,\n    } = await this.getHeader(opts)\n    return new BlockView(\n      this.bbi,\n      refsByName,\n      unzoomedIndexOffset,\n      isBigEndian,\n      uncompressBufSize > 0,\n      fileType,\n    )\n  }\n\n  /*\n   * abstract method - get the view for a given scale\n   */\n  protected abstract getView(\n    scale: number,\n    opts?: RequestOptions,\n  ): Promise<BlockView>\n\n  /**\n   * Gets features from a BigWig file\n   *\n   * @param refName - The chromosome name\n   * @param start - The start of a region\n   * @param end - The end of a region\n   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use\n   */\n  public async getFeatureStream(\n    refName: string,\n    start: number,\n    end: number,\n    opts?: RequestOptions & { scale?: number; basesPerSpan?: number },\n  ) {\n    await this.getHeader(opts)\n    const chrName = this.renameRefSeqs(refName)\n    let view: BlockView\n    const { basesPerSpan, scale } = opts || {}\n\n    if (basesPerSpan) {\n      view = await this.getView(1 / basesPerSpan, opts)\n    } else if (scale) {\n      view = await this.getView(scale, opts)\n    } else {\n      view = await this.getView(1, opts)\n    }\n\n    return new Observable<Feature[]>(observer => {\n      view\n        .readWigData(chrName, start, end, observer, opts)\n        .catch(e => observer.error(e))\n    })\n  }\n\n  public async getFeatures(\n    refName: string,\n    start: number,\n    end: number,\n    opts?: RequestOptions & { scale?: number; basesPerSpan?: number },\n  ) {\n    const ob = await this.getFeatureStream(refName, start, end, opts)\n\n    const ret = await firstValueFrom(ob.pipe(toArray()))\n    return ret.flat()\n  }\n}\n","import { BlockView } from './block-view'\nimport { BBI, RequestOptions } from './bbi'\n\nexport class BigWig extends BBI {\n  /**\n   * Retrieves a BlockView of a specific zoomLevel\n   *\n   * @param scale - number\n   *\n   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair)\n   * or scale used to infer the zoomLevel to use\n   */\n  protected async getView(scale: number, opts: RequestOptions) {\n    const { zoomLevels, refsByName, fileSize, isBigEndian, uncompressBufSize } =\n      await this.getHeader(opts)\n    const basesPerPx = 1 / scale\n    let maxLevel = zoomLevels.length\n    if (!fileSize) {\n      // if we don't know the file size, we can't fetch the highest zoom level :-(\n      maxLevel -= 1\n    }\n\n    for (let i = maxLevel; i >= 0; i -= 1) {\n      const zh = zoomLevels[i]\n      if (zh && zh.reductionLevel <= 2 * basesPerPx) {\n        const indexOffset = Number(zh.indexOffset)\n\n        return new BlockView(\n          this.bbi,\n          refsByName,\n          indexOffset,\n          isBigEndian,\n          uncompressBufSize > 0,\n          'summary',\n        )\n      }\n    }\n    return this.getUnzoomedView(opts)\n  }\n}\n","import { Buffer } from 'buffer'\nimport { Parser } from 'binary-parser'\nimport { Observable, merge, firstValueFrom } from 'rxjs'\nimport { map, reduce } from 'rxjs/operators'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\n\nimport { BBI, Feature, RequestOptions } from './bbi'\n\ninterface Loc {\n  key: string\n  offset: bigint\n  length: bigint\n  field?: number\n}\n\ninterface Index {\n  type: number\n  fieldcount: number\n  offset: number\n  field: number\n}\n\nexport function filterUndef<T>(ts: (T | undefined)[]): T[] {\n  return ts.filter((t: T | undefined): t is T => !!t)\n}\n\nexport class BigBed extends BBI {\n  public readIndicesCache = new AbortablePromiseCache<RequestOptions, Index[]>({\n    cache: new QuickLRU({ maxSize: 1 }),\n    fill: (args: RequestOptions, signal?: AbortSignal) =>\n      this._readIndices({ ...args, signal }),\n  })\n\n  public readIndices(opts: RequestOptions = {}) {\n    const { signal, ...rest } = opts\n    return this.readIndicesCache.get(JSON.stringify(rest), opts, signal)\n  }\n\n  /*\n   * retrieve unzoomed view for any scale\n   */\n  protected async getView(_scale: number, opts?: RequestOptions) {\n    return this.getUnzoomedView(opts)\n  }\n\n  /*\n   * parse the bigbed extraIndex fields\n   * @param abortSignal to abort operation\n   * @return a Promise for an array of Index data structure since there can be multiple extraIndexes in a bigbed, see bedToBigBed documentation\n   */\n  private async _readIndices(opts: RequestOptions) {\n    const { extHeaderOffset, isBigEndian } = await this.getHeader(opts)\n    const { buffer: data } = await this.bbi.read(\n      Buffer.alloc(64),\n      0,\n      64,\n      Number(extHeaderOffset),\n    )\n    const le = isBigEndian ? 'big' : 'little'\n    const ret = new Parser()\n      .endianess(le)\n      .uint16('size')\n      .uint16('count')\n      .uint64('offset')\n      .parse(data)\n\n    const { count, offset } = ret\n\n    // no extra index is defined if count==0\n    if (count === 0) {\n      return []\n    }\n\n    const blocklen = 20\n    const len = blocklen * count\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(len),\n      0,\n      len,\n      Number(offset),\n    )\n    const extParser = new Parser()\n      .endianess(le)\n      .int16('type')\n      .int16('fieldcount')\n      .uint64('offset')\n      .skip(4)\n      .int16('field')\n    const indices = [] as Index[]\n\n    for (let i = 0; i < count; i += 1) {\n      indices.push(extParser.parse(buffer.subarray(i * blocklen)))\n    }\n    return indices\n  }\n\n  /*\n   * perform a search in the bigbed extraIndex to find which blocks in the bigbed data to look for the\n   * actual feature data\n   *\n   * @param name - the name to search for\n   * @param opts - a SearchOptions argument with optional signal\n   * @return a Promise for an array of bigbed block Loc entries\n   */\n  private async searchExtraIndexBlocks(\n    name: string,\n    opts: RequestOptions = {},\n  ): Promise<Loc[]> {\n    const { isBigEndian } = await this.getHeader(opts)\n    const indices = await this.readIndices(opts)\n    if (indices.length === 0) {\n      return []\n    }\n    const locs = indices.map(async (index: any): Promise<Loc | undefined> => {\n      const { offset, field } = index\n      const { buffer: data } = await this.bbi.read(\n        Buffer.alloc(32),\n        0,\n        32,\n        Number(offset),\n        opts,\n      )\n      const le = isBigEndian ? 'big' : 'little'\n      const p = new Parser()\n        .endianess(le)\n        .int32('magic')\n        .int32('blockSize')\n        .int32('keySize')\n        .int32('valSize')\n        .uint64('itemCount')\n\n      const { blockSize, keySize, valSize } = p.parse(data)\n      // console.log({blockSize,keySize,valSize})\n      const bpt = new Parser()\n        .endianess(le)\n        .int8('nodeType')\n        .skip(1)\n        .int16('cnt')\n        .choice({\n          tag: 'nodeType',\n          choices: {\n            0: new Parser().array('leafkeys', {\n              length: 'cnt',\n              type: new Parser()\n                .endianess(le)\n                .string('key', { length: keySize, stripNull: true })\n                .uint64('offset'),\n            }),\n            1: new Parser().array('keys', {\n              length: 'cnt',\n              type: new Parser()\n                .endianess(le)\n                .string('key', { length: keySize, stripNull: true })\n                .uint64('offset')\n                .uint32('length')\n                .uint32('reserved'),\n            }),\n          },\n        })\n\n      const bptReadNode = async (\n        nodeOffset: number,\n      ): Promise<Loc | undefined> => {\n        const val = Number(nodeOffset)\n        const len = 4 + blockSize * (keySize + valSize)\n        const { buffer } = await this.bbi.read(\n          Buffer.alloc(len),\n          0,\n          len,\n          val,\n          opts,\n        )\n        const node = bpt.parse(buffer)\n        if (node.leafkeys) {\n          let lastOffset\n          for (const { key, offset } of node.leafkeys) {\n            if (name.localeCompare(key) < 0 && lastOffset) {\n              return bptReadNode(lastOffset)\n            }\n            lastOffset = offset\n          }\n          return bptReadNode(lastOffset)\n        }\n        for (const n of node.keys) {\n          if (n.key === name) {\n            return { ...n, field }\n          }\n        }\n\n        return undefined\n      }\n      const rootNodeOffset = 32\n      return bptReadNode(Number(offset) + rootNodeOffset)\n    })\n    return filterUndef(await Promise.all(locs))\n  }\n\n  /*\n   * retrieve the features from the bigbed data that were found through the\n   * lookup of the extraIndex note that there can be multiple extraIndex, see\n   * the BigBed specification and the -extraIndex argument to bedToBigBed\n   *\n   * @param name - the name to search for\n   * @param opts - a SearchOptions argument with optional signal\n   * @return a Promise for an array of Feature\n   */\n  public async searchExtraIndex(name: string, opts: RequestOptions = {}) {\n    const blocks = await this.searchExtraIndexBlocks(name, opts)\n    if (blocks.length === 0) {\n      return []\n    }\n    const view = await this.getUnzoomedView(opts)\n    const res = blocks.map(block => {\n      return new Observable<Feature[]>(observer => {\n        view.readFeatures(observer, [block], opts).catch(e => observer.error(e))\n      }).pipe(\n        reduce((acc, curr) => acc.concat(curr)),\n        map(x => {\n          for (const element of x) {\n            element.field = block.field\n          }\n          return x\n        }),\n      )\n    })\n    const ret = await firstValueFrom(merge(...res))\n    return ret.filter(f => f.rest?.split('\\t')[(f.field || 0) - 3] === name)\n  }\n}\n"],"names":["BigInt32","BigInt","DataView","prototype","getBigInt64","byteOffset","littleEndian","dataView","littleEndianMask","Number","bigEndianMask","getInt32","getUint32","this","getBigUint64","a","b","setBigInt64","value","hi","lo","setInt32","setUint32","setBigUint64","Context","constructor","importPath","useContextVariables","code","scopes","bitFields","tmpVariableCount","references","Map","imports","reverseImports","generateVariable","name","length","push","join","generateOption","val","toString","addImport","generateError","err","pushCode","generateTmpVariable","pushPath","popPath","pop","pushScope","popScope","im","id","get","set","addReference","alias","has","resolved","requested","markResolved","reference","markRequested","aliasList","forEach","getUnresolvedReferences","Array","from","filter","_","map","aliasRegistry","FUNCTION_PREFIX","PRIMITIVE_SIZES","uint8","uint16le","uint16be","uint32le","uint32be","int8","int16le","int16be","int32le","int32be","int64be","int64le","uint64be","uint64le","floatle","floatbe","doublele","doublebe","PRIMITIVE_NAMES","PRIMITIVE_LITTLE_ENDIANS","Parser","varName","type","options","endian","start","primitiveGenerateN","ctx","typeName","primitiveN","setNextParser","useThisEndian","toLowerCase","uint16","uint32","int16","int32","bigIntVersionCheck","Error","int64","uint64","bitN","size","bit1","bit2","bit3","bit4","bit5","bit6","bit7","bit8","bit9","bit10","bit11","bit12","bit13","bit14","bit15","bit16","bit17","bit18","bit19","bit20","bit21","bit22","bit23","bit24","bit25","bit26","bit27","bit28","bit29","bit30","bit31","bit32","namely","skip","seek","relOffset","assert","string","zeroTerminated","greedy","stripNull","encoding","buffer","readUntil","wrapped","wrapper","array","lengthInBytes","choice","tag","choices","keyString","key","parseInt","isNaN","nest","pointer","offset","saveOffset","endianness","endianess","useContextVars","create","constructorFn","Function","getContext","addAliasedCode","addRawCode","getCode","generate","resolveReferences","compile","compiled","TextDecoder","sizeOf","NaN","Object","keys","indexOf","elementSize","next","parse","parser","head","generateBit","generateString","generateBuffer","generateSeek","generateNest","generateArray","generateChoice","generatePointer","generateSaveOffset","generateWrapper","generateAssert","formatter","generateFormatter","generateNext","func","JSON","stringify","bind","getMaxBits","sum","i","getBytes","bitOffset","isBigEndian","rem","mask","isHex","toHex","len","end","pred","cur","clone","counter","lhs","item","isHash","undefined","tempVar","parentVar","generateChoiceCase","nestVar","tagString","defaultChoice","wrapperVar","wrappedBuf","tempBuf","tempOff","tempView","Range","arg1","ranges","min","max","contains","pos","r","isContiguous","getRanges","union","s1","sort","oranges","current","nxt","AbortError","message","super","checkAbortSignal","signal","aborted","DOMException","e","BIG_WIG_TYPE_GRAPH","BIG_WIG_TYPE_VSTEP","BIG_WIG_TYPE_FSTEP","coordFilter","e1","s2","e2","BlockView","bbi","refsByName","cirTreeOffset","isCompressed","blockType","featureCache","cache","maxSize","fill","async","requestData","off","read","Buffer","alloc","parsers","le","summaryParser","leafParser","bigBedParser","bigWigParser","getParsers","readWigData","chrName","observer","opts","chrId","complete","request","cirTreePromise","cirBlockSize","readUInt32BE","readUInt32LE","blocksToFetch","outstanding","cirFobRecur2","cirBlockData","level","data","subarray","p","concat","f","filterFeats","l","blockOffset","blockSize","recurOffsets","cirFobRecur","error","startChrom","startBase","endChrom","endBase","cirFobStartFetch","fr","resultBuffer","element","readFeatures","catch","maxCirBlockSpan","spans","blockSpan","parseSummaryBlock","startOffset","features","byteLength","chromId","validCnt","minScore","getFloat32","maxScore","sumData","summary","score","parseBigBedBlock","items","currOffset","res","uniqueId","parseBigWigBlock","blockStart","itemStep","itemSpan","getUint8","itemCount","getUint16","blocks","blockGroupsToFetch","b0","b1","blockGroups","lastBlock","lastBlockEnd","block","groupBlocks","Promise","all","blockGroup","resultData","input","console","warn","BIG_WIG_MAGIC","BIG_BED_MAGIC","isBE","headerParser","totalSummaryParser","chromTreeParser","isLeafNode","BBI","getHeader","headerP","_getHeader","args","filehandle","renameRefSeqs","s","path","url","header","_getMainHeader","chroms","_readChromTree","requestSize","_isBigEndian","ret","magic","asOffset","totalSummaryOffset","fileType","autoSql","arr","decode","tail","totalSummary","basesCovered","readInt32LE","readInt32BE","refsByNumber","unzoomedDataOffset","chromTreeOffset","keySize","leafNodeParser","nonleafNodeParser","bptReadNode","currentOffset","cnt","n","leafRet","refId","refSize","refRec","nextNodes","nonleafRet","childOffset","getUnzoomedView","unzoomedIndexOffset","uncompressBufSize","getFeatureStream","refName","view","basesPerSpan","scale","getView","Observable","getFeatures","ob","firstValueFrom","pipe","toArray","flat","BigWig","zoomLevels","fileSize","basesPerPx","maxLevel","zh","reductionLevel","indexOffset","BigBed","readIndicesCache","_readIndices","readIndices","rest","_scale","extHeaderOffset","count","extParser","indices","searchExtraIndexBlocks","locs","index","field","valSize","bpt","nodeOffset","node","leafkeys","lastOffset","localeCompare","t","searchExtraIndex","reduce","acc","curr","x","merge","split"],"sourceRoot":""}