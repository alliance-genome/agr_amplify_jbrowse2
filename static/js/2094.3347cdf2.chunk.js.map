{"version":3,"file":"static/js/2094.3347cdf2.chunk.js","mappings":"6VAsBqBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GASnB,WACEC,EACAC,EACAC,GACC,IAAD,yBACA,cAAMF,EAAQC,EAAeC,IAbvBC,YAYN,EAEA,EAAKA,OAAS,IAAIC,EAAAA,EAAO,CACvBC,YAAYC,EAAAA,EAAAA,eACVC,EAAAA,EAAAA,gBAAeP,EAAQ,kBACvB,EAAKE,iBALT,EA+D6B,OAvD9B,sEAED,WAAoBM,GAApB,+FACwCA,GAAQ,IAAtCC,eAAAA,OADV,MAC2B,aAD3B,qBAESC,EAAAA,EAAAA,cAAa,4BAA6BD,GAAgB,kBAC/D,EAAKN,OAAOQ,UAAUH,OAH1B,8FAFC,IAED,kEAOA,WAAyBA,GAAzB,8FAC+BI,KAAKC,MAAML,GAD1C,uBACUM,EADV,EACUA,WADV,kBAESC,OAAOC,KAAKF,IAFrB,mGAPA,IAOA,kEAKA,WAAyBG,GAAzB,gGACiCL,KAAKC,QADtC,uBACUK,EADV,EACUA,aADV,4BAESA,EAAaD,UAFtB,aAES,EAAqBE,MAF9B,mGALA,IAKA,qEAKA,WAA4BX,GAA5B,8FACiCI,KAAKC,MAAML,GAD5C,uBACUY,EADV,EACUA,aADV,mBAESC,EAAAA,EAAAA,IAAaD,IAFtB,mGALA,IAKA,yBAKA,SAAmBE,GAA2C,IAAD,OAA1Bd,EAA0B,uDAAJ,GAC/Ce,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IACxB,EAKIjB,EAJFkB,QAAAA,OADF,MACY,EADZ,EAEEC,EAGEnB,EAHFmB,OAFF,EAKInB,EAFFoB,WAAAA,OAHF,MAGe,EAHf,IAKIpB,EADFC,eAAAA,OAJF,MAImB,aAJnB,EAMA,OAAOoB,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAN,6EAC/BrB,EAAe,2BADgB,SAEd,EAAKN,OAAO4B,iBAAiBR,EAASC,EAAOC,GAA7C,kBACZjB,GADY,IAEfwB,aAAcN,EAAUE,KAJK,cAM5BK,MACDC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,IAAI,SAAAC,GACF,OAAO,IAAIC,EAAAA,EAAc,CACvBC,GAAG,GAAD,OAAKf,EAAL,YAAgBa,EAAOZ,MAAvB,YAAgCY,EAAOX,KACzCc,MAAK,kBAAMH,GAAP,IAAeb,QAAAA,UAGvBiB,UAAUV,GAdmB,2CAAV,sDAepBH,K,2EAIL,WAA2Bc,GAA3B,+FACS,CAAEC,eAAgB,IAD3B,8F,IAAA,2BAIA,gBAA+B,EA5EZ3C,CAAsB4C,EAAAA,wBAAtB5C,EAGL6C,aAAe,CAC3B,gBACA,gBACA","sources":["../../../plugins/wiggle/src/BigWigAdapter/BigWigAdapter.ts"],"sourcesContent":["import { BigWig } from '@gmod/bbi'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { updateStatus } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport { rectifyStats, UnrectifiedFeatureStats } from '@jbrowse/core/util/stats'\nimport PluginManager from '@jbrowse/core/PluginManager'\n\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nexport default class BigWigAdapter extends BaseFeatureDataAdapter {\n  private bigwig: BigWig\n\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    this.bigwig = new BigWig({\n      filehandle: openLocation(\n        readConfObject(config, 'bigWigLocation'),\n        this.pluginManager,\n      ),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    return updateStatus('Downloading bigwig header', statusCallback, () =>\n      this.bigwig.getHeader(opts),\n    )\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { refsByName } = await this.setup(opts)\n    return Object.keys(refsByName)\n  }\n\n  public async refIdToName(refId: number) {\n    const { refsByNumber } = await this.setup()\n    return refsByNumber[refId]?.name\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const { totalSummary } = await this.setup(opts)\n    return rectifyStats(totalSummary as UnrectifiedFeatureStats)\n  }\n\n  public getFeatures(region: Region, opts: WiggleOptions = {}) {\n    const { refName, start, end } = region\n    const {\n      bpPerPx = 0,\n      signal,\n      resolution = 1,\n      statusCallback = () => {},\n    } = opts\n    return ObservableCreate<Feature>(async observer => {\n      statusCallback('Downloading bigwig data')\n      const ob = await this.bigwig.getFeatureStream(refName, start, end, {\n        ...opts,\n        basesPerSpan: bpPerPx / resolution,\n      })\n      ob.pipe(\n        mergeAll(),\n        map(record => {\n          return new SimpleFeature({\n            id: `${refName}:${record.start}-${record.end}`,\n            data: { ...record, refName },\n          })\n        }),\n      ).subscribe(observer)\n    }, signal)\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async estimateRegionsStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["BigWigAdapter","config","getSubAdapter","pluginManager","bigwig","BigWig","filehandle","openLocation","readConfObject","opts","statusCallback","updateStatus","getHeader","this","setup","refsByName","Object","keys","refId","refsByNumber","name","totalSummary","rectifyStats","region","refName","start","end","bpPerPx","signal","resolution","ObservableCreate","observer","getFeatureStream","basesPerSpan","pipe","mergeAll","map","record","SimpleFeature","id","data","subscribe","_regions","featureDensity","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}