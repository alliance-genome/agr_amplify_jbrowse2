{"version":3,"sources":["../../../node_modules/@gmod/indexedfasta/esm/indexedFasta.js","../../../node_modules/@gmod/indexedfasta/esm/index.js","../../../node_modules/@gmod/indexedfasta/esm/bgzipIndexedFasta.js","../../../plugins/sequence/src/IndexedFastaAdapter/IndexedFastaAdapter.ts"],"names":["Object","defineProperty","exports","value","generic_filehandle_1","require","_faiOffset","idx","pos","offset","lineBytes","Math","floor","lineLength","readFAI","fai","opts","readFile","text","length","Error","idCounter","data","toString","split","filter","line","test","map","row","currSeq","name","id","start","end","fromEntries","entry","IndexedFasta","fasta","path","faiPath","chunkSizeLimit","this","LocalFile","indexes","_getIndexes","keys","returnObject","vals","values","i","seqName","_a","seqId","min","max","indexEntry","undefined","_fetchFromIndexEntry","getResiduesByName","TypeError","position","readlen","toLocaleString","residues","Buffer","allocUnsafe","read","replace","default","__importDefault","mod","__esModule","BgzipIndexedFasta","FetchableSmallFasta","parseSmallFasta","object_fromentries_1","bgzipIndexedFasta_1","indexedFasta_1","t","entryText","defLine","seqLines","description","sequence","join","shim","then","buffer","find","iter","substr","bgzf_filehandle_1","gzi","gziPath","BgzfFilehandle","filehandle","gziFilehandle","config","getSubAdapter","pluginManager","seqCache","AbortablePromiseCache","cache","LRU","maxSize","fill","args","signal","a","refName","getSequence","fastaLocation","readConfObject","faiLocation","fastaOpts","openLocation","getSequenceNames","getSequenceSizes","seqSizes","region","ObservableCreate","observer","getSequenceSize","size","regionEnd","chunks","e","chunkSize","chunkStart","s","r","push","get","JSON","stringify","Promise","all","seq","slice","next","SimpleFeature","complete","BaseSequenceAdapter"],"mappings":"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","file":"static/js/25.8b605da9.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generic_filehandle_1 = require(\"generic-filehandle\");\nfunction _faiOffset(idx, pos) {\n    return (idx.offset +\n        idx.lineBytes * Math.floor(pos / idx.lineLength) +\n        (pos % idx.lineLength));\n}\nasync function readFAI(fai, opts) {\n    const text = await fai.readFile(opts);\n    if (!(text && text.length)) {\n        throw new Error('No data read from FASTA index (FAI) file');\n    }\n    let idCounter = 0;\n    let currSeq;\n    const data = text\n        .toString('utf8')\n        .split(/\\r?\\n/)\n        .filter(line => /\\S/.test(line))\n        .map(line => line.split('\\t'))\n        .filter(row => row[0] !== '')\n        .map(row => {\n        if (!currSeq || currSeq.name !== row[0]) {\n            currSeq = { name: row[0], id: idCounter };\n            idCounter += 1;\n        }\n        return {\n            id: currSeq.id,\n            name: row[0],\n            length: +row[1],\n            start: 0,\n            end: +row[1],\n            offset: +row[2],\n            lineLength: +row[3],\n            lineBytes: +row[4],\n        };\n    });\n    return {\n        name: Object.fromEntries(data.map(entry => [entry.name, entry])),\n        id: Object.fromEntries(data.map(entry => [entry.id, entry])),\n    };\n}\nclass IndexedFasta {\n    constructor({ fasta, fai, path, faiPath, chunkSizeLimit = 1000000, }) {\n        if (fasta) {\n            this.fasta = fasta;\n        }\n        else if (path) {\n            this.fasta = new generic_filehandle_1.LocalFile(path);\n        }\n        else {\n            throw new Error('Need to pass filehandle for fasta or path to localfile');\n        }\n        if (fai) {\n            this.fai = fai;\n        }\n        else if (faiPath) {\n            this.fai = new generic_filehandle_1.LocalFile(faiPath);\n        }\n        else if (path) {\n            this.fai = new generic_filehandle_1.LocalFile(`${path}.fai`);\n        }\n        else {\n            throw new Error('Need to pass filehandle for  or path to localfile');\n        }\n        this.chunkSizeLimit = chunkSizeLimit;\n    }\n    async _getIndexes(opts) {\n        if (!this.indexes) {\n            this.indexes = readFAI(this.fai, opts);\n        }\n        return this.indexes;\n    }\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n    async getSequenceNames(opts) {\n        return Object.keys((await this._getIndexes(opts)).name);\n    }\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n    async getSequenceSizes(opts) {\n        const returnObject = {};\n        const idx = await this._getIndexes(opts);\n        const vals = Object.values(idx.id);\n        for (let i = 0; i < vals.length; i += 1) {\n            returnObject[vals[i].name] = vals[i].length;\n        }\n        return returnObject;\n    }\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n    async getSequenceSize(seqName, opts) {\n        var _a;\n        const idx = await this._getIndexes(opts);\n        return (_a = idx.name[seqName]) === null || _a === void 0 ? void 0 : _a.length;\n    }\n    /**\n     *\n     * @param {string} name\n     * @returns {Promise[boolean]} true if the file contains the given reference sequence name\n     */\n    async hasReferenceSequence(name, opts) {\n        return !!(await this._getIndexes(opts)).name[name];\n    }\n    /**\n     *\n     * @param {number} seqId\n     * @param {number} min\n     * @param {number} max\n     */\n    async getResiduesById(seqId, min, max, opts) {\n        const indexEntry = (await this._getIndexes(opts)).id[seqId];\n        if (!indexEntry) {\n            return undefined;\n        }\n        return this._fetchFromIndexEntry(indexEntry, min, max, opts);\n    }\n    /**\n     * @param {string} seqName\n     * @param {number} min\n     * @param {number} max\n     */\n    async getResiduesByName(seqName, min, max, opts) {\n        const indexEntry = (await this._getIndexes(opts)).name[seqName];\n        if (!indexEntry) {\n            return undefined;\n        }\n        return this._fetchFromIndexEntry(indexEntry, min, max, opts);\n    }\n    //alias for getResiduesByName\n    async getSequence(seqName, min, max, opts) {\n        return this.getResiduesByName(seqName, min, max, opts);\n    }\n    async _fetchFromIndexEntry(indexEntry, min = 0, max, opts) {\n        let end = max;\n        if (min < 0) {\n            throw new TypeError('regionStart cannot be less than 0');\n        }\n        if (end === undefined || end > indexEntry.length) {\n            end = indexEntry.length;\n        }\n        if (min >= end) {\n            return '';\n        }\n        const position = _faiOffset(indexEntry, min);\n        const readlen = _faiOffset(indexEntry, end) - position;\n        if (readlen > this.chunkSizeLimit) {\n            throw new Error(`data size of ${readlen.toLocaleString()} bytes exceeded chunk size limit of ${this.chunkSizeLimit.toLocaleString()} bytes`);\n        }\n        const residues = Buffer.allocUnsafe(readlen);\n        await this.fasta.read(residues, 0, readlen, position, opts);\n        return residues.toString('utf8').replace(/\\s+/g, '');\n    }\n}\nexports.default = IndexedFasta;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BgzipIndexedFasta = exports.IndexedFasta = exports.FetchableSmallFasta = exports.parseSmallFasta = void 0;\nconst object_fromentries_1 = __importDefault(require(\"object.fromentries\"));\nconst generic_filehandle_1 = require(\"generic-filehandle\");\nconst bgzipIndexedFasta_1 = __importDefault(require(\"./bgzipIndexedFasta\"));\nexports.BgzipIndexedFasta = bgzipIndexedFasta_1.default;\nconst indexedFasta_1 = __importDefault(require(\"./indexedFasta\"));\nexports.IndexedFasta = indexedFasta_1.default;\nif (!Object.fromEntries) {\n    // @ts-ignore\n    object_fromentries_1.default.shim();\n}\nfunction parseSmallFasta(text) {\n    return text\n        .split('>')\n        .filter(t => /\\S/.test(t))\n        .map(entryText => {\n        const [defLine, ...seqLines] = entryText.split('\\n');\n        const [id, ...description] = defLine.split(' ');\n        const sequence = seqLines.join('').replace(/\\s/g, '');\n        return {\n            id,\n            description: description.join(' '),\n            sequence,\n        };\n    });\n}\nexports.parseSmallFasta = parseSmallFasta;\n// memoized\nclass FetchableSmallFasta {\n    constructor({ fasta, path }) {\n        if (fasta) {\n            this.fasta = fasta;\n        }\n        else if (path) {\n            this.fasta = new generic_filehandle_1.LocalFile(path);\n        }\n        else {\n            throw new Error('Need to pass fasta or path');\n        }\n        this.data = this.fasta.readFile().then(buffer => {\n            const text = buffer.toString('utf8');\n            return parseSmallFasta(text);\n        });\n    }\n    async fetch(id, start, end) {\n        const data = await this.data;\n        const entry = data.find(iter => iter.id === id);\n        const length = end - start;\n        if (!entry) {\n            throw new Error(`no sequence with id ${id} exists`);\n        }\n        return entry.sequence.substr(start, length);\n    }\n    async getSequenceNames() {\n        const data = await this.data;\n        return data.map(entry => entry.id);\n    }\n}\nexports.FetchableSmallFasta = FetchableSmallFasta;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bgzf_filehandle_1 = require(\"@gmod/bgzf-filehandle\");\nconst indexedFasta_1 = __importDefault(require(\"./indexedFasta\"));\nclass BgzipIndexedFasta extends indexedFasta_1.default {\n    constructor({ fasta, path, fai, faiPath, gzi, gziPath, chunkSizeLimit, }) {\n        super({ fasta, path, fai, faiPath, chunkSizeLimit });\n        if (fasta && gzi) {\n            this.fasta = new bgzf_filehandle_1.BgzfFilehandle({\n                filehandle: fasta,\n                gziFilehandle: gzi,\n            });\n        }\n        else if (path && gziPath) {\n            this.fasta = new bgzf_filehandle_1.BgzfFilehandle({ path, gziPath });\n        }\n    }\n}\nexports.default = BgzipIndexedFasta;\n","import { IndexedFasta } from '@gmod/indexedfasta'\nimport {\n  BaseSequenceAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation, NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from '@jbrowse/core/util/QuickLRU'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class extends BaseSequenceAdapter {\n  protected fasta: IndexedFasta\n\n  private seqCache = new AbortablePromiseCache({\n    cache: new LRU({ maxSize: 200 }),\n    fill: async (\n      args: { refName: string; start: number; end: number },\n      signal?: AbortSignal,\n    ) => {\n      const { refName, start, end } = args\n      return this.fasta.getSequence(refName, start, end, { ...args, signal })\n    },\n  })\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const fastaLocation = readConfObject(config, 'fastaLocation')\n    const faiLocation = readConfObject(config, 'faiLocation')\n    const fastaOpts = {\n      fasta: openLocation(fastaLocation as FileLocation, this.pluginManager),\n      fai: openLocation(faiLocation as FileLocation, this.pluginManager),\n    }\n\n    this.fasta = new IndexedFasta(fastaOpts)\n  }\n\n  public getRefNames(opts?: BaseOptions) {\n    return this.fasta.getSequenceNames(opts)\n  }\n\n  public async getRegions(opts?: BaseOptions) {\n    const seqSizes = await this.fasta.getSequenceSizes(opts)\n    return Object.keys(seqSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: seqSizes[refName],\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures(region: NoAssemblyRegion, opts?: BaseOptions) {\n    const { refName, start, end } = region\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.fasta.getSequenceSize(refName, opts)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const chunks = []\n      const chunkSize = 128000\n\n      const s = start - (start % chunkSize)\n      const e = end + (chunkSize - (end % chunkSize))\n      for (let chunkStart = s; chunkStart < e; chunkStart += chunkSize) {\n        const r = {\n          refName,\n          start: chunkStart,\n          end: chunkStart + chunkSize,\n        }\n        chunks.push(this.seqCache.get(JSON.stringify(r), r, opts?.signal))\n      }\n      const seq = (await Promise.all(chunks))\n        .join('')\n        .slice(start - s)\n        .slice(0, end - start)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}