{"version":3,"sources":["../../../plugins/linear-comparative-view/src/LinearComparativeView/components/Header.tsx","../../../plugins/linear-comparative-view/src/LinearComparativeView/components/LinearComparativeView.tsx"],"names":["useStyles","makeStyles","headerBar","gridArea","display","spacer","flexGrow","bp","alignItems","marginLeft","searchContainer","searchBox","LinkViews","observer","model","IconButton","onClick","toggleLinkViews","title","linkViews","color","SquareView","squareView","Header","ExtraButtons","classes","anyShowHeaders","views","some","view","hideHeader","className","map","key","id","showHelp","Typography","variant","Math","round","coarseTotalBp","toLocaleString","container","overlay","zIndex","content","position","grid","relative","Overlays","tracks","track","displays","RenderingComponent","trackId","getConf","style","height","middleComparativeHeight","overflow","MiddleComparativeView","ReactComponent","getEnv","pluginManager","getViewType","type","onDrag","n","setMiddleComparativeHeight","background","OverlayComparativeView","LinearComparativeView","props","d"],"mappings":"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","file":"static/js/71.66528dd6.chunk.js","sourcesContent":["import React from 'react'\nimport { IconButton, Typography, makeStyles } from '@material-ui/core'\nimport { SearchBox } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// icons\nimport LinkIcon from '@material-ui/icons/Link'\nimport LinkOffIcon from '@material-ui/icons/LinkOff'\nimport CropFreeIcon from '@material-ui/icons/CropFree'\n\nimport { LinearComparativeViewModel } from '../model'\n\ntype LCV = LinearComparativeViewModel\n\nconst useStyles = makeStyles(() => ({\n  headerBar: {\n    gridArea: '1/1/auto/span 2',\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  bp: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 10,\n  },\n  searchContainer: {\n    marginLeft: 5,\n  },\n  searchBox: {\n    display: 'flex',\n  },\n}))\n\nconst LinkViews = observer(({ model }: { model: LCV }) => {\n  return (\n    <IconButton\n      onClick={model.toggleLinkViews}\n      title=\"Toggle linked scrolls and behavior across views\"\n    >\n      {model.linkViews ? (\n        <LinkOffIcon color=\"secondary\" />\n      ) : (\n        <LinkIcon color=\"secondary\" />\n      )}\n    </IconButton>\n  )\n})\n\nconst SquareView = observer(({ model }: { model: LCV }) => {\n  return (\n    <IconButton\n      onClick={model.squareView}\n      title=\"Square view (make both the same zoom level)\"\n    >\n      <CropFreeIcon color=\"secondary\" />\n    </IconButton>\n  )\n})\n\nconst Header = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const anyShowHeaders = model.views.some(view => !view.hideHeader)\n    return (\n      <div className={classes.headerBar}>\n        <LinkViews model={model} />\n        <SquareView model={model} />\n        {ExtraButtons}\n        {!anyShowHeaders\n          ? model.views.map(view => (\n              <div key={view.id} className={classes.searchBox}>\n                <div className={classes.searchContainer}>\n                  <SearchBox model={view} showHelp={false} />\n                </div>\n                <div className={classes.bp}>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    className={classes.bp}\n                  >\n                    {Math.round(view.coarseTotalBp).toLocaleString('en-US')} bp\n                  </Typography>\n                </div>\n              </div>\n            ))\n          : null}\n\n        <div className={classes.spacer} />\n      </div>\n    )\n  },\n)\n\nexport default Header\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { getEnv } from 'mobx-state-tree'\nimport { ResizeHandle } from '@jbrowse/core/ui'\nimport { LinearComparativeViewModel } from '../model'\nimport Header from './Header'\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    display: 'grid',\n  },\n  overlay: {\n    zIndex: 100,\n    gridArea: '1/1',\n  },\n  content: {\n    gridArea: '1/1',\n    position: 'relative',\n  },\n  grid: {\n    display: 'grid',\n  },\n  relative: {\n    position: 'relative',\n  },\n}))\n\ntype LCV = LinearComparativeViewModel\n\nconst Overlays = observer(({ model }: { model: LCV }) => {\n  const classes = useStyles()\n  return (\n    <>\n      {model.tracks.map(track => {\n        const [display] = track.displays\n        const { RenderingComponent } = display\n        const trackId = getConf(track, 'trackId')\n        return RenderingComponent ? (\n          <div\n            className={classes.overlay}\n            key={trackId}\n            style={{\n              height: model.middleComparativeHeight,\n              overflow: 'hidden',\n            }}\n          >\n            <RenderingComponent model={display} />\n          </div>\n        ) : null\n      })}\n    </>\n  )\n})\n\n// The comparative is in the middle of the views\nconst MiddleComparativeView = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const { views } = model\n    const { ReactComponent } = getEnv(model).pluginManager.getViewType(\n      views[0].type,\n    )\n\n    return (\n      <div>\n        <Header ExtraButtons={ExtraButtons} model={model} />\n        <div className={classes.container}>\n          <ReactComponent model={views[0]} />\n          <div className={classes.grid}>\n            <Overlays model={model} />\n          </div>\n          <ResizeHandle\n            onDrag={n =>\n              model.setMiddleComparativeHeight(\n                model.middleComparativeHeight + n,\n              )\n            }\n            style={{\n              height: 4,\n              background: '#ccc',\n            }}\n          />\n          <ReactComponent model={views[1]} />\n        </div>\n      </div>\n    )\n  },\n)\nconst OverlayComparativeView = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const { views } = model\n    const { pluginManager } = getEnv(model)\n    return (\n      <div>\n        <Header model={model} ExtraButtons={ExtraButtons} />\n        <div className={classes.container}>\n          <div className={classes.content}>\n            <div className={classes.relative}>\n              {views.map(view => {\n                const { ReactComponent } = pluginManager.getViewType(view.type)\n                return <ReactComponent key={view.id} model={view} />\n              })}\n            </div>\n            <Overlays model={model} />\n          </div>\n        </div>\n      </div>\n    )\n  },\n)\n\nconst LinearComparativeView = observer(\n  (props: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const { model } = props\n    const middle = model.tracks.some(({ displays }) =>\n      displays.some((d: AnyConfigurationModel) => getConf(d, 'middle')),\n    )\n    return middle ? (\n      <MiddleComparativeView {...props} />\n    ) : (\n      <OverlayComparativeView {...props} />\n    )\n  },\n)\n\nexport default LinearComparativeView\n"],"sourceRoot":""}