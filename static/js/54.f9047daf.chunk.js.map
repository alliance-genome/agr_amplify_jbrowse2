{"version":3,"sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/FilterByTag.tsx"],"names":["useStyles","makeStyles","theme","root","width","paper","padding","spacing","margin","closeButton","position","right","top","color","palette","grey","field","flagNames","Bitmask","props","flag","setFlag","type","value","onChange","event","target","map","name","index","val","key","checked","Boolean","htmlFor","observer","model","handleClose","classes","filterBy","useState","flagInclude","setFlagInclude","flagExclude","setFlagExclude","tagFilter","tag","setTag","tagValue","setTagValue","readName","setReadName","validTag","match","site","open","onClose","className","onClick","href","variant","style","display","placeholder","inputProps","maxLength","error","length","helperText","setFilterBy","undefined"],"mappings":"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","file":"static/js/54.f9047daf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Link,\n  Paper,\n  TextField,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\n\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 500,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  field: {\n    margin: theme.spacing(2),\n  },\n}))\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nfunction Bitmask(props: { flag?: number; setFlag: Function }) {\n  const { flag = 0, setFlag } = props\n  return (\n    <>\n      <TextField\n        type=\"number\"\n        value={flag}\n        onChange={event => setFlag(+event.target.value)}\n      />\n      {flagNames.map((name, index) => {\n        const val = flag & (1 << index)\n        const key = `${name}_${val}`\n        return (\n          <div key={key}>\n            <input\n              type=\"checkbox\"\n              checked={Boolean(val)}\n              onChange={event => {\n                if (event.target.checked) {\n                  setFlag(flag | (1 << index))\n                } else {\n                  setFlag(flag & ~(1 << index))\n                }\n              }}\n            />\n            <label htmlFor={key}>{name}</label>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\nfunction FilterByTagDlg(props: {\n  model: {\n    filterBy?: {\n      flagExclude: number\n      flagInclude: number\n      readName?: string\n      tagFilter?: { tag: string; value: string }\n    }\n    setFilterBy: Function\n  }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const classes = useStyles()\n  const { filterBy } = model\n  const [flagInclude, setFlagInclude] = useState(filterBy?.flagInclude)\n  const [flagExclude, setFlagExclude] = useState(filterBy?.flagExclude)\n  const [tag, setTag] = useState(filterBy?.tagFilter?.tag || '')\n  const [tagValue, setTagValue] = useState(filterBy?.tagFilter?.value || '')\n  const [readName, setReadName] = useState(filterBy?.readName || '')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n\n  const site = 'https://broadinstitute.github.io/picard/explain-flags.html'\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Filter options\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Typography>\n          Set filter bitmask options. Refer to <Link href={site}>{site}</Link>{' '}\n          for details\n        </Typography>\n        <div className={classes.root}>\n          <Paper className={classes.paper} variant=\"outlined\">\n            <div style={{ display: 'flex' }}>\n              <div>\n                <Typography>Read must have ALL these flags</Typography>\n                <Bitmask flag={flagInclude} setFlag={setFlagInclude} />\n              </div>\n              <div>\n                <Typography>Read must have NONE of these flags</Typography>\n                <Bitmask flag={flagExclude} setFlag={setFlagExclude} />\n              </div>\n            </div>\n          </Paper>\n          <Paper className={classes.paper} variant=\"outlined\">\n            <Typography>\n              Filter by tag name and value. Use * in the value field to get all\n              reads containing any value for that tag. Example: filter tag name\n              SA with value * to get all split/supplementary reads. Other\n              examples include HP for haplotype, or RG for read group\n            </Typography>\n            <TextField\n              className={classes.field}\n              value={tag}\n              onChange={event => {\n                setTag(event.target.value)\n              }}\n              placeholder=\"Enter tag name\"\n              inputProps={{\n                maxLength: 2,\n                'data-testid': 'color-tag-name-input',\n              }}\n              error={tag.length === 2 && !validTag}\n              helperText={\n                tag.length === 2 && !validTag ? 'Not a valid tag' : ''\n              }\n              data-testid=\"color-tag-name\"\n            />\n            <TextField\n              className={classes.field}\n              value={tagValue}\n              onChange={event => {\n                setTagValue(event.target.value)\n              }}\n              placeholder=\"Enter tag value\"\n              inputProps={{\n                'data-testid': 'color-tag-name-input',\n              }}\n              data-testid=\"color-tag-value\"\n            />\n          </Paper>\n          <Paper className={classes.paper} variant=\"outlined\">\n            <Typography>Filter by read name</Typography>\n            <TextField\n              className={classes.field}\n              value={readName}\n              onChange={event => {\n                setReadName(event.target.value)\n              }}\n              placeholder=\"Enter read name\"\n              inputProps={{\n                'data-testid': 'color-tag-readname-input',\n              }}\n              data-testid=\"color-tag-readname\"\n            />\n          </Paper>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              model.setFilterBy({\n                flagInclude,\n                flagExclude,\n                readName,\n                tagFilter:\n                  tag !== ''\n                    ? {\n                        tag,\n                        value: tagValue,\n                      }\n                    : undefined,\n              })\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(FilterByTagDlg)\n"],"sourceRoot":""}