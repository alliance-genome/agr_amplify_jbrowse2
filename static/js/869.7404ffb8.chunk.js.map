{"version":3,"file":"static/js/869.7404ffb8.chunk.js","mappings":"4XAuFA,GAnEsBA,EAAAA,EAAAA,WAAS,SAAAC,GAa3B,IAZFC,EAASD,EAATC,UACAC,EAAwBF,EAAxBE,yBACAC,EAAsBH,EAAtBG,uBAeA,IAAQC,EAAeH,EAAUI,QAAzBD,WAER,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMC,UAC/BC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAF,SAAA,EACJJ,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAAAH,UACRC,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAJ,SAAA,EACPJ,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAC,UACXJ,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAC,kBACXJ,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAC,aACXJ,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAC,kBAGfJ,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CAAAN,SACPN,EAAWa,KAAI,SAAAC,GACd,IAAMC,GAAOC,EAAAA,EAAAA,gBAAeF,EAAU,QAChCG,GAAcD,EAAAA,EAAAA,gBAAeF,EAAU,eACvCI,GAAUF,EAAAA,EAAAA,gBAAeF,EAAU,WACzC,OACEP,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAJ,SAAA,EACPJ,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAES,KACZb,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAEW,KACZf,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAL,SAAEY,EAAUA,EAAQC,WAAa,MAC3CZ,EAAAA,EAAAA,MAACI,EAAAA,EAAS,CAAAL,SAAA,EACRJ,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CACT,iBAAAC,OAAgBN,EAAI,SACpBO,QAAS,WACPxB,GAAyB,GACzBC,EAAuBe,EACzB,EAAER,UAEFJ,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,MAAM,eAEpBtB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CACT,iBAAAC,OAAgBN,EAAI,WACpBO,QAAS,kBAvC3B,SAAwBP,GACtBlB,EAAUI,QAAQwB,mBAAmBV,EACvC,CAqCiCW,CAAeX,EAAK,EAACT,UAEpCJ,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CAACH,MAAM,iBAlBTT,EAuBnB,UAKV,I,iCC5EMa,GAAkBjC,EAAAA,EAAAA,WAAS,SAAAC,GAQ7B,IAPFiC,EAAgBjC,EAAhBiC,iBACAC,EAAmBlC,EAAnBkC,oBACAC,EAAYnC,EAAZmC,aAMA,OACE7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACRC,MAAOJ,EACPK,MAAM,OACNC,QAAM,EACNC,WAAW,yBACXC,WAAS,EACTC,SAAU,SAAAC,GAAK,OAAIT,EAAoBS,EAAMC,OAAOP,MAAM,EAAC3B,SAE1DyB,EAAalB,KAAI,SAAA4B,GAAG,OACnBvC,EAAAA,EAAAA,KAACwC,EAAAA,EAAQ,CAAWT,MAAOQ,EAAInC,SAC5BmC,GADYA,EAEJ,KAInB,IAEME,GAAehD,EAAAA,EAAAA,WACnB,SAAAiD,GAwBO,IAvBLf,EAAgBe,EAAhBf,iBACAgB,EAAaD,EAAbC,cACAC,EAAgBF,EAAhBE,iBACAC,EAAWH,EAAXG,YACAC,EAAcJ,EAAdI,eACAC,EAAWL,EAAXK,YACAC,EAAcN,EAAdM,eACAC,EAAcP,EAAdO,eACAC,EAAiBR,EAAjBQ,kBACAC,EAAkBT,EAAlBS,mBACAC,EAAqBV,EAArBU,sBAcA,MACuB,wBAArBzB,GACqB,sBAArBA,GAGEtB,EAAAA,EAAAA,MAACgD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEnD,SAAA,EACzBJ,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACG,MAAI,EAAApD,UACRJ,EAAAA,EAAAA,KAACyD,EAAAA,aAAY,CACX5C,KAAK,gBACL6C,SAAUf,EACVgB,YAAa,SAAAC,GAAG,OAAIhB,EAAiBgB,EAAI,OAG7C5D,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACG,MAAI,EAAApD,UACRJ,EAAAA,EAAAA,KAACyD,EAAAA,aAAY,CACX5C,KAAK,cACL6C,SAAUb,EACVc,YAAa,SAAAC,GAAG,OAAId,EAAec,EAAI,MAGrB,sBAArBjC,GACC3B,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACG,MAAI,EAAApD,UACRJ,EAAAA,EAAAA,KAACyD,EAAAA,aAAY,CACX5C,KAAK,cACL6C,SAAUX,EACVY,YAAa,SAAAC,GAAG,OAAIZ,EAAeY,EAAI,MAGzC,QAKe,kBAArBjC,GAEAtB,EAAAA,EAAAA,MAACgD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEnD,SAAA,EACzBJ,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACG,MAAI,EAAApD,UACRJ,EAAAA,EAAAA,KAACyD,EAAAA,aAAY,CACX5C,KAAK,iBACL6C,SAAUT,EACVU,YAAa,SAAAC,GAAG,OAAIV,EAAkBU,EAAI,OAG9C5D,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACG,MAAI,EAAApD,UACRJ,EAAAA,EAAAA,KAACyD,EAAAA,aAAY,CACX5C,KAAK,+FACL6C,SAAUP,EACVQ,YAAa,SAAAC,GAAG,OAAIR,EAAsBQ,EAAI,SAOjD,IACT,IAGIC,EAAQ,CAAEC,IAAK,IAiIrB,GA/HwBrE,EAAAA,EAAAA,WAAS,SAAAsE,GAO7B,IANFpE,EAASoE,EAATpE,UACAqE,EAAWD,EAAXC,YAMMnC,EAAe,CACnB,sBACA,oBACA,iBAGFoC,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAsDL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAClDG,GAAgDT,EAAAA,EAAAA,UAASrC,EAAa,IAAG+C,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAlEhD,EAAgBiD,EAAA,GAAEhD,EAAmBgD,EAAA,GAC5CC,GAA0CX,EAAAA,EAAAA,UAASL,GAAMiB,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAAlDlC,EAAamC,EAAA,GAAElC,EAAgBkC,EAAA,GACtCC,GAAsCb,EAAAA,EAAAA,UAASL,GAAMmB,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA9ClC,EAAWmC,EAAA,GAAElC,EAAckC,EAAA,GAClCC,GAAsCf,EAAAA,EAAAA,UAASL,GAAMqB,GAAAd,EAAAA,EAAAA,GAAAa,EAAA,GAA9ClC,EAAWmC,EAAA,GAAElC,EAAckC,EAAA,GAClCC,GAA4CjB,EAAAA,EAAAA,UAASL,GAAMuB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAApDlC,EAAcmC,EAAA,GAAElC,EAAiBkC,EAAA,GACxCC,GAAoDnB,EAAAA,EAAAA,UAASL,GAAMyB,GAAAlB,EAAAA,EAAAA,GAAAiB,EAAA,GAA5DlC,EAAkBmC,EAAA,GAAElC,EAAqBkC,EAAA,GAsDhD,OACEjF,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAACF,EAAAA,EAAK,CAAAC,SAAA,EACJJ,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACRyD,GAAG,gBACHC,WAAY,CAAE,cAAe,iBAC7BxD,MAAM,gBACNE,WAAW,8BACXuD,QAAQ,WACR1D,MAAOsC,EACPjC,SAAU,SAAAC,GAAK,OAAIiC,EAAgBjC,EAAMC,OAAOP,MAAM,KAExD/B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CACRyD,GAAG,gBACHC,WAAY,CAAE,cAAe,yBAC7BxD,MAAM,wBACNE,WAAW,4EACXuD,QAAQ,WACR1D,MAAO0C,EACPrC,SAAU,SAAAC,GAAK,OAAIqC,EAAuBrC,EAAMC,OAAOP,MAAM,KAE/D/B,EAAAA,EAAAA,KAAC0B,EAAe,CACdC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,aAAcA,KAEhB7B,EAAAA,EAAAA,KAACyC,EAAY,CACXd,iBAAkBA,EAClBgB,cAAeA,EACfC,iBAAkBA,EAClBC,YAAaA,EACbC,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,EACnBC,mBAAoBA,EACpBC,sBAAuBA,QAG3BpD,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CACLD,QAAQ,YACRnE,MAAM,YACNqE,WAAW3F,EAAAA,EAAAA,KAAC4F,EAAAA,EAAO,IACnBxE,QAhGN,WAKI,IAAIyE,EAJe,KAAjBxB,EACF1E,EAAUmG,QAAQC,OAAO,4CAEzB/B,GAAY,GAEa,wBAArBrC,EACFkE,EAAc,CACZhF,KAAMwD,EACNtD,YAAa0D,EACbuB,SAAU,CACRC,QAAS,CACPC,KAAM,sBACNvD,cAAAA,EACAE,YAAAA,KAIwB,sBAArBlB,EACTkE,EAAc,CACZhF,KAAMwD,EACNtD,YAAa0D,EACbuB,SAAU,CACRC,QAAS,CACPC,KAAM,oBACNvD,cAAAA,EACAE,YAAAA,EACAE,YAAAA,KAIwB,kBAArBpB,IACTkE,EAAc,CACZhF,KAAMwD,EACNtD,YAAa0D,EACbuB,SAAU,CACRC,QAAS,CACPC,KAAM,gBACNjD,eAAAA,EACAE,mBAAAA,MAKRxD,EAAUI,QAAQoG,gBAAgBN,GAClClG,EAAUmG,QAAQC,OAAO,sBAAD5E,OACAkD,EAAY,0BAClC,WAGN,EA8C8BjE,SACzB,0BAKP,I,WCpOA,GAfuBX,EAAAA,EAAAA,WACrB,SAAAC,GAKO,IAJLkB,EAAQlB,EAARkB,SAKA,OACEZ,EAAAA,EAAAA,KAAA,OAAKoG,MAAO,CAAEC,UAAW,IAAKC,SAAU,QAASlG,UAC/CJ,EAAAA,EAAAA,KAACuG,EAAAA,GAAmB,CAACC,MAAO,CAAElE,OAAQ1B,MAG5C,ICmEF,GArEwBnB,EAAAA,EAAAA,WAAS,SAAAC,GAO7B,IANFC,EAASD,EAATC,UACA8G,EAAO/G,EAAP+G,QAMAxC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CyC,EAAUvC,EAAA,GAAEH,EAAWG,EAAA,GAC9BI,GAA0DL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlEoC,EAAqBnC,EAAA,GAAE5E,EAAwB4E,EAAA,GACtDG,GACET,EAAAA,EAAAA,YAAiCU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAD5BiC,EAAmBhC,EAAA,GAAE/E,EAAsB+E,EAAA,GAG5CiC,GAAqBH,IAAeC,EAE1C,OACEtG,EAAAA,EAAAA,MAACyG,EAAAA,OAAM,CAACC,MAAI,EAACN,QAAS,kBAAMA,GAAQ,EAAM,EAAEO,MAAM,mBAAkB5G,SAAA,EAClEC,EAAAA,EAAAA,MAAC4G,EAAAA,EAAa,CAAA7G,SAAA,CACXyG,GACC7G,EAAAA,EAAAA,KAACkH,EAAa,CACZvH,UAAWA,EACXC,yBAA0BA,EAC1BC,uBAAwBA,IAExB,KACH8G,GACC3G,EAAAA,EAAAA,KAACmH,EAAc,CAACvG,SAAUgG,IACxB,KACHF,GACC1G,EAAAA,EAAAA,KAACoH,EAAe,CAACzH,UAAWA,EAAWqE,YAAaA,IAClD,SAEN3D,EAAAA,EAAAA,MAACgH,EAAAA,EAAa,CAAAjH,SAAA,CACXsG,GACC1G,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CAACD,QAAQ,YAAYrE,QAAS,kBAAM4C,GAAY,EAAM,EAAC5D,SAAC,SAG7D,KACHuG,GACC3G,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CACLD,QAAQ,YACRrE,QAAS,kBAAMxB,GAAyB,EAAM,EAACQ,SAChD,SAGC,KACHyG,GACCxG,EAAAA,EAAAA,MAAAiH,EAAAA,SAAA,CAAAlH,SAAA,EACEJ,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CACLpE,MAAM,YACNmE,QAAQ,YACRrE,QAAS,kBAAMqF,GAAQ,EAAM,EAACrG,SAC/B,WAGDJ,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CACLD,QAAQ,YACRE,WAAW3F,EAAAA,EAAAA,KAAC4F,EAAAA,EAAO,IACnBxE,QAAS,kBAAM4C,GAAY,EAAK,EAAC5D,SAClC,wBAID,UAIZ,G,4BC/EImH,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,yJACD,UACJN,EAAQ,EAAUG,C","sources":["../../../plugins/data-management/src/AssemblyManager/AssemblyTable.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyAddForm.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyEditor.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyManager.tsx","../../../node_modules/@mui/icons-material/Create.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\n\nimport CreateIcon from '@mui/icons-material/Create'\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst AssemblyTable = observer(function ({\n  rootModel,\n  setIsAssemblyBeingEdited,\n  setAssemblyBeingEdited,\n}: {\n  rootModel: {\n    jbrowse: {\n      removeAssemblyConf: (arg: string) => void\n      assemblies: AnyConfigurationModel[]\n    }\n  }\n  setIsAssemblyBeingEdited(arg: boolean): void\n  setAssemblyBeingEdited(arg: AnyConfigurationModel): void\n}) {\n  function removeAssembly(name: string) {\n    rootModel.jbrowse.removeAssemblyConf(name)\n  }\n\n  const { assemblies } = rootModel.jbrowse\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Display name</TableCell>\n            <TableCell>Aliases</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assemblies.map(assembly => {\n            const name = readConfObject(assembly, 'name')\n            const displayName = readConfObject(assembly, 'displayName')\n            const aliases = readConfObject(assembly, 'aliases')\n            return (\n              <TableRow key={name}>\n                <TableCell>{name}</TableCell>\n                <TableCell>{displayName}</TableCell>\n                <TableCell>{aliases ? aliases.toString() : ''}</TableCell>\n                <TableCell>\n                  <IconButton\n                    data-testid={`${name}-edit`}\n                    onClick={() => {\n                      setIsAssemblyBeingEdited(true)\n                      setAssemblyBeingEdited(assembly)\n                    }}\n                  >\n                    <CreateIcon color=\"primary\" />\n                  </IconButton>\n                  <IconButton\n                    data-testid={`${name}-delete`}\n                    onClick={() => removeAssembly(name)}\n                  >\n                    <DeleteIcon color=\"error\" />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            )\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n})\n\nexport default AssemblyTable\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, Grid, MenuItem, Paper, TextField } from '@mui/material'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { FileLocation } from '@jbrowse/core/util/types'\n\n// icons\nimport AddIcon from '@mui/icons-material/Add'\n\nconst AdapterSelector = observer(function ({\n  adapterSelection,\n  setAdapterSelection,\n  adapterTypes,\n}: {\n  adapterSelection: string\n  setAdapterSelection: Function\n  adapterTypes: string[]\n}) {\n  return (\n    <TextField\n      value={adapterSelection}\n      label=\"Type\"\n      select\n      helperText=\"Type of adapter to use\"\n      fullWidth\n      onChange={event => setAdapterSelection(event.target.value)}\n    >\n      {adapterTypes.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst AdapterInput = observer(\n  ({\n    adapterSelection,\n    fastaLocation,\n    setFastaLocation,\n    faiLocation,\n    setFaiLocation,\n    gziLocation,\n    setGziLocation,\n    twoBitLocation,\n    setTwoBitLocation,\n    chromSizesLocation,\n    setChromSizesLocation,\n  }: {\n    adapterSelection: string\n    fastaLocation: FileLocation\n    setFastaLocation: Function\n    faiLocation: FileLocation\n    setFaiLocation: Function\n    gziLocation: FileLocation\n    setGziLocation: Function\n    twoBitLocation: FileLocation\n    setTwoBitLocation: Function\n    chromSizesLocation: FileLocation\n    setChromSizesLocation: Function\n  }) => {\n    if (\n      adapterSelection === 'IndexedFastaAdapter' ||\n      adapterSelection === 'BgzipFastaAdapter'\n    ) {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"fastaLocation\"\n              location={fastaLocation}\n              setLocation={loc => setFastaLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"faiLocation\"\n              location={faiLocation}\n              setLocation={loc => setFaiLocation(loc)}\n            />\n          </Grid>\n          {adapterSelection === 'BgzipFastaAdapter' ? (\n            <Grid item>\n              <FileSelector\n                name=\"gziLocation\"\n                location={gziLocation}\n                setLocation={loc => setGziLocation(loc)}\n              />\n            </Grid>\n          ) : null}\n        </Grid>\n      )\n    }\n\n    if (adapterSelection === 'TwoBitAdapter') {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"twoBitLocation\"\n              location={twoBitLocation}\n              setLocation={loc => setTwoBitLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\"\n              location={chromSizesLocation}\n              setLocation={loc => setChromSizesLocation(loc)}\n            />\n          </Grid>\n        </Grid>\n      )\n    }\n\n    return null\n  },\n)\n\nconst blank = { uri: '' } as FileLocation\n\nconst AssemblyAddForm = observer(function ({\n  rootModel,\n  setFormOpen,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rootModel: any\n  setFormOpen: Function\n}) {\n  const adapterTypes = [\n    'IndexedFastaAdapter',\n    'BgzipFastaAdapter',\n    'TwoBitAdapter',\n  ]\n\n  const [assemblyName, setAssemblyName] = useState('')\n  const [assemblyDisplayName, setAssemblyDisplayName] = useState('')\n  const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0])\n  const [fastaLocation, setFastaLocation] = useState(blank)\n  const [faiLocation, setFaiLocation] = useState(blank)\n  const [gziLocation, setGziLocation] = useState(blank)\n  const [twoBitLocation, setTwoBitLocation] = useState(blank)\n  const [chromSizesLocation, setChromSizesLocation] = useState(blank)\n\n  function createAssembly() {\n    if (assemblyName === '') {\n      rootModel.session.notify(\"Can't create an assembly without a name\")\n    } else {\n      setFormOpen(false)\n      let newAssembly\n      if (adapterSelection === 'IndexedFastaAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'IndexedFastaAdapter',\n              fastaLocation,\n              faiLocation,\n            },\n          },\n        }\n      } else if (adapterSelection === 'BgzipFastaAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'BgzipFastaAdapter',\n              fastaLocation,\n              faiLocation,\n              gziLocation,\n            },\n          },\n        }\n      } else if (adapterSelection === 'TwoBitAdapter') {\n        newAssembly = {\n          name: assemblyName,\n          displayName: assemblyDisplayName,\n          sequence: {\n            adapter: {\n              type: 'TwoBitAdapter',\n              twoBitLocation,\n              chromSizesLocation,\n            },\n          },\n        }\n      }\n      rootModel.jbrowse.addAssemblyConf(newAssembly)\n      rootModel.session.notify(\n        `Successfully added ${assemblyName} assembly to JBrowse 2`,\n        'success',\n      )\n    }\n  }\n\n  return (\n    <div>\n      <Paper>\n        <TextField\n          id=\"assembly-name\"\n          inputProps={{ 'data-testid': 'assembly-name' }}\n          label=\"Assembly name\"\n          helperText=\"The assembly name e.g. hg38\"\n          variant=\"outlined\"\n          value={assemblyName}\n          onChange={event => setAssemblyName(event.target.value)}\n        />\n        <TextField\n          id=\"assembly-name\"\n          inputProps={{ 'data-testid': 'assembly-display-name' }}\n          label=\"Assembly display name\"\n          helperText='A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"'\n          variant=\"outlined\"\n          value={assemblyDisplayName}\n          onChange={event => setAssemblyDisplayName(event.target.value)}\n        />\n        <AdapterSelector\n          adapterSelection={adapterSelection}\n          setAdapterSelection={setAdapterSelection}\n          adapterTypes={adapterTypes}\n        />\n        <AdapterInput\n          adapterSelection={adapterSelection}\n          fastaLocation={fastaLocation}\n          setFastaLocation={setFastaLocation}\n          faiLocation={faiLocation}\n          setFaiLocation={setFaiLocation}\n          gziLocation={gziLocation}\n          setGziLocation={setGziLocation}\n          twoBitLocation={twoBitLocation}\n          setTwoBitLocation={setTwoBitLocation}\n          chromSizesLocation={chromSizesLocation}\n          setChromSizesLocation={setChromSizesLocation}\n        />\n      </Paper>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<AddIcon />}\n        onClick={createAssembly}\n      >\n        Create new assembly\n      </Button>\n    </div>\n  )\n})\n\nexport default AssemblyAddForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\n\nconst AssemblyEditor = observer(\n  ({\n    assembly,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assembly: any\n  }) => {\n    return (\n      <div style={{ maxHeight: 600, overflow: 'auto' }}>\n        <ConfigurationEditor model={{ target: assembly }} />\n      </div>\n    )\n  },\n)\n\nexport default AssemblyEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\n\n// icons\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport AssemblyTable from './AssemblyTable'\nimport AssemblyAddForm from './AssemblyAddForm'\nimport AssemblyEditor from './AssemblyEditor'\n\nconst AssemblyManager = observer(function ({\n  rootModel,\n  onClose,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rootModel: any\n  onClose: (arg: boolean) => void\n}) {\n  const [isFormOpen, setFormOpen] = useState(false)\n  const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false)\n  const [assemblyBeingEdited, setAssemblyBeingEdited] =\n    useState<AnyConfigurationModel>()\n\n  const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited\n\n  return (\n    <Dialog open onClose={() => onClose(false)} title=\"Assembly manager\">\n      <DialogContent>\n        {showAssemblyTable ? (\n          <AssemblyTable\n            rootModel={rootModel}\n            setIsAssemblyBeingEdited={setIsAssemblyBeingEdited}\n            setAssemblyBeingEdited={setAssemblyBeingEdited}\n          />\n        ) : null}\n        {isAssemblyBeingEdited ? (\n          <AssemblyEditor assembly={assemblyBeingEdited} />\n        ) : null}\n        {isFormOpen ? (\n          <AssemblyAddForm rootModel={rootModel} setFormOpen={setFormOpen} />\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        {isFormOpen ? (\n          <Button variant=\"contained\" onClick={() => setFormOpen(false)}>\n            Back\n          </Button>\n        ) : null}\n        {isAssemblyBeingEdited ? (\n          <Button\n            variant=\"contained\"\n            onClick={() => setIsAssemblyBeingEdited(false)}\n          >\n            Back\n          </Button>\n        ) : null}\n        {showAssemblyTable ? (\n          <>\n            <Button\n              color=\"secondary\"\n              variant=\"contained\"\n              onClick={() => onClose(false)}\n            >\n              Close\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={() => setFormOpen(true)}\n            >\n              Add new assembly\n            </Button>\n          </>\n        ) : null}\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default AssemblyManager\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\nexports.default = _default;"],"names":["observer","_ref","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","assemblies","jbrowse","_jsx","TableContainer","component","Paper","children","_jsxs","Table","TableHead","TableRow","TableCell","TableBody","map","assembly","name","readConfObject","displayName","aliases","toString","IconButton","concat","onClick","CreateIcon","color","removeAssemblyConf","removeAssembly","DeleteIcon","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","value","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","_ref2","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","chromSizesLocation","setChromSizesLocation","Grid","container","spacing","item","FileSelector","location","setLocation","loc","blank","uri","_ref3","setFormOpen","_useState","useState","_useState2","_slicedToArray","assemblyName","setAssemblyName","_useState3","_useState4","assemblyDisplayName","setAssemblyDisplayName","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","id","inputProps","variant","Button","startIcon","AddIcon","newAssembly","session","notify","sequence","adapter","type","addAssemblyConf","style","maxHeight","overflow","ConfigurationEditor","model","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","open","title","DialogContent","AssemblyTable","AssemblyEditor","AssemblyAddForm","DialogActions","_Fragment","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}