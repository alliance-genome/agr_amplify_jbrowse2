{"version":3,"file":"static/js/9025.eeeb2715.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string[]\n      setAtIndex: Function\n      removeAtIndex: Function\n      add: Function\n      description: string\n    }\n  }) => {\n    const [value, setValue] = useState('')\n    const [addNew, setAddNew] = useState(false)\n    return (\n      <>\n        {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n        <List disablePadding>\n          {slot.value.map((val, idx) => (\n            <ListItem key={idx} disableGutters>\n              <TextField\n                value={val}\n                onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        color=\"secondary\"\n                        onClick={() => slot.removeAtIndex(idx)}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ))}\n\n          {addNew ? (\n            <ListItem disableGutters>\n              <TextField\n                value={value}\n                placeholder=\"add new\"\n                onChange={event => setValue(event.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </ListItem>\n          ) : null}\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            style={{ margin: 4 }}\n            disabled={addNew}\n            onClick={() => setAddNew(true)}\n          >\n            Add item\n          </Button>\n        </List>\n        <FormHelperText>{slot.description}</FormHelperText>\n      </>\n    )\n  },\n)\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nfunction CallbackEditor({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => setCode(event.target.value)}\n          style={{ background: error ? '#fdd' : undefined }}\n          InputProps={{\n            classes: {\n              input: classes.textAreaFont,\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n}\n\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\n\nconst ColorPicker = lazy(() => import('@jbrowse/core/ui/ColorPicker'))\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => onChange(event.target.value)}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={<div />}>\n          <ColorPicker color={value} onChange={event => onChange(event)} />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => slot.set(color)}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\n\nexport default observer(ColorEditorSlot)\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector, SanitizedHTML } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  MenuItem,\n  Paper,\n  SvgIcon,\n  TextField,\n  TextFieldProps,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nfunction MyTextField(props: { helperText?: string } & TextFieldProps) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      FormHelperTextProps={{\n        // @ts-ignore\n        component: 'div',\n      }}\n      fullWidth\n    />\n  )\n}\n\nconst StringEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <MyTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\nconst TextEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      description: string\n      value: string\n      set: (arg: string) => void\n    }\n  }) => (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  ),\n)\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst useMapEditorStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: Map<string, string[]>\n      remove: (key: string) => void\n      add: (key: string, val: string[]) => void\n      description: string\n      setAtKeyIndex: (key: string, idx: number, val: string) => void\n      removeAtKeyIndex: (key: string, idx: number) => void\n      addToKey: (key: string, val: string) => void\n    }\n  }) => {\n    const { classes } = useMapEditorStyles()\n    const [value, setValue] = useState('')\n    return (\n      <>\n        <InputLabel>{slot.name}</InputLabel>\n        {Array.from(slot.value, ([key, val]) => (\n          <Card raised key={key} className={classes.card}>\n            <CardHeader\n              title={key}\n              action={\n                <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                  <DeleteIcon />\n                </IconButton>\n              }\n            />\n            <CardContent>\n              <StringArrayEditor\n                slot={{\n                  name: slot.name,\n                  value: val,\n                  description: `Values associated with entry ${key}`,\n                  setAtIndex: (idx: number, val: string) =>\n                    slot.setAtKeyIndex(key, idx, val),\n                  removeAtIndex: (idx: number) =>\n                    slot.removeAtKeyIndex(key, idx),\n                  add: (val: string) => slot.addToKey(key, val),\n                }}\n              />\n            </CardContent>\n          </Card>\n        ))}\n        <Card raised className={classes.card}>\n          <CardHeader\n            disableTypography\n            title={\n              <TextField\n                fullWidth\n                value={value}\n                placeholder=\"add new\"\n                onChange={event => setValue(event.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, [])\n                          setValue('')\n                        }}\n                        color=\"secondary\"\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            }\n          />\n        </Card>\n        <FormHelperText>{slot.description}</FormHelperText>\n      </>\n    )\n  },\n)\n\nconst NumberMapEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: Map<string, string>\n      remove: (key: string) => void\n      add: (key: string, val: number) => void\n      description: string\n    }\n  }) => {\n    const { classes } = useMapEditorStyles()\n    const [value, setValue] = useState('')\n    return (\n      <>\n        <InputLabel>{slot.name}</InputLabel>\n        {Array.from(slot.value, ([key, val]) => (\n          <Card raised key={key} className={classes.card}>\n            <CardHeader\n              title={key}\n              action={\n                <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                  <DeleteIcon />\n                </IconButton>\n              }\n            />\n            <CardContent>\n              <NumberEditor\n                slot={{\n                  value: val,\n                  set: (val: number) => slot.add(key, val),\n                }}\n              />\n            </CardContent>\n          </Card>\n        ))}\n        <Card raised className={classes.card}>\n          <CardHeader\n            disableTypography\n            title={\n              <TextField\n                fullWidth\n                value={value}\n                placeholder=\"add new\"\n                onChange={event => setValue(event.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, 0)\n                          setValue('')\n                        }}\n                        color=\"secondary\"\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            }\n          />\n        </Card>\n        <FormHelperText>{slot.description}</FormHelperText>\n      </>\n    )\n  },\n)\n\nconst NumberEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name?: string\n      value: string\n      description?: string\n      set: (val: number) => void\n      reset?: () => void\n    }\n  }) => {\n    const [val, setVal] = useState(slot.value)\n    useEffect(() => {\n      const num = parseFloat(val)\n      if (!Number.isNaN(num)) {\n        slot.set(num)\n      } else {\n        slot.reset?.()\n      }\n    }, [slot, val])\n    return (\n      <MyTextField\n        label={slot.name}\n        helperText={slot.description}\n        value={val}\n        type=\"number\"\n        onChange={evt => setVal(evt.target.value)}\n      />\n    )\n  },\n)\n\nconst IntegerEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: string\n      description: string\n      set: (num: number) => void\n    }\n  }) => {\n    const [val, setVal] = useState(slot.value)\n    useEffect(() => {\n      const num = parseInt(val, 10)\n      if (!Number.isNaN(num)) {\n        slot.set(num)\n      }\n    }, [slot, val])\n    return (\n      <MyTextField\n        label={slot.name}\n        helperText={slot.description}\n        value={val}\n        type=\"number\"\n        onChange={evt => setVal(evt.target.value)}\n      />\n    )\n  },\n)\n\nconst BooleanEditor = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: boolean\n      set: (arg: boolean) => void\n      description: string\n    }\n  }) => (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => slot.set(evt.target.checked)}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  ),\n)\n\nconst StringEnumEditor = observer(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ({ slot, slotSchema }: { slot: any; slotSchema: IAnyType }) => {\n    const p = getPropertyMembers(getSubType(slotSchema))\n    const choices = getUnionSubTypes(\n      getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n    ).map(t => t.value)\n\n    return (\n      <MyTextField\n        value={slot.value}\n        label={slot.name}\n        select\n        helperText={slot.description}\n        onChange={evt => slot.set(evt.target.value)}\n      >\n        {choices.map(str => (\n          <MenuItem key={str} value={str}>\n            {str}\n          </MenuItem>\n        ))}\n      </MyTextField>\n    )\n  },\n)\n\nconst FileSelectorWrapper = observer(\n  ({\n    slot,\n  }: {\n    slot: {\n      name: string\n      value: FileLocation\n      set: (arg: FileLocation) => void\n      description: string\n    }\n  }) => {\n    return (\n      <FileSelector\n        location={slot.value}\n        setLocation={location => slot.set(location)}\n        name={slot.name}\n        description={slot.description}\n        rootModel={getEnv(slot).pluginManager?.rootModel}\n      />\n    )\n  },\n)\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ({ slot, slotSchema }: { slot: any; slotSchema: IAnyType }) => {\n    const { classes } = useSlotEditorStyles()\n    const { type } = slot\n    let ValueComponent = slot.isCallback\n      ? CallbackEditor\n      : // @ts-ignore\n        valueComponents[type]\n    if (!ValueComponent) {\n      console.warn(`no slot editor defined for ${type}, editing as string`)\n      ValueComponent = StringEditor\n    }\n    if (!(type in valueComponents)) {\n      console.warn(`SlotEditor needs to implement ${type}`)\n    }\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <ValueComponent slot={slot} slotSchema={slotSchema} />\n        </div>\n        <div className={classes.slotModeSwitch}>\n          {slot.contextVariable.length ? (\n            <IconButton\n              onClick={() =>\n                slot.isCallback\n                  ? slot.convertToValue()\n                  : slot.convertToCallback()\n              }\n              title={`convert to ${\n                slot.isCallback ? 'regular value' : 'callback'\n              }`}\n              color=\"secondary\"\n            >\n              {!slot.isCallback ? (\n                <RadioButtonUncheckedIcon />\n              ) : (\n                <SvgCheckbox />\n              )}\n            </IconButton>\n          ) : null}\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { useSlotEditorStyles } from './SlotEditor'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(\n  ({\n    typeNameChoices,\n    slot,\n    slotName,\n    onChange,\n  }: {\n    typeNameChoices: string[]\n    slot: AnyConfigurationModel\n    slotName: string\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  }) => {\n    const { classes } = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(\n  (props: {\n    slotName: string\n    slotSchema: IAnyType\n    schema: AnyConfigurationModel\n    slot?: AnyConfigurationModel | AnyConfigurationModel[]\n    path?: string[]\n  }) => {\n    const { classes } = useStyles()\n    const {\n      slotName,\n      slotSchema,\n      schema,\n      slot = schema[slotName],\n      path = [],\n    } = props\n    let typeSelector\n    if (isConfigurationSchemaType(slotSchema)) {\n      if (slot.length) {\n        return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n          const key = `${singular(slotName)} ${slotIndex + 1}`\n          return <Member {...props} key={key} slot={subslot} slotName={key} />\n        })\n      }\n      // if this is an explicitly typed schema, make a type-selecting dropdown\n      // that can be used to change its type\n      const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n      if (typeNameChoices.length) {\n        typeSelector = (\n          <TypeSelector\n            typeNameChoices={typeNameChoices}\n            slotName={slotName}\n            slot={slot}\n            onChange={evt => {\n              if (evt.target.value !== slot.type) {\n                schema.setSubschema(slotName, { type: evt.target.value })\n              }\n            }}\n          />\n        )\n      }\n      return (\n        <Accordion defaultExpanded className={classes.accordion}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n          >\n            <Typography>{[...path, slotName].join('➔')}</Typography>\n          </AccordionSummary>\n          <AccordionDetails className={classes.expansionPanelDetails}>\n            {typeSelector}\n            <FormGroup className={classes.noOverflow}>\n              <Schema schema={slot} path={[...path, slotName]} />\n            </FormGroup>\n          </AccordionDetails>\n        </Accordion>\n      )\n    }\n\n    if (isConfigurationSlotType(slotSchema)) {\n      // this is a regular config slot\n      return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n    }\n\n    return null\n  },\n)\n\nconst Schema = observer(\n  ({\n    schema,\n    path = [],\n  }: {\n    schema: AnyConfigurationModel\n    path?: string[]\n  }) => {\n    const properties = getMembers(schema).properties\n    return (\n      <>\n        {Object.entries(properties).map(([slotName, slotSchema]) => (\n          <Member\n            key={slotName}\n            slotName={slotName}\n            slotSchema={slotSchema}\n            path={path}\n            schema={schema}\n          />\n        ))}\n      </>\n    )\n  },\n)\n\nconst ConfigurationEditor = observer(\n  ({\n    model,\n  }: {\n    model: { target: AnyConfigurationModel }\n    session?: AbstractSessionModel\n  }) => {\n    const { classes } = useStyles()\n    // key forces a re-render, otherwise the same field can end up being used\n    // for different tracks since only the backing model changes for example\n    // see pr #804\n    const { target } = model\n    const key = target && readConfObject(target, 'trackId')\n    const name = target && readConfObject(target, 'name')\n    return (\n      <>\n        <Accordion key={key} defaultExpanded className={classes.accordion}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n          >\n            <Typography>{name ?? 'Configuration'}</Typography>\n          </AccordionSummary>\n          <AccordionDetails\n            className={classes.expansionPanelDetails}\n            data-testid=\"configEditor\"\n          >\n            {!target ? 'no target set' : <Schema schema={target} />}\n          </AccordionDetails>\n        </Accordion>\n\n        {/* blank space at the bottom of screen allows scroll */}\n        <div style={{ height: 300 }} />\n      </>\n    )\n  },\n)\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","useState","value","setValue","addNew","setAddNew","name","InputLabel","List","disablePadding","map","val","idx","ListItem","disableGutters","TextField","onChange","evt","setAtIndex","target","InputProps","endAdornment","InputAdornment","position","IconButton","color","onClick","removeAtIndex","Delete","placeholder","event","Button","variant","style","margin","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","input","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","Help","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","displayed","setDisplayed","display","fallback","helperText","fullWidth","MyTextField","SanitizedHTML","html","FormHelperTextProps","component","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","useMapEditorStyles","card","spacing","StringArrayMapEditor","Array","from","key","Card","raised","CardHeader","action","remove","CardContent","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","Add","NumberMapEditor","NumberEditor","setVal","num","parseFloat","Number","isNaN","reset","type","IntegerEditor","parseInt","BooleanEditor","FormControl","FormControlLabel","control","Checkbox","checked","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","StringArrayEditor","stringArrayMap","numberMap","number","integer","ColorEditor","stringEnum","boolean","frozen","JsonEditor","configRelationships","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUnchecked","typeNameChoices","slotName","expandIcon","root","padding","expansionPanelDetails","accordion","border","primary","noOverflow","Member","typeSelector","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","setSubschema","Accordion","defaultExpanded","AccordionSummary","ExpandMore","Typography","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","properties","getMembers","Object","entries","model","readConfObject","height"],"sourceRoot":""}