{"version":3,"file":"static/js/2038.4788d99d.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportCustomTrack.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportSyntenyTrackSelector.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { SnapshotIn } from 'mobx-state-tree'\nimport path from 'path'\nimport {\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\nimport { ErrorMessage, FileSelector } from '@jbrowse/core/ui'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nfunction getName(\n  sessionTrackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return sessionTrackData\n    ? // @ts-expect-error\n      sessionTrackData.uri ||\n        // @ts-expect-error\n        sessionTrackData.localPath ||\n        // @ts-expect-error\n        sessionTrackData.name\n    : undefined\n}\n\nfunction stripGz(fileName: string) {\n  return fileName.endsWith('.gz') ? fileName.slice(0, -3) : fileName\n}\n\nfunction getAdapter({\n  radioOption,\n  assembly1,\n  assembly2,\n  fileLocation,\n  bed1Location,\n  bed2Location,\n}: {\n  radioOption: string\n  assembly1: string\n  assembly2: string\n  fileLocation?: FileLocation\n  bed1Location?: FileLocation\n  bed2Location?: FileLocation\n}) {\n  if (radioOption === '.paf') {\n    return {\n      type: 'PAFAdapter',\n      pafLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.out') {\n    return {\n      type: 'MashMapAdapter',\n      outLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.delta') {\n    return {\n      type: 'DeltaAdapter',\n      deltaLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.chain') {\n    return {\n      type: 'ChainAdapter',\n      chainLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.anchors') {\n    return {\n      type: 'MCScanAnchorsAdapter',\n      mcscanAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.anchors.simple') {\n    return {\n      type: 'MCScanSimpleAnchorsAdapter',\n      mcscanSimpleAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else {\n    throw new Error('Unknown type')\n  }\n}\n\ntype Conf = SnapshotIn<AnyConfigurationModel>\n\nconst OpenTrack = observer(\n  ({\n    assembly1,\n    assembly2,\n    setSessionTrackData,\n  }: {\n    sessionTrackData: Conf\n    assembly1: string\n    assembly2: string\n    setSessionTrackData: (arg: Conf) => void\n  }) => {\n    const [bed2Location, setBed2Location] = useState<FileLocation>()\n    const [bed1Location, setBed1Location] = useState<FileLocation>()\n    const [fileLocation, setFileLocation] = useState<FileLocation>()\n    const [value, setValue] = useState('')\n    const [error, setError] = useState<unknown>()\n    const fileName = getName(fileLocation)\n\n    const radioOption =\n      value || (fileName ? path.extname(stripGz(fileName)) : '')\n\n    useEffect(() => {\n      try {\n        if (fileLocation) {\n          const fn = fileName ? path.basename(fileName) : 'MyTrack'\n          const trackId = `${fn}-${Date.now()}`\n          setError(undefined)\n\n          setSessionTrackData({\n            trackId,\n            name: fn,\n            assemblyNames: [assembly2, assembly1],\n            type: 'SyntenyTrack',\n            adapter: getAdapter({\n              radioOption,\n              assembly1,\n              assembly2,\n              fileLocation,\n              bed1Location,\n              bed2Location,\n            }),\n          })\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    }, [\n      fileName,\n      assembly1,\n      assembly2,\n      bed1Location,\n      bed2Location,\n      fileLocation,\n      radioOption,\n      setSessionTrackData,\n    ])\n    return (\n      <Paper style={{ padding: 12 }}>\n        {error ? <ErrorMessage error={error} /> : null}\n        <Typography style={{ textAlign: 'center' }}>\n          Add a .paf, .out (MashMap), .delta (Mummer), .chain, .anchors or\n          .anchors.simple (MCScan) file to view in the dotplot. These file types\n          can also be gzipped. The first assembly should be the query sequence\n          (e.g. left column of the PAF) and the second assembly should be the\n          target sequence (e.g. right column of the PAF)\n        </Typography>\n        <RadioGroup\n          value={radioOption}\n          onChange={event => setValue(event.target.value)}\n        >\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <FormControlLabel value=\".paf\" control={<Radio />} label=\".paf\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel value=\".out\" control={<Radio />} label=\".out\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".delta\"\n                control={<Radio />}\n                label=\".delta\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".chain\"\n                control={<Radio />}\n                label=\".chain\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors\"\n                control={<Radio />}\n                label=\".anchors\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors.simple\"\n                control={<Radio />}\n                label=\".anchors.simple\"\n              />\n            </Grid>\n          </Grid>\n        </RadioGroup>\n        <Grid container justifyContent=\"center\">\n          <Grid item>\n            {value === '.anchors' || value === '.anchors.simple' ? (\n              <div>\n                <div style={{ margin: 20 }}>\n                  Open the {value} and .bed files for both genome assemblies\n                  from the MCScan (Python version) pipeline{' '}\n                  <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n                    (more info)\n                  </a>\n                </div>\n                <div style={{ display: 'flex' }}>\n                  <div>\n                    <FileSelector\n                      name=\".anchors file\"\n                      description=\"\"\n                      location={fileLocation}\n                      setLocation={loc => setFileLocation(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 1 .bed (left column of anchors file)\"\n                      description=\"\"\n                      location={bed1Location}\n                      setLocation={loc => setBed1Location(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 2 .bed (right column of anchors file)\"\n                      description=\"\"\n                      location={bed2Location}\n                      setLocation={loc => setBed2Location(loc)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <FileSelector\n                name={value ? value + ' location' : ''}\n                description=\"\"\n                location={fileLocation}\n                setLocation={loc => setFileLocation(loc)}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n    )\n  },\n)\n\nexport default OpenTrack\n","import React, { useState, useEffect } from 'react'\nimport { Select, MenuItem, Paper, Typography } from '@mui/material'\nimport { getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { LinearSyntenyViewModel } from '../model'\n\nfunction f(track: AnyConfigurationModel, assembly1: string, assembly2: string) {\n  const assemblyNames = readConfObject(track, 'assemblyNames')\n  return (\n    assemblyNames.includes(assembly1) &&\n    assemblyNames.includes(assembly2) &&\n    track.type.includes('Synteny')\n  )\n}\n\nconst Selector = observer(\n  ({\n    model,\n    assembly1,\n    assembly2,\n    setShowTrackId,\n  }: {\n    model: LinearSyntenyViewModel\n    assembly1: string\n    assembly2: string\n    setShowTrackId: (arg: string) => void\n  }) => {\n    const session = getSession(model)\n    const { tracks = [], sessionTracks = [] } = session\n    const allTracks = [...tracks, ...sessionTracks] as AnyConfigurationModel[]\n    const filteredTracks = allTracks.filter(t => f(t, assembly2, assembly1))\n    const resetTrack = filteredTracks[0]?.trackId || ''\n    const [value, setValue] = useState(resetTrack)\n    useEffect(() => {\n      // if assembly1/assembly2 changes, then we will want to use this effect to\n      // change the state of the useState because it otherwise gets locked to a\n      // stale value\n      setValue(resetTrack)\n    }, [resetTrack])\n\n    useEffect(() => {\n      // sets track data in a useEffect because the initial load is needed as well\n      // as onChange's to the select box\n      setShowTrackId(value)\n    }, [value, setShowTrackId])\n    return (\n      <Paper style={{ padding: 12 }}>\n        <Typography paragraph>\n          Select a track from the select box below, the track will be shown when\n          you hit \"Launch\".\n        </Typography>\n\n        {filteredTracks.length ? (\n          <Select\n            value={value}\n            onChange={event => setValue(event.target.value)}\n          >\n            {filteredTracks.map(track => (\n              <MenuItem key={track.trackId} value={track.trackId}>\n                {getTrackName(track, session)}\n              </MenuItem>\n            ))}\n          </Select>\n        ) : (\n          <ErrorMessage\n            error={`No synteny tracks found for ${assembly1},${assembly2}`}\n          />\n        )}\n      </Paper>\n    )\n  },\n)\n\nexport default Selector\n","import React, { useState, useEffect } from 'react'\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { SnapshotIn } from 'mobx-state-tree'\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\n\n// locals\nimport { LinearSyntenyViewModel } from '../model'\nimport ImportCustomTrack from './ImportCustomTrack'\nimport ImportSyntenyTrackSelector from './ImportSyntenyTrackSelector'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n    margin: '0 auto',\n  },\n  assemblySelector: {\n    width: '75%',\n    margin: '0 auto',\n  },\n}))\n\ntype Conf = SnapshotIn<AnyConfigurationModel>\n\nfunction TrackSelector({\n  setSessionTrackData,\n  setShowTrackId,\n  sessionTrackData,\n  assembly1,\n  assembly2,\n  model,\n}: {\n  sessionTrackData: Conf\n  setSessionTrackData: (arg: Conf) => void\n  setShowTrackId: (arg?: string) => void\n  model: LinearSyntenyViewModel\n  assembly1: string\n  assembly2: string\n}) {\n  const [choice, setChoice] = useState('none')\n\n  useEffect(() => {\n    if (choice === 'none') {\n      setSessionTrackData(undefined)\n      setShowTrackId(undefined)\n    }\n  }, [choice, setSessionTrackData, setShowTrackId])\n  return (\n    <>\n      <FormControl>\n        <FormLabel id=\"group-label\">\n          (Optional) Select or add a synteny track\n        </FormLabel>\n        <RadioGroup\n          row\n          value={choice}\n          onChange={event => setChoice(event.target.value)}\n          aria-labelledby=\"group-label\"\n        >\n          <FormControlLabel value=\"none\" control={<Radio />} label=\"None\" />\n          <FormControlLabel\n            value=\"tracklist\"\n            control={<Radio />}\n            label=\"Existing track\"\n          />\n          <FormControlLabel\n            value=\"custom\"\n            control={<Radio />}\n            label=\"New track\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {choice === 'custom' ? (\n        <ImportCustomTrack\n          setSessionTrackData={setSessionTrackData}\n          sessionTrackData={sessionTrackData}\n          assembly2={assembly2}\n          assembly1={assembly1}\n        />\n      ) : null}\n      {choice === 'tracklist' ? (\n        <ImportSyntenyTrackSelector\n          model={model}\n          assembly1={assembly1}\n          assembly2={assembly2}\n          setShowTrackId={setShowTrackId}\n        />\n      ) : null}\n    </>\n  )\n}\n\nconst LinearSyntenyViewImportForm = observer(function ({\n  model,\n}: {\n  model: LinearSyntenyViewModel\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const [assembly2, setAssembly2] = useState(assemblyNames[0] || '')\n  const [assembly1, setAssembly1] = useState(assemblyNames[0] || '')\n  const [error, setError] = useState<unknown>()\n  const [sessionTrackData, setSessionTrackData] = useState<Conf>()\n  const [showTrackId, setShowTrackId] = useState<string>()\n\n  async function onOpenClick() {\n    try {\n      if (!isSessionWithAddTracks(session)) {\n        return\n      }\n      setError(undefined)\n\n      const { assemblyManager } = session\n      const assemblies = [assembly1, assembly2]\n      model.setViews(\n        await Promise.all(\n          assemblies.map(async sel => {\n            const asm = await assemblyManager.waitForAssembly(sel)\n            if (!asm) {\n              throw new Error(`Assembly ${sel} failed to load`)\n            }\n            return {\n              type: 'LinearGenomeView' as const,\n              bpPerPx: 1,\n              offsetPx: 0,\n              hideHeader: true,\n              displayedRegions: asm.regions,\n            }\n          }),\n        ),\n      )\n      model.views.forEach(view => view.setWidth(model.width))\n      if (sessionTrackData) {\n        session.addTrackConf(sessionTrackData)\n        model.toggleTrack(sessionTrackData.trackId)\n      } else if (showTrackId) {\n        model.showTrack(showTrackId)\n      }\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }\n\n  // this is a combination of any displayed error message we have\n  const displayError = error\n  return (\n    <Container className={classes.importFormContainer}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Grid\n        container\n        spacing={1}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.assemblySelector}\n      >\n        <Grid item>\n          <Paper style={{ padding: 12 }}>\n            <p style={{ textAlign: 'center' }}>\n              Select assemblies for linear synteny view\n            </p>\n            <Grid\n              container\n              spacing={1}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <AssemblySelector\n                  selected={assembly1}\n                  onChange={val => setAssembly1(val)}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <AssemblySelector\n                  selected={assembly2}\n                  onChange={val => setAssembly2(val)}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <FormControl>\n                  <Button\n                    onClick={onOpenClick}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Launch\n                  </Button>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Paper>\n          <TrackSelector\n            setShowTrackId={setShowTrackId}\n            assembly2={assembly2}\n            assembly1={assembly1}\n            setSessionTrackData={setSessionTrackData}\n            sessionTrackData={sessionTrackData}\n            model={model}\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n\nexport default LinearSyntenyViewImportForm\n"],"names":["getAdapter","_ref","radioOption","assembly1","assembly2","fileLocation","bed1Location","bed2Location","type","pafLocation","queryAssembly","targetAssembly","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","assemblyNames","mcscanSimpleAnchorsLocation","Error","observer","_ref2","sessionTrackData","setSessionTrackData","_useState","useState","_useState2","_slicedToArray","setBed2Location","_useState3","_useState4","setBed1Location","_useState5","_useState6","setFileLocation","_useState7","_useState8","value","setValue","_useState9","_useState10","error","setError","fileName","uri","localPath","name","undefined","path","endsWith","slice","stripGz","useEffect","fn","trackId","concat","Date","now","adapter","e","console","_jsxs","Paper","style","padding","children","_jsx","ErrorMessage","Typography","textAlign","RadioGroup","onChange","event","target","Grid","container","justifyContent","item","FormControlLabel","control","Radio","label","margin","href","display","FileSelector","description","location","setLocation","loc","_filteredTracks$","model","setShowTrackId","session","getSession","_session$tracks","tracks","_session$sessionTrack","sessionTracks","filteredTracks","_toConsumableArray","filter","t","track","readConfObject","includes","f","resetTrack","paragraph","length","Select","map","MenuItem","getTrackName","useStyles","makeStyles","theme","importFormContainer","spacing","assemblySelector","width","TrackSelector","choice","setChoice","_Fragment","FormControl","FormLabel","id","row","ImportCustomTrack","ImportSyntenyTrackSelector","LinearSyntenyViewImportForm","classes","setAssembly2","setAssembly1","_useState11","_useState12","showTrackId","_onOpenClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","assemblyManager","assemblies","wrap","_context2","prev","next","isSessionWithAddTracks","abrupt","t0","Promise","all","_ref3","_callee","sel","asm","_context","waitForAssembly","sent","bpPerPx","offsetPx","hideHeader","displayedRegions","regions","stop","_x","apply","arguments","t1","setViews","call","views","forEach","view","setWidth","addTrackConf","toggleTrack","showTrack","t2","displayError","Container","className","alignItems","AssemblySelector","selected","val","Button","onClick","variant","color"],"sourceRoot":""}