{"version":3,"file":"static/js/8120.712ec428.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts"],"sourcesContent":["import Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    if (typeof DOMException !== 'undefined') {\n      // eslint-disable-next-line  no-undef\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif !== 0 ? dif : c0.minv.dataPosition - c1.minv.dataPosition\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  })\n\n  return mergedChunks\n}\n","import { Buffer } from 'buffer'\nexport default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport VirtualOffset from './virtualOffset'\nimport Chunk from './chunk'\n\nexport interface Options {\n  // support having some unknown parts of the options\n  [key: string]: unknown\n  signal?: AbortSignal\n}\n\nexport interface IndexData {\n  refNameToId: Record<string, number>\n  refIdToName: string[]\n  metaChar: string | null\n  columnNumbers: { ref: number; start: number; end: number }\n  coordinateType: string\n  format: string\n  [key: string]: any\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private parseP?: Promise<IndexData>\n\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<IndexData>\n\n  public async getMetadata(opts: Options = {}) {\n    const { indices: _indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this.parseP) {\n      this.parseP = this._parse(opts).catch(e => {\n        this.parseP = undefined\n        throw e\n      })\n    }\n    return this.parseP\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    const idx = await this.parse(opts)\n    return !!idx.indices[seqId]?.binIndex\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { longToNumber, optimizeChunks, checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const buf = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buf)\n    checkAbortSignal(opts.signal)\n\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n      // TODO: do we need to support big-endian TBI files?\n    }\n\n    // number of reference sequences in the index\n    const refCount = bytes.readInt32LE(4)\n    const formatFlags = bytes.readInt32LE(8)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: Record<number, string> = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(12),\n      start: bytes.readInt32LE(16),\n      end: bytes.readInt32LE(20),\n    }\n    const metaValue = bytes.readInt32LE(24)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(28)\n\n    // read sequence dictionary\n    const nameSectionLength = bytes.readInt32LE(32)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: Record<number, Chunk[]> = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return { binIndex, linearIndex, stats }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 16, offset + 24) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: Record<string, number> = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { longToNumber, optimizeChunks } from './util'\n\nimport IndexFile, { Options } from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n  indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.slice(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: Record<string, number> = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip(await this.filehandle.readFile(opts))\n\n    // check TBI magic numbers\n    let csiVersion\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n    const auxLength = bytes.readInt32LE(12)\n    const aux =\n      auxLength && auxLength >= 30\n        ? this.parseAuxData(bytes, 16)\n        : {\n            refIdToName: [],\n            refNameToId: {},\n            metaChar: null,\n            columnNumbers: { ref: 0, start: 1, end: 2 },\n            coordinateType: 'zero-based-half-open',\n            format: 'generic',\n          }\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information\n          // about the reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = bytes.readInt32LE(currOffset + 12)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            // this._findFirstData(data, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 28, offset + 36) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from 'quick-lru'\nimport { Buffer } from 'buffer'\nimport { GenericFilehandle, LocalFile } from 'generic-filehandle'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { checkAbortSignal } from './util'\nimport IndexFile, { Options, IndexData } from './indexFile'\n\nimport Chunk from './chunk'\nimport TBI from './tbi'\nimport CSI from './csi'\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\ninterface ReadChunk {\n  buffer: Buffer\n  cpositions: number[]\n  dpositions: number[]\n}\n\nfunction timeout(time: number) {\n  return new Promise(resolve => setTimeout(resolve, time))\n}\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private chunkSizeLimit: number\n  private yieldTime: number\n  private renameRefSeq: (n: string) => string\n  private chunkCache: AbortablePromiseCache<Chunk, ReadChunk>\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {filehandle} [args.filehandle]\n   * @param {string} [args.tbiPath]\n   * @param {filehandle} [args.tbiFilehandle]\n   * @param {string} [args.csiPath]\n   * @param {filehandle} [args.csiFilehandle]\n   * @param {number} [args.yieldTime] yield to main thread after N milliseconds if reading features is taking a long time to avoid hanging main thread\n   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform\n   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is\n   * not altered, just the names of the reference sequences that are used for querying.\n   */\n  constructor({\n    path,\n    filehandle,\n    tbiPath,\n    tbiFilehandle,\n    csiPath,\n    csiFilehandle,\n    yieldTime = 500,\n    chunkSizeLimit = 50000000,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    tbiPath?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    yieldTime?: number\n    chunkSizeLimit?: number\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath',\n      )\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit\n    this.renameRefSeq = renameRefSeqs\n    this.yieldTime = yieldTime\n    this.chunkCache = new AbortablePromiseCache<Chunk, ReadChunk>({\n      cache: new LRU({ maxSize: Math.floor(chunkCacheSize / (1 << 16)) }),\n      fill: (args: Chunk, signal?: AbortSignal) =>\n        this.readChunk(args, { signal }),\n    })\n  }\n\n  /**\n   * @param refName name of the reference sequence\n   * @param start start of the region (in 0-based half-open coordinates)\n   * @param end end of the region (in 0-based half-open coordinates)\n   * @param opts callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc\n   * @returns promise that is resolved when the whole read is finished, rejected on error\n   */\n  async getLines(\n    refName: string,\n    s: number | undefined,\n    e: number | undefined,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n    if (opts === undefined) {\n      throw new TypeError('line callback must be provided')\n    }\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n      signal = opts.signal\n    }\n    if (refName === undefined) {\n      throw new TypeError('must provide a reference sequence name')\n    }\n    if (!callback) {\n      throw new TypeError('line callback must be provided')\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    const start = s ?? 0\n    const end = e ?? metadata.maxRefLength\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n\n    // check the chunks for any that are over the size limit.  if\n    // any are, don't fetch any of them\n    for (const chunk of chunks) {\n      const size = chunk.fetchedSize()\n      if (size > this.chunkSizeLimit) {\n        throw new Error(\n          `Too much data. Chunk size ${size.toLocaleString()} bytes exceeds chunkSizeLimit of ${this.chunkSizeLimit.toLocaleString()}.`,\n        )\n      }\n    }\n\n    // now go through each chunk and parse and filter the lines out of it\n    let last = Date.now()\n    for (const c of chunks) {\n      let previousStartCoordinate: number | undefined\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n        signal,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n      while (blockStart < buffer.length) {\n        const n = buffer.indexOf('\\n', blockStart)\n        if (n === -1) {\n          break\n        }\n        const b = buffer.slice(blockStart, n)\n        const line = decoder?.decode(b) ?? b.toString()\n\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        // do a small check just to make sure that the lines are really sorted\n        // by start coordinate\n        if (\n          previousStartCoordinate !== undefined &&\n          startCoordinate !== undefined &&\n          previousStartCoordinate > startCoordinate\n        ) {\n          throw new Error(\n            `Lines not sorted by start coordinate (${previousStartCoordinate} > ${startCoordinate}), this file is not usable with Tabix.`,\n          )\n        }\n        previousStartCoordinate = startCoordinate\n\n        if (overlaps) {\n          callback(\n            line.trim(),\n            // cpositions[pos] refers to actual file offset of a bgzip block boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a \"unique\"\n            // address space so that data in that block could never overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset from\n            // that bgzip block boundary, and since the cpositions are multiplied by\n            // (1 << 8) these uncompressed offsets get a unique space\n            cpositions[pos] * (1 << 8) +\n              (blockStart - dpositions[pos]) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so\n          // we must be at the end of the relevant data and we can stop\n          // processing data now\n          return\n        }\n\n        // yield if we have emitted beyond the yield limit\n        if (this.yieldTime && last - Date.now() > this.yieldTime) {\n          last = Date.now()\n          checkAbortSignal(signal)\n          await timeout(1)\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of\n   * the file, which are the bytes up to the first\n   * non-meta line\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } =\n      await this.getMetadata(opts)\n    checkAbortSignal(opts.signal)\n    const maxFetch = (firstDataLine?.blockPosition || 0) + maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header\n    // actually takes up more than one block? this case is not covered here\n\n    const buf = await this._readRegion(0, maxFetch, opts)\n    const bytes = await unzip(buf)\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      return bytes.slice(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the\n   * file, is the portion up to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const bytes = await this.getHeaderBuffer(opts)\n    return bytes.toString('utf8')\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which\n   * they occur in the file. reference sequence renaming is not applied\n   * to these names.\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index,\n   * containing columnNumbers, metaChar, and format\n   * @param {string} regionRefName\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   * @param {array[string]} line\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    metadata: IndexData,\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    const { columnNumbers, metaChar, coordinateType, format } = metadata\n    // skip meta lines\n    if (metaChar && line.startsWith(metaChar)) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast.\n    // basically, we want to avoid doing a split, because if the lines are really long\n    // that could lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    for (let i = 0; i < line.length + 1; i += 1) {\n      if (line[i] === '\\t' || i === line.length) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return { overlaps: false }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return { startCoordinate, overlaps: false }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return { startCoordinate, overlaps: false }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          // this will never match if there is no end column\n          const endCoordinate =\n            format === 'VCF'\n              ? this._getVcfEnd(\n                  startCoordinate,\n                  refSeq,\n                  line.slice(currentColumnStart, i),\n                )\n              : parseInt(line.slice(currentColumnStart, i), 10)\n          if (endCoordinate <= regionStart) {\n            return { overlaps: false }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return { startCoordinate, overlaps: true }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END as being on a different\n    // chromosome\n    //\n    // if CHR2 is on the same chromosome, still ignore it because there should\n    // be another pairwise feature at the end of this one\n    const isTRA = info.includes('SVTYPE=TRA')\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference sequence\n   * @param refSeq reference sequence name\n   * @returns number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  async _readRegion(pos: number, size: number, opts: Options = {}) {\n    const b = Buffer.alloc(size)\n    const { bytesRead, buffer } = await this.filehandle.read(\n      b,\n      0,\n      size,\n      pos,\n      opts,\n    )\n\n    return buffer.slice(0, bytesRead)\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   */\n  async readChunk(c: Chunk, opts: Options = {}) {\n    // fetch the uncompressed data, uncompress carefully a block at a time,\n    // and stop when done\n\n    const data = await this._readRegion(\n      c.minv.blockPosition,\n      c.fetchedSize(),\n      opts,\n    )\n    return unzipChunkSlice(data, c)\n  }\n}\n"],"names":["longToNumber","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","Error","toNumber","AbortError","checkAbortSignal","signal","aborted","DOMException","e","code","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","length","sort","c0","c1","dif","minv","blockPosition","dataPosition","forEach","chunk","chunk1","chunk2","maxv","compareTo","push","VirtualOffset","constructor","this","toString","b","min","args","i","fromBytes","bytes","offset","bigendian","Chunk","bin","fetchedSize","undefined","_fetchedSize","toUniqueString","IndexFile","filehandle","renameRefSeqs","n","renameRefSeq","getMetadata","opts","indices","_indices","rest","parse","_findFirstData","currentFdl","virtualOffset","parseP","_parse","catch","hasRefSeq","seqId","binIndex","TabixIndex","lineCount","refName","indexData","refId","refNameToId","stats","buf","readFile","unzip","readUInt32LE","refCount","readInt32LE","formatFlags","coordinateType","format","columnNumbers","ref","start","end","metaValue","metaChar","String","fromCharCode","skipLines","nameSectionLength","refIdToName","_parseNameBytes","slice","firstDataLine","currOffset","Array","fill","map","binCount","j","maxBinNumber","chunkCount","parsePseudoBin","k","u","v","linearCount","linearIndex","maxRefLength","maxBlockSize","namesBytes","currRefId","currNameStart","blocksForRange","max","ba","console","warn","overlappingBins","beg","c","nintv","minLin","Math","maxLin","vp","rshift","num","bits","floor","CSI","super","depth","minShift","indexCov","parseAuxData","csiVersion","auxLength","aux","loffset","csi","reg2bins","l","t","s","bins","decoder","TextDecoder","timeout","time","Promise","resolve","setTimeout","TabixIndexedFile","path","tbiPath","tbiFilehandle","csiPath","csiFilehandle","yieldTime","chunkSizeLimit","chunkCacheSize","TypeError","index","chunkCache","cache","maxSize","readChunk","getLines","callback","options","lineCallback","metadata","size","toLocaleString","last","Date","now","previousStartCoordinate","buffer","cpositions","dpositions","get","blockStart","pos","indexOf","line","decode","startCoordinate","overlaps","checkLine","trim","getHeaderBuffer","maxFetch","_readRegion","lastNewline","newlineByte","charCodeAt","metaByte","getHeader","getReferenceSequenceNames","regionRefName","regionStart","regionEnd","startsWith","maxColumn","currentColumnNumber","currentColumnStart","refSeq","parseInt","_getVcfEnd","info","endCoordinate","isTRA","includes","prevChar","valueEnd","Buffer","alloc","bytesRead","read","data"],"sourceRoot":""}