{"version":3,"sources":["../../../plugins/bed/src/BedTabixAdapter/BedTabixAdapter.ts","../../../plugins/bed/src/util.ts"],"names":["BedTabixAdapter","config","getSubAdapter","pluginManager","parser","bed","columnNames","scoreColumn","bedGzLocation","readConfObject","index","autoSql","location","indexType","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","BED","opts","this","getReferenceSequenceNames","a","getHeader","fields","line","Object","fromEntries","split","map","f","i","length","header","defs","filter","defline","includes","slice","field","trim","query","ObservableCreate","observer","getMetadata","meta","columnNumbers","colRef","ref","colStart","start","colEnd","end","colSame","getNames","names","getLines","refName","lineCallback","fileOffset","l","uniqueId","id","data","defaultParser","parseLine","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","score","chrom","chromStart","chromEnd","SimpleFeature","r","get","ucscProcessedTranscript","next","signal","complete","BaseFeatureDataAdapter","capabilities","feature","children","thickStart","thickEnd","blocks","child","sort","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag"],"mappings":"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","file":"static/js/38.f7234114.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation, Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ucscProcessedTranscript } from '../util'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n  private parser: any\n\n  protected bed: TabixIndexedFile\n\n  protected columnNames: string[]\n\n  protected scoreColumn: string\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const bedGzLocation = readConfObject(\n      config,\n      'bedGzLocation',\n    ) as FileLocation\n    const index = readConfObject(config, 'index') as {\n      indexType?: string\n      location: FileLocation\n    }\n    const autoSql = readConfObject(config, 'autoSql') as string\n    const { location, indexType } = index\n\n    this.bed = new TabixIndexedFile({\n      filehandle: openLocation(bedGzLocation, this.pluginManager),\n      csiFilehandle:\n        indexType === 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      tbiFilehandle:\n        indexType !== 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    this.columnNames = readConfObject(config, 'columnNames')\n    this.scoreColumn = readConfObject(config, 'scoreColumn')\n    this.parser = new BED({ autoSql })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.bed.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    return this.bed.getHeader()\n  }\n\n  defaultParser(fields: string[], line: string) {\n    return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n  }\n\n  async getNames() {\n    if (this.columnNames.length) {\n      return this.columnNames\n    }\n    const header = await this.bed.getHeader()\n    const defs = header.split('\\n').filter(f => !!f)\n    const defline = defs[defs.length - 1]\n    return defline && defline.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : null\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const meta = await this.bed.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      // colSame handles special case for tabix where a single column is both\n      // the start and end, this is assumed to be covering the base at this\n      // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n      const colSame = colStart === colEnd ? 1 : 0\n      const names = await this.getNames()\n      await this.bed.getLines(query.refName, query.start, query.end, {\n        lineCallback: (line: string, fileOffset: number) => {\n          const l = line.split('\\t')\n          const refName = l[colRef]\n          const start = +l[colStart]\n\n          const end = +l[colEnd] + colSame\n          const uniqueId = `${this.id}-${fileOffset}`\n          const data = names\n            ? this.defaultParser(names, line)\n            : this.parser.parseLine(line, { uniqueId })\n\n          const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n          if (blockCount) {\n            const starts = chromStarts || blockStarts || []\n            const sizes = blockSizes\n            const blocksOffset = start\n            data.subfeatures = []\n\n            for (let b = 0; b < blockCount; b += 1) {\n              const bmin = (starts[b] || 0) + blocksOffset\n              const bmax = bmin + (sizes[b] || 0)\n              data.subfeatures.push({\n                uniqueId: `${uniqueId}-${b}`,\n                start: bmin,\n                end: bmax,\n                type: 'block',\n              })\n            }\n          }\n\n          if (this.scoreColumn) {\n            data.score = +data[this.scoreColumn]\n          }\n          delete data.chrom\n          delete data.chromStart\n          delete data.chromEnd\n          const f = new SimpleFeature({\n            ...data,\n            start,\n            end,\n            refName,\n            uniqueId,\n          })\n          const r = f.get('thickStart') ? ucscProcessedTranscript(f) : f\n          observer.next(r)\n        },\n        signal: opts.signal,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newData: Record<string, any> = {}\n  feature.tags().forEach(tag => {\n    newData[tag] = feature.get(tag)\n  })\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  const newFeature = new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n  return newFeature\n}\n"],"sourceRoot":""}