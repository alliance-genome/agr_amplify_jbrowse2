{"version":3,"file":"static/js/644.2eb4000d.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","arg","this","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","i","length","entry","qname","tname","quals","len","push","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","line","_line$split","split","_line$split2","_toArray","qstart","qend","strand","tstart","tend","numMatches","fields","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","op","parseCigar","PAFAdapter","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_this2","wrap","_context","prev","next","setupPre","catch","e","undefined","abrupt","stop","_x","_setupPre","_callee2","pm","pafLocation","buffer","buf","_context2","pluginManager","openLocation","getConf","readFile","sent","isGzip","unzip","t0","parseLineByLine","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_iterator","_step","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","_createForOfIteratorHelper","s","n","done","add","err","f","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","TextDecoder","fatal","t1","t2","decode","a","decoder","cb","blockStart","toString","trim"],"sourceRoot":""}