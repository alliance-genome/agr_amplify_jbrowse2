{"version":3,"file":"static/js/3614.ec516d36.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: Function\n    removeAtIndex: Function\n    add: Function\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={idx} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={() => slot.removeAtIndex(idx)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <>\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        style={{ margin: 2 }}\n                        data-testid={`stringArrayAdd-${slot.name}`}\n                        onClick={() => {\n                          setAddNew(false)\n                          slot.add(value)\n                          setValue('')\n                        }}\n                      >\n                        OK\n                      </Button>\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        style={{ margin: 2 }}\n                        onClick={() => {\n                          setAddNew(false)\n                          setValue('')\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    </>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => setAddNew(true)}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => setCode(event.target.value)}\n          style={{ background: error ? '#fdd' : undefined }}\n          InputProps={{\n            classes: {\n              input: classes.textAreaFont,\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\n\nconst ColorPicker = lazy(() => import('@jbrowse/core/ui/ColorPicker'))\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => onChange(event.target.value)}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={null}>\n          <ColorPicker color={value} onChange={event => onChange(event)} />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => slot.set(color)}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) =>\n                  slot.setAtKeyIndex(key, idx, val),\n                removeAtIndex: (idx: number) => slot.removeAtKeyIndex(key, idx),\n                add: (val: string) => slot.addToKey(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import React from 'react'\nimport { TextField, TextFieldProps } from '@mui/material'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      FormHelperTextProps={{\n        component: 'div',\n      }}\n      fullWidth\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nexport default NumberEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => slot.add(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => slot.set(evt.target.checked)}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getSubType,\n  getUnionSubTypes,\n  ILiteralType,\n} from '@jbrowse/core/util/mst-reflection'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\n\n// icons\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport NumberMapEditor from './NumberMapEditor'\nimport NumberEditor from './NumberEditor'\nimport BooleanEditor from './BooleanEditor'\nimport {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value))[1],\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: theme.palette.tertiary?.contrastText || '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = `${singular(slotName)} ${slotIndex + 1}`\n        return <Member {...props} key={key} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeSelector}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const { target } = model\n  const key = target && readConfObject(target, 'trackId')\n  const name = target && readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n      >\n        <Typography>{name ?? 'Configuration'}</Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        {!target ? 'no target set' : <Schema schema={target} />}\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","value","setValue","useState","addNew","setAddNew","React","name","InputLabel","List","disablePadding","map","val","idx","ListItem","key","disableGutters","TextField","onChange","evt","setAtIndex","target","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","removeAtIndex","DeleteIcon","placeholder","event","Button","color","variant","style","margin","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","input","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","HelpIcon","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","displayed","setDisplayed","display","_extends","fallback","helperText","fullWidth","card","spacing","Card","raised","CardHeader","action","remove","CardContent","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","AddIcon","ConfigurationTextField","SanitizedHTML","html","FormHelperTextProps","component","setVal","num","Number","parseFloat","isNaN","reset","type","NumberEditor","FormControl","FormControlLabel","control","Checkbox","checked","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","expandIcon","tertiary","contrastText","root","padding","expansionPanelDetails","accordion","border","primary","noOverflow","Member","schema","path","typeSelector","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","TypeSelector","setSubschema","Accordion","defaultExpanded","AccordionSummary","ExpandMoreIcon","Typography","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}