{"version":3,"file":"static/js/2530.3a759a18.chunk.js","mappings":"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","sources":["../../../plugins/gff3/src/Gff3Adapter/Gff3Adapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport gff, { GFF3FeatureLineWithRefs } from '@gmod/gff'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gffFeatures?: Promise<{\n    header: string\n    intervalTree: Record<string, IntervalTree>\n  }>\n\n  private async loadDataP() {\n    const pm = this.pluginManager\n    const buf = await openLocation(this.getConf('gffLocation'), pm).readFile()\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/)\n    const headerLines = []\n    for (let i = 0; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n\n    const feats = gff.parseStringSync(data, {\n      parseFeatures: true,\n      parseComments: false,\n      parseDirectives: false,\n      parseSequences: false,\n      disableDerivesFromReferences: true,\n    })\n\n    const intervalTree = feats\n      .flat()\n      .map(\n        (f, i) =>\n          new SimpleFeature({\n            data: this.featureData(f),\n            id: `${this.id}-offset-${i}`,\n          }),\n      )\n      .reduce((acc, obj) => {\n        const key = obj.get('refName')\n        if (!acc[key]) {\n          acc[key] = new IntervalTree()\n        }\n        acc[key].insert([obj.get('start'), obj.get('end')], obj)\n        return acc\n      }, {} as Record<string, IntervalTree>)\n\n    return { header, intervalTree }\n  }\n\n  private async loadData() {\n    if (!this.gffFeatures) {\n      this.gffFeatures = this.loadDataP().catch(e => {\n        this.gffFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gffFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { intervalTree } = await this.loadData()\n    return Object.keys(intervalTree)\n  }\n\n  public async getHeader() {\n    const { header } = await this.loadData()\n    return header\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = query\n        const { intervalTree } = await this.loadData()\n        intervalTree[refName]\n          ?.search([start, end])\n          .forEach(f => observer.next(f))\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  private featureData(data: GFF3FeatureLineWithRefs) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    if (data.strand === '+') {\n      f.strand = 1\n    } else if (data.strand === '-') {\n      f.strand = -1\n    } else if (data.strand === '.') {\n      f.strand = 0\n    } else {\n      f.strand = undefined\n    }\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = [\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ]\n    const dataAttributes = data.attributes || {}\n    Object.keys(dataAttributes).forEach(a => {\n      let b = a.toLowerCase()\n      if (defaultFields.includes(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (dataAttributes[a] !== null) {\n        let attr: string | string[] | undefined = dataAttributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    })\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length) {\n      f.subfeatures = data.child_features\n        .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))\n        .flat()\n    }\n\n    delete f.child_features\n    delete f.data\n    // delete f.derived_features\n    delete f.attributes\n    delete f.seq_id\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"names":["isGzip","buf","gffFeatures","pm","this","pluginManager","openLocation","getConf","readFile","unzip","buffer","length","Error","data","TextDecoder","fatal","decode","lines","split","headerLines","i","startsWith","push","header","join","feats","gff","parseFeatures","parseComments","parseDirectives","parseSequences","disableDerivesFromReferences","intervalTree","flat","map","f","SimpleFeature","featureData","id","reduce","acc","obj","key","get","IntervalTree","insert","loadDataP","catch","e","undefined","loadData","Object","keys","query","opts","ObservableCreate","observer","start","end","refName","search","forEach","next","complete","error","signal","strand","phase","Number","seq_id","score","defaultFields","dataAttributes","attributes","a","b","toLowerCase","includes","attr","Array","isArray","child_features","subfeatures","childLocs","childLoc","BaseFeatureDataAdapter"],"sourceRoot":""}