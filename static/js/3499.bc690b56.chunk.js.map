{"version":3,"file":"static/js/3499.bc690b56.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MCScanAnchorsAdapter/MCScanAnchorsAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  doesIntersect2,\n  SimpleFeature,\n  Feature,\n  Region,\n} from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { readFile, parseBed } from '../util'\n\ninterface BareFeature {\n  strand: number\n  refName: string\n  start: number\n  end: number\n  score: number\n  name: string\n}\n\ntype Row = [BareFeature, BareFeature, number, number]\n\nexport default class MCScanAnchorsAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    assemblyNames: string[]\n    feats: Row[]\n  }>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n  async setupPre(opts: BaseOptions) {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n\n    const pm = this.pluginManager\n    const bed1 = openLocation(this.getConf('bed1Location'), pm)\n    const bed2 = openLocation(this.getConf('bed2Location'), pm)\n    const mcscan = openLocation(this.getConf('mcscanAnchorsLocation'), pm)\n    const [bed1text, bed2text, mcscantext] = await Promise.all(\n      [bed1, bed2, mcscan].map(r => readFile(r, opts)),\n    )\n\n    const bed1Map = parseBed(bed1text)\n    const bed2Map = parseBed(bed2text)\n    const feats = mcscantext\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && f !== '###')\n      .map((line, index) => {\n        const [name1, name2, score] = line.split('\\t')\n        const r1 = bed1Map.get(name1)\n        const r2 = bed2Map.get(name2)\n        if (!r1 || !r2) {\n          throw new Error(`feature not found, ${name1} ${name2} ${r1} ${r2}`)\n        }\n        return [r1, r2, +score, index] as Row\n      })\n\n    return {\n      assemblyNames,\n      feats,\n    }\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseFeatureDataAdapter filters it out)\n    return true\n  }\n\n  async getRefNames() {\n    // we cannot determine this accurately\n    return []\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyNames, feats } = await this.setup(opts)\n\n      // The index of the assembly name in the region list corresponds to\n      // the adapter in the subadapters list\n      const index = assemblyNames.indexOf(region.assemblyName)\n      if (index !== -1) {\n        const flip = index === 0\n        feats.forEach(f => {\n          const [r1, r2, score, rowNum] = f\n          const [f1, f2] = !flip ? [r2, r1] : [r1, r2]\n          if (\n            f1.refName === region.refName &&\n            doesIntersect2(region.start, region.end, f1.start, f1.end)\n          ) {\n            observer.next(\n              new SimpleFeature({\n                ...f1,\n                uniqueId: `${index}-${rowNum}`,\n                syntenyId: rowNum,\n\n                // note: strand would be -1 if the two features are on opposite\n                // strands, indicating inverted alignment\n                strand: f1.strand * f2.strand,\n                assemblyName: assemblyNames[+!flip],\n                score,\n                mate: {\n                  ...f2,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          }\n        })\n      }\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["MCScanAnchorsAdapter","setupP","opts","this","setupPre","catch","e","undefined","assemblyNames","getConf","pm","pluginManager","bed1","openLocation","bed2","mcscan","Promise","all","map","r","readFile","bed1text","bed2text","mcscantext","bed1Map","parseBed","bed2Map","feats","split","filter","f","line","index","name1","name2","score","r1","get","r2","Error","region","ObservableCreate","observer","setup","indexOf","assemblyName","flip","forEach","rowNum","f1","f2","refName","doesIntersect2","start","end","next","SimpleFeature","uniqueId","syntenyId","strand","mate","complete","BaseFeatureDataAdapter","capabilities","isGzip","buf","text","Map","startsWith","name","file","buffer","TextDecoder","fatal","unzip","decode","zip","a","b","i"],"sourceRoot":""}