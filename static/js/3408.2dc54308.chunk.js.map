{"version":3,"file":"static/js/3408.2dc54308.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/util.ts","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDNASequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/ProteinSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/GenomicSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDSSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequencePanel.tsx"],"sourcesContent":["// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nexport const intronColor = undefined\nexport const utrColor = 'rgb(200,240,240)'\nexport const proteinColor = 'rgb(220,160,220)'\nexport const cdsColor = 'rgb(220,220,180)'\nexport const updownstreamColor = 'rgba(250,200,200)'\nexport const genomeColor = 'rgb(200,280,200)'\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { Feat } from '../../util'\nimport { cdsColor, intronColor, updownstreamColor, utrColor } from '../util'\nimport { SequenceFeatureDetailsModel } from '../model'\n\nconst CDNASequence = observer(function ({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  includeIntrons,\n  collapseIntron,\n  model,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  model: SequenceFeatureDetailsModel\n}) {\n  const { upperCaseCDS, intronBp } = model\n  const hasCds = cds.length > 0\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  const toLower = (s: string) => (upperCaseCDS ? s.toLowerCase() : s)\n  const toUpper = (s: string) => (upperCaseCDS ? s.toUpperCase() : s)\n  return (\n    <>\n      {upstream ? (\n        <span style={{ background: updownstreamColor }}>\n          {toLower(upstream)}\n        </span>\n      ) : null}\n\n      {chunks.map((chunk, idx) => {\n        const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n\n        return (\n          <React.Fragment key={JSON.stringify(chunk)}>\n            <span\n              style={{\n                background: chunk.type === 'CDS' ? cdsColor : utrColor,\n              }}\n            >\n              {hasCds\n                ? chunk.type === 'CDS'\n                  ? toUpper(sequence.slice(chunk.start, chunk.end))\n                  : toLower(sequence.slice(chunk.start, chunk.end))\n                : toUpper(sequence.slice(chunk.start, chunk.end))}\n            </span>\n            {includeIntrons && idx < chunks.length - 1 ? (\n              <span style={{ background: intronColor }}>\n                {toLower(\n                  collapseIntron && intron.length > intronBp * 2\n                    ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n                    : intron,\n                )}\n              </span>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>\n          {toLower(downstream)}\n        </span>\n      ) : null}\n    </>\n  )\n})\n\nexport default CDNASequence\n","import React from 'react'\nimport { Feat, stitch } from '../../util'\nimport { proteinColor } from '../util'\n\nexport default function ProteinSequence({\n  cds,\n  sequence,\n  codonTable,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: Record<string, string>\n}) {\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n\n  return <span style={{ background: proteinColor }}>{protein}</span>\n}\n","import React from 'react'\nimport { genomeColor, updownstreamColor } from '../util'\n\nexport default function GenomicSequence({\n  sequence,\n  upstream,\n  downstream,\n}: {\n  sequence: string\n  upstream?: string\n  downstream?: string\n}) {\n  return (\n    <>\n      {upstream ? (\n        <span style={{ background: updownstreamColor }}>{upstream}</span>\n      ) : null}\n\n      <span style={{ background: genomeColor }}>{sequence}</span>\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>{downstream}</span>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\nimport { cdsColor } from '../util'\nimport { Feat, stitch } from '../../util'\n\nexport default function CDSSequence({\n  cds,\n  sequence,\n}: {\n  cds: Feat[]\n  sequence: string\n}) {\n  return <span style={{ background: cdsColor }}>{stitch(cds, sequence)}</span>\n}\n","import React from 'react'\n\nimport {\n  SimpleFeatureSerialized,\n  defaultCodonTable,\n  generateCodonTable,\n  revcom,\n} from '../../util'\nimport {\n  SeqState,\n  calculateUTRs,\n  calculateUTRs2,\n  dedupe,\n  revlist,\n} from '../util'\nimport CDNASequence from './seqtypes/CDNASequence'\nimport ProteinSequence from './seqtypes/ProteinSequence'\nimport GenomicSequence from './seqtypes/GenomicSequence'\nimport CDSSequence from './seqtypes/CDSSequence'\nimport { SequenceFeatureDetailsModel } from './model'\n\ninterface SeqPanelProps {\n  sequence: SeqState\n  feature: SimpleFeatureSerialized\n  mode: string\n  model: SequenceFeatureDetailsModel\n}\n\nconst SeqPanel = React.forwardRef<HTMLDivElement, SeqPanelProps>(\n  function SeqPanel2(props, ref) {\n    const { model, feature, mode } = props\n    let {\n      sequence: { seq, upstream = '', downstream = '' },\n    } = props\n    const { subfeatures = [] } = feature\n\n    const children = subfeatures\n      .sort((a, b) => a.start - b.start)\n      .map(sub => ({\n        ...sub,\n        start: sub.start - feature.start,\n        end: sub.end - feature.start,\n      }))\n\n    // we filter duplicate entries in cds and exon lists duplicate entries may be\n    // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n    // probably worth ignoring here (produces broken protein translations if\n    // included)\n    //\n    // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n    // transcript ENST00000445597.6\n    //\n    // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n    let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n    let utr = dedupe(children.filter(sub => sub.type?.match(/utr/i)))\n    let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n    if (!utr.length && cds.length && exons.length) {\n      utr = calculateUTRs(cds, exons)\n    }\n    if (!utr.length && cds.length && !exons.length) {\n      utr = calculateUTRs2(cds, {\n        start: 0,\n        end: feature.end - feature.start,\n        type: 'gene',\n      })\n    }\n\n    if (feature.strand === -1) {\n      // doing this in a single assignment is needed because downstream and\n      // upstream are swapped so this avoids a temp variable\n      ;[seq, upstream, downstream] = [\n        revcom(seq),\n        revcom(downstream),\n        revcom(upstream),\n      ]\n      cds = revlist(cds, seq.length)\n      exons = revlist(exons, seq.length)\n      utr = revlist(utr, seq.length)\n    }\n    const codonTable = generateCodonTable(defaultCodonTable)\n\n    return (\n      <div ref={ref} data-testid=\"sequence_panel\">\n        <div\n          style={{\n            /* raw styles instead of className so that html copy works */\n            fontFamily: 'monospace',\n            wordWrap: 'break-word',\n            overflow: 'auto',\n            color: 'black',\n            fontSize: 12,\n            maxWidth: 600,\n            maxHeight: 300,\n          }}\n        >\n          <span style={{ background: 'white' }}>\n            {`>${\n              feature.name ||\n              feature.id ||\n              `${feature.refName}:${feature.start + 1}-${feature.end}`\n            }-${mode}\\n`}\n          </span>\n          <br />\n          {mode === 'genomic' ? (\n            <GenomicSequence sequence={seq} />\n          ) : mode === 'genomic_sequence_updownstream' ? (\n            <GenomicSequence\n              sequence={seq}\n              upstream={upstream}\n              downstream={downstream}\n            />\n          ) : mode === 'cds' ? (\n            <CDSSequence cds={cds} sequence={seq} />\n          ) : mode === 'cdna' ? (\n            <CDNASequence\n              model={model}\n              exons={exons}\n              cds={cds}\n              utr={utr}\n              sequence={seq}\n            />\n          ) : mode === 'protein' ? (\n            <ProteinSequence cds={cds} codonTable={codonTable} sequence={seq} />\n          ) : mode === 'gene' ? (\n            <CDNASequence\n              model={model}\n              exons={exons}\n              cds={cds}\n              utr={utr}\n              sequence={seq}\n              includeIntrons\n            />\n          ) : mode === 'gene_collapsed_intron' ? (\n            <CDNASequence\n              model={model}\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              includeIntrons\n              collapseIntron\n            />\n          ) : mode === 'gene_updownstream' ? (\n            <CDNASequence\n              model={model}\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              upstream={upstream}\n              downstream={downstream}\n              includeIntrons\n            />\n          ) : mode === 'gene_updownstream_collapsed_intron' ? (\n            <CDNASequence\n              model={model}\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              upstream={upstream}\n              downstream={downstream}\n              includeIntrons\n              collapseIntron\n            />\n          ) : (\n            <div>Unknown type</div>\n          )}\n        </div>\n      </div>\n    )\n  },\n)\n\nexport default SeqPanel\n"],"names":["cdsColor","updownstreamColor","observer","utr","cds","exons","sequence","upstream","downstream","includeIntrons","collapseIntron","model","upperCaseCDS","intronBp","hasCds","length","chunks","sort","a","b","start","filter","f","end","toLower","s","toLowerCase","toUpper","toUpperCase","React","style","background","map","chunk","idx","intron","slice","key","JSON","stringify","type","undefined","ProteinSequence","codonTable","str","stitch","protein","i","GenomicSequence","CDSSequence","props","ref","feature","mode","seq","subfeatures","children","sub","dedupe","match","calculateUTRs","calculateUTRs2","strand","revcom","revlist","generateCodonTable","defaultCodonTable","fontFamily","wordWrap","overflow","color","fontSize","maxWidth","maxHeight","name","id","refName","CDNASequence"],"sourceRoot":""}