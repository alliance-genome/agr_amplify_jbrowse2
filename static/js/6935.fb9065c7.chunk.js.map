{"version":3,"file":"static/js/6935.fb9065c7.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Typography,\n  Link,\n  Paper,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport copy from 'copy-to-clipboard'\nimport clone from 'clone'\nimport {\n  FeatureDetails,\n  BaseCard,\n  SimpleValue,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { parseCigar } from '../MismatchParser'\n\nconst useStyles = makeStyles()({\n  compact: {\n    paddingRight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nconst omit = ['clipPos', 'flags']\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFlags(props: { feature: any }) {\n  const { classes } = useStyles()\n  const { feature } = props\n  const { flags } = feature\n  const flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n  ]\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <SimpleValue name={'Flag'} value={flags} />\n\n      <FormGroup>\n        {flagNames.map((name, index) => {\n          const val = flags & (1 << index)\n          const key = `${name}_${val}`\n          return (\n            <FormControlLabel\n              key={key}\n              control={\n                <Checkbox\n                  className={classes.compact}\n                  checked={Boolean(val)}\n                  name={name}\n                  readOnly\n                />\n              }\n              label={name}\n            />\n          )\n        })}\n      </FormGroup>\n    </BaseCard>\n  )\n}\n\nfunction Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  if (display.length > 100) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          onClick={() => {\n            copy(display)\n            setCopied(true)\n            setTimeout(() => {\n              setCopied(false)\n            }, 700)\n          }}\n        >\n          {copied ? 'Copied to clipboard' : 'Copy'}\n        </button>\n        <button type=\"button\" onClick={() => setShow(val => !val)}>\n          {show ? 'Show less' : 'Show more'}\n        </button>\n        <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n      </>\n    )\n  }\n  return <div>{display}</div>\n}\n\n// utility function to get length of alignment from cigar\nfunction getLengthOnRef(cigar: string) {\n  const cigarOps = parseCigar(cigar)\n  let lengthOnRef = 0\n  for (let i = 0; i < cigarOps.length; i += 2) {\n    const len = +cigarOps[i]\n    const op = cigarOps[i + 1]\n    if (op !== 'H' && op !== 'S' && op !== 'I') {\n      lengthOnRef += len\n    }\n  }\n  return lengthOnRef\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction SupplementaryAlignments(props: { tag: string; model: any }) {\n  const { tag, model } = props\n  const session = getSession(model)\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, index) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart\n            const end = +saStart + saLength\n            const locString = `${saRef}:${Math.max(1, start - extra)}-${\n              end + extra\n            }`\n            const displayStart = start.toLocaleString('en-US')\n            const displayEnd = end.toLocaleString('en-US')\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand})`\n            return (\n              <li key={`${locString}-${index}`}>\n                <Link\n                  onClick={async event => {\n                    event.preventDefault()\n                    const { view } = model\n                    try {\n                      if (view) {\n                        await view.navToLocString(locString)\n                      } else {\n                        throw new Error(\n                          'No view associated with this view anymore',\n                        )\n                      }\n                    } catch (e) {\n                      console.error(e)\n                      session.notify(`${e}`)\n                    }\n                  }}\n                  href=\"#\"\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </BaseCard>\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction PairLink({ locString, model }: { locString: string; model: any }) {\n  const session = getSession(model)\n  return (\n    <Link\n      onClick={async () => {\n        const { view } = model\n        if (!view) {\n          throw new Error(\n            'No view associated with this feature detail panel anymore',\n          )\n        }\n        try {\n          await view.navToLocString(locString)\n        } catch (e) {\n          console.error(e)\n          session.notify(`${e}`)\n        }\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFeatureDetails(props: { model: any }) {\n  const { model } = props\n  const feat = clone(model.featureData)\n  const SA = (feat.tags && feat.tags.SA) || feat.SA\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        omit={omit}\n        feature={feat}\n        formatter={(value, key) => {\n          return key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }}\n      />\n      {SA ? <SupplementaryAlignments model={model} tag={SA} /> : null}\n      {feat.flags !== undefined ? (\n        <AlignmentFlags feature={feat} {...props} />\n      ) : null}\n    </Paper>\n  )\n}\n\nexport default observer(AlignmentFeatureDetails)\n"],"names":["useStyles","makeStyles","compact","paddingRight","paddingTop","paddingBottom","omit","AlignmentFlags","props","classes","flags","feature","BaseCard","title","SimpleValue","name","value","map","index","val","key","control","className","checked","Boolean","readOnly","label","Formatter","useState","show","setShow","copied","setCopied","display","String","length","type","onClick","copy","setTimeout","slice","SupplementaryAlignments","tag","model","session","getSession","split","filter","SA","saRef","saStart","saStrand","saLength","cigar","cigarOps","parseCigar","lengthOnRef","i","len","op","getLengthOnRef","extra","Math","floor","start","end","locString","max","displayStart","toLocaleString","displayEnd","displayString","event","preventDefault","view","navToLocString","Error","console","error","notify","href","PairLink","observer","feat","clone","featureData","tags","FeatureDetails","formatter","undefined"],"sourceRoot":""}