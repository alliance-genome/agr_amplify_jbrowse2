{"version":3,"file":"static/js/9121.400cc528.chunk.js","mappings":"kTAaqC,uGAyFV,OAzFU,0EAGnC,2GAC0C,QAD1C,EACwBA,KAAKC,qBAAa,aAAlB,OAAAD,KAAqBA,KAAKE,QAAQ,oBAAmB,OAA9D,GAAPC,EAAO,OACA,CAAD,qBACJ,IAAIC,MAAM,4BAA2B,gCAEtCD,EAAQE,aAAW,gDAC3B,kDATkC,IASlC,kEAED,yGACwBL,KAAKM,YAAW,OAAzB,OAAPH,EAAO,yBACNA,EAAQI,eAAa,gDAC7B,kDALA,IAKA,yBAED,SAAmBC,EAAeC,GAAoB,IAAD,OACnD,OAAOC,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,sIACf,EAAKL,YAAW,OAIhC,GAJRM,EAAe,OACV,IACEC,EAA8BL,EAArCM,MAAwBC,EAAaP,EAAlBQ,IACzBH,EAAaI,KAAKC,IAAI,EAAGL,EAFd,QAGXE,GAHW,KAKI,GAAKF,EAAaE,GAAQ,iBACpB,OAAnBJ,EAASQ,WAAU,2BAWpB,OAPKC,EAAMR,EAAgBS,aAAY,kBAEjCb,GAAK,IACRM,MAAOD,EACPG,IAAKD,IAEPN,GACD,WACmBa,EAAAA,EAAAA,GAAeF,EAAIG,MAAKC,EAAAA,EAAAA,OAAW,QAQvD,GARMC,EAAK,OACLC,GAA2B,QAAR,EAAAD,EAAM,UAAE,aAAR,EAAUE,IAAI,SAAU,GAC3CC,EAAS,EAAK1B,QAAQ,UACtB2B,EAAgB,EAAK3B,QAAQ,iBAC7B4B,EAAgB,EAAK5B,QAAQ,iBAC7B6B,EAAkB,EAAK7B,QAAQ,mBAC/B8B,EAAK,IAAIC,OAAOL,EAAQ,KAAOG,EAAkB,IAAM,KAEzDH,EAAQ,CACV,GAAIC,EAAe,CACXK,EAAUR,EAASS,SAASH,GAAG,UACjBE,GAAO,IAA3B,2BAAWE,EAAK,QACRC,EAAIxB,GAAcuB,EAAME,OAAS,IAEnCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQhC,EAAMM,MAAON,EAAMQ,MAC1DL,EAAS8B,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAS,GAAD,OAAK,EAAKC,GAAE,kBAAUP,EAAC,MAC/BQ,QAASrC,EAAMqC,QACf/B,MAAOuB,EACPrB,IAAKqB,EAAID,EAAM,GAAGI,OAClBM,KAAMV,EAAM,GACZW,OAAQ,IAIf,+BACH,CACA,GAAIjB,EAAe,CACXI,GAAUc,EAAAA,EAAAA,QAAOtB,GAAUS,SAASH,GAAG,UACzBE,GAAO,IAA3B,2BAAWE,EAAK,QACRC,EAAItB,GAAYqB,EAAME,OAAS,IACjCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQhC,EAAMM,MAAON,EAAMQ,MAC1DL,EAAS8B,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAS,GAAD,OAAK,EAAKC,GAAE,kBAAUP,EAAC,MAC/BQ,QAASrC,EAAMqC,QACf/B,MAAOuB,EAAID,EAAM,GAAGI,OACpBM,KAAMV,EAAM,GACZpB,IAAKqB,EACLU,QAAS,IAIhB,+BACH,CACF,CAEApC,EAASQ,WAAU,4CACpB,mDArEsB,GAsEzB,GAAC,2BAED,WAAwB,KAAC,EAzFU,CAER8B,EAAAA,uB","sources":["../../../plugins/sequence/src/SequenceSearchAdapter/SequenceSearchAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport {\n  SimpleFeature,\n  Feature,\n  Region,\n  revcom,\n  doesIntersect2,\n} from '@jbrowse/core/util'\nimport { toArray } from 'rxjs/operators'\nimport { firstValueFrom } from 'rxjs'\n\nexport default class extends BaseFeatureDataAdapter {\n  public async configure() {\n    const adapter = await this.getSubAdapter?.(this.getConf('sequenceAdapter'))\n    if (!adapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return adapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames() {\n    const adapter = await this.configure()\n    return adapter.getRefNames()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions) {\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const hw = 1000\n      let { start: queryStart, end: queryEnd } = query\n      queryStart = Math.max(0, queryStart - hw)\n      queryEnd += hw\n\n      if (queryEnd < 0 || queryStart > queryEnd) {\n        observer.complete()\n        return\n      }\n\n      const ret = sequenceAdapter.getFeatures(\n        {\n          ...query,\n          start: queryStart,\n          end: queryEnd,\n        },\n        opts,\n      )\n      const feats = await firstValueFrom(ret.pipe(toArray()))\n      const residues: string = feats[0]?.get('seq') || ''\n      const search = this.getConf('search')\n      const searchForward = this.getConf('searchForward')\n      const searchReverse = this.getConf('searchReverse')\n      const caseInsensitive = this.getConf('caseInsensitive')\n      const re = new RegExp(search, 'g' + (caseInsensitive ? 'i' : ''))\n\n      if (search) {\n        if (searchForward) {\n          const matches = residues.matchAll(re)\n          for (const match of matches) {\n            const s = queryStart + (match.index || 0)\n\n            if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n              observer.next(\n                new SimpleFeature({\n                  uniqueId: `${this.id}-match-${s}-p`,\n                  refName: query.refName,\n                  start: s,\n                  end: s + match[0].length,\n                  name: match[0],\n                  strand: 1,\n                }),\n              )\n            }\n          }\n        }\n        if (searchReverse) {\n          const matches = revcom(residues).matchAll(re)\n          for (const match of matches) {\n            const s = queryEnd - (match.index || 0)\n            if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n              observer.next(\n                new SimpleFeature({\n                  uniqueId: `${this.id}-match-${s}-n`,\n                  refName: query.refName,\n                  start: s - match[0].length,\n                  name: match[0],\n                  end: s,\n                  strand: -1,\n                }),\n              )\n            }\n          }\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  public freeResources() {}\n}\n"],"names":["this","getSubAdapter","getConf","adapter","Error","dataAdapter","configure","getRefNames","query","opts","ObservableCreate","observer","sequenceAdapter","queryStart","start","queryEnd","end","Math","max","complete","ret","getFeatures","firstValueFrom","pipe","toArray","feats","residues","get","search","searchForward","searchReverse","caseInsensitive","re","RegExp","matches","matchAll","match","s","index","doesIntersect2","length","next","SimpleFeature","uniqueId","id","refName","name","strand","revcom","BaseFeatureDataAdapter"],"sourceRoot":""}