{"version":3,"file":"static/js/9915.6578566b.chunk.js","mappings":"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","sources":["../../../plugins/menus/src/ImportSessionWidget/components/ImportSessionWidget.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks'\nimport { Button, Paper, Typography, makeStyles } from '@material-ui/core'\nimport { alpha } from '@material-ui/core/styles'\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react'\nimport { useDropzone } from 'react-dropzone'\n\n// icons\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ErrorIcon from '@material-ui/icons/Error'\n\nconst MAX_FILE_SIZE = 512 * 1024 ** 2 // 512 MiB\n\nfunction styledBy(property, mapping) {\n  return props => mapping[props[property]]\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  dropZone: {\n    textAlign: 'center',\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: styledBy('isDragActive', {\n      true: theme.palette.secondary.light,\n      false: theme.palette.divider,\n    }),\n    borderStyle: 'dashed',\n    backgroundColor: styledBy('isDragActive', {\n      true: alpha(\n        theme.palette.text.primary,\n        theme.palette.action.hoverOpacity,\n      ),\n      false: theme.palette.background.default,\n    }),\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n    '&:focus': {\n      borderColor: theme.palette.secondary.light,\n    },\n  },\n  uploadIcon: {\n    color: theme.palette.text.secondary,\n  },\n  rejectedFiles: {\n    marginTop: theme.spacing(4),\n  },\n  listItem: {\n    padding: theme.spacing(0, 4),\n  },\n  expandIcon: {\n    color: '#FFFFFF',\n  },\n  error: {\n    margin: theme.spacing(2),\n  },\n  errorHeader: {\n    background: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n  },\n  errorMessage: {\n    padding: theme.spacing(2),\n  },\n}))\n\nfunction ImportSession(props) {\n  const [errorMessage, setErrorMessage] = useState('')\n  const { model } = props\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: 'application/json',\n    maxSize: MAX_FILE_SIZE,\n    multiple: false,\n    onDrop: async (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        if (acceptedFiles.length || rejectedFiles.length > 1) {\n          setErrorMessage('Only one session at a time may be imported')\n        } else if (rejectedFiles[0].size > MAX_FILE_SIZE) {\n          setErrorMessage(\n            `File size is too large (${Math.round(\n              rejectedFiles[0].size / 1024 ** 2,\n            )} MiB), max size is ${MAX_FILE_SIZE / 1024 ** 2} MiB`,\n          )\n        } else if (rejectedFiles[0].type !== 'application/json') {\n          setErrorMessage('File does not appear to be JSON')\n        } else {\n          setErrorMessage('Unknown file import error')\n        }\n        return\n      }\n      const [file] = acceptedFiles\n      const fileHandle = openLocation(storeBlobLocation({ blob: file }))\n      let sessionText\n      try {\n        sessionText = await fileHandle.readFile('utf8')\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(`Problem opening file ${file.path}: ${error}`)\n        return\n      }\n      let sessionContents\n      try {\n        sessionContents = JSON.parse(sessionText).session\n      } catch (error) {\n        console.error(error)\n        sessionContents = { error: `Error parsing ${file.path}: ${error}` }\n      }\n      const session = getSession(model)\n      try {\n        session.setSession(sessionContents)\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(`Error activating session: ${error} `)\n      }\n    },\n  })\n  const classes = useStyles({ isDragActive })\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <div {...getRootProps({ className: classes.dropZone })}>\n          <input {...getInputProps()} />\n          <CloudUploadIcon className={classes.uploadIcon} fontSize=\"large\" />\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body1\">\n            Drag and drop files here\n          </Typography>\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body2\">\n            or\n          </Typography>\n          <Button color=\"primary\" variant=\"contained\">\n            Browse Files\n          </Button>\n        </div>\n      </Paper>\n      {errorMessage ? (\n        <Paper className={classes.error}>\n          <div className={classes.errorHeader}>\n            <ErrorIcon color=\"inherit\" fontSize=\"large\" />\n            <div>\n              <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\n                Import error\n              </Typography>\n            </div>\n          </div>\n          <Typography className={classes.errorMessage}>\n            {errorMessage}\n          </Typography>\n        </Paper>\n      ) : null}\n    </div>\n  )\n}\n\nImportSession.propTypes = {\n  model: MobxPropTypes.observableObject.isRequired,\n}\n\nexport default observer(ImportSession)\n"],"names":["MAX_FILE_SIZE","styledBy","property","mapping","props","useStyles","makeStyles","theme","root","margin","spacing","paper","display","flexDirection","dropZone","textAlign","padding","borderWidth","borderRadius","borderColor","true","palette","secondary","light","false","divider","borderStyle","backgroundColor","alpha","text","primary","action","hoverOpacity","background","default","outline","transition","uploadIcon","color","rejectedFiles","marginTop","listItem","expandIcon","error","errorHeader","contrastText","errorMessage","observer","useState","setErrorMessage","model","useDropzone","accept","maxSize","multiple","onDrop","acceptedFiles","length","size","Math","round","type","file","fileHandle","openLocation","storeBlobLocation","blob","readFile","sessionText","console","path","sessionContents","JSON","parse","session","getSession","setSession","getRootProps","getInputProps","isDragActive","classes","className","fontSize","align","variant"],"sourceRoot":""}