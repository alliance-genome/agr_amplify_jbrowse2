{"version":3,"file":"static/js/6893.912fb7fe.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\n/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction paf_delta2paf(lines: string[]) {\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]\n    const m = regex.exec(line)\n    if (m !== null) {\n      rname = m[1]\n      qname = m[2]\n      seen_gt = true\n      continue\n    }\n    if (!seen_gt) {\n      continue\n    }\n    const t = line.split(' ')\n    if (t.length === 7) {\n      const t0 = +t[0]\n      const t1 = +t[1]\n      const t2 = +t[2]\n      const t3 = +t[3]\n      const t4 = +t[4]\n      strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n      rs = +(t0 < t1 ? t0 : t1) - 1\n      re = +(t1 > t0 ? t1 : t0)\n      qs = +(t2 < t3 ? t2 : t3) - 1\n      qe = +(t3 > t2 ? t3 : t2)\n      x = y = 0\n      NM = t4\n      cigar = []\n    } else if (t.length === 1) {\n      const d = +t[0]\n      if (d === 0) {\n        let blen = 0\n        const cigar_str = []\n\n        if (re - rs - x !== qe - qs - y) {\n          throw new Error(`inconsistent alignment on line ${i}`)\n        }\n        cigar.push((re - rs - x) << 4)\n        for (let i = 0; i < cigar.length; ++i) {\n          const rlen = cigar[i] >> 4\n          blen += rlen\n          cigar_str.push(rlen + 'MID'.charAt(cigar[i] & 0xf))\n        }\n\n        records.push({\n          qname,\n          qstart: qs,\n          qend: qe,\n          tname: rname,\n          tstart: rs,\n          tend: re,\n          strand,\n          extra: {\n            numMatches: blen - NM,\n            blockLen: blen,\n            mappingQual: 0,\n            NM,\n            cg: cigar_str.join(''),\n          },\n        })\n      } else if (d > 0) {\n        const l = d - 1\n        x += l + 1\n        y += l\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 2) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 2)\n        } // deletion\n      } else {\n        const l = -d - 1\n        x += l\n        y += l + 1\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 1) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 1)\n        } // insertion\n      }\n    }\n  }\n  return records\n}\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return paf_delta2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nfunction zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\n// based on \"weighted mean\" method from dotPlotly\n// https://github.com/tpoorten/dotPlotly\n// License for dotPlotly reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction getWeightedMeans(ret: PAFRecord[]) {\n  // in the weighted mean longer alignments factor in more\n  // heavily of all the fragments of a query vs the reference that it mapped\n  // to\n  //\n  // this uses a combined key query+'-'+ref to iteratively map all the\n  // alignments that match a particular ref from a particular query (so 1d\n  // array of what could be a 2d map)\n  //\n  // the result is a single number that says e.g. chr5 from human mapped to\n  // chr5 on mouse with 0.8 quality, and that0.8 is then attached to all the\n  // pieces of chr5 on human that mapped to chr5 on mouse. if chr5 on human\n  // also more weakly mapped to chr6 on mouse, then it would have another\n  // value e.g. 0.6. this can show strong and weak levels of synteny,\n  // especially in polyploidy situations\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const [\n          qname,\n          ,\n          qstart,\n          qend,\n          strand,\n          tname,\n          ,\n          tstart,\n          tend,\n          numMatches,\n          blockLen,\n          mappingQual,\n          ...fields\n        ] = line.split('\\t')\n\n        const rest = Object.fromEntries(\n          fields.map(field => {\n            const r = field.indexOf(':')\n            const fieldName = field.slice(0, r)\n            const fieldValue = field.slice(r + 3)\n            return [fieldName, fieldValue]\n          }),\n        )\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            numMatches: +numMatches,\n            blockLen: +blockLen,\n            mappingQual: +mappingQual,\n            ...rest,\n          },\n        } as PAFRecord\n      })\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    let assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      assemblyNames = [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(\n    region: Region,\n    opts: BaseOptions & { config?: AnyConfigurationModel } = {},\n  ) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n      const { assemblyName } = region\n\n      // The index of the assembly name in the region list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(assemblyName)\n      if (index !== -1) {\n        for (let i = 0; i < pafRecords.length; i++) {\n          const r = pafRecords[i]\n          let start = 0\n          let end = 0\n          let refName = ''\n          let mateName = ''\n          let mateStart = 0\n          let mateEnd = 0\n          if (index === 0) {\n            start = r.qstart\n            end = r.qend\n            refName = r.qname\n            mateName = r.tname\n            mateStart = r.tstart\n            mateEnd = r.tend\n          } else {\n            start = r.tstart\n            end = r.tend\n            refName = r.tname\n            mateName = r.qname\n            mateStart = r.qstart\n            mateEnd = r.qend\n          }\n          const { extra, strand } = r\n\n          if (\n            refName === region.refName &&\n            doesIntersect2(region.start, region.end, start, end)\n          ) {\n            const { numMatches, blockLen } = extra\n            observer.next(\n              new SimpleFeature({\n                uniqueId: `${i}`,\n                start,\n                end,\n                refName,\n                strand,\n                revCigar: true,\n                // this is a special property of how to interpret CIGAR on PAF,\n                // intrinsic to the data format. the CIGAR is read backwards\n                // for features aligning to the negative strand of the target,\n                // which is actually different than how it works in e.g.\n                // BAM/SAM (which is visible during alignments track read vs ref)\n                assemblyName,\n\n                // depending on whether the query or target is queried, the \"rev\" flag\n                flipInsDel: index === 0,\n                syntenyId: i,\n                identity: (numMatches || 0) / (blockLen || 1),\n                mate: { start: mateStart, end: mateEnd, refName: mateName },\n                ...extra,\n              }),\n            )\n          }\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["isGzip","buf","paf_delta2paf","lines","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","i","length","line","m","exec","t","split","t0","t1","t2","t3","d","blen","cigar_str","Error","push","rlen","charAt","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","DeltaAdapter","opts","loc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","text","TextDecoder","fatal","decode","filter","PAFAdapter","getWeightedMeans","ret","scoreMap","entry","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","vals","a","b","e","zip","weightedMean","meanScore","min","max","Math","tuples","reduce","valueSum","weightSum","value","weight","setupP","setupPre","catch","undefined","pm","pafLocation","fields","rest","field","r","indexOf","slice","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","region","ObservableCreate","observer","pafRecords","config","readConfObject","index","start","end","refName","mateName","mateStart","mateEnd","doesIntersect2","next","SimpleFeature","uniqueId","revCigar","flipInsDel","syntenyId","identity","mate","complete","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}