{"version":3,"file":"static/js/4958.ffb19692.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/abortable-promise-cache/src/AggregateAbortController.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AggregateStatusReporter.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AbortablePromiseCache.ts","../../../node_modules/@gmod/bbi/src/bigint-polyfill/pure.ts","../../../node_modules/@gmod/bbi/src/bigint-polyfill/polyfill.ts","../../../node_modules/binary-parser/lib/binary_parser.ts","../../../node_modules/@gmod/bbi/src/range.ts","../../../node_modules/@gmod/bbi/src/util.ts","../../../node_modules/@gmod/bbi/src/block-view.ts","../../../node_modules/@gmod/bbi/src/unzip-pako.ts","../../../node_modules/@gmod/bbi/src/bbi.ts","../../../node_modules/@gmod/bbi/src/bigwig.ts","../../../node_modules/@gmod/bbi/src/bigbed.ts"],"sourcesContent":["class NullSignal {}\n\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nexport default class AggregateAbortController {\n  signals = new Set()\n  abortController = new AbortController()\n\n  /**\n   * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n   *  will be treated as a null-signal, and this abortcontroller will no\n   *  longer be abortable.\n   */\n  //@ts-ignore\n  addSignal(signal: AbortSignal = new NullSignal()): void {\n    if (this.signal.aborted) {\n      throw new Error('cannot add a signal, already aborted!')\n    }\n\n    // note that a NullSignal will never fire, so if we\n    // have one this thing will never actually abort\n    this.signals.add(signal)\n    if (signal.aborted) {\n      // handle the abort immediately if it is already aborted\n      // for some reason\n      this.handleAborted(signal)\n    } else if (typeof signal.addEventListener === 'function') {\n      signal.addEventListener('abort', () => {\n        this.handleAborted(signal)\n      })\n    }\n  }\n\n  handleAborted(signal: AbortSignal): void {\n    this.signals.delete(signal)\n    if (this.signals.size === 0) {\n      this.abortController.abort()\n    }\n  }\n\n  get signal(): AbortSignal {\n    return this.abortController.signal\n  }\n\n  abort(): void {\n    this.abortController.abort()\n  }\n}\n","export default class AggregateStatusReporter {\n  callbacks = new Set<Function>()\n  currentMessage: unknown\n\n  addCallback(callback: Function = () => {}): void {\n    this.callbacks.add(callback)\n    callback(this.currentMessage)\n  }\n\n  callback(message: unknown) {\n    this.currentMessage = message\n    for (const elt of this.callbacks) {\n      elt(message)\n    }\n  }\n}\n","import AggregateAbortController from './AggregateAbortController'\nimport AggregateStatusReporter from './AggregateStatusReporter'\n\ninterface Cache<U> {\n  delete: (key: string) => void\n  keys: () => Iterator<string>\n  get: (key: string) => U | undefined\n  set: (key: string, value: U) => void\n  has: (key: string) => boolean\n}\ntype FillCallback<T, U> = (\n  data: T,\n  signal?: AbortSignal,\n  statusCallback?: Function,\n) => Promise<U>\n\ninterface Entry<U> {\n  aborter: AggregateAbortController\n  settled: boolean\n  readonly aborted: boolean\n  statusReporter: AggregateStatusReporter\n  promise: Promise<U>\n}\nexport default class AbortablePromiseCache<T, U> {\n  /**\n   * @param {object} args constructor args\n   * @param {Function} args.fill fill callback, will be called with sig `fill(data, signal)`\n   * @param {object} args.cache backing store to use, must implement `get(key)`, `set(key, val)`,\n   *   `delete(key)`, and `keys() -> iterator`\n   */\n\n  private cache: Cache<Entry<U>>\n  private fillCallback: FillCallback<T, U>\n\n  constructor({\n    fill,\n    cache,\n  }: {\n    fill: FillCallback<T, U>\n    cache: Cache<Entry<U>>\n  }) {\n    if (typeof fill !== 'function') {\n      throw new TypeError('must pass a fill function')\n    }\n    if (typeof cache !== 'object') {\n      throw new TypeError('must pass a cache object')\n    }\n    if (\n      typeof cache.get !== 'function' ||\n      typeof cache.set !== 'function' ||\n      typeof cache.delete !== 'function'\n    ) {\n      throw new TypeError(\n        'cache must implement get(key), set(key, val), and and delete(key)',\n      )\n    }\n\n    this.cache = cache\n    this.fillCallback = fill\n  }\n\n  static isAbortException(exception: Error) {\n    return (\n      // DOMException\n      exception.name === 'AbortError' ||\n      // standard-ish non-DOM abort exception\n      //@ts-ignore\n      exception.code === 'ERR_ABORTED' ||\n      // stringified DOMException\n      exception.message === 'AbortError: aborted' ||\n      // stringified standard-ish exception\n      exception.message === 'Error: aborted'\n    )\n  }\n\n  evict(key: string, entry: Entry<U>) {\n    if (this.cache.get(key) === entry) {\n      this.cache.delete(key)\n    }\n  }\n\n  fill(key: string, data: T, signal?: AbortSignal, statusCallback?: Function) {\n    const aborter = new AggregateAbortController()\n    const statusReporter = new AggregateStatusReporter()\n    statusReporter.addCallback(statusCallback)\n    const newEntry: Entry<U> = {\n      aborter: aborter,\n      promise: this.fillCallback(data, aborter.signal, (message: unknown) => {\n        statusReporter.callback(message)\n      }),\n      settled: false,\n      statusReporter,\n      get aborted() {\n        return this.aborter.signal.aborted\n      },\n    }\n    newEntry.aborter.addSignal(signal)\n\n    // remove the fill from the cache when its abortcontroller fires, if still in there\n    newEntry.aborter.signal.addEventListener('abort', () => {\n      if (!newEntry.settled) {\n        this.evict(key, newEntry)\n      }\n    })\n\n    // chain off the cached promise to record when it settles\n    newEntry.promise\n      .then(\n        () => {\n          newEntry.settled = true\n        },\n        () => {\n          newEntry.settled = true\n\n          // if the fill throws an error (including abort) and is still in the cache, remove it\n          this.evict(key, newEntry)\n        },\n      )\n      .catch(error => {\n        // this will only be reached if there is some kind of\n        // bad bug in this library\n        console.error(error)\n        throw error\n      })\n\n    this.cache.set(key, newEntry)\n  }\n\n  static checkSinglePromise<U>(promise: Promise<U>, signal?: AbortSignal) {\n    // check just this signal for having been aborted, and abort the\n    // promise if it was, regardless of what happened with the cached\n    // response\n    function checkForSingleAbort() {\n      if (signal?.aborted) {\n        throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' })\n      }\n    }\n\n    return promise.then(\n      result => {\n        checkForSingleAbort()\n        return result\n      },\n      error => {\n        checkForSingleAbort()\n        throw error\n      },\n    )\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key)\n  }\n\n  /**\n   * Callback for getting status of the pending async\n   *\n   * @callback statusCallback\n   * @param {any} status, current status string or message object\n   */\n\n  /**\n   * @param {any} key cache key to use for this request\n   * @param {any} data data passed as the first argument to the fill callback\n   * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n   * @param {statusCallback} a callback to get the current status of a pending async operation\n   */\n  get(\n    key: string,\n    data: T,\n    signal?: AbortSignal,\n    statusCallback?: Function,\n  ): Promise<U> {\n    if (!signal && data instanceof AbortSignal) {\n      throw new TypeError(\n        'second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?',\n      )\n    }\n    const cacheEntry = this.cache.get(key)\n\n    if (cacheEntry) {\n      if (cacheEntry.aborted && !cacheEntry.settled) {\n        // if it's aborted but has not realized it yet, evict it and redispatch\n        this.evict(key, cacheEntry)\n        return this.get(key, data, signal, statusCallback)\n      }\n\n      if (cacheEntry.settled) {\n        // too late to abort, just return it\n        return cacheEntry.promise\n      }\n\n      // request is in-flight, add this signal to its list of signals,\n      // or if there is no signal, the aborter will become non-abortable\n      cacheEntry.aborter.addSignal(signal)\n      cacheEntry.statusReporter.addCallback(statusCallback)\n\n      return AbortablePromiseCache.checkSinglePromise(\n        cacheEntry.promise,\n        signal,\n      )\n    }\n\n    // if we got here, it is not in the cache. fill.\n    this.fill(key, data, signal, statusCallback)\n    return AbortablePromiseCache.checkSinglePromise(\n      //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n\n      this.cache.get(key)!.promise,\n      signal,\n    )\n  }\n\n  /**\n   * delete the given entry from the cache. if it exists and its fill request has\n   * not yet settled, the fill will be signaled to abort.\n   *\n   * @param {any} key\n   */\n  delete(key: string) {\n    const cachedEntry = this.cache.get(key)\n    if (cachedEntry) {\n      if (!cachedEntry.settled) {\n        cachedEntry.aborter.abort()\n      }\n      this.cache.delete(key)\n    }\n  }\n\n  /**\n   * Clear all requests from the cache. Aborts any that have not settled.\n   * @returns {number} count of entries deleted\n   */\n  clear() {\n    // iterate without needing regenerator-runtime\n    const keyIter = this.cache.keys()\n    let deleteCount = 0\n    for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n      this.delete(result.value)\n      deleteCount += 1\n    }\n    return deleteCount\n  }\n}\n","const BigInt32 = BigInt(32)\n\nexport function getBigInt64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  return (\n    (BigInt(\n      dataView.getInt32(byteOffset, littleEndian) * bigEndianMask +\n        dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask,\n    ) <<\n      BigInt32) |\n    BigInt(\n      dataView.getUint32(byteOffset, littleEndian) * littleEndianMask +\n        dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask,\n    )\n  )\n}\n\nexport function getBigUint64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const a = dataView.getUint32(byteOffset, littleEndian)\n  const b = dataView.getUint32(byteOffset + 4, littleEndian)\n\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  // This branch-less optimization is 77x faster than normal ternary operator.\n  // and only 3% slower than native implementation\n  // https://jsbench.me/p8kyhg1eqv/1\n  return (\n    (BigInt(a * bigEndianMask + b * littleEndianMask) << BigInt32) |\n    BigInt(a * littleEndianMask + b * bigEndianMask)\n  )\n}\n\nexport function setBigInt64(\n  dataView: DataView,\n  byteOffset: number,\n  value: bigint,\n  littleEndian: boolean | undefined,\n) {\n  const hi = Number(value >> BigInt32)\n  const lo = Number(value & BigInt(0xffffffff))\n\n  if (littleEndian) {\n    dataView.setInt32(byteOffset + 4, hi, littleEndian)\n    dataView.setUint32(byteOffset, lo, littleEndian)\n  } else {\n    dataView.setInt32(byteOffset, hi, littleEndian)\n    dataView.setUint32(byteOffset + 4, lo, littleEndian)\n  }\n}\n\nexport function setBigUint64(\n  dataView: DataView,\n  byteOffset: number,\n  value: bigint,\n  littleEndian: boolean | undefined,\n) {\n  const hi = Number(value >> BigInt32)\n  const lo = Number(value & BigInt(0xffffffff))\n\n  if (littleEndian) {\n    dataView.setUint32(byteOffset + 4, hi, littleEndian)\n    dataView.setUint32(byteOffset, lo, littleEndian)\n  } else {\n    dataView.setUint32(byteOffset, hi, littleEndian)\n    dataView.setUint32(byteOffset + 4, lo, littleEndian)\n  }\n}\n","import { getBigInt64, getBigUint64, setBigInt64, setBigUint64 } from './pure'\n\nif (!('getBigInt64' in DataView)) {\n  DataView.prototype.getBigInt64 = function (byteOffset, littleEndian) {\n    return getBigInt64(this, byteOffset, littleEndian)\n  }\n}\n\nif (!('getBigUint64' in DataView)) {\n  DataView.prototype.getBigUint64 = function (byteOffset, littleEndian) {\n    return getBigUint64(this, byteOffset, littleEndian)\n  }\n}\n\nif (!('setBigInt64' in DataView)) {\n  DataView.prototype.setBigInt64 = function (byteOffset, value, littleEndian) {\n    setBigInt64(this, byteOffset, value, littleEndian)\n  }\n}\n\nif (!('setBigUint64' in DataView)) {\n  DataView.prototype.setBigUint64 = function (byteOffset, value, littleEndian) {\n    setBigUint64(this, byteOffset, value, littleEndian)\n  }\n}\n","class Context {\n  code = \"\";\n  scopes = [[\"vars\"]];\n  bitFields: Parser[] = [];\n  tmpVariableCount = 0;\n  references = new Map<string, { resolved: boolean; requested: boolean }>();\n  importPath: string;\n  imports: any[] = [];\n  reverseImports = new Map<any, number>();\n  useContextVariables = false;\n\n  constructor(importPath: string, useContextVariables: boolean) {\n    this.importPath = importPath;\n    this.useContextVariables = useContextVariables;\n  }\n\n  generateVariable(name?: string): string {\n    const scopes = [...this.scopes[this.scopes.length - 1]];\n    if (name) {\n      scopes.push(name);\n    }\n\n    return scopes.join(\".\");\n  }\n\n  generateOption(val: number | string | Function): string {\n    switch (typeof val) {\n      case \"number\":\n        return val.toString();\n      case \"string\":\n        return this.generateVariable(val);\n      case \"function\":\n        return `${this.addImport(val)}.call(${this.generateVariable()}, vars)`;\n    }\n  }\n\n  generateError(err: string) {\n    this.pushCode(`throw new Error(${err});`);\n  }\n\n  generateTmpVariable(): string {\n    return \"$tmp\" + this.tmpVariableCount++;\n  }\n\n  pushCode(code: string) {\n    this.code += code + \"\\n\";\n  }\n\n  pushPath(name: string) {\n    if (name) {\n      this.scopes[this.scopes.length - 1].push(name);\n    }\n  }\n\n  popPath(name: string) {\n    if (name) {\n      this.scopes[this.scopes.length - 1].pop();\n    }\n  }\n\n  pushScope(name: string) {\n    this.scopes.push([name]);\n  }\n\n  popScope() {\n    this.scopes.pop();\n  }\n\n  addImport(im: any): string {\n    if (!this.importPath) return `(${im})`;\n    let id = this.reverseImports.get(im);\n    if (!id) {\n      id = this.imports.push(im) - 1;\n      this.reverseImports.set(im, id);\n    }\n    return `${this.importPath}[${id}]`;\n  }\n\n  addReference(alias: string) {\n    if (!this.references.has(alias)) {\n      this.references.set(alias, { resolved: false, requested: false });\n    }\n  }\n\n  markResolved(alias: string) {\n    const reference = this.references.get(alias);\n\n    if (reference) {\n      reference.resolved = true;\n    }\n  }\n\n  markRequested(aliasList: string[]) {\n    aliasList.forEach((alias) => {\n      const reference = this.references.get(alias);\n\n      if (reference) {\n        reference.requested = true;\n      }\n    });\n  }\n\n  getUnresolvedReferences(): string[] {\n    return Array.from(this.references)\n      .filter(([_, reference]) => !reference.resolved && !reference.requested)\n      .map(([alias, _]) => alias);\n  }\n}\n\nconst aliasRegistry = new Map<string, Parser>();\nconst FUNCTION_PREFIX = \"___parser_\";\n\ninterface ParserOptions {\n  length?: number | string | ((item: any) => number);\n  assert?: number | string | ((item: number | string) => boolean);\n  lengthInBytes?: number | string | ((item: any) => number);\n  type?: string | Parser;\n  formatter?: (item: any) => any;\n  encoding?: string;\n  readUntil?: \"eof\" | ((item: any, buffer: Buffer) => boolean);\n  greedy?: boolean;\n  choices?: { [key: number]: string | Parser };\n  defaultChoice?: string | Parser;\n  zeroTerminated?: boolean;\n  clone?: boolean;\n  stripNull?: boolean;\n  key?: string;\n  tag?: string | ((item: any) => number);\n  offset?: number | string | ((item: any) => number);\n  wrapper?: (buffer: Buffer) => Buffer;\n}\n\ntype Types = PrimitiveTypes | ComplexTypes;\n\ntype ComplexTypes =\n  | \"bit\"\n  | \"string\"\n  | \"buffer\"\n  | \"array\"\n  | \"choice\"\n  | \"nest\"\n  | \"seek\"\n  | \"pointer\"\n  | \"saveOffset\"\n  | \"wrapper\"\n  | \"\";\n\ntype Endianness = \"be\" | \"le\";\n\ntype PrimitiveTypes =\n  | \"uint8\"\n  | \"uint16le\"\n  | \"uint16be\"\n  | \"uint32le\"\n  | \"uint32be\"\n  | \"uint64le\"\n  | \"uint64be\"\n  | \"int8\"\n  | \"int16le\"\n  | \"int16be\"\n  | \"int32le\"\n  | \"int32be\"\n  | \"int64le\"\n  | \"int64be\"\n  | \"floatle\"\n  | \"floatbe\"\n  | \"doublele\"\n  | \"doublebe\";\n\ntype PrimitiveTypesWithoutEndian =\n  | \"uint8\"\n  | \"uint16\"\n  | \"uint32\"\n  | \"int8\"\n  | \"int16\"\n  | \"int32\"\n  | \"int64\"\n  | \"uint64\";\n\ntype BitSizes =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28\n  | 29\n  | 30\n  | 31\n  | 32;\n\nconst PRIMITIVE_SIZES: { [key in PrimitiveTypes]: number } = {\n  uint8: 1,\n  uint16le: 2,\n  uint16be: 2,\n  uint32le: 4,\n  uint32be: 4,\n  int8: 1,\n  int16le: 2,\n  int16be: 2,\n  int32le: 4,\n  int32be: 4,\n  int64be: 8,\n  int64le: 8,\n  uint64be: 8,\n  uint64le: 8,\n  floatle: 4,\n  floatbe: 4,\n  doublele: 8,\n  doublebe: 8,\n};\n\nconst PRIMITIVE_NAMES: { [key in PrimitiveTypes]: string } = {\n  uint8: \"Uint8\",\n  uint16le: \"Uint16\",\n  uint16be: \"Uint16\",\n  uint32le: \"Uint32\",\n  uint32be: \"Uint32\",\n  int8: \"Int8\",\n  int16le: \"Int16\",\n  int16be: \"Int16\",\n  int32le: \"Int32\",\n  int32be: \"Int32\",\n  int64be: \"BigInt64\",\n  int64le: \"BigInt64\",\n  uint64be: \"BigUint64\",\n  uint64le: \"BigUint64\",\n  floatle: \"Float32\",\n  floatbe: \"Float32\",\n  doublele: \"Float64\",\n  doublebe: \"Float64\",\n};\n\nconst PRIMITIVE_LITTLE_ENDIANS: { [key in PrimitiveTypes]: boolean } = {\n  uint8: false,\n  uint16le: true,\n  uint16be: false,\n  uint32le: true,\n  uint32be: false,\n  int8: false,\n  int16le: true,\n  int16be: false,\n  int32le: true,\n  int32be: false,\n  int64be: false,\n  int64le: true,\n  uint64be: false,\n  uint64le: true,\n  floatle: true,\n  floatbe: false,\n  doublele: true,\n  doublebe: false,\n};\n\nexport class Parser {\n  varName = \"\";\n  type: Types = \"\";\n  options: ParserOptions = {};\n  next?: Parser;\n  head?: Parser;\n  compiled?: Function;\n  endian: Endianness = \"be\";\n  constructorFn?: Function;\n  alias?: string;\n  useContextVariables = false;\n\n  constructor() {}\n\n  static start() {\n    return new Parser();\n  }\n\n  private primitiveGenerateN(type: PrimitiveTypes, ctx: Context) {\n    const typeName = PRIMITIVE_NAMES[type];\n    const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type];\n    ctx.pushCode(\n      `${ctx.generateVariable(\n        this.varName\n      )} = dataView.get${typeName}(offset, ${littleEndian});`\n    );\n    ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type]};`);\n  }\n\n  private primitiveN(\n    type: PrimitiveTypes,\n    varName: string,\n    options: ParserOptions\n  ): this {\n    return this.setNextParser(type as Types, varName, options);\n  }\n\n  private useThisEndian(type: PrimitiveTypesWithoutEndian): PrimitiveTypes {\n    return (type + this.endian.toLowerCase()) as PrimitiveTypes;\n  }\n\n  uint8(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint8\", varName, options);\n  }\n\n  uint16(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"uint16\"), varName, options);\n  }\n\n  uint16le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint16le\", varName, options);\n  }\n\n  uint16be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint16be\", varName, options);\n  }\n\n  uint32(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"uint32\"), varName, options);\n  }\n\n  uint32le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint32le\", varName, options);\n  }\n\n  uint32be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"uint32be\", varName, options);\n  }\n\n  int8(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int8\", varName, options);\n  }\n\n  int16(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"int16\"), varName, options);\n  }\n\n  int16le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int16le\", varName, options);\n  }\n\n  int16be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int16be\", varName, options);\n  }\n\n  int32(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(this.useThisEndian(\"int32\"), varName, options);\n  }\n\n  int32le(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int32le\", varName, options);\n  }\n\n  int32be(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"int32be\", varName, options);\n  }\n\n  private bigIntVersionCheck() {\n    if (!DataView.prototype.getBigInt64)\n      throw new Error(\"BigInt64 is unsupported on this runtime\");\n  }\n\n  int64(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(this.useThisEndian(\"int64\"), varName, options);\n  }\n\n  int64be(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"int64be\", varName, options);\n  }\n\n  int64le(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"int64le\", varName, options);\n  }\n\n  uint64(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(this.useThisEndian(\"uint64\"), varName, options);\n  }\n\n  uint64be(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"uint64be\", varName, options);\n  }\n\n  uint64le(varName: string, options: ParserOptions = {}): this {\n    this.bigIntVersionCheck();\n    return this.primitiveN(\"uint64le\", varName, options);\n  }\n\n  floatle(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"floatle\", varName, options);\n  }\n\n  floatbe(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"floatbe\", varName, options);\n  }\n\n  doublele(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"doublele\", varName, options);\n  }\n\n  doublebe(varName: string, options: ParserOptions = {}): this {\n    return this.primitiveN(\"doublebe\", varName, options);\n  }\n\n  private bitN(size: BitSizes, varName: string, options: ParserOptions): this {\n    options.length = size;\n    return this.setNextParser(\"bit\", varName, options);\n  }\n\n  bit1(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(1, varName, options);\n  }\n\n  bit2(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(2, varName, options);\n  }\n\n  bit3(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(3, varName, options);\n  }\n\n  bit4(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(4, varName, options);\n  }\n\n  bit5(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(5, varName, options);\n  }\n\n  bit6(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(6, varName, options);\n  }\n\n  bit7(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(7, varName, options);\n  }\n\n  bit8(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(8, varName, options);\n  }\n\n  bit9(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(9, varName, options);\n  }\n\n  bit10(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(10, varName, options);\n  }\n\n  bit11(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(11, varName, options);\n  }\n\n  bit12(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(12, varName, options);\n  }\n\n  bit13(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(13, varName, options);\n  }\n\n  bit14(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(14, varName, options);\n  }\n\n  bit15(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(15, varName, options);\n  }\n\n  bit16(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(16, varName, options);\n  }\n\n  bit17(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(17, varName, options);\n  }\n\n  bit18(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(18, varName, options);\n  }\n\n  bit19(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(19, varName, options);\n  }\n\n  bit20(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(20, varName, options);\n  }\n\n  bit21(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(21, varName, options);\n  }\n\n  bit22(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(22, varName, options);\n  }\n\n  bit23(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(23, varName, options);\n  }\n\n  bit24(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(24, varName, options);\n  }\n\n  bit25(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(25, varName, options);\n  }\n\n  bit26(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(26, varName, options);\n  }\n\n  bit27(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(27, varName, options);\n  }\n\n  bit28(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(28, varName, options);\n  }\n\n  bit29(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(29, varName, options);\n  }\n\n  bit30(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(30, varName, options);\n  }\n\n  bit31(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(31, varName, options);\n  }\n\n  bit32(varName: string, options: ParserOptions = {}): this {\n    return this.bitN(32, varName, options);\n  }\n\n  namely(alias: string): this {\n    aliasRegistry.set(alias, this);\n    this.alias = alias;\n    return this;\n  }\n\n  skip(length: ParserOptions[\"length\"], options: ParserOptions = {}): this {\n    return this.seek(length, options);\n  }\n\n  seek(relOffset: ParserOptions[\"length\"], options: ParserOptions = {}): this {\n    if (options.assert) {\n      throw new Error(\"assert option on seek is not allowed.\");\n    }\n\n    return this.setNextParser(\"seek\", \"\", { length: relOffset });\n  }\n\n  string(varName: string, options: ParserOptions): this {\n    if (!options.zeroTerminated && !options.length && !options.greedy) {\n      throw new Error(\n        \"One of length, zeroTerminated, or greedy must be defined for string.\"\n      );\n    }\n\n    if ((options.zeroTerminated || options.length) && options.greedy) {\n      throw new Error(\n        \"greedy is mutually exclusive with length and zeroTerminated for string.\"\n      );\n    }\n\n    if (options.stripNull && !(options.length || options.greedy)) {\n      throw new Error(\n        \"length or greedy must be defined if stripNull is enabled.\"\n      );\n    }\n\n    options.encoding = options.encoding || \"utf8\";\n\n    return this.setNextParser(\"string\", varName, options);\n  }\n\n  buffer(varName: string, options: ParserOptions): this {\n    if (!options.length && !options.readUntil) {\n      throw new Error(\"length or readUntil must be defined for buffer.\");\n    }\n\n    return this.setNextParser(\"buffer\", varName, options);\n  }\n\n  wrapped(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options || !options.wrapper || !options.type) {\n      throw new Error(\"Both wrapper and type must be defined for wrapped.\");\n    }\n\n    if (!options.length && !options.readUntil) {\n      throw new Error(\"length or readUntil must be defined for wrapped.\");\n    }\n\n    return this.setNextParser(\"wrapper\", varName as string, options);\n  }\n\n  array(varName: string, options: ParserOptions): this {\n    if (!options.readUntil && !options.length && !options.lengthInBytes) {\n      throw new Error(\n        \"One of readUntil, length and lengthInBytes must be defined for array.\"\n      );\n    }\n\n    if (!options.type) {\n      throw new Error(\"type is required for array.\");\n    }\n\n    if (\n      typeof options.type === \"string\" &&\n      !aliasRegistry.has(options.type) &&\n      !(options.type in PRIMITIVE_SIZES)\n    ) {\n      throw new Error(`Array element type \"${options.type}\" is unkown.`);\n    }\n\n    return this.setNextParser(\"array\", varName, options);\n  }\n\n  choice(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options) {\n      throw new Error(\"tag and choices are are required for choice.\");\n    }\n\n    if (!options.tag) {\n      throw new Error(\"tag is requird for choice.\");\n    }\n\n    if (!options.choices) {\n      throw new Error(\"choices is required for choice.\");\n    }\n\n    for (const keyString in options.choices) {\n      const key = parseInt(keyString, 10);\n      const value = options.choices[key];\n\n      if (isNaN(key)) {\n        throw new Error(`Choice key \"${keyString}\" is not a number.`);\n      }\n\n      if (\n        typeof value === \"string\" &&\n        !aliasRegistry.has(value) &&\n        !((value as string) in PRIMITIVE_SIZES)\n      ) {\n        throw new Error(`Choice type \"${value}\" is unkown.`);\n      }\n    }\n\n    return this.setNextParser(\"choice\", varName as string, options);\n  }\n\n  nest(varName: string | ParserOptions, options?: ParserOptions): this {\n    if (typeof options !== \"object\" && typeof varName === \"object\") {\n      options = varName;\n      varName = \"\";\n    }\n\n    if (!options || !options.type) {\n      throw new Error(\"type is required for nest.\");\n    }\n\n    if (!(options.type instanceof Parser) && !aliasRegistry.has(options.type)) {\n      throw new Error(\"type must be a known parser name or a Parser object.\");\n    }\n\n    if (!(options.type instanceof Parser) && !varName) {\n      throw new Error(\n        \"type must be a Parser object if the variable name is omitted.\"\n      );\n    }\n\n    return this.setNextParser(\"nest\", varName as string, options);\n  }\n\n  pointer(varName: string, options: ParserOptions): this {\n    if (!options.offset) {\n      throw new Error(\"offset is required for pointer.\");\n    }\n\n    if (!options.type) {\n      throw new Error(\"type is required for pointer.\");\n    }\n\n    if (\n      typeof options.type === \"string\" &&\n      !(options.type in PRIMITIVE_SIZES) &&\n      !aliasRegistry.has(options.type)\n    ) {\n      throw new Error(`Pointer type \"${options.type}\" is unkown.`);\n    }\n\n    return this.setNextParser(\"pointer\", varName, options);\n  }\n\n  saveOffset(varName: string, options: ParserOptions = {}): this {\n    return this.setNextParser(\"saveOffset\", varName, options);\n  }\n\n  endianness(endianness: \"little\" | \"big\"): this {\n    switch (endianness.toLowerCase()) {\n      case \"little\":\n        this.endian = \"le\";\n        break;\n      case \"big\":\n        this.endian = \"be\";\n        break;\n      default:\n        throw new Error('endianness must be one of \"little\" or \"big\"');\n    }\n\n    return this;\n  }\n\n  endianess(endianess: \"little\" | \"big\"): this {\n    return this.endianness(endianess);\n  }\n\n  useContextVars(useContextVariables = true): this {\n    this.useContextVariables = useContextVariables;\n\n    return this;\n  }\n\n  create(constructorFn: Function): this {\n    if (!(constructorFn instanceof Function)) {\n      throw new Error(\"Constructor must be a Function object.\");\n    }\n\n    this.constructorFn = constructorFn;\n\n    return this;\n  }\n\n  private getContext(importPath: string): Context {\n    const ctx = new Context(importPath, this.useContextVariables);\n\n    ctx.pushCode(\n      \"var dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);\"\n    );\n\n    if (!this.alias) {\n      this.addRawCode(ctx);\n    } else {\n      this.addAliasedCode(ctx);\n      ctx.pushCode(`return ${FUNCTION_PREFIX + this.alias}(0).result;`);\n    }\n\n    return ctx;\n  }\n\n  getCode(): string {\n    const importPath = \"imports\";\n    return this.getContext(importPath).code;\n  }\n\n  private addRawCode(ctx: Context) {\n    ctx.pushCode(\"var offset = 0;\");\n    ctx.pushCode(\n      `var vars = ${this.constructorFn ? \"new constructorFn()\" : \"{}\"};`\n    );\n\n    ctx.pushCode(\"vars.$parent = null;\");\n    ctx.pushCode(\"vars.$root = vars;\");\n\n    this.generate(ctx);\n    this.resolveReferences(ctx);\n\n    ctx.pushCode(\"delete vars.$parent;\");\n    ctx.pushCode(\"delete vars.$root;\");\n\n    ctx.pushCode(\"return vars;\");\n  }\n\n  private addAliasedCode(ctx: Context) {\n    ctx.pushCode(`function ${FUNCTION_PREFIX + this.alias}(offset, context) {`);\n    ctx.pushCode(\n      `var vars = ${this.constructorFn ? \"new constructorFn()\" : \"{}\"};`\n    );\n    ctx.pushCode(\n      \"var ctx = Object.assign({$parent: null, $root: vars}, context || {});\"\n    );\n    ctx.pushCode(`vars = Object.assign(vars, ctx);`);\n\n    this.generate(ctx);\n\n    ctx.markResolved(this.alias!);\n    this.resolveReferences(ctx);\n\n    ctx.pushCode(\n      \"Object.keys(ctx).forEach(function (item) { delete vars[item]; });\"\n    );\n    ctx.pushCode(\"return { offset: offset, result: vars };\");\n    ctx.pushCode(\"}\");\n\n    return ctx;\n  }\n\n  private resolveReferences(ctx: Context) {\n    const references = ctx.getUnresolvedReferences();\n    ctx.markRequested(references);\n    references.forEach((alias) => {\n      aliasRegistry.get(alias)?.addAliasedCode(ctx);\n    });\n  }\n\n  compile() {\n    const importPath = \"imports\";\n    const ctx = this.getContext(importPath);\n    this.compiled = new Function(\n      importPath,\n      \"TextDecoder\",\n      `return function (buffer, constructorFn) { ${ctx.code} };`\n    )(ctx.imports, TextDecoder);\n  }\n\n  sizeOf(): number {\n    let size = NaN;\n\n    if (Object.keys(PRIMITIVE_SIZES).indexOf(this.type) >= 0) {\n      size = PRIMITIVE_SIZES[this.type as PrimitiveTypes];\n\n      // if this is a fixed length string\n    } else if (\n      this.type === \"string\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      size = this.options.length;\n\n      // if this is a fixed length buffer\n    } else if (\n      this.type === \"buffer\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      size = this.options.length;\n\n      // if this is a fixed length array\n    } else if (\n      this.type === \"array\" &&\n      typeof this.options.length === \"number\"\n    ) {\n      let elementSize = NaN;\n      if (typeof this.options.type === \"string\") {\n        elementSize = PRIMITIVE_SIZES[this.options.type as PrimitiveTypes];\n      } else if (this.options.type instanceof Parser) {\n        elementSize = this.options.type.sizeOf();\n      }\n      size = this.options.length * elementSize;\n\n      // if this a skip\n    } else if (this.type === \"seek\") {\n      size = this.options.length as number;\n\n      // if this is a nested parser\n    } else if (this.type === \"nest\") {\n      size = (this.options.type as Parser).sizeOf();\n    } else if (!this.type) {\n      size = 0;\n    }\n\n    if (this.next) {\n      size += this.next.sizeOf();\n    }\n\n    return size;\n  }\n\n  // Follow the parser chain till the root and start parsing from there\n  parse(buffer: Buffer | Uint8Array) {\n    if (!this.compiled) {\n      this.compile();\n    }\n\n    return this.compiled!(buffer, this.constructorFn);\n  }\n\n  private setNextParser(\n    type: Types,\n    varName: string,\n    options: ParserOptions\n  ): this {\n    const parser = new Parser();\n\n    parser.type = type;\n    parser.varName = varName;\n    parser.options = options;\n    parser.endian = this.endian;\n\n    if (this.head) {\n      this.head.next = parser;\n    } else {\n      this.next = parser;\n    }\n    this.head = parser;\n\n    return this;\n  }\n\n  // Call code generator for this parser\n  private generate(ctx: Context) {\n    if (this.type) {\n      switch (this.type) {\n        case \"uint8\":\n        case \"uint16le\":\n        case \"uint16be\":\n        case \"uint32le\":\n        case \"uint32be\":\n        case \"int8\":\n        case \"int16le\":\n        case \"int16be\":\n        case \"int32le\":\n        case \"int32be\":\n        case \"int64be\":\n        case \"int64le\":\n        case \"uint64be\":\n        case \"uint64le\":\n        case \"floatle\":\n        case \"floatbe\":\n        case \"doublele\":\n        case \"doublebe\":\n          this.primitiveGenerateN(this.type, ctx);\n          break;\n        case \"bit\":\n          this.generateBit(ctx);\n          break;\n        case \"string\":\n          this.generateString(ctx);\n          break;\n        case \"buffer\":\n          this.generateBuffer(ctx);\n          break;\n        case \"seek\":\n          this.generateSeek(ctx);\n          break;\n        case \"nest\":\n          this.generateNest(ctx);\n          break;\n        case \"array\":\n          this.generateArray(ctx);\n          break;\n        case \"choice\":\n          this.generateChoice(ctx);\n          break;\n        case \"pointer\":\n          this.generatePointer(ctx);\n          break;\n        case \"saveOffset\":\n          this.generateSaveOffset(ctx);\n          break;\n        case \"wrapper\":\n          this.generateWrapper(ctx);\n          break;\n      }\n      if (this.type !== \"bit\") this.generateAssert(ctx);\n    }\n\n    const varName = ctx.generateVariable(this.varName);\n    if (this.options.formatter && this.type !== \"bit\") {\n      this.generateFormatter(ctx, varName, this.options.formatter);\n    }\n\n    return this.generateNext(ctx);\n  }\n\n  private generateAssert(ctx: Context) {\n    if (!this.options.assert) {\n      return;\n    }\n\n    const varName = ctx.generateVariable(this.varName);\n\n    switch (typeof this.options.assert) {\n      case \"function\":\n        {\n          const func = ctx.addImport(this.options.assert);\n          ctx.pushCode(`if (!${func}.call(vars, ${varName})) {`);\n        }\n        break;\n      case \"number\":\n        ctx.pushCode(`if (${this.options.assert} !== ${varName}) {`);\n        break;\n      case \"string\":\n        ctx.pushCode(\n          `if (${JSON.stringify(this.options.assert)} !== ${varName}) {`\n        );\n        break;\n      default:\n        throw new Error(\n          \"assert option must be a string, number or a function.\"\n        );\n    }\n    ctx.generateError(\n      `\"Assertion error: ${varName} is \" + ${JSON.stringify(\n        this.options.assert.toString()\n      )}`\n    );\n    ctx.pushCode(\"}\");\n  }\n\n  // Recursively call code generators and append results\n  private generateNext(ctx: Context): Context {\n    if (this.next) {\n      ctx = this.next.generate(ctx);\n    }\n\n    return ctx;\n  }\n\n  private generateBit(ctx: Context) {\n    // TODO find better method to handle nested bit fields\n    const parser = JSON.parse(JSON.stringify(this));\n    parser.options = this.options;\n    parser.generateAssert = this.generateAssert.bind(this);\n    parser.generateFormatter = this.generateFormatter.bind(this);\n    parser.varName = ctx.generateVariable(parser.varName);\n    ctx.bitFields.push(parser);\n\n    if (\n      !this.next ||\n      (this.next && [\"bit\", \"nest\"].indexOf(this.next.type) < 0)\n    ) {\n      const val = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${val} = 0;`);\n\n      const getMaxBits = (from = 0) => {\n        let sum = 0;\n        for (let i = from; i < ctx.bitFields.length; i++) {\n          const length = ctx.bitFields[i].options.length as number;\n          if (sum + length > 32) break;\n          sum += length;\n        }\n        return sum;\n      };\n\n      const getBytes = (sum: number) => {\n        if (sum <= 8) {\n          ctx.pushCode(`${val} = dataView.getUint8(offset);`);\n          sum = 8;\n        } else if (sum <= 16) {\n          ctx.pushCode(`${val} = dataView.getUint16(offset);`);\n          sum = 16;\n        } else if (sum <= 24) {\n          ctx.pushCode(\n            `${val} = (dataView.getUint16(offset) << 8) | dataView.getUint8(offset + 2);`\n          );\n          sum = 24;\n        } else {\n          ctx.pushCode(`${val} = dataView.getUint32(offset);`);\n          sum = 32;\n        }\n        ctx.pushCode(`offset += ${sum / 8};`);\n        return sum;\n      };\n\n      let bitOffset = 0;\n      const isBigEndian = this.endian === \"be\";\n\n      let sum = 0;\n      let rem = 0;\n\n      ctx.bitFields.forEach((parser, i) => {\n        let length = parser.options.length as number;\n        if (length > rem) {\n          if (rem) {\n            const mask = -1 >>> (32 - rem);\n            ctx.pushCode(\n              `${parser.varName} = (${val} & 0x${mask.toString(16)}) << ${\n                length - rem\n              };`\n            );\n            length -= rem;\n          }\n          bitOffset = 0;\n          rem = sum = getBytes(getMaxBits(i) - rem);\n        }\n        const offset = isBigEndian ? sum - bitOffset - length : bitOffset;\n        const mask = -1 >>> (32 - length);\n\n        ctx.pushCode(\n          `${parser.varName} ${\n            length < (parser.options.length as number) ? \"|=\" : \"=\"\n          } ${val} >> ${offset} & 0x${mask.toString(16)};`\n        );\n\n        // Ensure value is unsigned\n        if ((parser.options.length as number) === 32) {\n          ctx.pushCode(`${parser.varName} >>>= 0`);\n        }\n\n        if (parser.options.assert) {\n          parser.generateAssert(ctx);\n        }\n\n        if (parser.options.formatter) {\n          parser.generateFormatter(\n            ctx,\n            parser.varName,\n            parser.options.formatter\n          );\n        }\n\n        bitOffset += length;\n        rem -= length;\n      });\n\n      ctx.bitFields = [];\n    }\n  }\n\n  private generateSeek(ctx: Context) {\n    const length = ctx.generateOption(this.options.length!);\n    ctx.pushCode(`offset += ${length};`);\n  }\n\n  private generateString(ctx: Context) {\n    const name = ctx.generateVariable(this.varName);\n    const start = ctx.generateTmpVariable();\n    const encoding = this.options.encoding!;\n    const isHex = encoding.toLowerCase() === \"hex\";\n    const toHex = 'b => b.toString(16).padStart(2, \"0\")';\n\n    if (this.options.length && this.options.zeroTerminated) {\n      const len = this.options.length;\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\n        `while(dataView.getUint8(offset++) !== 0 && offset - ${start} < ${len});`\n      );\n      const end = `offset - ${start} < ${len} ? offset - 1 : offset`;\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, ${end}), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, ${end}));`\n      );\n    } else if (this.options.length) {\n      const len = ctx.generateOption(this.options.length);\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(offset, offset + ${len}), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(offset, offset + ${len}));`\n      );\n      ctx.pushCode(`offset += ${len};`);\n    } else if (this.options.zeroTerminated) {\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\"while(dataView.getUint8(offset++) !== 0);\");\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, offset - 1), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset - 1));`\n      );\n    } else if (this.options.greedy) {\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(\"while(buffer.length > offset++);\");\n      ctx.pushCode(\n        isHex\n          ? `${name} = Array.from(buffer.subarray(${start}, offset), ${toHex}).join('');`\n          : `${name} = new TextDecoder('${encoding}').decode(buffer.subarray(${start}, offset));`\n      );\n    }\n    if (this.options.stripNull) {\n      ctx.pushCode(`${name} = ${name}.replace(/\\\\x00+$/g, '')`);\n    }\n  }\n\n  private generateBuffer(ctx: Context) {\n    const varName = ctx.generateVariable(this.varName);\n\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const start = ctx.generateTmpVariable();\n      const cur = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(`var ${cur} = 0;`);\n      ctx.pushCode(`while (offset < buffer.length) {`);\n      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `if (${func}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`\n      );\n      ctx.pushCode(`offset += 1;`);\n      ctx.pushCode(`}`);\n      ctx.pushCode(`${varName} = buffer.subarray(${start}, offset);`);\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(`${varName} = buffer.subarray(offset);`);\n    } else {\n      const len = ctx.generateOption(this.options.length!);\n\n      ctx.pushCode(`${varName} = buffer.subarray(offset, offset + ${len});`);\n      ctx.pushCode(`offset += ${len};`);\n    }\n\n    if (this.options.clone) {\n      ctx.pushCode(`${varName} = buffer.constructor.from(${varName});`);\n    }\n  }\n\n  private generateArray(ctx: Context) {\n    const length = ctx.generateOption(this.options.length!);\n    const lengthInBytes = ctx.generateOption(this.options.lengthInBytes!);\n    const type = this.options.type;\n    const counter = ctx.generateTmpVariable();\n    const lhs = ctx.generateVariable(this.varName);\n    const item = ctx.generateTmpVariable();\n    const key = this.options.key;\n    const isHash = typeof key === \"string\";\n\n    if (isHash) {\n      ctx.pushCode(`${lhs} = {};`);\n    } else {\n      ctx.pushCode(`${lhs} = [];`);\n    }\n    if (typeof this.options.readUntil === \"function\") {\n      ctx.pushCode(\"do {\");\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(\n        `for (var ${counter} = 0; offset < buffer.length; ${counter}++) {`\n      );\n    } else if (lengthInBytes !== undefined) {\n      ctx.pushCode(\n        `for (var ${counter} = offset + ${lengthInBytes}; offset < ${counter}; ) {`\n      );\n    } else {\n      ctx.pushCode(\n        `for (var ${counter} = ${length}; ${counter} > 0; ${counter}--) {`\n      );\n    }\n\n    if (typeof type === \"string\") {\n      if (!aliasRegistry.get(type)) {\n        const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n        ctx.pushCode(\n          `var ${item} = dataView.get${typeName}(offset, ${littleEndian});`\n        );\n        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]};`);\n      } else {\n        const tempVar = ctx.generateTmpVariable();\n        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type}(offset, {`);\n        if (ctx.useContextVariables) {\n          const parentVar = ctx.generateVariable();\n          ctx.pushCode(`$parent: ${parentVar},`);\n          ctx.pushCode(`$root: ${parentVar}.$root,`);\n          if (!this.options.readUntil && lengthInBytes === undefined) {\n            ctx.pushCode(`$index: ${length} - ${counter},`);\n          }\n        }\n        ctx.pushCode(`});`);\n        ctx.pushCode(\n          `var ${item} = ${tempVar}.result; offset = ${tempVar}.offset;`\n        );\n        if (type !== this.alias) ctx.addReference(type);\n      }\n    } else if (type instanceof Parser) {\n      ctx.pushCode(`var ${item} = {};`);\n      const parentVar = ctx.generateVariable();\n      ctx.pushScope(item);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`${item}.$parent = ${parentVar};`);\n        ctx.pushCode(`${item}.$root = ${parentVar}.$root;`);\n        if (!this.options.readUntil && lengthInBytes === undefined) {\n          ctx.pushCode(`${item}.$index = ${length} - ${counter};`);\n        }\n      }\n\n      type.generate(ctx);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`delete ${item}.$parent;`);\n        ctx.pushCode(`delete ${item}.$root;`);\n        ctx.pushCode(`delete ${item}.$index;`);\n      }\n      ctx.popScope();\n    }\n\n    if (isHash) {\n      ctx.pushCode(`${lhs}[${item}.${key}] = ${item};`);\n    } else {\n      ctx.pushCode(`${lhs}.push(${item});`);\n    }\n\n    ctx.pushCode(\"}\");\n\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `while (!${func}.call(${ctx.generateVariable()}, ${item}, buffer.subarray(offset)));`\n      );\n    }\n  }\n\n  private generateChoiceCase(\n    ctx: Context,\n    varName: string,\n    type: string | Parser\n  ) {\n    if (typeof type === \"string\") {\n      const varName = ctx.generateVariable(this.varName);\n      if (!aliasRegistry.has(type)) {\n        const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n        const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n        ctx.pushCode(\n          `${varName} = dataView.get${typeName}(offset, ${littleEndian});`\n        );\n        ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]}`);\n      } else {\n        const tempVar = ctx.generateTmpVariable();\n        ctx.pushCode(`var ${tempVar} = ${FUNCTION_PREFIX + type}(offset, {`);\n        if (ctx.useContextVariables) {\n          ctx.pushCode(`$parent: ${varName}.$parent,`);\n          ctx.pushCode(`$root: ${varName}.$root,`);\n        }\n        ctx.pushCode(`});`);\n        ctx.pushCode(\n          `${varName} = ${tempVar}.result; offset = ${tempVar}.offset;`\n        );\n        if (type !== this.alias) ctx.addReference(type);\n      }\n    } else if (type instanceof Parser) {\n      ctx.pushPath(varName);\n      type.generate(ctx);\n      ctx.popPath(varName);\n    }\n  }\n\n  private generateChoice(ctx: Context) {\n    const tag = ctx.generateOption(this.options.tag!);\n    const nestVar = ctx.generateVariable(this.varName);\n\n    if (this.varName) {\n      ctx.pushCode(`${nestVar} = {};`);\n\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n      }\n    }\n    ctx.pushCode(`switch(${tag}) {`);\n    for (const tagString in this.options.choices) {\n      const tag = parseInt(tagString, 10);\n      const type = this.options.choices[tag];\n\n      ctx.pushCode(`case ${tag}:`);\n      this.generateChoiceCase(ctx, this.varName, type);\n      ctx.pushCode(\"break;\");\n    }\n    ctx.pushCode(\"default:\");\n    if (this.options.defaultChoice) {\n      this.generateChoiceCase(ctx, this.varName, this.options.defaultChoice);\n    } else {\n      ctx.generateError(`\"Met undefined tag value \" + ${tag} + \" at choice\"`);\n    }\n    ctx.pushCode(\"}\");\n\n    if (this.varName && ctx.useContextVariables) {\n      ctx.pushCode(`delete ${nestVar}.$parent;`);\n      ctx.pushCode(`delete ${nestVar}.$root;`);\n    }\n  }\n\n  private generateNest(ctx: Context) {\n    const nestVar = ctx.generateVariable(this.varName);\n\n    if (this.options.type instanceof Parser) {\n      if (this.varName) {\n        ctx.pushCode(`${nestVar} = {};`);\n\n        if (ctx.useContextVariables) {\n          const parentVar = ctx.generateVariable();\n          ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n          ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n        }\n      }\n\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n\n      if (this.varName && ctx.useContextVariables) {\n        if (ctx.useContextVariables) {\n          ctx.pushCode(`delete ${nestVar}.$parent;`);\n          ctx.pushCode(`delete ${nestVar}.$root;`);\n        }\n      }\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(offset, {`\n      );\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`$parent: ${parentVar},`);\n        ctx.pushCode(`$root: ${parentVar}.$root,`);\n      }\n      ctx.pushCode(`});`);\n      ctx.pushCode(\n        `${nestVar} = ${tempVar}.result; offset = ${tempVar}.offset;`\n      );\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    }\n  }\n\n  private generateWrapper(ctx: Context) {\n    const wrapperVar = ctx.generateVariable(this.varName);\n    const wrappedBuf = ctx.generateTmpVariable();\n    if (typeof this.options.readUntil === \"function\") {\n      const pred = this.options.readUntil;\n      const start = ctx.generateTmpVariable();\n      const cur = ctx.generateTmpVariable();\n\n      ctx.pushCode(`var ${start} = offset;`);\n      ctx.pushCode(`var ${cur} = 0;`);\n      ctx.pushCode(`while (offset < buffer.length) {`);\n      ctx.pushCode(`${cur} = dataView.getUint8(offset);`);\n      const func = ctx.addImport(pred);\n      ctx.pushCode(\n        `if (${func}.call(${ctx.generateVariable()}, ${cur}, buffer.subarray(offset))) break;`\n      );\n      ctx.pushCode(`offset += 1;`);\n      ctx.pushCode(`}`);\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(${start}, offset);`);\n    } else if (this.options.readUntil === \"eof\") {\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset);`);\n    } else {\n      const len = ctx.generateOption(this.options.length!);\n      ctx.pushCode(`${wrappedBuf} = buffer.subarray(offset, offset + ${len});`);\n      ctx.pushCode(`offset += ${len};`);\n    }\n\n    if (this.options.clone) {\n      ctx.pushCode(`${wrappedBuf} = buffer.constructor.from(${wrappedBuf});`);\n    }\n\n    const tempBuf = ctx.generateTmpVariable();\n    const tempOff = ctx.generateTmpVariable();\n    const tempView = ctx.generateTmpVariable();\n    const func = ctx.addImport(this.options.wrapper);\n    ctx.pushCode(\n      `${wrappedBuf} = ${func}.call(this, ${wrappedBuf}).subarray(0);`\n    );\n    ctx.pushCode(`var ${tempBuf} = buffer;`);\n    ctx.pushCode(`var ${tempOff} = offset;`);\n    ctx.pushCode(`var ${tempView} = dataView;`);\n    ctx.pushCode(`buffer = ${wrappedBuf};`);\n    ctx.pushCode(`offset = 0;`);\n    ctx.pushCode(\n      `dataView = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);`\n    );\n    if (this.options.type instanceof Parser) {\n      if (this.varName) {\n        ctx.pushCode(`${wrapperVar} = {};`);\n      }\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(0);`\n      );\n      ctx.pushCode(`${wrapperVar} = ${tempVar}.result;`);\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    }\n    ctx.pushCode(`buffer = ${tempBuf};`);\n    ctx.pushCode(`dataView = ${tempView};`);\n    ctx.pushCode(`offset = ${tempOff};`);\n  }\n\n  private generateFormatter(\n    ctx: Context,\n    varName: string,\n    formatter: Function\n  ) {\n    if (typeof formatter === \"function\") {\n      const func = ctx.addImport(formatter);\n      ctx.pushCode(\n        `${varName} = ${func}.call(${ctx.generateVariable()}, ${varName});`\n      );\n    }\n  }\n\n  private generatePointer(ctx: Context) {\n    const type = this.options.type;\n    const offset = ctx.generateOption(this.options.offset!);\n    const tempVar = ctx.generateTmpVariable();\n    const nestVar = ctx.generateVariable(this.varName);\n\n    // Save current offset\n    ctx.pushCode(`var ${tempVar} = offset;`);\n\n    // Move offset\n    ctx.pushCode(`offset = ${offset};`);\n\n    if (this.options.type instanceof Parser) {\n      ctx.pushCode(`${nestVar} = {};`);\n\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`${nestVar}.$parent = ${parentVar};`);\n        ctx.pushCode(`${nestVar}.$root = ${parentVar}.$root;`);\n      }\n\n      ctx.pushPath(this.varName);\n      this.options.type.generate(ctx);\n      ctx.popPath(this.varName);\n\n      if (ctx.useContextVariables) {\n        ctx.pushCode(`delete ${nestVar}.$parent;`);\n        ctx.pushCode(`delete ${nestVar}.$root;`);\n      }\n    } else if (aliasRegistry.has(this.options.type!)) {\n      const tempVar = ctx.generateTmpVariable();\n      ctx.pushCode(\n        `var ${tempVar} = ${FUNCTION_PREFIX + this.options.type}(offset, {`\n      );\n      if (ctx.useContextVariables) {\n        const parentVar = ctx.generateVariable();\n        ctx.pushCode(`$parent: ${parentVar},`);\n        ctx.pushCode(`$root: ${parentVar}.$root,`);\n      }\n      ctx.pushCode(`});`);\n      ctx.pushCode(\n        `${nestVar} = ${tempVar}.result; offset = ${tempVar}.offset;`\n      );\n      if (this.options.type !== this.alias) {\n        ctx.addReference(this.options.type!);\n      }\n    } else if (Object.keys(PRIMITIVE_SIZES).indexOf(this.options.type!) >= 0) {\n      const typeName = PRIMITIVE_NAMES[type as PrimitiveTypes];\n      const littleEndian = PRIMITIVE_LITTLE_ENDIANS[type as PrimitiveTypes];\n      ctx.pushCode(\n        `${nestVar} = dataView.get${typeName}(offset, ${littleEndian});`\n      );\n      ctx.pushCode(`offset += ${PRIMITIVE_SIZES[type as PrimitiveTypes]};`);\n    }\n\n    // Restore offset\n    ctx.pushCode(`offset = ${tempVar};`);\n  }\n\n  private generateSaveOffset(ctx: Context) {\n    const varName = ctx.generateVariable(this.varName);\n    ctx.pushCode(`${varName} = offset`);\n  }\n}\n","/**\n * Adapted from a combination of Range and _Compound in the\n * Dalliance Genome Explorer, (c) Thomas Down 2006-2010.\n */\n\nexport interface IRange {\n  min: number\n  max: number\n}\nexport default class Range {\n  public ranges: IRange[]\n\n  public constructor(arg1: IRange[]) {\n    this.ranges = arg1\n  }\n\n  get min() {\n    return this.ranges[0].min\n  }\n\n  get max() {\n    return this.ranges[this.ranges.length - 1].max\n  }\n\n  public contains(pos: number) {\n    for (const r of this.ranges) {\n      if (r.min <= pos && r.max >= pos) {\n        return true\n      }\n    }\n    return false\n  }\n\n  public isContiguous(): boolean {\n    return this.ranges.length > 1\n  }\n\n  public getRanges() {\n    return this.ranges.map(r => new Range([{ min: r.min, max: r.max }]))\n  }\n\n  public toString(): string {\n    return this.ranges.map(r => `[${r.min}-${r.max}]`).join(',')\n  }\n\n  public union(s1: Range) {\n    const ranges = [...this.getRanges(), ...s1.getRanges()].sort((a, b) => {\n      if (a.min < b.min) {\n        return -1\n      } else if (a.min > b.min) {\n        return 1\n      } else if (a.max < b.max) {\n        return -1\n      } else if (b.max > a.max) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    const oranges = [] as Range[]\n    let current = ranges[0]\n\n    for (const nxt of ranges) {\n      if (nxt.min > current.max + 1) {\n        oranges.push(current)\n        current = nxt\n      } else if (nxt.max > current.max) {\n        current = new Range([{ min: current.min, max: nxt.max }])\n      }\n    }\n    oranges.push(current)\n\n    return oranges.length === 1 ? oranges[0] : new Range(oranges)\n  }\n}\n","export class AbortError extends Error {\n  public code: string\n\n  public constructor(message: string) {\n    super(message)\n    this.code = 'ERR_ABORTED'\n  }\n}\n// sort blocks by file offset and\n// group blocks that are within 2KB of eachother\nexport function groupBlocks(blocks: { offset: bigint; length: bigint }[]) {\n  blocks.sort((b0, b1) => Number(b0.offset) - Number(b1.offset))\n\n  const blockGroups = []\n  let lastBlock\n  let lastBlockEnd\n  for (const block of blocks) {\n    if (\n      lastBlock &&\n      lastBlockEnd &&\n      Number(block.offset) - lastBlockEnd <= 2000\n    ) {\n      lastBlock.length = BigInt(\n        Number(lastBlock.length) +\n          Number(block.length) -\n          lastBlockEnd +\n          Number(block.offset),\n      )\n      lastBlock.blocks.push(block)\n    } else {\n      blockGroups.push(\n        (lastBlock = {\n          blocks: [block],\n          length: block.length,\n          offset: block.offset,\n        }),\n      )\n    }\n    lastBlockEnd = Number(lastBlock.offset) + Number(lastBlock.length)\n  }\n\n  return blockGroups\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal): void {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal): Promise<void> {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n","import { Buffer } from 'buffer'\nimport { Observer } from 'rxjs'\nimport { Parser } from 'binary-parser'\nimport AbortablePromiseCache from '@gmod/abortable-promise-cache'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport QuickLRU from 'quick-lru'\n\n// locals\nimport Range from './range'\nimport { unzip } from './unzip'\nimport { Feature } from './bbi'\nimport { groupBlocks, checkAbortSignal } from './util'\n\ninterface CoordRequest {\n  chrId: number\n  start: number\n  end: number\n}\ninterface DataBlock {\n  blockOffset: bigint\n  blockSize: bigint\n  startChrom: number\n  endChrom: number\n  startBase: number\n  endBase: number\n  validCnt: number\n  minVal: number\n  maxVal: number\n  sumData: number\n  sumSqData: number\n}\n\ninterface ReadData {\n  offset: bigint | number\n  length: bigint | number\n}\n\ninterface Options {\n  signal?: AbortSignal\n  request?: CoordRequest\n}\n\nconst BIG_WIG_TYPE_GRAPH = 1\nconst BIG_WIG_TYPE_VSTEP = 2\nconst BIG_WIG_TYPE_FSTEP = 3\n\nfunction coordFilter(s1: number, e1: number, s2: number, e2: number): boolean {\n  return s1 < e2 && e1 >= s2\n}\n\nfunction getParsers(isBigEndian: boolean) {\n  const le = isBigEndian ? 'big' : 'little'\n  const summaryParser = new Parser()\n    .endianess(le)\n    .uint32('chromId')\n    .uint32('start')\n    .uint32('end')\n    .uint32('validCnt')\n    .floatle('minScore')\n    .floatle('maxScore')\n    .floatle('sumData')\n    .floatle('sumSqData')\n    .saveOffset('offset')\n\n  const leafParser = new Parser()\n    .endianess(le)\n    .uint8('isLeaf')\n    .skip(1)\n    .uint16('cnt')\n    .choice({\n      tag: 'isLeaf',\n      choices: {\n        1: new Parser().endianess(le).array('blocksToFetch', {\n          length: 'cnt',\n          type: new Parser()\n            .endianess(le)\n            .uint32('startChrom')\n            .uint32('startBase')\n            .uint32('endChrom')\n            .uint32('endBase')\n            .uint64('blockOffset')\n            .uint64('blockSize')\n            .saveOffset('offset'),\n        }),\n        0: new Parser().array('recurOffsets', {\n          length: 'cnt',\n          type: new Parser()\n            .endianess(le)\n            .uint32('startChrom')\n            .uint32('startBase')\n            .uint32('endChrom')\n            .uint32('endBase')\n            .uint64('blockOffset')\n            .saveOffset('offset'),\n        }),\n      },\n    })\n  const bigBedParser = new Parser()\n    .endianess(le)\n    .uint32('chromId')\n    .int32('start')\n    .int32('end')\n    .string('rest', {\n      zeroTerminated: true,\n    })\n    .saveOffset('offset')\n\n  const bigWigParser = new Parser()\n    .endianess(le)\n    .skip(4)\n    .int32('blockStart')\n    .skip(4)\n    .uint32('itemStep')\n    .uint32('itemSpan')\n    .uint8('blockType')\n    .skip(1)\n    .uint16('itemCount')\n    .choice({\n      tag: 'blockType',\n      choices: {\n        [BIG_WIG_TYPE_FSTEP]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser().floatle('score'),\n        }),\n        [BIG_WIG_TYPE_VSTEP]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser().endianess(le).int32('start').floatle('score'),\n        }),\n        [BIG_WIG_TYPE_GRAPH]: new Parser().array('items', {\n          length: 'itemCount',\n          type: new Parser()\n            .endianess(le)\n            .int32('start')\n            .int32('end')\n            .floatle('score'),\n        }),\n      },\n    })\n  return {\n    bigWigParser,\n    bigBedParser,\n    summaryParser,\n    leafParser,\n  }\n}\n\n/**\n * View into a subset of the data in a BigWig file.\n *\n * Adapted by Robert Buels and Colin Diesh from bigwig.js in the Dalliance Genome\n * Explorer by Thomas Down.\n * @constructs\n */\n\nexport class BlockView {\n  private cirTreePromise?: Promise<{ bytesRead: number; buffer: Buffer }>\n\n  private featureCache = new AbortablePromiseCache<ReadData, Buffer>({\n    cache: new QuickLRU({ maxSize: 1000 }),\n\n    fill: async (requestData, signal) => {\n      const len = Number(requestData.length)\n      const off = Number(requestData.offset)\n      const { buffer } = await this.bbi.read(Buffer.alloc(len), 0, len, off, {\n        signal,\n      })\n      return buffer\n    },\n  })\n\n  private leafParser: ReturnType<typeof getParsers>['leafParser']\n\n  private bigBedParser: ReturnType<typeof getParsers>['bigBedParser']\n\n  public constructor(\n    private bbi: GenericFilehandle,\n    private refsByName: any,\n    private cirTreeOffset: number,\n    private isBigEndian: boolean,\n    private isCompressed: boolean,\n    private blockType: string,\n  ) {\n    if (!(cirTreeOffset >= 0)) {\n      throw new Error('invalid cirTreeOffset!')\n    }\n\n    const parsers = getParsers(isBigEndian)\n    this.leafParser = parsers.leafParser\n    this.bigBedParser = parsers.bigBedParser\n  }\n\n  public async readWigData(\n    chrName: string,\n    start: number,\n    end: number,\n    observer: Observer<Feature[]>,\n    opts?: Options,\n  ) {\n    try {\n      const { refsByName, bbi, cirTreeOffset, isBigEndian } = this\n      const chrId = refsByName[chrName]\n      if (chrId === undefined) {\n        observer.complete()\n      }\n      const request = { chrId, start, end }\n      if (!this.cirTreePromise) {\n        this.cirTreePromise = bbi.read(\n          Buffer.alloc(48),\n          0,\n          48,\n          Number(cirTreeOffset),\n          opts,\n        )\n      }\n      const { buffer } = await this.cirTreePromise\n      const cirBlockSize = isBigEndian\n        ? buffer.readUInt32BE(4)\n        : buffer.readUInt32LE(4)\n      let blocksToFetch: any[] = []\n      let outstanding = 0\n\n      const cirFobRecur2 = (\n        cirBlockData: Buffer,\n        offset: number,\n        level: number,\n      ) => {\n        try {\n          const data = cirBlockData.subarray(offset)\n\n          const p = this.leafParser.parse(data) as {\n            blocksToFetch: DataBlock[]\n            recurOffsets: DataBlock[]\n          }\n          if (p.blocksToFetch) {\n            blocksToFetch = blocksToFetch.concat(\n              p.blocksToFetch\n                .filter(f => filterFeats(f))\n                .map(l => ({\n                  offset: l.blockOffset,\n                  length: l.blockSize,\n                })),\n            )\n          }\n          if (p.recurOffsets) {\n            const recurOffsets = p.recurOffsets\n              .filter(f => filterFeats(f))\n              .map(l => Number(l.blockOffset))\n            if (recurOffsets.length > 0) {\n              cirFobRecur(recurOffsets, level + 1)\n            }\n          }\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n\n      const filterFeats = (b: DataBlock) => {\n        const { startChrom, startBase, endChrom, endBase } = b\n        return (\n          (startChrom < chrId || (startChrom === chrId && startBase <= end)) &&\n          (endChrom > chrId || (endChrom === chrId && endBase >= start))\n        )\n      }\n\n      const cirFobStartFetch = async (\n        off: number[],\n        fr: Range,\n        level: number,\n      ) => {\n        try {\n          const length = fr.max - fr.min\n          const offset = fr.min\n          const resultBuffer: Buffer = await this.featureCache.get(\n            `${length}_${offset}`,\n            { length, offset },\n            opts?.signal,\n          )\n          for (const element of off) {\n            if (fr.contains(element)) {\n              cirFobRecur2(resultBuffer, element - offset, level)\n              outstanding -= 1\n              if (outstanding === 0) {\n                this.readFeatures(observer, blocksToFetch, {\n                  ...opts,\n                  request,\n                }).catch(e => observer.error(e))\n              }\n            }\n          }\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n      const cirFobRecur = (offset: number[], level: number) => {\n        try {\n          outstanding += offset.length\n\n          // Upper bound on size, based on a completely full leaf node.\n          const maxCirBlockSpan = 4 + Number(cirBlockSize) * 32\n          let spans = new Range([\n            { min: offset[0], max: offset[0] + maxCirBlockSpan },\n          ])\n          for (let i = 1; i < offset.length; i += 1) {\n            const blockSpan = new Range([\n              { min: offset[i], max: offset[i] + maxCirBlockSpan },\n            ])\n            spans = spans.union(blockSpan)\n          }\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          spans.getRanges().map(fr => cirFobStartFetch(offset, fr, level))\n        } catch (e) {\n          observer.error(e)\n        }\n      }\n\n      return cirFobRecur([Number(cirTreeOffset) + 48], 1)\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n\n  private parseSummaryBlock(\n    buffer: Buffer,\n    startOffset: number,\n    request?: CoordRequest,\n  ) {\n    const features = [] as any[]\n    let offset = startOffset\n\n    const dataView = new DataView(\n      buffer.buffer,\n      buffer.byteOffset,\n      buffer.length,\n    )\n    while (offset < buffer.byteLength) {\n      // this was extracted from looking at the runtime code generated by\n      // binary-parser\n      const chromId = dataView.getUint32(offset, true)\n      offset += 4\n      const start = dataView.getUint32(offset, true)\n      offset += 4\n      const end = dataView.getUint32(offset, true)\n      offset += 4\n      const validCnt = dataView.getUint32(offset, true)\n      offset += 4\n      const minScore = dataView.getFloat32(offset, true)\n      offset += 4\n      const maxScore = dataView.getFloat32(offset, true)\n      offset += 4\n      const sumData = dataView.getFloat32(offset, true)\n      offset += 4\n      // unused\n      // const sumSqData = dataView.getFloat32(offset, true)\n      offset += 4\n\n      if (\n        request\n          ? chromId === request.chrId &&\n            coordFilter(start, end, request.start, request.end)\n          : true\n      ) {\n        features.push({\n          start,\n          end,\n          maxScore,\n          minScore,\n          summary: true,\n          score: sumData / (validCnt || 1),\n        })\n      }\n    }\n\n    return features\n  }\n\n  private parseBigBedBlock(\n    data: Buffer,\n    startOffset: number,\n    offset: number,\n    request?: CoordRequest,\n  ) {\n    const items = [] as Feature[]\n    let currOffset = startOffset\n    while (currOffset < data.byteLength) {\n      const res = this.bigBedParser.parse(data.subarray(currOffset))\n      res.uniqueId = `bb-${offset + currOffset}`\n      items.push(res)\n      currOffset += res.offset\n    }\n\n    return request\n      ? items.filter((f: any) =>\n          coordFilter(f.start, f.end, request.start, request.end),\n        )\n      : items\n  }\n\n  private parseBigWigBlock(\n    buffer: Buffer,\n    startOffset: number,\n    request?: CoordRequest,\n  ) {\n    const b = buffer.subarray(startOffset)\n\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n    let offset = 0\n    offset += 4\n    const blockStart = dataView.getInt32(offset, true)\n    offset += 8\n    const itemStep = dataView.getUint32(offset, true)\n    offset += 4\n    const itemSpan = dataView.getUint32(offset, true)\n    offset += 4\n    const blockType = dataView.getUint8(offset)\n    offset += 2\n    const itemCount = dataView.getUint16(offset, true)\n    offset += 2\n    const items = new Array(itemCount)\n    switch (blockType) {\n      case 1: {\n        for (let i = 0; i < itemCount; i++) {\n          const start = dataView.getInt32(offset, true)\n          offset += 4\n          const end = dataView.getInt32(offset, true)\n          offset += 4\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          items[i] = { start, end, score }\n        }\n        break\n      }\n      case 2: {\n        for (let i = 0; i < itemCount; i++) {\n          const start = dataView.getInt32(offset, true)\n          offset += 4\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          items[i] = { score, start, end: start + itemSpan }\n        }\n        break\n      }\n      case 3: {\n        for (let i = 0; i < itemCount; i++) {\n          const score = dataView.getFloat32(offset, true)\n          offset += 4\n          const start = blockStart + i * itemStep\n          items[i] = { score, start, end: start + itemSpan }\n        }\n        break\n      }\n    }\n\n    return request\n      ? items.filter((f: any) =>\n          coordFilter(f.start, f.end, request.start, request.end),\n        )\n      : items\n  }\n\n  public async readFeatures(\n    observer: Observer<Feature[]>,\n    blocks: { offset: bigint; length: bigint }[],\n    opts: Options = {},\n  ) {\n    try {\n      const { blockType, isCompressed } = this\n      const { signal, request } = opts\n      const blockGroupsToFetch = groupBlocks(blocks)\n      checkAbortSignal(signal)\n      await Promise.all(\n        blockGroupsToFetch.map(async blockGroup => {\n          checkAbortSignal(signal)\n          const { length, offset } = blockGroup\n          const data = await this.featureCache.get(\n            `${length}_${offset}`,\n            blockGroup,\n            signal,\n          )\n          for (const block of blockGroup.blocks) {\n            checkAbortSignal(signal)\n            let blockOffset = Number(block.offset) - Number(blockGroup.offset)\n            let resultData = data\n            if (isCompressed) {\n              resultData = unzip(data.subarray(blockOffset))\n              blockOffset = 0\n            }\n            checkAbortSignal(signal)\n\n            switch (blockType) {\n              case 'summary': {\n                observer.next(\n                  this.parseSummaryBlock(resultData, blockOffset, request),\n                )\n                break\n              }\n              case 'bigwig': {\n                observer.next(\n                  this.parseBigWigBlock(resultData, blockOffset, request),\n                )\n                break\n              }\n              case 'bigbed': {\n                observer.next(\n                  this.parseBigBedBlock(\n                    resultData,\n                    blockOffset,\n                    Number(block.offset) * (1 << 8),\n                    request,\n                  ),\n                )\n                break\n              }\n              default: {\n                console.warn(`Don't know what to do with ${blockType}`)\n              }\n            }\n          }\n        }),\n      )\n      observer.complete()\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n}\n","import { Buffer } from 'buffer'\nimport { inflateRaw } from 'pako'\n\nexport function unzip(input: Buffer) {\n  return inflateRaw(input.subarray(2))\n}\n","import { Buffer } from 'buffer'\nimport { Parser } from 'binary-parser'\nimport { LocalFile, RemoteFile, GenericFilehandle } from 'generic-filehandle'\nimport { firstValueFrom, Observable } from 'rxjs'\nimport { toArray } from 'rxjs/operators'\nimport { BlockView } from './block-view'\n\nconst BIG_WIG_MAGIC = -2003829722\nconst BIG_BED_MAGIC = -2021002517\n\nfunction toString(arr: Uint8Array) {\n  return new TextDecoder().decode(arr)\n}\n\nexport interface Feature {\n  start: number\n  end: number\n  score: number\n  rest?: string // for bigbed line\n  minScore?: number // for summary line\n  maxScore?: number // for summary line\n  summary?: boolean // is summary line\n  uniqueId?: string // for bigbed contains uniqueId calculated from file offset\n  field?: number // used in bigbed searching\n}\ninterface Statistics {\n  scoreSum: number\n  basesCovered: number\n  scoreSumSquares: number\n}\n\ninterface RefInfo {\n  name: string\n  id: number\n  length: number\n}\nexport interface Header {\n  version: number\n  autoSql: string\n  totalSummary: Statistics\n  zoomLevels: any\n  unzoomedIndexOffset: number\n  unzoomedDataOffset: number\n  definedFieldCount: number\n  uncompressBufSize: number\n  chromTreeOffset: number\n  fileSize: number\n  extHeaderOffset: number\n  isBigEndian: boolean\n  fileType: string\n  refsByName: Record<string, number>\n  refsByNumber: Record<number, RefInfo>\n}\n\n/**\n * get the compiled parsers for different sections of the bigwig file\n *\n * @param isBE - is big endian, typically false\n * @return an object with compiled parsers\n */\nfunction getParsers(isBE: boolean) {\n  const le = isBE ? 'big' : 'little'\n  const headerParser = new Parser()\n    .endianess(le)\n    .int32('magic')\n    .uint16('version')\n    .uint16('numZoomLevels')\n    .uint64('chromTreeOffset')\n    .uint64('unzoomedDataOffset')\n    .uint64('unzoomedIndexOffset')\n    .uint16('fieldCount')\n    .uint16('definedFieldCount')\n    .uint64('asOffset') // autoSql offset, used in bigbed\n    .uint64('totalSummaryOffset')\n    .uint32('uncompressBufSize')\n    .uint64('extHeaderOffset') // name index offset, used in bigbed\n    .array('zoomLevels', {\n      length: 'numZoomLevels',\n      type: new Parser()\n        .endianess(le)\n        .uint32('reductionLevel')\n        .uint32('reserved')\n        .uint64('dataOffset')\n        .uint64('indexOffset'),\n    })\n\n  const totalSummaryParser = new Parser()\n    .endianess(le)\n    .uint64('basesCovered')\n    .doublele('scoreMin')\n    .doublele('scoreMax')\n    .doublele('scoreSum')\n    .doublele('scoreSumSquares')\n\n  const chromTreeParser = new Parser()\n    .endianess(le)\n    .uint32('magic')\n    .uint32('blockSize')\n    .uint32('keySize')\n    .uint32('valSize')\n    .uint64('itemCount')\n\n  const isLeafNode = new Parser()\n    .endianess(le)\n    .uint8('isLeafNode')\n    .skip(1)\n    .uint16('cnt')\n    .saveOffset('offset')\n\n  return {\n    chromTreeParser,\n    totalSummaryParser,\n    headerParser,\n    isLeafNode,\n  }\n}\n\nexport interface RequestOptions {\n  signal?: AbortSignal\n  headers?: Record<string, string>\n  [key: string]: unknown\n}\n\nexport abstract class BBI {\n  protected bbi: GenericFilehandle\n\n  private headerP?: Promise<Header>\n\n  protected renameRefSeqs: (a: string) => string\n\n  public getHeader(opts?: RequestOptions) {\n    if (!this.headerP) {\n      this.headerP = this._getHeader(opts).catch(e => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  /*\n   * @param filehandle - a filehandle from generic-filehandle or implementing something similar to the node10 fs.promises API\n   *\n   * @param path - a Local file path as a string\n   *\n   * @param url - a URL string\n   *\n   * @param renameRefSeqs - an optional method to rename the internal reference\n   * sequences using a mapping function\n   */\n  public constructor(args: {\n    filehandle?: GenericFilehandle\n    path?: string\n    url?: string\n    renameRefSeqs?: (a: string) => string\n  }) {\n    const { filehandle, renameRefSeqs = s => s, path, url } = args\n    this.renameRefSeqs = renameRefSeqs\n    if (filehandle) {\n      this.bbi = filehandle\n    } else if (url) {\n      this.bbi = new RemoteFile(url)\n    } else if (path) {\n      this.bbi = new LocalFile(path)\n    } else {\n      throw new Error('no file given')\n    }\n  }\n\n  private async _getHeader(opts?: RequestOptions) {\n    const header = await this._getMainHeader(opts)\n    const chroms = await this._readChromTree(header, opts)\n    return { ...header, ...chroms }\n  }\n\n  private async _getMainHeader(\n    opts?: RequestOptions,\n    requestSize = 2000,\n  ): Promise<Header> {\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(requestSize),\n      0,\n      requestSize,\n      0,\n      opts,\n    )\n    const isBigEndian = this._isBigEndian(buffer)\n    const ret = getParsers(isBigEndian)\n    const header = ret.headerParser.parse(buffer)\n    const { magic, asOffset, totalSummaryOffset } = header\n    header.fileType = magic === BIG_BED_MAGIC ? 'bigbed' : 'bigwig'\n    if (asOffset > requestSize || totalSummaryOffset > requestSize) {\n      return this._getMainHeader(opts, requestSize * 2)\n    }\n    if (asOffset) {\n      const off = Number(header.asOffset)\n      header.autoSql = toString(buffer.subarray(off, buffer.indexOf(0, off)))\n    }\n\n    // refetch header if it is too large on first pass,\n    // 8*5 is the sizeof the totalSummary struct\n    if (header.totalSummaryOffset > requestSize - 8 * 5) {\n      return this._getMainHeader(opts, requestSize * 2)\n    }\n\n    if (header.totalSummaryOffset) {\n      const tail = buffer.subarray(Number(header.totalSummaryOffset))\n      const sum = ret.totalSummaryParser.parse(tail)\n      header.totalSummary = { ...sum, basesCovered: Number(sum.basesCovered) }\n    }\n    return { ...header, isBigEndian }\n  }\n\n  private _isBigEndian(buffer: Buffer) {\n    let ret = buffer.readInt32LE(0)\n    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {\n      return false\n    }\n    ret = buffer.readInt32BE(0)\n    if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {\n      return true\n    }\n    throw new Error('not a BigWig/BigBed file')\n  }\n\n  // todo: add progress if long running\n  private async _readChromTree(\n    header: Header,\n    opts?: { signal?: AbortSignal },\n  ) {\n    const isBE = header.isBigEndian\n    const le = isBE ? 'big' : 'little'\n    const refsByNumber: Record<\n      number,\n      { name: string; id: number; length: number }\n    > = []\n    const refsByName: Record<string, number> = {}\n\n    let unzoomedDataOffset = Number(header.unzoomedDataOffset)\n    const chromTreeOffset = Number(header.chromTreeOffset)\n    while (unzoomedDataOffset % 4 !== 0) {\n      unzoomedDataOffset += 1\n    }\n    const off = unzoomedDataOffset - chromTreeOffset\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(off),\n      0,\n      off,\n      Number(chromTreeOffset),\n      opts,\n    )\n\n    const p = getParsers(isBE)\n    const { keySize } = p.chromTreeParser.parse(buffer)\n    const leafNodeParser = new Parser()\n      .endianess(le)\n      .string('key', { stripNull: true, length: keySize })\n      .uint32('refId')\n      .uint32('refSize')\n      .saveOffset('offset')\n    const nonleafNodeParser = new Parser()\n      .endianess(le)\n      .skip(keySize)\n      .uint64('childOffset')\n      .saveOffset('offset')\n    const rootNodeOffset = 32\n    const bptReadNode = async (currentOffset: number) => {\n      let offset = currentOffset\n      if (offset >= buffer.length) {\n        throw new Error('reading beyond end of buffer')\n      }\n      const ret = p.isLeafNode.parse(buffer.subarray(offset))\n      const { isLeafNode, cnt } = ret\n      offset += ret.offset\n      if (isLeafNode) {\n        for (let n = 0; n < cnt; n += 1) {\n          const leafRet = leafNodeParser.parse(buffer.subarray(offset))\n          offset += leafRet.offset\n          const { key, refId, refSize } = leafRet\n          const refRec = { name: key, id: refId, length: refSize }\n          refsByName[this.renameRefSeqs(key)] = refId\n          refsByNumber[refId] = refRec\n        }\n      } else {\n        // parse index node\n        const nextNodes = []\n        for (let n = 0; n < cnt; n += 1) {\n          const nonleafRet = nonleafNodeParser.parse(buffer.subarray(offset))\n          const { childOffset } = nonleafRet\n          offset += nonleafRet.offset\n          nextNodes.push(\n            bptReadNode(Number(childOffset) - Number(chromTreeOffset)),\n          )\n        }\n        await Promise.all(nextNodes)\n      }\n    }\n    await bptReadNode(rootNodeOffset)\n    return {\n      refsByName,\n      refsByNumber,\n    }\n  }\n\n  /*\n   * fetches the \"unzoomed\" view of the bigwig data. this is the default for bigbed\n   * @param abortSignal - a signal to optionally abort this operation\n   */\n  protected async getUnzoomedView(opts?: RequestOptions) {\n    const {\n      unzoomedIndexOffset,\n      refsByName,\n      uncompressBufSize,\n      isBigEndian,\n      fileType,\n    } = await this.getHeader(opts)\n    return new BlockView(\n      this.bbi,\n      refsByName,\n      unzoomedIndexOffset,\n      isBigEndian,\n      uncompressBufSize > 0,\n      fileType,\n    )\n  }\n\n  /*\n   * abstract method - get the view for a given scale\n   */\n  protected abstract getView(\n    scale: number,\n    opts?: RequestOptions,\n  ): Promise<BlockView>\n\n  /**\n   * Gets features from a BigWig file\n   *\n   * @param refName - The chromosome name\n   * @param start - The start of a region\n   * @param end - The end of a region\n   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use\n   */\n  public async getFeatureStream(\n    refName: string,\n    start: number,\n    end: number,\n    opts?: RequestOptions & { scale?: number; basesPerSpan?: number },\n  ) {\n    await this.getHeader(opts)\n    const chrName = this.renameRefSeqs(refName)\n    let view: BlockView\n    const { basesPerSpan, scale } = opts || {}\n\n    if (basesPerSpan) {\n      view = await this.getView(1 / basesPerSpan, opts)\n    } else if (scale) {\n      view = await this.getView(scale, opts)\n    } else {\n      view = await this.getView(1, opts)\n    }\n\n    return new Observable<Feature[]>(observer => {\n      view\n        .readWigData(chrName, start, end, observer, opts)\n        .catch(e => observer.error(e))\n    })\n  }\n\n  public async getFeatures(\n    refName: string,\n    start: number,\n    end: number,\n    opts?: RequestOptions & { scale?: number; basesPerSpan?: number },\n  ) {\n    const ob = await this.getFeatureStream(refName, start, end, opts)\n\n    const ret = await firstValueFrom(ob.pipe(toArray()))\n    return ret.flat()\n  }\n}\n","import { BlockView } from './block-view'\nimport { BBI, RequestOptions } from './bbi'\n\nexport class BigWig extends BBI {\n  /**\n   * Retrieves a BlockView of a specific zoomLevel\n   *\n   * @param scale - number\n   *\n   * @param opts - An object containing basesPerSpan (e.g. pixels per basepair)\n   * or scale used to infer the zoomLevel to use\n   */\n  protected async getView(scale: number, opts: RequestOptions) {\n    const { zoomLevels, refsByName, fileSize, isBigEndian, uncompressBufSize } =\n      await this.getHeader(opts)\n    const basesPerPx = 1 / scale\n    let maxLevel = zoomLevels.length\n    if (!fileSize) {\n      // if we don't know the file size, we can't fetch the highest zoom level :-(\n      maxLevel -= 1\n    }\n\n    for (let i = maxLevel; i >= 0; i -= 1) {\n      const zh = zoomLevels[i]\n      if (zh && zh.reductionLevel <= 2 * basesPerPx) {\n        const indexOffset = Number(zh.indexOffset)\n\n        return new BlockView(\n          this.bbi,\n          refsByName,\n          indexOffset,\n          isBigEndian,\n          uncompressBufSize > 0,\n          'summary',\n        )\n      }\n    }\n    return this.getUnzoomedView(opts)\n  }\n}\n","import { Buffer } from 'buffer'\nimport { Parser } from 'binary-parser'\nimport { Observable, merge, firstValueFrom } from 'rxjs'\nimport { map, reduce } from 'rxjs/operators'\nimport AbortablePromiseCache from '@gmod/abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\n\nimport { BBI, Feature, RequestOptions } from './bbi'\n\ninterface Loc {\n  key: string\n  offset: bigint\n  length: bigint\n  field?: number\n}\n\ninterface Index {\n  type: number\n  fieldcount: number\n  offset: number\n  field: number\n}\n\nexport function filterUndef<T>(ts: (T | undefined)[]): T[] {\n  return ts.filter((t: T | undefined): t is T => !!t)\n}\n\nexport class BigBed extends BBI {\n  public readIndicesCache = new AbortablePromiseCache<RequestOptions, Index[]>({\n    cache: new QuickLRU({ maxSize: 1 }),\n    fill: (args: RequestOptions, signal?: AbortSignal) =>\n      this._readIndices({ ...args, signal }),\n  })\n\n  public readIndices(opts: RequestOptions = {}) {\n    const { signal, ...rest } = opts\n    return this.readIndicesCache.get(JSON.stringify(rest), opts, signal)\n  }\n\n  /*\n   * retrieve unzoomed view for any scale\n   */\n  protected async getView(_scale: number, opts?: RequestOptions) {\n    return this.getUnzoomedView(opts)\n  }\n\n  /*\n   * parse the bigbed extraIndex fields\n   * @param abortSignal to abort operation\n   * @return a Promise for an array of Index data structure since there can be multiple extraIndexes in a bigbed, see bedToBigBed documentation\n   */\n  private async _readIndices(opts: RequestOptions) {\n    const { extHeaderOffset, isBigEndian } = await this.getHeader(opts)\n    const { buffer: data } = await this.bbi.read(\n      Buffer.alloc(64),\n      0,\n      64,\n      Number(extHeaderOffset),\n    )\n    const le = isBigEndian ? 'big' : 'little'\n    const ret = new Parser()\n      .endianess(le)\n      .uint16('size')\n      .uint16('count')\n      .uint64('offset')\n      .parse(data)\n\n    const { count, offset } = ret\n\n    // no extra index is defined if count==0\n    if (count === 0) {\n      return []\n    }\n\n    const blocklen = 20\n    const len = blocklen * count\n    const { buffer } = await this.bbi.read(\n      Buffer.alloc(len),\n      0,\n      len,\n      Number(offset),\n    )\n    const extParser = new Parser()\n      .endianess(le)\n      .int16('type')\n      .int16('fieldcount')\n      .uint64('offset')\n      .skip(4)\n      .int16('field')\n    const indices = [] as Index[]\n\n    for (let i = 0; i < count; i += 1) {\n      indices.push(extParser.parse(buffer.subarray(i * blocklen)))\n    }\n    return indices\n  }\n\n  /*\n   * perform a search in the bigbed extraIndex to find which blocks in the bigbed data to look for the\n   * actual feature data\n   *\n   * @param name - the name to search for\n   * @param opts - a SearchOptions argument with optional signal\n   * @return a Promise for an array of bigbed block Loc entries\n   */\n  private async searchExtraIndexBlocks(\n    name: string,\n    opts: RequestOptions = {},\n  ): Promise<Loc[]> {\n    const { isBigEndian } = await this.getHeader(opts)\n    const indices = await this.readIndices(opts)\n    if (indices.length === 0) {\n      return []\n    }\n    const locs = indices.map(async (index: any): Promise<Loc | undefined> => {\n      const { offset, field } = index\n      const { buffer: data } = await this.bbi.read(\n        Buffer.alloc(32),\n        0,\n        32,\n        Number(offset),\n        opts,\n      )\n      const le = isBigEndian ? 'big' : 'little'\n      const p = new Parser()\n        .endianess(le)\n        .int32('magic')\n        .int32('blockSize')\n        .int32('keySize')\n        .int32('valSize')\n        .uint64('itemCount')\n\n      const { blockSize, keySize, valSize } = p.parse(data)\n      // console.log({blockSize,keySize,valSize})\n      const bpt = new Parser()\n        .endianess(le)\n        .int8('nodeType')\n        .skip(1)\n        .int16('cnt')\n        .choice({\n          tag: 'nodeType',\n          choices: {\n            0: new Parser().array('leafkeys', {\n              length: 'cnt',\n              type: new Parser()\n                .endianess(le)\n                .string('key', { length: keySize, stripNull: true })\n                .uint64('offset'),\n            }),\n            1: new Parser().array('keys', {\n              length: 'cnt',\n              type: new Parser()\n                .endianess(le)\n                .string('key', { length: keySize, stripNull: true })\n                .uint64('offset')\n                .uint32('length')\n                .uint32('reserved'),\n            }),\n          },\n        })\n\n      const bptReadNode = async (\n        nodeOffset: number,\n      ): Promise<Loc | undefined> => {\n        const val = Number(nodeOffset)\n        const len = 4 + blockSize * (keySize + valSize)\n        const { buffer } = await this.bbi.read(\n          Buffer.alloc(len),\n          0,\n          len,\n          val,\n          opts,\n        )\n        const node = bpt.parse(buffer)\n        if (node.leafkeys) {\n          let lastOffset\n          for (const { key, offset } of node.leafkeys) {\n            if (name.localeCompare(key) < 0 && lastOffset) {\n              return bptReadNode(lastOffset)\n            }\n            lastOffset = offset\n          }\n          return bptReadNode(lastOffset)\n        }\n        for (const n of node.keys) {\n          if (n.key === name) {\n            return { ...n, field }\n          }\n        }\n\n        return undefined\n      }\n      const rootNodeOffset = 32\n      return bptReadNode(Number(offset) + rootNodeOffset)\n    })\n    return filterUndef(await Promise.all(locs))\n  }\n\n  /*\n   * retrieve the features from the bigbed data that were found through the\n   * lookup of the extraIndex note that there can be multiple extraIndex, see\n   * the BigBed specification and the -extraIndex argument to bedToBigBed\n   *\n   * @param name - the name to search for\n   * @param opts - a SearchOptions argument with optional signal\n   * @return a Promise for an array of Feature\n   */\n  public async searchExtraIndex(name: string, opts: RequestOptions = {}) {\n    const blocks = await this.searchExtraIndexBlocks(name, opts)\n    if (blocks.length === 0) {\n      return []\n    }\n    const view = await this.getUnzoomedView(opts)\n    const res = blocks.map(block => {\n      return new Observable<Feature[]>(observer => {\n        view.readFeatures(observer, [block], opts).catch(e => observer.error(e))\n      }).pipe(\n        reduce((acc, curr) => acc.concat(curr)),\n        map(x => {\n          for (const element of x) {\n            element.field = block.field\n          }\n          return x\n        }),\n      )\n    })\n    const ret = await firstValueFrom(merge(...res))\n    return ret.filter(f => f.rest?.split('\\t')[(f.field || 0) - 3] === name)\n  }\n}\n"],"names":["NullSignal","AggregateAbortController","signals","Set","abortController","AbortController","addSignal","signal","this","aborted","Error","add","handleAborted","addEventListener","delete","size","abort","AggregateStatusReporter","callbacks","addCallback","callback","currentMessage","message","elt","AbortablePromiseCache","constructor","fill","cache","TypeError","get","set","fillCallback","isAbortException","exception","name","code","evict","key","entry","data","statusCallback","aborter","statusReporter","newEntry","promise","settled","then","catch","error","console","checkSinglePromise","checkForSingleAbort","Object","assign","result","has","AbortSignal","cacheEntry","cachedEntry","clear","keyIter","keys","deleteCount","next","done","value","BigInt32","BigInt","DataView","prototype","getBigInt64","byteOffset","littleEndian","dataView","littleEndianMask","Number","bigEndianMask","getInt32","getUint32","getBigUint64","a","b","setBigInt64","hi","lo","setInt32","setUint32","setBigUint64","Context","importPath","useContextVariables","scopes","bitFields","tmpVariableCount","references","Map","imports","reverseImports","generateVariable","length","push","join","generateOption","val","toString","addImport","generateError","err","pushCode","generateTmpVariable","pushPath","popPath","pop","pushScope","popScope","im","id","addReference","alias","resolved","requested","markResolved","reference","markRequested","aliasList","forEach","getUnresolvedReferences","Array","from","filter","_","map","aliasRegistry","FUNCTION_PREFIX","PRIMITIVE_SIZES","uint8","uint16le","uint16be","uint32le","uint32be","int8","int16le","int16be","int32le","int32be","int64be","int64le","uint64be","uint64le","floatle","floatbe","doublele","doublebe","PRIMITIVE_NAMES","PRIMITIVE_LITTLE_ENDIANS","Parser","varName","type","options","endian","start","primitiveGenerateN","ctx","typeName","primitiveN","setNextParser","useThisEndian","toLowerCase","uint16","uint32","int16","int32","bigIntVersionCheck","int64","uint64","bitN","bit1","bit2","bit3","bit4","bit5","bit6","bit7","bit8","bit9","bit10","bit11","bit12","bit13","bit14","bit15","bit16","bit17","bit18","bit19","bit20","bit21","bit22","bit23","bit24","bit25","bit26","bit27","bit28","bit29","bit30","bit31","bit32","namely","skip","seek","relOffset","assert","string","zeroTerminated","greedy","stripNull","encoding","buffer","readUntil","wrapped","wrapper","array","lengthInBytes","choice","tag","choices","keyString","parseInt","isNaN","nest","pointer","offset","saveOffset","endianness","endianess","useContextVars","create","constructorFn","Function","getContext","addAliasedCode","addRawCode","getCode","generate","resolveReferences","compile","compiled","TextDecoder","sizeOf","NaN","indexOf","elementSize","parse","parser","head","generateBit","generateString","generateBuffer","generateSeek","generateNest","generateArray","generateChoice","generatePointer","generateSaveOffset","generateWrapper","generateAssert","formatter","generateFormatter","generateNext","func","JSON","stringify","bind","getMaxBits","sum","i","getBytes","bitOffset","isBigEndian","rem","mask","isHex","toHex","len","end","pred","cur","clone","counter","lhs","item","isHash","undefined","tempVar","parentVar","generateChoiceCase","nestVar","tagString","defaultChoice","wrapperVar","wrappedBuf","tempBuf","tempOff","tempView","Range","arg1","ranges","min","max","contains","pos","r","isContiguous","getRanges","union","s1","sort","oranges","current","nxt","AbortError","super","checkAbortSignal","DOMException","e","BIG_WIG_TYPE_GRAPH","BIG_WIG_TYPE_VSTEP","BIG_WIG_TYPE_FSTEP","coordFilter","e1","s2","e2","BlockView","bbi","refsByName","cirTreeOffset","isCompressed","blockType","featureCache","A","maxSize","async","requestData","off","read","Buffer","alloc","parsers","le","summaryParser","leafParser","bigBedParser","bigWigParser","getParsers","readWigData","chrName","observer","opts","chrId","complete","request","cirTreePromise","cirBlockSize","readUInt32BE","readUInt32LE","blocksToFetch","outstanding","cirFobRecur2","cirBlockData","level","subarray","p","concat","f","filterFeats","l","blockOffset","blockSize","recurOffsets","cirFobRecur","startChrom","startBase","endChrom","endBase","cirFobStartFetch","fr","resultBuffer","element","readFeatures","maxCirBlockSpan","spans","blockSpan","parseSummaryBlock","startOffset","features","byteLength","chromId","validCnt","minScore","getFloat32","maxScore","sumData","summary","score","parseBigBedBlock","items","currOffset","res","uniqueId","parseBigWigBlock","blockStart","itemStep","itemSpan","getUint8","itemCount","getUint16","blocks","blockGroupsToFetch","b0","b1","blockGroups","lastBlock","lastBlockEnd","block","groupBlocks","Promise","all","blockGroup","resultData","input","warn","BIG_WIG_MAGIC","BIG_BED_MAGIC","isBE","headerParser","totalSummaryParser","chromTreeParser","isLeafNode","BBI","getHeader","headerP","_getHeader","args","filehandle","renameRefSeqs","s","path","url","header","_getMainHeader","chroms","_readChromTree","requestSize","_isBigEndian","ret","magic","asOffset","totalSummaryOffset","fileType","autoSql","arr","decode","tail","totalSummary","basesCovered","readInt32LE","readInt32BE","refsByNumber","unzoomedDataOffset","chromTreeOffset","keySize","leafNodeParser","nonleafNodeParser","bptReadNode","currentOffset","cnt","n","leafRet","refId","refSize","refRec","nextNodes","nonleafRet","childOffset","getUnzoomedView","unzoomedIndexOffset","uncompressBufSize","getFeatureStream","refName","view","basesPerSpan","scale","getView","Observable","getFeatures","ob","firstValueFrom","pipe","toArray","flat","BigWig","zoomLevels","fileSize","basesPerPx","maxLevel","zh","reductionLevel","indexOffset","BigBed","readIndicesCache","_readIndices","readIndices","rest","_scale","extHeaderOffset","count","extParser","indices","searchExtraIndexBlocks","locs","index","field","valSize","bpt","nodeOffset","node","leafkeys","lastOffset","localeCompare","t","searchExtraIndex","reduce","acc","curr","x","merge","split"],"sourceRoot":""}