{"version":3,"file":"static/js/6157.5831fd87.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/VcfImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName?: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {},\n) {\n  const {\n    hasColumnNameLine = false,\n    columnNameLineNumber = 1,\n    isValidRefName = () => false,\n    selectedAssemblyName,\n  } = options\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (hasColumnNameLine && columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(columnNameLineNumber - 1, 1)\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(rowSet, columnNumber, isValidRefName)\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      for (const row of rowSet.rows) {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, isValidRefName)\n      }\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!hasColumnNameLine,\n    columns,\n    assemblyName: selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import VCF from '@gmod/vcf'\nimport { VcfFeature } from '@jbrowse/plugin-variants'\nimport {\n  bufferToString,\n  Row,\n  RowSet,\n  Column,\n  ParseOptions,\n} from './ImportUtils'\n\nconst vcfCoreColumns: { name: string; type: string }[] = [\n  { name: 'CHROM', type: 'Text' }, // 0\n  { name: 'POS', type: 'Number' }, // 1\n  { name: 'ID', type: 'Text' }, // 2\n  { name: 'REF', type: 'Text' }, // 3\n  { name: 'ALT', type: 'Text' }, // 4\n  { name: 'QUAL', type: 'Number' }, // 5\n  { name: 'FILTER', type: 'Text' }, // 6\n  { name: 'INFO', type: 'Text' }, // 7\n  { name: 'FORMAT', type: 'Text' }, // 8\n]\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction vcfRecordToRow(vcfParser: any, line: string, lineNumber: number): Row {\n  const vcfVariant = vcfParser.parseLine(line)\n  const vcfFeature = new VcfFeature({\n    variant: vcfVariant,\n    parser: vcfParser,\n    id: `vcf-${lineNumber}`,\n  })\n\n  const data = line.split('\\t').map(d => (d === '.' ? '' : d))\n  // no format column, add blank\n  if (data.length === 8) {\n    data.push('')\n  }\n  const row: Row = {\n    id: String(lineNumber + 1),\n    extendedData: { vcfFeature: vcfFeature.toJSON() },\n    cells: data.map((text, columnNumber) => {\n      return {\n        columnNumber,\n        text,\n      }\n    }),\n  }\n  return row\n}\n\nexport function parseVcfBuffer(buffer: Buffer, options: ParseOptions = {}) {\n  const { selectedAssemblyName } = options\n  let { header, body } = splitVcfFileHeaderAndBody(bufferToString(buffer))\n  const rows: Row[] = []\n  const vcfParser = new VCF({ header })\n  header = '' // garbage collect\n  body.split(/\\n|\\r\\n|\\r/).forEach((line: string, lineNumber) => {\n    if (/\\S/.test(line)) {\n      rows.push(vcfRecordToRow(vcfParser, line, lineNumber))\n    }\n  })\n  body = '' // garbage collect\n\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows,\n  }\n\n  const columnDisplayOrder: number[] = []\n  const columns: Column[] = []\n  for (let i = 0; i < vcfCoreColumns.length; i += 1) {\n    columnDisplayOrder.push(i)\n    columns[i] = {\n      name: vcfCoreColumns[i].name,\n      dataType: { type: vcfCoreColumns[i].type },\n    }\n  }\n  for (let i = 0; i < vcfParser.samples.length; i += 1) {\n    const oi = vcfCoreColumns.length + i\n    columnDisplayOrder.push(oi)\n    columns[oi] = { name: vcfParser.samples[i], dataType: { type: 'Text' } }\n  }\n\n  columnDisplayOrder.push(columnDisplayOrder.length)\n  columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.extendedData.vcfFeature.refName+':'\\n\n    +row.extendedData.vcfFeature.start+'..'+row.extendedData.vcfFeature.end, extendedData:\\n\n    {refName:row.extendedData.vcfFeature.refName,start:row.extendedData.vcfFeature.start,end:row.extendedData.vcfFeature.end}}`,\n  })\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: true,\n    columns,\n    assemblyName: selectedAssemblyName,\n  }\n}\n\nexport function splitVcfFileHeaderAndBody(wholeFile: string) {\n  // split into header and the rest of the file\n  let headerEndIndex = 0\n  let prevChar\n  for (; headerEndIndex < wholeFile.length; headerEndIndex += 1) {\n    const c = wholeFile[headerEndIndex]\n    if (prevChar === '\\n' && c !== '#') {\n      break\n    }\n    prevChar = c\n  }\n\n  return {\n    header: wholeFile.slice(0, Math.max(0, headerEndIndex)),\n    body: wholeFile.slice(headerEndIndex),\n  }\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","_x","_parseWith","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","csv","_args","wrap","_context","prev","next","length","undefined","then","module","default","sent","abrupt","_objectSpread","noheader","output","fromString","stop","guessColumnType","rowSet","columnNumber","isValidRefName","parsedLoc","text","rows","cells","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","_options$hasColumnNam","hasColumnNameLine","_options$columnNameLi","columnNameLineNumber","_options$isValidRefNa","selectedAssemblyName","maxCols","isLoaded","map","row","rowNumber","id","String","columnNames","_rowSet$rows$splice","splice","colNamesRow","_slicedToArray","forEach","cell","columns","columnDisplayOrder","push","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","extendedData","err","e","f","name","dataType","type","hasColumnNames","assemblyName","parseCsvBuffer","_x2","_x3","_parseCsvBuffer","_callee2","_context2","parseTsvBuffer","_x4","_x5","_parseTsvBuffer","_callee3","_context3","delimiter","vcfCoreColumns","parseVcfBuffer","_splitVcfFileHeaderAn","splitVcfFileHeaderAndBody","header","body","vcfParser","VCF","split","line","lineNumber","vcfVariant","parseLine","vcfFeature","VcfFeature","variant","parser","concat","data","d","toJSON","vcfRecordToRow","i","samples","oi","unshift","isDerived","derivationFunctionText","wholeFile","prevChar","headerEndIndex","c","slice","Math","max"],"sourceRoot":""}