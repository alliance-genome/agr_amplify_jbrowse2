{"version":3,"file":"static/js/1007.6f323825.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGBackground.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGDotplotView.tsx"],"sourcesContent":["import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getTickDisplayStr } from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { getBlockLabelKeysToHide } from './util'\nimport { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n}))\nexport const HorizontalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderY } = model\n  const { classes } = useStyles()\n  return (\n    <svg width={viewWidth} height={borderY} className={classes.htext}>\n      <HorizontalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const HorizontalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n  const theme = useTheme()\n  const hviewSnap = {\n    ...getSnapshot(hview),\n    width,\n    staticBlocks: hview.staticBlocks,\n  }\n\n  const ticks = hticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: hviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const x = region.offsetPx\n          const y = 0\n          const xoff = Math.floor(x - hview.offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${htextRotation},${xoff},${y})`}\n              key={JSON.stringify(region)}\n              x={xoff}\n              y={y + 1}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"hanging\"\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, x]) => {\n        return (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            x1={x}\n            x2={x}\n            y1={0}\n            y2={tick.type === 'major' ? 6 : 4}\n            strokeWidth={1}\n            stroke={theme.palette.grey[400]}\n          />\n        )\n      })}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, x]) => {\n          const y = 0\n          return x > 10 ? (\n            <text\n              x={x - 7}\n              y={y}\n              transform={`rotate(${htextRotation},${x},${y})`}\n              key={`text-${JSON.stringify(tick)}`}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"middle\"\n              textAnchor=\"end\"\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null\n        })}\n      <text\n        y={borderY - 12}\n        x={(viewWidth - borderX) / 2}\n        fill={theme.palette.text.primary}\n        textAnchor=\"middle\"\n        fontSize={11}\n        dominantBaseline=\"hanging\"\n      >\n        {hview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\nexport const VerticalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { borderX, viewHeight } = model\n  const { classes } = useStyles()\n  return (\n    <svg className={classes.vtext} width={borderX} height={viewHeight}>\n      <VerticalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const VerticalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewHeight, borderX, borderY, vview, vtextRotation, vticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n  const theme = useTheme()\n  const vviewSnap = {\n    ...getSnapshot(vview),\n    width,\n    staticBlocks: vview.staticBlocks,\n  }\n  const ticks = vticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: vviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const y = region.offsetPx\n          const x = borderX\n          const yoff = Math.floor(viewHeight - y + offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${vtextRotation},${x},${y})`}\n              key={JSON.stringify(region)}\n              x={x}\n              y={yoff}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, y]) => (\n        <line\n          key={`line-${JSON.stringify(tick)}`}\n          y1={viewHeight - y}\n          y2={viewHeight - y}\n          x1={borderX}\n          x2={borderX - (tick.type === 'major' ? 6 : 4)}\n          strokeWidth={1}\n          stroke={theme.palette.grey[400]}\n        />\n      ))}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, y]) => {\n          return y > 10 ? (\n            <text\n              y={viewHeight - y - 3}\n              x={borderX - 7}\n              key={`text-${JSON.stringify(tick)}`}\n              textAnchor=\"end\"\n              fill={theme.palette.text.primary}\n              dominantBaseline=\"hanging\"\n              fontSize={11}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null\n        })}\n      <text\n        y={(viewHeight - borderY) / 2}\n        x={12}\n        fill={theme.palette.text.primary}\n        transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n        textAnchor=\"middle\"\n        fontSize={11}\n      >\n        {vview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { DotplotViewModel } from '../model'\n\nexport const GridRaw = observer(function ({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  if (!hblocks.length || !vblocks.length) {\n    return null\n  }\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0].offsetPx - hview.offsetPx\n  const vbottom = vblocks[0].offsetPx - vview.offsetPx\n  const theme = useTheme()\n  const stroke = theme.palette.divider\n\n  // Uses math.max/min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n\n  let lastx = Infinity\n  let lasty = Infinity\n  return (\n    <>\n      <rect\n        x={rx}\n        y={ry}\n        width={w}\n        height={h}\n        fill={theme.palette.background.default}\n      />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          const render = Math.floor(x) !== Math.floor(lastx)\n          if (render) {\n            lastx = x\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          const render = Math.floor(y) !== Math.floor(lasty)\n          if (render) {\n            lasty = y\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        <line x1={htop} y1={0} x2={htop} y2={viewHeight} stroke={stroke} />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          stroke={stroke}\n        />\n      </g>\n      {children}\n    </>\n  )\n})\n\nexport default function Grid({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight } = model\n  return (\n    <svg\n      width={viewWidth}\n      height={viewHeight}\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n    >\n      <GridRaw model={model}>{children}</GridRaw>\n    </svg>\n  )\n}\n","import React from 'react'\nimport { useTheme } from '@mui/material'\nimport { stripAlpha } from '@jbrowse/core/util'\n\nexport default function SVGBackground({\n  width,\n  height,\n}: {\n  width: number\n  height: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { when } from 'mobx'\nimport { getSession } from '@jbrowse/core/util'\nimport { ThemeProvider } from '@mui/material'\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\n\n// locals\nimport { DotplotViewModel, ExportSvgOptions } from '../model'\nimport { GridRaw } from '../components/Grid'\nimport { HorizontalAxisRaw, VerticalAxisRaw } from '../components/Axes'\nimport SVGBackground from './SVGBackground'\n\n// render LGV to SVG\nexport async function renderToSvg(\n  model: DotplotViewModel,\n  opts: ExportSvgOptions,\n) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => <>{children}</> } =\n    opts\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, borderX, viewWidth, viewHeight, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n  const w = width + shift * 2\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w, height].toString()}\n        >\n          <SVGBackground width={w} height={height} />\n          <VerticalAxisRaw model={model} />\n          <g transform={`translate(${borderX} 0)`}>\n            <GridRaw model={model} />\n            <defs>\n              <clipPath id=\"clip-ruler\">\n                <rect x={0} y={0} width={viewWidth} height={viewHeight} />\n              </clipPath>\n            </defs>\n            <g clipPath=\"url(#clip-ruler)\">\n              {displayResults.map(({ result }, i) => (\n                <g key={i}>{result}</g>\n              ))}\n            </g>\n          </g>\n          <g transform={`translate(${borderX} ${viewHeight})`}>\n            <HorizontalAxisRaw model={model} />\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n"],"names":["useStyles","makeStyles","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","HorizontalAxis","observer","_ref","model","viewWidth","borderY","classes","_jsx","width","height","className","children","HorizontalAxisRaw","_ref2","borderX","hview","htextRotation","hticks","offsetPx","dynamicBlocks","bpPerPx","dblocks","contentBlocks","hide","getBlockLabelKeysToHide","theme","useTheme","hviewSnap","_objectSpread","getSnapshot","staticBlocks","ticks","map","tick","_bpToPx","bpToPx","refName","coord","base","self","filter","f","undefined","_jsxs","_Fragment","region","has","key","x","xoff","Math","floor","transform","concat","y","fill","palette","text","primary","fontSize","dominantBaseline","textAnchor","JSON","stringify","_ref3","_ref4","_slicedToArray","x1","x2","y1","y2","type","strokeWidth","stroke","grey","t","_ref5","_ref6","getTickDisplayStr","assemblyNames","join","VerticalAxis","_ref7","viewHeight","VerticalAxisRaw","_ref8","vview","vtextRotation","vticks","vviewSnap","_bpToPx2","yoff","_ref9","_ref10","_ref11","_ref12","GridRaw","hblocks","vblocks","length","htop","displayedRegionsTotalPx","vtop","hbottom","vbottom","divider","rx","max","ry","w","min","h","lastx","Infinity","lasty","background","default","render","Grid","style","SVGBackground","stripAlpha","renderToSvg","_x","_x2","_renderToSvg","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","opts","_session$allThemes","_opts$themeName","themeName","_opts$Wrapper","Wrapper","session","tracks","shift","displayResults","wrap","_context2","prev","next","when","initialized","getSession","allThemes","call","Promise","all","_callee","track","display","_context","displays","ready","t0","renderSvg","t1","sent","abrupt","result","stop","_x3","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","xmlns","xmlnsXlink","viewBox","toString","id","clipPath","i"],"sourceRoot":""}