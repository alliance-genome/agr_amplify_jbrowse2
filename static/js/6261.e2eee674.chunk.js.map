{"version":3,"file":"static/js/6261.e2eee674.chunk.js","mappings":"uSAoBqBA,EAAiB,0CAGpC,WACEC,EACAC,EACAC,GACC,IAAD,mBACA,cAAMF,EAAMC,EAAeC,IAPnBC,cAAQ,EAQhB,IAAMC,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACwB,OAA3D,EAAKG,SAAWJ,EAAkBO,aAAaF,GAAS,IAAG,CAC7D,CA4BC,OA5BA,4EA8BD,oHACaG,KAAKJ,SAASK,SAAM,gDAChC,kDAhCA,IAgCA,wEAED,4GACSC,MAAMC,KAAKH,KAAKJ,SAASQ,UAAUC,KAAI,SAAAC,GAAY,MAAK,CAC7DC,QAASD,EAAa,GAAGE,IAAI,WAC7BC,QAASH,EAAa,GAAGE,IAAI,WAC9B,KAAE,gDACJ,kDAPA,IAOA,yBAED,SAAYE,GAA2B,IAAD,OAC5BH,EAAwBG,EAAxBH,QAASI,EAAeD,EAAfC,MAAOC,EAAQF,EAARE,IAExB,OAAOC,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,gFAE7C,IADMlB,EAAW,EAAKA,SAASY,IAAID,IAAY,GACtCQ,EAAI,EAAGA,EAAInB,EAASoB,OAAQD,KAC7BE,EAAIrB,EAASmB,IAEbP,IAAI,OAASG,GAASM,EAAET,IAAI,SAAWI,GAC3CE,EAASI,KAAKD,GAGlBH,EAASK,WAAU,2CACpB,mDAVsB,GAWzB,GAAC,2BAED,WAAuC,IAAC,2BAvDxC,SAAoBC,GAElB,IADA,IAAMxB,EAAW,IAAIyB,IACZN,EAAI,EAAGA,EAAIK,EAAMJ,OAAQD,GAAK,EACrC,GAAIK,EAAML,GAAI,CACZ,IAAME,EAAIjB,KAAKsB,YAAYF,EAAML,IAC3BR,EAAUU,EAAET,IAAI,WAClBe,EAAS3B,EAASY,IAAID,GACrBgB,IACHA,EAAS,GACT3B,EAAS4B,IAAIjB,EAASgB,IAGxBA,EAAOE,KAAKR,EACd,CAGF,IAC2C,EAD3C,UAC0BrB,EAASQ,UAAQ,IAA3C,2BAA6C,CAAvB,QACRsB,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEnB,IAAI,SAAWoB,EAAEpB,IAAI,QAAQ,GAC5D,CAAC,+BAED,OAAOZ,CACT,GAAC,yBAED,SAAmBiC,GACjB,OAAO,IAAIC,EAAAA,EAAcD,EAC3B,KAAC,EAvCmC,CAASE,EAAAA,uB","sources":["../../../plugins/config/src/FromConfigAdapter/FromConfigAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport SimpleFeature, {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\n/**\n * Adapter that just returns the features defined in its `features` configuration\n * key, like:\n *   `\"features\": [ { \"refName\": \"ctgA\", \"start\":1, \"end\":20 }, ... ]`\n */\n\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n  protected features: Map<string, Feature[]>\n\n  constructor(\n    conf: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(conf, getSubAdapter, pluginManager)\n    const feats = readConfObject(conf, 'features') as SimpleFeatureSerialized[]\n    this.features = FromConfigAdapter.makeFeatures(feats || [])\n  }\n\n  static makeFeatures(fdata: SimpleFeatureSerialized[]) {\n    const features = new Map<string, Feature[]>()\n    for (let i = 0; i < fdata.length; i += 1) {\n      if (fdata[i]) {\n        const f = this.makeFeature(fdata[i])\n        const refName = f.get('refName') as string\n        let bucket = features.get(refName)\n        if (!bucket) {\n          bucket = []\n          features.set(refName, bucket)\n        }\n\n        bucket.push(f)\n      }\n    }\n\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n      refFeatures.sort((a, b) => a.get('start') - b.get('start'))\n    }\n\n    return features\n  }\n\n  static makeFeature(data: SimpleFeatureSerialized) {\n    return new SimpleFeature(data)\n  }\n\n  async getRefNames() {\n    return [...this.features.keys()]\n  }\n\n  async getRefNameAliases() {\n    return Array.from(this.features.values()).map(featureArray => ({\n      refName: featureArray[0].get('refName'),\n      aliases: featureArray[0].get('aliases'),\n    }))\n  }\n\n  getFeatures(region: NoAssemblyRegion) {\n    const { refName, start, end } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const features = this.features.get(refName) || []\n      for (let i = 0; i < features.length; i++) {\n        const f = features[i]\n\n        if (f.get('end') > start && f.get('start') < end) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["FromConfigAdapter","conf","getSubAdapter","pluginManager","features","feats","readConfObject","makeFeatures","this","keys","Array","from","values","map","featureArray","refName","get","aliases","region","start","end","ObservableCreate","observer","i","length","f","next","complete","fdata","Map","makeFeature","bucket","set","push","sort","a","b","data","SimpleFeature","BaseFeatureDataAdapter"],"sourceRoot":""}