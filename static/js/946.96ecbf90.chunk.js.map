{"version":3,"file":"static/js/946.96ecbf90.chunk.js","mappings":"iNAeA,sBAA6BA,EAAAA,uBAC3B,eAAaC,GACX,MAAMC,QAAgBC,KAAKC,gBAAgBD,KAAKE,QAAQ,qBACxD,IAAKH,EACH,MAAM,IAAII,MAAM,4BAElB,OAAOJ,EAAQK,WACjB,CAEA,iBAAaC,GAEX,aADsBL,KAAKF,aACZO,aACjB,CAEOC,WAAAA,CAAYC,EAAeC,GAChC,OAAOC,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAMC,QAAwBX,KAAKF,YAEnC,IAAMc,MAAOC,EAAYC,IAAKC,GAAaR,EAI3C,GAHAM,EAAaG,KAAKC,IAAI,EAAGJ,EAFd,KAGXE,GAHW,IAKPA,EAAW,GAAKF,EAAaE,EAE/B,YADAG,EAASC,WAIX,MAAMC,EAAMT,EAAgBL,YAC1B,IACKC,EACHK,MAAOC,EACPC,IAAKC,GAEPP,GAEIa,QAAcC,EAAAA,EAAAA,GAAeF,EAAIG,MAAKC,EAAAA,EAAAA,OACtCC,EAAmBJ,EAAM,IAAIK,IAAI,QAAU,GAC3CC,EAAS3B,KAAKE,QAAQ,UACtB0B,EAAgB5B,KAAKE,QAAQ,iBAC7B2B,EAAgB7B,KAAKE,QAAQ,iBAC7B4B,EAAkB9B,KAAKE,QAAQ,mBAC/B6B,EAAK,IAAIC,OAAOL,EAAQ,KAAOG,EAAkB,IAAM,KAE7D,GAAIH,EAAQ,CACV,GAAIC,EAAe,CACjB,MAAMK,EAAUR,EAASS,SAASH,GAClC,IAAK,MAAMI,KAASF,EAAS,CAC3B,MAAMG,EAAIvB,GAAcsB,EAAME,OAAS,IAEnCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQhC,EAAMK,MAAOL,EAAMO,MAC1DI,EAASsB,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAW,GAAE1C,KAAK2C,YAAYP,MAC9BQ,QAASrC,EAAMqC,QACfhC,MAAOwB,EACPtB,IAAKsB,EAAID,EAAM,GAAGI,OAClBM,KAAMV,EAAM,GACZW,OAAQ,IAIhB,CACF,CACA,GAAIjB,EAAe,CACjB,MAAMI,GAAUc,EAAAA,EAAAA,QAAOtB,GAAUS,SAASH,GAC1C,IAAK,MAAMI,KAASF,EAAS,CAC3B,MAAMG,EAAIrB,GAAYoB,EAAME,OAAS,IACjCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQhC,EAAMK,MAAOL,EAAMO,MAC1DI,EAASsB,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAW,GAAE1C,KAAK2C,YAAYP,MAC9BQ,QAASrC,EAAMqC,QACfhC,MAAOwB,EAAID,EAAM,GAAGI,OACpBM,KAAMV,EAAM,GACZrB,IAAKsB,EACLU,QAAS,IAIjB,CACF,CACF,CAEA5B,EAASC,UAAU,GAEvB,CAEO6B,aAAAA,GAAiB,E","sources":["../../../plugins/sequence/src/SequenceSearchAdapter/SequenceSearchAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport {\n  SimpleFeature,\n  Feature,\n  Region,\n  revcom,\n  doesIntersect2,\n} from '@jbrowse/core/util'\nimport { toArray } from 'rxjs/operators'\nimport { firstValueFrom } from 'rxjs'\n\nexport default class extends BaseFeatureDataAdapter {\n  public async configure() {\n    const adapter = await this.getSubAdapter?.(this.getConf('sequenceAdapter'))\n    if (!adapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return adapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames() {\n    const adapter = await this.configure()\n    return adapter.getRefNames()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions) {\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const hw = 1000\n      let { start: queryStart, end: queryEnd } = query\n      queryStart = Math.max(0, queryStart - hw)\n      queryEnd += hw\n\n      if (queryEnd < 0 || queryStart > queryEnd) {\n        observer.complete()\n        return\n      }\n\n      const ret = sequenceAdapter.getFeatures(\n        {\n          ...query,\n          start: queryStart,\n          end: queryEnd,\n        },\n        opts,\n      )\n      const feats = await firstValueFrom(ret.pipe(toArray()))\n      const residues: string = feats[0]?.get('seq') || ''\n      const search = this.getConf('search') as string\n      const searchForward = this.getConf('searchForward')\n      const searchReverse = this.getConf('searchReverse')\n      const caseInsensitive = this.getConf('caseInsensitive')\n      const re = new RegExp(search, 'g' + (caseInsensitive ? 'i' : ''))\n\n      if (search) {\n        if (searchForward) {\n          const matches = residues.matchAll(re)\n          for (const match of matches) {\n            const s = queryStart + (match.index || 0)\n\n            if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n              observer.next(\n                new SimpleFeature({\n                  uniqueId: `${this.id}-match-${s}-p`,\n                  refName: query.refName,\n                  start: s,\n                  end: s + match[0].length,\n                  name: match[0],\n                  strand: 1,\n                }),\n              )\n            }\n          }\n        }\n        if (searchReverse) {\n          const matches = revcom(residues).matchAll(re)\n          for (const match of matches) {\n            const s = queryEnd - (match.index || 0)\n            if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n              observer.next(\n                new SimpleFeature({\n                  uniqueId: `${this.id}-match-${s}-n`,\n                  refName: query.refName,\n                  start: s - match[0].length,\n                  name: match[0],\n                  end: s,\n                  strand: -1,\n                }),\n              )\n            }\n          }\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  public freeResources() {}\n}\n"],"names":["BaseFeatureDataAdapter","configure","adapter","this","getSubAdapter","getConf","Error","dataAdapter","getRefNames","getFeatures","query","opts","ObservableCreate","async","sequenceAdapter","start","queryStart","end","queryEnd","Math","max","observer","complete","ret","feats","firstValueFrom","pipe","toArray","residues","get","search","searchForward","searchReverse","caseInsensitive","re","RegExp","matches","matchAll","match","s","index","doesIntersect2","length","next","SimpleFeature","uniqueId","id","refName","name","strand","revcom","freeResources"],"sourceRoot":""}