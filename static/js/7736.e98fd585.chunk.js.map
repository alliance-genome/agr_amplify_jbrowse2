{"version":3,"file":"static/js/7736.e98fd585.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MCScanAnchorsAdapter/MCScanAnchorsAdapter.ts","../../../plugins/comparative-adapters/src/util.ts","../../../node_modules/@gmod/bgzf-filehandle/src/unzip-pako.ts","../../../node_modules/@gmod/bgzf-filehandle/src/gziIndex.ts","../../../node_modules/@gmod/bgzf-filehandle/src/bgzFilehandle.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  doesIntersect2,\n  SimpleFeature,\n  Feature,\n  Region,\n} from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { readFile, parseBed } from '../util'\n\ninterface BareFeature {\n  strand: number\n  refName: string\n  start: number\n  end: number\n  score: number\n  name: string\n}\n\ntype Row = [BareFeature, BareFeature, number, number]\n\nexport default class MCScanAnchorsAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    assemblyNames: string[]\n    feats: Row[]\n  }>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n  async setupPre(opts: BaseOptions) {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n\n    const pm = this.pluginManager\n    const bed1 = openLocation(this.getConf('bed1Location'), pm)\n    const bed2 = openLocation(this.getConf('bed2Location'), pm)\n    const mcscan = openLocation(this.getConf('mcscanAnchorsLocation'), pm)\n    const [bed1text, bed2text, mcscantext] = await Promise.all(\n      [bed1, bed2, mcscan].map(r => readFile(r, opts)),\n    )\n\n    const bed1Map = parseBed(bed1text)\n    const bed2Map = parseBed(bed2text)\n    const feats = mcscantext\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && f !== '###')\n      .map((line, index) => {\n        const [name1, name2, score] = line.split('\\t')\n        const r1 = bed1Map.get(name1)\n        const r2 = bed2Map.get(name2)\n        if (!r1 || !r2) {\n          throw new Error(`feature not found, ${name1} ${name2} ${r1} ${r2}`)\n        }\n        return [r1, r2, +score, index] as Row\n      })\n\n    return {\n      assemblyNames,\n      feats,\n    }\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseFeatureDataAdapter filters it out)\n    return true\n  }\n\n  async getRefNames() {\n    // we cannot determine this accurately\n    return []\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyNames, feats } = await this.setup(opts)\n\n      // The index of the assembly name in the region list corresponds to\n      // the adapter in the subadapters list\n      const index = assemblyNames.indexOf(region.assemblyName)\n      if (index !== -1) {\n        const flip = index === 0\n        feats.forEach(f => {\n          const [r1, r2, score, rowNum] = f\n          const [f1, f2] = !flip ? [r2, r1] : [r1, r2]\n          if (\n            f1.refName === region.refName &&\n            doesIntersect2(region.start, region.end, f1.start, f1.end)\n          ) {\n            observer.next(\n              new SimpleFeature({\n                ...f1,\n                uniqueId: `${index}-${rowNum}`,\n                syntenyId: rowNum,\n\n                // note: strand would be -1 if the two features are on opposite\n                // strands, indicating inverted alignment\n                strand: f1.strand * f2.strand,\n                assemblyName: assemblyNames[+!flip],\n                score,\n                mate: {\n                  ...f2,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          }\n        })\n      }\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n","import { Buffer } from 'buffer'\n//@ts-ignore\nimport { Z_SYNC_FLUSH, Inflate } from 'pako'\n\ninterface VirtualOffset {\n  blockPosition: number\n  dataPosition: number\n}\ninterface Chunk {\n  minv: VirtualOffset\n  maxv: VirtualOffset\n}\n\n// browserify-zlib, which is the zlib shim used by default in webpacked code,\n// does not properly uncompress bgzf chunks that contain more than\n// one bgzf block, so export an unzip function that uses pako directly\n// if we are running in a browser.\nasync function unzip(inputData: Buffer) {\n  try {\n    let strm\n    let pos = 0\n    let i = 0\n    const chunks = []\n    let totalSize = 0\n    let inflator\n    do {\n      const remainingInput = inputData.subarray(pos)\n      inflator = new Inflate()\n      //@ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      pos += strm.next_in\n      chunks[i] = inflator.result as Uint8Array\n      totalSize += chunks[i].length\n      i += 1\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    return Buffer.from(result)\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to pakounzip, except it does extra counting\n// to return the positions of compressed and decompressed\n// data offsets\nasync function unzipChunk(inputData: Buffer) {\n  try {\n    let strm\n    let cpos = 0\n    let dpos = 0\n    const blocks = []\n    const cpositions = []\n    const dpositions = []\n    do {\n      const remainingInput = inputData.slice(cpos)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = Buffer.from(inflator.result)\n      blocks.push(buffer)\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n\n      cpos += strm.next_in\n      dpos += buffer.length\n    } while (strm.avail_in)\n\n    const buffer = Buffer.concat(blocks)\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to unzipChunk above but slices (0,minv.dataPosition) and\n// (maxv.dataPosition,end) off\nasync function unzipChunkSlice(inputData: Buffer, chunk: Chunk) {\n  try {\n    let strm\n    const { minv, maxv } = chunk\n    let cpos = minv.blockPosition\n    let dpos = minv.dataPosition\n    const chunks = []\n    const cpositions = []\n    const dpositions = []\n\n    let totalSize = 0\n    let i = 0\n    do {\n      const remainingInput = inputData.subarray(cpos - minv.blockPosition)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = inflator.result\n      chunks.push(buffer as Uint8Array)\n      let len = buffer.length\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n      if (chunks.length === 1 && minv.dataPosition) {\n        // this is the first chunk, trim it\n        chunks[0] = chunks[0].subarray(minv.dataPosition)\n        len = chunks[0].length\n      }\n      const origCpos = cpos\n      cpos += strm.next_in\n      dpos += len\n\n      if (origCpos >= maxv.blockPosition) {\n        // this is the last chunk, trim it and stop decompressing\n        // note if it is the same block is minv it subtracts that already\n        // trimmed part of the slice length\n\n        chunks[i] = chunks[i].subarray(\n          0,\n          maxv.blockPosition === minv.blockPosition\n            ? maxv.dataPosition - minv.dataPosition + 1\n            : maxv.dataPosition + 1,\n        )\n\n        cpositions.push(cpos)\n        dpositions.push(dpos)\n        totalSize += chunks[i].length\n        break\n      }\n      totalSize += chunks[i].length\n      i++\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    const buffer = Buffer.from(result)\n\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\nfunction nodeUnzip() {\n  throw new Error('nodeUnzip not implemented.')\n}\n\nexport { unzip, unzipChunk, unzipChunkSlice, unzip as pakoUnzip, nodeUnzip }\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\n// const COMPRESSED_POSITION = 0\nconst UNCOMPRESSED_POSITION = 1\n\nexport default class GziIndex {\n  filehandle: GenericFilehandle\n\n  index?: any\n\n  constructor({\n    filehandle,\n    path,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n  }\n\n  _readLongWithOverflow(buf: Buffer, offset = 0, unsigned = true) {\n    //@ts-ignore\n    const long = Long.fromBytesLE(buf.slice(offset, offset + 8), unsigned)\n    if (\n      long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n      long.lessThan(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new TypeError('integer overflow')\n    }\n\n    return long.toNumber()\n  }\n\n  _getIndex() {\n    if (!this.index) {\n      this.index = this._readIndex()\n    }\n    return this.index\n  }\n\n  async _readIndex() {\n    let buf = Buffer.allocUnsafe(8)\n    await this.filehandle.read(buf, 0, 8, 0)\n    const numEntries = this._readLongWithOverflow(buf, 0, true)\n    if (!numEntries) {\n      return [[0, 0]]\n    }\n\n    const entries = new Array(numEntries + 1)\n    entries[0] = [0, 0]\n\n    // TODO rewrite this to make an index-index that stays in memory\n    const bufSize = 8 * 2 * numEntries\n    if (bufSize > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError('integer overflow')\n    }\n    buf = Buffer.allocUnsafe(bufSize)\n    await this.filehandle.read(buf, 0, bufSize, 8)\n    for (let entryNumber = 0; entryNumber < numEntries; entryNumber += 1) {\n      const compressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16,\n      )\n      const uncompressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16 + 8,\n      )\n      entries[entryNumber + 1] = [compressedPosition, uncompressedPosition]\n    }\n\n    return entries\n  }\n\n  async getLastBlock() {\n    const entries = await this._getIndex()\n    if (!entries.length) {\n      return undefined\n    }\n    return entries[entries.length - 1]\n  }\n\n  async getRelevantBlocksForRead(length: number, position: number) {\n    const endPosition = position + length\n    if (length === 0) {\n      return []\n    }\n    const entries = await this._getIndex()\n    const relevant = []\n\n    // binary search to find the block that the\n    // read starts in and extend forward from that\n    const compare = (entry: any, nextEntry: any) => {\n      const uncompressedPosition = entry[UNCOMPRESSED_POSITION]\n      const nextUncompressedPosition = nextEntry\n        ? nextEntry[UNCOMPRESSED_POSITION]\n        : Infinity\n      // block overlaps read start\n      if (\n        uncompressedPosition <= position &&\n        nextUncompressedPosition > position\n      ) {\n        return 0\n        // block is before read start\n      }\n      if (uncompressedPosition < position) {\n        return -1\n      }\n      // block is after read start\n      return 1\n    }\n\n    let lowerBound = 0\n    let upperBound = entries.length - 1\n    let searchPosition = Math.floor(entries.length / 2)\n\n    let comparison = compare(\n      entries[searchPosition],\n      entries[searchPosition + 1],\n    )\n    while (comparison !== 0) {\n      if (comparison > 0) {\n        upperBound = searchPosition - 1\n      } else if (comparison < 0) {\n        lowerBound = searchPosition + 1\n      }\n      searchPosition = Math.ceil((upperBound - lowerBound) / 2) + lowerBound\n      comparison = compare(entries[searchPosition], entries[searchPosition + 1])\n    }\n\n    // here's where we read forward\n    relevant.push(entries[searchPosition])\n    let i = searchPosition + 1\n    for (; i < entries.length; i += 1) {\n      relevant.push(entries[i])\n      if (entries[i][UNCOMPRESSED_POSITION] >= endPosition) {\n        break\n      }\n    }\n    if (relevant[relevant.length - 1][UNCOMPRESSED_POSITION] < endPosition) {\n      relevant.push([])\n    }\n    return relevant\n  }\n}\n","import { Buffer } from 'buffer'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\n// locals\nimport { unzip } from './unzip'\nimport GziIndex from './gziIndex'\n\nexport default class BgzFilehandle {\n  filehandle: GenericFilehandle\n  gzi: GziIndex\n\n  constructor({\n    filehandle,\n    path,\n    gziFilehandle,\n    gziPath,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n    gziFilehandle?: GenericFilehandle\n    gziPath?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n\n    if (!gziFilehandle && !gziPath && !path) {\n      throw new TypeError('either gziFilehandle or gziPath must be defined')\n    }\n\n    this.gzi = new GziIndex({\n      filehandle: gziFilehandle,\n      path: !gziFilehandle && !gziPath && path ? gziPath : `${path}.gzi`,\n    })\n  }\n\n  async stat() {\n    const compressedStat = await this.filehandle.stat()\n    return Object.assign(compressedStat, {\n      size: await this.getUncompressedFileSize(),\n      blocks: undefined,\n      blksize: undefined,\n    })\n  }\n\n  async getUncompressedFileSize() {\n    // read the last block's ISIZE (see gzip RFC),\n    // and add it to its uncompressedPosition\n    const [, uncompressedPosition] = await this.gzi.getLastBlock()\n\n    const { size } = await this.filehandle.stat()\n\n    const buf = Buffer.allocUnsafe(4)\n    // note: there should be a 28-byte EOF marker (an empty block) at\n    // the end of the file, so we skip backward past that\n    const { bytesRead } = await this.filehandle.read(buf, 0, 4, size - 28 - 4)\n    if (bytesRead !== 4) {\n      throw new Error('read error')\n    }\n    const lastBlockUncompressedSize = buf.readUInt32LE(0)\n    return uncompressedPosition + lastBlockUncompressedSize\n  }\n\n  async _readAndUncompressBlock(\n    blockBuffer: Buffer,\n    [compressedPosition]: [number],\n    [nextCompressedPosition]: [number],\n  ) {\n    let next = nextCompressedPosition\n    if (!next) {\n      next = (await this.filehandle.stat()).size\n    }\n\n    // read the compressed data into the block buffer\n    const blockCompressedLength = next - compressedPosition\n\n    await this.filehandle.read(\n      blockBuffer,\n      0,\n      blockCompressedLength,\n      compressedPosition,\n    )\n\n    // uncompress it\n    const unzippedBuffer = await unzip(\n      blockBuffer.slice(0, blockCompressedLength),\n    )\n\n    return unzippedBuffer as Buffer\n  }\n\n  async read(buf: Buffer, offset: number, length: number, position: number) {\n    // get the block positions for this read\n    const blockPositions = await this.gzi.getRelevantBlocksForRead(\n      length,\n      position,\n    )\n    const blockBuffer = Buffer.allocUnsafe(32768 * 2)\n    // uncompress the blocks and read from them one at a time to keep memory usage down\n    let destinationOffset = offset\n    let bytesRead = 0\n    for (\n      let blockNum = 0;\n      blockNum < blockPositions.length - 1;\n      blockNum += 1\n    ) {\n      // eslint-disable-next-line no-await-in-loop\n      const uncompressedBuffer = await this._readAndUncompressBlock(\n        blockBuffer,\n        blockPositions[blockNum],\n        blockPositions[blockNum + 1],\n      )\n      const [, uncompressedPosition] = blockPositions[blockNum]\n      const sourceOffset =\n        uncompressedPosition >= position ? 0 : position - uncompressedPosition\n      const sourceEnd =\n        Math.min(\n          position + length,\n          uncompressedPosition + uncompressedBuffer.length,\n        ) - uncompressedPosition\n      if (sourceOffset >= 0 && sourceOffset < uncompressedBuffer.length) {\n        uncompressedBuffer.copy(buf, destinationOffset, sourceOffset, sourceEnd)\n        destinationOffset += sourceEnd - sourceOffset\n        bytesRead += sourceEnd - sourceOffset\n      }\n    }\n\n    return { bytesRead, buffer: buf }\n  }\n}\n"],"names":["MCScanAnchorsAdapter","BaseFeatureDataAdapter","setup","opts","this","setupP","setupPre","catch","e","undefined","assemblyNames","getConf","pm","pluginManager","bed1","openLocation","bed2","mcscan","bed1text","bed2text","mcscantext","Promise","all","map","r","readFile","bed1Map","parseBed","bed2Map","feats","split","filter","f","line","index","name1","name2","score","r1","get","r2","Error","hasDataForRefName","getRefNames","getFeatures","region","ObservableCreate","async","indexOf","assemblyName","flip","forEach","rowNum","f1","f2","refName","doesIntersect2","start","end","observer","next","SimpleFeature","uniqueId","syntenyId","strand","mate","complete","freeResources","isGzip","buf","text","Map","startsWith","name","file","buffer","TextDecoder","fatal","decode","unzip","zip","a","b","i","decoder","parseLineByLine","cb","blockStart","entries","length","n","slice","toString","trim","push","inputData","strm","pos","chunks","inflator","totalSize","remainingInput","subarray","Inflate","Z_SYNC_FLUSH","err","msg","next_in","result","avail_in","Uint8Array","offset","set","Buffer","from","match","unzipChunkSlice","chunk","minv","maxv","cpos","blockPosition","dpos","dataPosition","cpositions","dpositions","len","origCpos","GziIndex","constructor","filehandle","path","TypeError","_readLongWithOverflow","unsigned","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","toNumber","_getIndex","_readIndex","allocUnsafe","read","numEntries","Array","bufSize","entryNumber","compressedPosition","uncompressedPosition","getLastBlock","getRelevantBlocksForRead","position","endPosition","relevant","compare","entry","nextEntry","nextUncompressedPosition","Infinity","lowerBound","upperBound","searchPosition","Math","floor","comparison","ceil","BgzFilehandle","gziFilehandle","gziPath","gzi","stat","compressedStat","Object","assign","size","getUncompressedFileSize","blocks","blksize","bytesRead","readUInt32LE","_readAndUncompressBlock","blockBuffer","nextCompressedPosition","blockCompressedLength","blockPositions","destinationOffset","blockNum","uncompressedBuffer","sourceOffset","sourceEnd","min","copy"],"sourceRoot":""}