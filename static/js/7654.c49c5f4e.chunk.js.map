{"version":3,"file":"static/js/7654.c49c5f4e.chunk.js","mappings":"6SAOO,SAASA,EAAOC,GACrB,OAAkB,KAAXA,EAAI,IAAwB,MAAXA,EAAI,IAAyB,IAAXA,EAAI,EAChD,CAAC,IAEoBC,EAAe,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CA0BM,OA1BNC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,UAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAClC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAnB,EAAAoB,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE8C,GADtCP,EAAKQ,KAAKC,cAEA,MADVR,EAAMO,KAAKE,QAAQ,qBACjBC,KAA0B,6BAAZV,EAAIU,IAAkC,CAAAN,EAAAE,KAAA,eAAAF,EAAAO,OAAA,SACnD,IAAE,cAAAP,EAAAE,KAAA,GAEUM,EAAAA,EAAAA,cAAaZ,EAAKD,GAAIc,WAAU,OAAzC,IACAhC,EADNoB,EAAMG,EAAAU,MACc,CAAAV,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,IAASS,EAAAA,EAAAA,OAAMd,GAAO,QAAAG,EAAAY,GAAAZ,EAAAU,KAAAV,EAAAE,KAAA,iBAAAF,EAAAY,GAAGf,EAAM,QACQ,OAD3DnB,EAAGsB,EAAAY,GACHd,EAAO,IAAIe,YAAY,OAAQ,CAAEC,OAAO,IAAQC,OAAOrC,GAAIsB,EAAAO,OAAA,SAC1DT,EACJkB,MAAM,cACNC,QAAO,SAAAC,GAAC,QAAMA,EAAEC,MAAM,IACtBC,KAAI,SAACC,EAAMC,GACV,IAAAC,EAA0CF,EAAKL,MAAM,MAAKQ,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAnDG,EAAOF,EAAA,GAAEG,EAAKH,EAAA,GAAEI,EAAGJ,EAAA,GAAEK,EAAIL,EAAA,GAAEM,EAAIN,EAAA,GACtC,OAAO,IAAIO,EAAAA,cAAc,CACvBC,SAAS,GAADC,OAAKX,GACbI,QAAAA,EACAC,OAAQA,EACRC,KAAMA,EACNC,KAAAA,EACAC,KAAAA,GAEJ,KAAE,yBAAA9B,EAAAkC,OAAA,GAAAxC,EAAA,UACL,yBAAAJ,EAAAL,MAAA,KAAAC,UAAA,EAxBiC,IAwBjC,CAAAE,IAAA,gBAAAC,MAED,WAAuC,KAACV,CAAA,CA1BN,C,QAASwD,Y","sources":["../../../packages/core/data_adapters/CytobandAdapter/CytobandAdapter.ts"],"sourcesContent":["import { unzip } from '@gmod/bgzf-filehandle'\n\n// locals\nimport { SimpleFeature } from '../../util'\nimport { openLocation } from '../../util/io'\nimport { BaseAdapter } from '../BaseAdapter'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class CytobandAdapter extends BaseAdapter {\n  async getData() {\n    const pm = this.pluginManager\n    const loc = this.getConf('cytobandLocation')\n    if (loc.uri === '' || loc.uri === '/path/to/cytoband.txt.gz') {\n      return []\n    }\n    const buffer = await openLocation(loc, pm).readFile()\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f.trim())\n      .map((line, i) => {\n        const [refName, start, end, name, type] = line.split('\\t')\n        return new SimpleFeature({\n          uniqueId: `${i}`,\n          refName,\n          start: +start,\n          end: +end,\n          name,\n          type,\n        })\n      })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["isGzip","buf","CytobandAdapter","_BaseAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pm","loc","buffer","text","wrap","_context","prev","next","this","pluginManager","getConf","uri","abrupt","openLocation","readFile","sent","unzip","t0","TextDecoder","fatal","decode","split","filter","f","trim","map","line","i","_line$split","_line$split2","_slicedToArray","refName","start","end","name","type","SimpleFeature","uniqueId","concat","stop","BaseAdapter"],"sourceRoot":""}