{"version":3,"sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/util.ts"],"names":["isUCSC","f","get","BigBedAdapter","cached","opts","bigbed","BigBed","filehandle","openLocation","readConfObject","this","config","pluginManager","getHeader","header","parser","BED","autoSql","configurePre","catch","e","undefined","configure","Object","keys","refsByName","a","version","fileType","fields","rest","fromEntries","map","name","comment","region","refName","start","end","signal","ObservableCreate","observer","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","Error","chromStart","chromEnd","chrom","SimpleFeature","id","ucscProcessedTranscript","subscribe","error","BaseFeatureDataAdapter","feature","children","thickStart","thickEnd","blocks","filter","child","sort","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag"],"mappings":"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","file":"static/js/39.8b979bba.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ucscProcessedTranscript } from '../util'\n\nfunction isUCSC(f: Feature) {\n  return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0\n}\n\ninterface BEDFeature {\n  chrom: string\n  chromStart: number\n  chromEnd: number\n  [key: string]: any\n}\n\ninterface Parser {\n  parseLine: (line: string, opts: { uniqueId: string | number }) => BEDFeature\n  autoSql: { fields: { name: string; comment: string }[] }\n}\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cached?: Promise<{ bigbed: BigBed; header: any; parser: Parser }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const bigbed = new BigBed({\n      filehandle: openLocation(\n        readConfObject(this.config, 'bigBedLocation'),\n        this.pluginManager,\n      ),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({ autoSql: header.autoSql }) as Parser\n    return { bigbed, header, parser }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cached) {\n      this.cached = this.configurePre(opts).catch(e => {\n        this.cached = undefined\n        throw e\n      })\n    }\n    return this.cached\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...rest } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql: { ...rest },\n      fields: Object.fromEntries(\n        fields.map(({ name, comment }) => [name, comment]),\n      ),\n    }\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    const { refName, start, end } = region\n    const { signal } = opts\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { parser, bigbed } = await this.configure(opts)\n        const ob = await bigbed.getFeatureStream(refName, start, end, {\n          signal,\n          basesPerSpan: end - start,\n        })\n        ob.pipe(\n          mergeAll(),\n          map(r => {\n            const data = parser.parseLine(\n              `${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`,\n              {\n                uniqueId: r.uniqueId as string,\n              },\n            )\n\n            const { blockCount, blockSizes, blockStarts, chromStarts } = data\n            if (blockCount) {\n              const starts = chromStarts || blockStarts || []\n              const sizes = blockSizes\n              const blocksOffset = r.start\n              data.subfeatures = []\n\n              for (let b = 0; b < blockCount; b += 1) {\n                const bmin = (starts[b] || 0) + blocksOffset\n                const bmax = bmin + (sizes[b] || 0)\n                data.subfeatures.push({\n                  uniqueId: `${r.uniqueId}-${b}`,\n                  start: bmin,\n                  end: bmax,\n                  type: 'block',\n                })\n              }\n            }\n            if (r.uniqueId === undefined) {\n              throw new Error('invalid bbi feature')\n            }\n            const { chromStart, chromEnd, chrom, ...rest } = data\n\n            const f = new SimpleFeature({\n              id: `${this.id}-${r.uniqueId}`,\n              data: {\n                ...rest,\n                start: r.start,\n                end: r.end,\n                refName,\n              },\n            })\n\n            // collection of heuristics for suggesting that this feature\n            // should be converted to a gene, CNV bigbed has many gene like\n            // features including thickStart and blockCount but no strand\n            return isUCSC(f) ? ucscProcessedTranscript(f) : f\n          }),\n        ).subscribe(observer)\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newData: Record<string, any> = {}\n  feature.tags().forEach(tag => {\n    newData[tag] = feature.get(tag)\n  })\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  const newFeature = new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n  return newFeature\n}\n"],"sourceRoot":""}