{"version":3,"file":"static/js/4459.de8dbc45.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/SNPCoverageAdapter/generateCoverageBins.ts","../../../plugins/alignments/src/SNPCoverageAdapter/SNPCoverageAdapter.ts"],"sourcesContent":["import { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { getTag, getTagAlt, shouldFetchReferenceSequence } from '../util'\nimport {\n  parseCigar,\n  getNextRefPos,\n  getModificationPositions,\n  getMethBins,\n  Mismatch,\n} from '../MismatchParser'\nimport { doesIntersect2 } from '@jbrowse/core/util'\nimport { Bin, SkipMap } from './util'\n\nfunction mismatchLen(mismatch: Mismatch) {\n  return !isInterbase(mismatch.type) ? mismatch.length : 1\n}\n\nfunction isInterbase(type: string) {\n  return type === 'softclip' || type === 'hardclip' || type === 'insertion'\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction inc(bin: any, strand: number, type: string, field: string) {\n  let thisBin = bin[type][field]\n  if (thisBin === undefined) {\n    thisBin = bin[type][field] = {\n      total: 0,\n      '-1': 0,\n      '0': 0,\n      '1': 0,\n    }\n  }\n  thisBin.total++\n  thisBin[strand]++\n}\n\nexport default async function generateCoverageBins(\n  features: Feature[],\n  region: Region,\n  opts: { bpPerPx?: number; colorBy?: { type: string; tag?: string } },\n  fetchSequence: (arg: Region) => Promise<string>,\n) {\n  const { colorBy } = opts\n  const extendedRegion = {\n    ...region,\n    start: Math.max(0, region.start - 1),\n    end: region.end + 1,\n  }\n  const binMax = Math.ceil(extendedRegion.end - extendedRegion.start)\n  const skipmap = {} as SkipMap\n  const regionSequence =\n    features.length && shouldFetchReferenceSequence(opts.colorBy?.type)\n      ? await fetchSequence(region)\n      : undefined\n\n  const bins = [] as Bin[]\n\n  for (const feature of features) {\n    const fstart = feature.get('start')\n    const fend = feature.get('end')\n    const fstrand = feature.get('strand') as -1 | 0 | 1\n    const mismatches = (feature.get('mismatches') as Mismatch[]) || []\n\n    for (let j = fstart; j < fend + 1; j++) {\n      const i = j - region.start\n      if (i >= 0 && i < binMax) {\n        if (bins[i] === undefined) {\n          bins[i] = {\n            total: 0,\n            all: 0,\n            ref: 0,\n            '-1': 0,\n            '0': 0,\n            '1': 0,\n            lowqual: {},\n            cov: {},\n            delskips: {},\n            noncov: {},\n          }\n        }\n        if (j !== fend) {\n          bins[i].total++\n          bins[i].all++\n          bins[i].ref++\n          bins[i][fstrand]++\n        }\n      }\n    }\n\n    if (colorBy?.type === 'modifications') {\n      const seq = feature.get('seq') as string | undefined\n      const mm = (getTagAlt(feature, 'MM', 'Mm') as string) || ''\n      const ops = parseCigar(feature.get('CIGAR'))\n      const fend = feature.get('end')\n      if (seq) {\n        const modifications = getModificationPositions(mm, seq, fstrand)\n        for (const { type, positions } of modifications) {\n          const mod = `mod_${type}`\n          for (const pos of getNextRefPos(ops, positions)) {\n            const epos = pos + fstart - region.start\n            if (epos >= 0 && epos < bins.length && pos + fstart < fend) {\n              if (bins[epos] === undefined) {\n                bins[epos] = {\n                  total: 0,\n                  all: 0,\n                  ref: 0,\n                  '-1': 0,\n                  '0': 0,\n                  '1': 0,\n                  lowqual: {},\n                  cov: {},\n                  delskips: {},\n                  noncov: {},\n                }\n              }\n              const bin = bins[epos]\n              if (bin) {\n                inc(bin, fstrand, 'cov', mod)\n              } else {\n                console.warn(\n                  'Undefined position in modifications snpcoverage encountered',\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (colorBy?.type === 'methylation') {\n      if (!regionSequence) {\n        throw new Error(\n          'no region sequence detected, need sequenceAdapter configuration',\n        )\n      }\n      const seq = feature.get('seq') as string | undefined\n      if (!seq) {\n        continue\n      }\n      const { methBins, methProbs } = getMethBins(feature)\n      const dels = mismatches.filter(f => f.type === 'deletion')\n\n      // methylation based coloring takes into account both reference sequence\n      // CpG detection and reads\n      for (let i = 0; i < fend - fstart; i++) {\n        const j = i + fstart\n        const l1 = regionSequence[j - region.start + 1]?.toLowerCase()\n        const l2 = regionSequence[j - region.start + 2]?.toLowerCase()\n        if (l1 === 'c' && l2 === 'g') {\n          const bin0 = bins[j - region.start]\n          const bin1 = bins[j - region.start + 1]\n          const b0 = methBins[i]\n          const b1 = methBins[i + 1]\n          const p0 = methProbs[i]\n          const p1 = methProbs[i + 1]\n\n          // color\n          if (\n            (b0 && (p0 !== undefined ? p0 > 0.5 : true)) ||\n            (b1 && (p1 !== undefined ? p1 > 0.5 : true))\n          ) {\n            if (bin0) {\n              inc(bin0, fstrand, 'cov', 'meth')\n              bin0.ref--\n              bin0[fstrand]--\n            }\n            if (bin1) {\n              inc(bin1, fstrand, 'cov', 'meth')\n              bin1.ref--\n              bin1[fstrand]--\n            }\n          } else {\n            if (bin0) {\n              if (\n                !dels?.some(d =>\n                  doesIntersect2(\n                    j,\n                    j + 1,\n                    d.start + fstart,\n                    d.start + fstart + d.length,\n                  ),\n                )\n              ) {\n                inc(bin0, fstrand, 'cov', 'unmeth')\n                bin0.ref--\n                bin0[fstrand]\n              }\n            }\n            if (bin1) {\n              if (\n                !dels?.some(d =>\n                  doesIntersect2(\n                    j + 1,\n                    j + 2,\n                    d.start + fstart,\n                    d.start + fstart + d.length,\n                  ),\n                )\n              ) {\n                inc(bin1, fstrand, 'cov', 'unmeth')\n                bin1.ref--\n                bin1[fstrand]--\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // normal SNP based coloring\n    const colorSNPs =\n      colorBy?.type !== 'modifications' && colorBy?.type !== 'methylation'\n\n    for (const mismatch of mismatches) {\n      const mstart = fstart + mismatch.start\n      const mlen = mismatchLen(mismatch)\n      const mend = mstart + mlen\n      for (let j = mstart; j < mstart + mlen; j++) {\n        const epos = j - region.start\n        if (epos >= 0 && epos < bins.length) {\n          const bin = bins[epos]\n          const { base, type } = mismatch\n          const interbase = isInterbase(type)\n          if (!interbase) {\n            bin.ref--\n            bin[fstrand]--\n          } else {\n            inc(bin, fstrand, 'noncov', type)\n          }\n\n          if (type === 'deletion' || type === 'skip') {\n            inc(bin, fstrand, 'delskips', type)\n            bin.total--\n          } else if (!interbase && colorSNPs) {\n            inc(bin, fstrand, 'cov', base)\n            bin.refbase = mismatch.altbase\n          }\n        }\n      }\n\n      if (mismatch.type === 'skip') {\n        const hash = `${mstart}_${mend}_${fstrand}`\n        if (skipmap[hash] === undefined) {\n          skipmap[hash] = {\n            feature: feature,\n            start: mstart,\n            end: mend,\n            strand: fstrand,\n            xs: getTag(feature, 'XS') || getTag(feature, 'TS'),\n            score: 0,\n          }\n        }\n        skipmap[hash].score++\n      }\n    }\n  }\n\n  return { bins, skipmap }\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { toArray } from 'rxjs/operators'\nimport { firstValueFrom } from 'rxjs'\n\n// locals\nimport generateCoverageBins from './generateCoverageBins'\nimport { fetchSequence } from '../util'\n\nexport default class SNPCoverageAdapter extends BaseFeatureDataAdapter {\n  protected async configure() {\n    const subadapterConfig = this.getConf('subadapter')\n    const sequenceConf = subadapterConfig.sequenceAdapter\n    const dataAdapter = await this.getSubAdapter?.(subadapterConfig)\n\n    const sequenceAdapter = sequenceConf\n      ? await this.getSubAdapter?.(sequenceConf)\n      : undefined\n\n    if (!dataAdapter) {\n      throw new Error('Failed to get subadapter')\n    }\n\n    return {\n      subadapter: dataAdapter.dataAdapter as BaseFeatureDataAdapter,\n      sequenceAdapter: sequenceAdapter?.dataAdapter as\n        | BaseFeatureDataAdapter\n        | undefined,\n    }\n  }\n\n  async fetchSequence(region: Region) {\n    const { sequenceAdapter } = await this.configure()\n    if (!sequenceAdapter) {\n      return undefined\n    }\n\n    return fetchSequence(region, sequenceAdapter)\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { subadapter } = await this.configure()\n      const feats = await firstValueFrom(\n        subadapter.getFeatures(region, opts).pipe(toArray()),\n      )\n\n      const { bins, skipmap } = await generateCoverageBins(\n        feats,\n        region,\n        opts,\n        arg => this.fetchSequence(arg),\n      )\n\n      bins.forEach((bin, index) => {\n        const start = region.start + index\n        observer.next(\n          new SimpleFeature({\n            id: `${this.id}-${start}`,\n            data: {\n              score: bin.total,\n              snpinfo: bin,\n              start,\n              end: start + 1,\n              refName: region.refName,\n            },\n          }),\n        )\n      })\n\n      // make fake features from the coverage\n      Object.entries(skipmap).forEach(([key, skip]) => {\n        observer.next(\n          new SimpleFeature({\n            id: key,\n            data: {\n              type: 'skip',\n              start: skip.start,\n              end: skip.end,\n              strand: skip.strand,\n              score: skip.score,\n              xs: skip.xs,\n            },\n          }),\n        )\n      })\n\n      observer.complete()\n    }, opts.signal)\n  }\n\n  async getMultiRegionFeatureDensityStats(\n    regions: Region[],\n    opts?: BaseOptions,\n  ) {\n    const { subadapter } = await this.configure()\n    return subadapter.getMultiRegionFeatureDensityStats(regions, opts)\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    const { subadapter } = await this.configure()\n    return subadapter.getRefNames(opts)\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["mismatchLen","mismatch","isInterbase","type","length","inc","bin","strand","field","thisBin","undefined","total","generateCoverageBins","_x","_x2","_x3","_x4","_generateCoverageBins","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","features","region","opts","fetchSequence","_opts$colorBy","colorBy","extendedRegion","binMax","skipmap","regionSequence","bins","_iterator","_step","_loop","wrap","_context3","prev","next","_objectSpread","start","Math","max","end","ceil","shouldFetchReferenceSequence","t0","sent","_createForOfIteratorHelper","feature","fstart","fend","fstrand","mismatches","j","i","seq","mm","ops","_fend","modifications","_iterator2","_step2","_step2$value","positions","mod","_iterator3","_step3","pos","epos","_getMethBins","methBins","methProbs","dels","_loop2","_i","colorSNPs","_iterator4","_step4","mstart","mlen","mend","_j","_epos","_bin","base","_type","interbase","hash","_context2","value","get","all","ref","lowqual","cov","delskips","noncov","getTagAlt","parseCigar","getModificationPositions","s","n","done","concat","getNextRefPos","console","warn","err","e","f","Error","abrupt","getMethBins","filter","_regionSequence","_regionSequence2","l1","l2","bin0","bin1","b0","b1","p0","p1","_context","toLowerCase","some","d","doesIntersect2","stop","delegateYield","refbase","altbase","xs","getTag","score","t1","t2","finish","SNPCoverageAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_classCallCheck","_createClass","key","_configure","_this$getSubAdapter","_this$getSubAdapter2","subadapterConfig","sequenceConf","dataAdapter","sequenceAdapter","this","getConf","getSubAdapter","call","subadapter","_fetchSequence2","_callee2","_yield$this$configure","configure","_this","ObservableCreate","_ref","_callee3","observer","_yield$_this$configur","feats","_yield$generateCovera","firstValueFrom","getFeatures","pipe","toArray","arg","forEach","index","SimpleFeature","id","data","snpinfo","refName","Object","entries","_ref2","_ref3","_slicedToArray","skip","complete","signal","_getMultiRegionFeatureDensityStats","_callee4","regions","_yield$this$configure2","_context4","getMultiRegionFeatureDensityStats","_getRefNames","_callee5","_yield$this$configure3","_args5","_context5","getRefNames","BaseFeatureDataAdapter"],"sourceRoot":""}