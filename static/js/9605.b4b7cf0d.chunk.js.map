{"version":3,"file":"static/js/9605.b4b7cf0d.chunk.js","mappings":"kTAeqBA,EAAa,qJAElB,OAFkB,oCAExBC,YAAM,IA6FiB,OA7FjB,yEAQd,WAAuBC,GAAkB,kFAOrC,OAN8C,GAAVA,GAAQ,CAAC,GAAvCC,eAAAA,OAAc,MAAG,WAAO,EAAC,EAC3BC,EAAS,IAAIC,EAAAA,EAAO,CACxBC,YAAYC,EAAAA,EAAAA,cACVC,KAAKC,QAAQ,kBACbD,KAAKE,iBAEP,UACmBC,EAAAA,EAAAA,cACnB,4BACAR,GACA,kBAAMC,EAAOQ,UAAUV,EAAK,IAC7B,OAJW,OAANW,EAAM,yBAKL,CAAET,OAAAA,EAAQS,OAAAA,IAAQ,gDAC1B,mDAtBa,IAsBb,4DAED,WAAYX,GAAkB,iFAM3B,OALIM,KAAKP,SACRO,KAAKP,OAASO,KAAKM,SAASZ,GAAMa,OAAM,SAAAC,GAEtC,MADA,EAAKf,YAASgB,EACRD,CACR,KACD,kBACMR,KAAKP,QAAM,gDACnB,mDAVA,IAUA,kEAED,WAAyBC,GAAkB,8FAChBM,KAAKU,MAAMhB,GAAK,OAA3B,OAA2B,SAAjCW,EAAM,EAANA,OAAM,kBACPM,OAAOC,KAAKP,EAAOQ,aAAW,gDACtC,mDALA,IAKA,kEAED,WAAyBC,GAAa,gGACXd,KAAKU,QAAO,OAAvB,OAAuB,SAA7BL,EAAM,EAANA,OAAM,kBACmB,QADnB,EACPA,EAAOU,aAAaD,UAAM,aAA1B,EAA4BE,MAAI,gDACxC,mDALA,IAKA,qEAED,WAA4BtB,GAAkB,8FACnBM,KAAKU,MAAMhB,GAAK,OAA3B,OAA2B,SAAjCW,EAAM,EAANA,OAAM,mBACPY,EAAAA,EAAAA,IAAaZ,EAAOa,eAAwC,gDACpE,mDALA,IAKA,yBAED,SAAmBC,GAA2C,IAAD,OAA1BzB,EAAmB,uDAAG,CAAC,EAChD0B,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IACxB,EAKI5B,EAJF6B,QAAAA,OAAO,MAAG,EAAC,EACXC,EAGE9B,EAHF8B,OAAO,EAGL9B,EAFF+B,WAAAA,OAAU,MAAG,EAAC,IAEZ/B,EADFC,eAAAA,OAAc,MAAG,WAAO,EAAC,EAE3B,OAAO+B,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,sFAER,OADrChC,EAAe,2BACTiC,EAAS,EAAK3B,QAAQ,UAAS,SACZ,EAAKS,MAAMhB,GAAK,OAA3B,OAA2B,SAAjCE,EAAM,EAANA,OAAM,SACMA,EAAOiC,YAAYT,EAASC,EAAOC,GAAI,kBACtD5B,GAAI,IACPoC,aAAcP,EAAUE,KACxB,OAHIM,EAAK,oHAMHC,EAAOD,EAAME,GACfL,IAEFI,EAAKJ,OAASA,GAEVM,EAAQ,UAAMN,EAAM,YAAIT,EAAOC,QAAO,YAAIY,EAAKX,MAAK,YAAIW,EAAKV,KAEnEU,EAAKZ,QAAUA,EACfY,EAAKE,SAAWA,EAChBP,EAASQ,KAAK,CAEZC,IAAK,SAACC,GAAW,OAAML,EAAiCK,EAAI,EAC5DC,GAAI,kBAAMJ,CAAQ,EAElBK,OAAQ,kBAAMP,CAAI,IAClB,0CAhBKC,EAAI,EAAE,KAAD,QAAEA,EAAIF,EAAMS,QAAM,6DAAEP,IAAG,wBAkBrCN,EAASc,WAAU,4CACpB,mDA5BsB,GA4BpBjB,EACL,GAEA,2EACA,WAA2BkB,GAAkB,+FACpC,CAAEC,eAAgB,IAAG,2CAC7B,mDAHD,IAGC,2BAED,WAA8B,KAAC,EA/FC,CAASC,EAAAA,wBAAtBpD,EAILqD,aAAe,CAC3B,gBACA,gBACA,iB","sources":["../../../plugins/wiggle/src/BigWigAdapter/BigWigAdapter.ts"],"sourcesContent":["import { BigWig } from '@gmod/bbi'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { updateStatus, Feature } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { rectifyStats, UnrectifiedFeatureStats } from '@jbrowse/core/util/stats'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nexport default class BigWigAdapter extends BaseFeatureDataAdapter {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private setupP?: Promise<{ bigwig: BigWig; header: any }>\n\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const bigwig = new BigWig({\n      filehandle: openLocation(\n        this.getConf('bigWigLocation'),\n        this.pluginManager,\n      ),\n    })\n    const header = await updateStatus(\n      'Downloading bigwig header',\n      statusCallback,\n      () => bigwig.getHeader(opts),\n    )\n    return { bigwig, header }\n  }\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.setup(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  public async refIdToName(refId: number) {\n    const { header } = await this.setup()\n    return header.refsByNumber[refId]?.name\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const { header } = await this.setup(opts)\n    return rectifyStats(header.totalSummary as UnrectifiedFeatureStats)\n  }\n\n  public getFeatures(region: Region, opts: WiggleOptions = {}) {\n    const { refName, start, end } = region\n    const {\n      bpPerPx = 0,\n      signal,\n      resolution = 1,\n      statusCallback = () => {},\n    } = opts\n    return ObservableCreate<Feature>(async observer => {\n      statusCallback('Downloading bigwig data')\n      const source = this.getConf('source')\n      const { bigwig } = await this.setup(opts)\n      const feats = await bigwig.getFeatures(refName, start, end, {\n        ...opts,\n        basesPerSpan: bpPerPx / resolution,\n      })\n\n      for (let i = 0; i < feats.length; i++) {\n        const data = feats[i]\n        if (source) {\n          // @ts-ignore\n          data.source = source\n        }\n        const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`\n        // @ts-ignore\n        data.refName = refName\n        data.uniqueId = uniqueId\n        observer.next({\n          // @ts-ignore\n          get: (str: string) => (data as Record<string, unknown>)[str],\n          id: () => uniqueId,\n          // @ts-ignore\n          toJSON: () => data,\n        })\n      }\n      observer.complete()\n    }, signal)\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async estimateRegionsStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["BigWigAdapter","setupP","opts","statusCallback","bigwig","BigWig","filehandle","openLocation","this","getConf","pluginManager","updateStatus","getHeader","header","setupPre","catch","e","undefined","setup","Object","keys","refsByName","refId","refsByNumber","name","rectifyStats","totalSummary","region","refName","start","end","bpPerPx","signal","resolution","ObservableCreate","observer","source","getFeatures","basesPerSpan","feats","data","i","uniqueId","next","get","str","id","toJSON","length","complete","_regions","featureDensity","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}