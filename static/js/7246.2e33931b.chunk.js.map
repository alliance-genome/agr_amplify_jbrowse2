{"version":3,"file":"static/js/7246.2e33931b.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { ucscProcessedTranscript } from '../util'\n\nfunction isUCSC(f: Feature) {\n  return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0\n}\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cached?: Promise<{ bigbed: BigBed; header: any; parser: BED }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const bigbed = new BigBed({\n      filehandle: openLocation(this.getConf('bigBedLocation'), pm),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({ autoSql: header.autoSql })\n    return { bigbed, header, parser }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cached) {\n      this.cached = this.configurePre(opts).catch(e => {\n        this.cached = undefined\n        throw e\n      })\n    }\n    return this.cached\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...rest } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql: { ...rest },\n      fields: Object.fromEntries(\n        fields.map(({ name, comment }) => [name, comment]),\n      ),\n    }\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    const { refName, start, end } = region\n    const { signal } = opts\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { parser, bigbed } = await this.configure(opts)\n        const ob = await bigbed.getFeatureStream(refName, start, end, {\n          signal,\n          basesPerSpan: end - start,\n        })\n        ob.pipe(\n          mergeAll(),\n          map(r => {\n            const data = parser.parseLine(\n              `${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`,\n              {\n                uniqueId: r.uniqueId as string,\n              },\n            )\n\n            const { blockCount, blockSizes, blockStarts, chromStarts } = data\n            if (blockCount) {\n              const starts = chromStarts || blockStarts || []\n              const sizes = blockSizes\n              const blocksOffset = r.start\n              data.subfeatures = []\n\n              for (let b = 0; b < blockCount; b += 1) {\n                const bmin = (starts[b] || 0) + blocksOffset\n                const bmax = bmin + (sizes[b] || 0)\n                data.subfeatures.push({\n                  uniqueId: `${r.uniqueId}-${b}`,\n                  start: bmin,\n                  end: bmax,\n                  type: 'block',\n                })\n              }\n            }\n            if (r.uniqueId === undefined) {\n              throw new Error('invalid bbi feature')\n            }\n            const { chromStart, chromEnd, chrom, ...rest } = data\n\n            const f = new SimpleFeature({\n              id: `${this.id}-${r.uniqueId}`,\n              data: {\n                ...rest,\n                start: r.start,\n                end: r.end,\n                refName,\n              },\n            })\n\n            // collection of heuristics for suggesting that this feature\n            // should be converted to a gene, CNV bigbed has many gene like\n            // features including thickStart and blockCount but no strand\n            return isUCSC(f) ? ucscProcessedTranscript(f) : f\n          }),\n        ).subscribe(observer)\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["isUCSC","f","get","BigBedAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","cached","_createClass","key","value","_configurePre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","pm","bigbed","header","parser","wrap","_context","prev","next","this","pluginManager","BigBed","filehandle","openLocation","getConf","getHeader","sent","BED","autoSql","abrupt","stop","_x","_configure","_callee2","_this2","_context2","configurePre","catch","e","undefined","_x2","_getRefNames","_callee3","_yield$this$configure","_context3","configure","Object","keys","refsByName","_x3","_getHeader","_callee4","_yield$this$configure2","version","fileType","_parser$autoSql","fields","rest","_context4","_objectWithoutProperties","_excluded","_objectSpread","fromEntries","map","_ref","name","comment","_x4","region","_this3","refName","start","end","signal","ObservableCreate","_ref2","_callee5","observer","_yield$_this3$configu","_context5","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","Error","chromStart","chromEnd","chrom","_excluded2","SimpleFeature","id","ucscProcessedTranscript","subscribe","t0","error","_x5","BaseFeatureDataAdapter","feature","children","thickStart","thickEnd","blocks","filter","child","sort","a","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag","featureData","line","colRef","colStart","colEnd","scoreColumn","names","l","split","colSame","i","defaultParser","score"],"sourceRoot":""}