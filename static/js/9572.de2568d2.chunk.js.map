{"version":3,"file":"static/js/9572.de2568d2.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["const decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\n/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(buffer: Buffer) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n\n  let blockStart = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const l = (decoder?.decode(b) || b.toString()).trim()\n    blockStart = n + 1\n    const l_tab = l.replaceAll(' ', '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return paf_chain2paf(buf)\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["decoder","TextDecoder","undefined","generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","paf_chain2paf","buffer","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","blockStart","length","n","indexOf","b","slice","l_vec","decode","toString","trim","replaceAll","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","isGzip","buf","ChainAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","loc","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","abrupt","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","_step","scoreMap","_iterator","_createForOfIteratorHelper","s","done","entry","quals","len","err","e","f","_step2","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","_iterator2","meanScore","_step3","min","_iterator3","_step4","_iterator4","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","line","_line$split","_line$split2","_toArray","fields","rest","field","r","_objectSpread","flipCigar","arr","i","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_this2","setupPre","catch","_callee2","pm","pafLocation","_context2","parseLineByLine","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","_objectWithoutProperties","_excluded","join","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","fatal","t1","t2","a","cb"],"sourceRoot":""}