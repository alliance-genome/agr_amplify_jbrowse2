{"version":3,"file":"static/js/1280.f38086ae.chunk.js","mappings":"0OAiEA,WAAeA,EAAAA,EAAAA,WAtDf,SAAuBC,GAIrB,IAAQC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACf,GAAsBC,EAAAA,EAAAA,UAAS,IAAG,eAA3BC,EAAG,KAAEC,EAAM,KACZC,EAAWF,EAAIG,MAAM,yBAE3B,OACE,SAAC,EAAAC,OAAM,CAACC,MAAI,EAACC,QAASR,EAAaS,MAAM,eAAc,UACrD,UAAC,IAAa,CAACC,MAAO,CAAEC,UAAW,UAAW,WAC5C,SAAC,IAAU,UAAC,6BACZ,SAAC,IAAU,CAACC,MAAM,gBAAe,SAAC,8IAKlC,SAAC,IAAS,CACRC,MAAOX,EACPY,SAAU,SAAAC,GAAK,OAAIZ,EAAOY,EAAMC,OAAOH,MAAM,EAC7CI,YAAY,iBACZC,WAAY,CACVC,UAAW,EACX,cAAe,wBAEjBC,MAAsB,IAAflB,EAAImB,SAAiBjB,EAC5BkB,WAA2B,IAAfpB,EAAImB,QAAiBjB,EAA+B,GAApB,kBAC5CmB,aAAa,MACb,cAAY,oBAEd,UAAC,IAAa,YACZ,SAAC,IAAM,CACLC,QAAQ,YACRZ,MAAM,UACNa,QAAS,WACP1B,EAAM2B,eAAe,CACnBC,KAAM,MACNzB,IAAAA,IAEFF,GACF,EACA4B,UAAWxB,EAAS,SACrB,YAGD,SAAC,IAAM,CAACoB,QAAQ,YAAYZ,MAAM,YAAYa,QAASzB,EAAY,SAAC,kBAO9E,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByTag.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\n\nfunction ColorByTagDlg(props: {\n  model: { setColorScheme: Function }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Color by tag\">\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <Typography>Enter tag to color by: </Typography>\n        <Typography color=\"textSecondary\">\n          Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case)\n          for minimap2 read strand, HP for haplotype, RG for read group, etc.\n        </Typography>\n\n        <TextField\n          value={tag}\n          onChange={event => setTag(event.target.value)}\n          placeholder=\"Enter tag name\"\n          inputProps={{\n            maxLength: 2,\n            'data-testid': 'color-tag-name-input',\n          }}\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          data-testid=\"color-tag-name\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              model.setColorScheme({\n                type: 'tag',\n                tag,\n              })\n              handleClose()\n            }}\n            disabled={!validTag}\n          >\n            Submit\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(ColorByTagDlg)\n"],"names":["observer","props","model","handleClose","useState","tag","setTag","validTag","match","Dialog","open","onClose","title","style","overflowX","color","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","variant","onClick","setColorScheme","type","disabled"],"sourceRoot":""}