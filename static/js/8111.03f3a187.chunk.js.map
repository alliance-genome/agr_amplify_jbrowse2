{"version":3,"file":"static/js/8111.03f3a187.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","arg","this","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","_step","scoreMap","_iterator","_createForOfIteratorHelper","s","n","done","entry","qname","tname","quals","len","push","extra","mappingQual","blockLen","err","e","f","_step2","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","_iterator2","meanScore","_step3","min","max","_iterator3","Math","_step4","_iterator4","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","line","_line$split","split","_line$split2","_toArray","qstart","qend","strand","tstart","tend","numMatches","fields","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","i","length","op","parseCigar","PAFAdapter","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_this2","wrap","_context","prev","next","setupPre","catch","undefined","abrupt","stop","_x","_setupPre","_callee2","pm","pafLocation","buffer","buf","_context2","pluginManager","openLocation","getConf","readFile","sent","isGzip","unzip","t0","parseLineByLine","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","TextDecoder","fatal","t1","t2","decode","a","decoder","cb","blockStart","toString","trim"],"sourceRoot":""}