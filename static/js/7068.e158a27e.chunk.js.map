{"version":3,"file":"static/js/7068.e158a27e.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedTabixAdapter/BedTabixAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { FileLocation, Region, Feature } from '@jbrowse/core/util'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { featureData } from '../util'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n  private parser: BED\n\n  protected bed: TabixIndexedFile\n\n  protected columnNames: string[]\n\n  protected scoreColumn: string\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const bedGzLoc = this.getConf('bedGzLocation') as FileLocation\n    const type = this.getConf(['index', 'indexType'])\n    const loc = this.getConf(['index', 'location'])\n    const autoSql = this.getConf('autoSql')\n    const pm = this.pluginManager\n\n    this.bed = new TabixIndexedFile({\n      filehandle: openLocation(bedGzLoc, pm),\n      csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n      tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    this.columnNames = this.getConf('columnNames')\n    this.scoreColumn = this.getConf('scoreColumn')\n    this.parser = new BED({ autoSql })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.bed.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    return this.bed.getHeader()\n  }\n\n  async getNames() {\n    if (this.columnNames.length) {\n      return this.columnNames\n    }\n    const header = await this.bed.getHeader()\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const meta = await this.bed.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      // colSame handles special case for tabix where a single column is both\n      // the start and end, this is assumed to be covering the base at this\n      // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n      const names = await this.getNames()\n      await this.bed.getLines(query.refName, query.start, query.end, {\n        lineCallback: (line, fileOffset) => {\n          observer.next(\n            featureData(\n              line,\n              colRef,\n              colStart,\n              colEnd,\n              this.scoreColumn,\n              this.parser,\n              `${this.id}-${fileOffset}`,\n              names,\n            ),\n          )\n        },\n        signal: opts.signal,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["BedTabixAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","config","getSubAdapter","pluginManager","_this","_classCallCheck","call","parser","bed","columnNames","scoreColumn","bedGzLoc","getConf","type","loc","autoSql","pm","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","Math","pow","BED","_createClass","key","value","_getRefNames","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_args","arguments","wrap","_context","prev","next","length","abrupt","this","getReferenceSequenceNames","stop","apply","_getHeader","_callee2","_context2","getHeader","_getNames","_callee3","header","defs","defline","_context3","sent","split","filter","f","at","includes","slice","map","trim","query","_this2","ObservableCreate","_ref","_callee4","observer","meta","columnNumbers","colRef","colStart","colEnd","names","_context4","getMetadata","ref","start","end","getNames","getLines","refName","lineCallback","line","fileOffset","featureData","concat","id","signal","complete","_x","BaseFeatureDataAdapter","capabilities","ucscProcessedTranscript","feature","children","thickStart","get","thickEnd","blocks","child","sort","a","b","newChildren","forEach","block","prime","push","leftPrime","rightPrime","newData","Object","fromEntries","tags","tag","subfeatures","uniqueId","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","data","l","colSame","fields","i","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score","_objectSpread"],"sourceRoot":""}