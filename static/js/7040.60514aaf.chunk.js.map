{"version":3,"file":"static/js/7040.60514aaf.chunk.js","mappings":"qUAmBE,WACEA,EACAC,EACAC,GACC,IAAD,mBACA,cAAMF,EAAQC,EAAeC,IATrBC,aAQR,IANQC,YAMR,EAEA,IAAMC,GAAqBC,EAAAA,EAAAA,gBAAeN,EAAQ,sBAClD,IAAKK,EACH,MAAM,IAAIE,MAAM,mCAElB,IAAMC,GAAOC,EAAAA,EAAAA,cACXJ,EACA,EAAKH,eARP,OAUA,EAAKE,OAASI,EAAKE,WACnB,EAAKP,QAAU,EAAKQ,KAAKH,GAXzB,EA8C6C,OAlC9C,+DAED,WAAmBA,GAAnB,yFACqBA,EAAKI,SAAS,QADnC,UACQC,EADR,OAEQV,EAAqC,GACtCU,EAAKC,OAHZ,sBAIU,IAAIP,MAAJ,8BAAiCC,EAAKE,aAJhD,cAMEG,EAAKE,MAAM,MAAMC,SAAQ,SAACC,GACxB,GAAIA,EAAKH,OAAQ,CACf,MAAuBG,EAAKF,MAAM,MAAlC,eAAOG,EAAP,KAAaJ,EAAb,KACAX,EAAQe,IAASJ,MATvB,kBAYSX,GAZT,8FAFC,IAED,2DAeA,oGACwBgB,KAAKhB,QAD7B,cACQA,EADR,yBAESiB,OAAOC,KAAKlB,GAASmB,KAAI,SAAAC,GAAO,MAAK,CAC1CA,QAAAA,EACAC,MAAO,EACPC,IAAKtB,EAAQoB,QALjB,kGAfA,IAeA,yBASA,WACE,MAAM,IAAIhB,MAAM,4BACjB,uBAED,WACE,MAAO,KACR,2BAED,gBAA+C,E,CAxDpBmB,EAAAA","sources":["../../../plugins/sequence/src/ChromSizesAdapter/ChromSizesAdapter.ts"],"sourcesContent":["import {\n  RegionsAdapter,\n  BaseAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Instance } from 'mobx-state-tree'\nimport MyConfigSchema from './configSchema'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class extends BaseAdapter implements RegionsAdapter {\n  // the map of refSeq to length\n  protected refSeqs: Promise<Record<string, number>>\n\n  protected source: string\n\n  public constructor(\n    config: Instance<typeof MyConfigSchema>,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const chromSizesLocation = readConfObject(config, 'chromSizesLocation')\n    if (!chromSizesLocation) {\n      throw new Error('must provide chromSizesLocation')\n    }\n    const file = openLocation(\n      chromSizesLocation as FileLocation,\n      this.pluginManager,\n    )\n    this.source = file.toString()\n    this.refSeqs = this.init(file)\n  }\n\n  private async init(file: GenericFilehandle) {\n    const data = await file.readFile('utf8')\n    const refSeqs: { [key: string]: number } = {}\n    if (!data.length) {\n      throw new Error(`Could not read file ${file.toString()}`)\n    }\n    data.split('\\n').forEach((line: string) => {\n      if (line.length) {\n        const [name, length] = line.split('\\t')\n        refSeqs[name] = +length\n      }\n    })\n    return refSeqs\n  }\n\n  public async getRegions() {\n    const refSeqs = await this.refSeqs\n    return Object.keys(refSeqs).map(refName => ({\n      refName,\n      start: 0,\n      end: refSeqs[refName],\n    }))\n  }\n\n  public getFeatures() {\n    throw new Error('sequence not available')\n  }\n\n  public getHeader() {\n    return {}\n  }\n\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["config","getSubAdapter","pluginManager","refSeqs","source","chromSizesLocation","readConfObject","Error","file","openLocation","toString","init","readFile","data","length","split","forEach","line","name","this","Object","keys","map","refName","start","end","BaseAdapter"],"sourceRoot":""}