{"version":3,"file":"static/js/6431.f61cbd39.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceBox.tsx","../../../packages/core/BaseFeatureWidget/SequencePanel.tsx"],"sourcesContent":["import React from 'react'\nimport { Feat, stitch } from './util'\n\n// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nconst proteinColor = 'rgb(220,160,220)'\nconst intronColor = undefined\nconst cdsColor = 'rgb(220,220,180)'\nconst updownstreamColor = 'rgba(250,200,200)'\nconst utrColor = 'rgb(200,240,240)'\nconst genomeColor = 'rgb(200,280,200)'\n\nexport function GeneCDS({ cds, sequence }: { cds: Feat[]; sequence: string }) {\n  return <span style={{ background: cdsColor }}>{stitch(cds, sequence)}</span>\n}\n\nexport function GeneProtein({\n  cds,\n  sequence,\n  codonTable,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: { [key: string]: string }\n}) {\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n\n  return <span style={{ background: proteinColor }}>{protein}</span>\n}\n\nexport function GenecDNA({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  includeIntrons,\n  collapseIntron,\n  intronBp,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  intronBp: number\n}) {\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  return (\n    <>\n      {upstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {upstream}\n        </span>\n      ) : null}\n\n      {chunks.map((chunk, idx) => {\n        const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n\n        return (\n          <React.Fragment key={JSON.stringify(chunk)}>\n            <span\n              style={{\n                background: chunk.type === 'CDS' ? cdsColor : utrColor,\n              }}\n            >\n              {sequence.slice(chunk.start, chunk.end)}\n            </span>\n            {includeIntrons && idx < chunks.length - 1 ? (\n              <span style={{ background: intronColor }}>\n                {collapseIntron && intron.length > intronBp * 2\n                  ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n                  : intron}\n              </span>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>{downstream}</span>\n      ) : null}\n    </>\n  )\n}\n\nexport function Genomic({\n  sequence,\n  upstream,\n  downstream,\n}: {\n  sequence: string\n  upstream?: string\n  downstream?: string\n}) {\n  return (\n    <>\n      {upstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {upstream}\n        </span>\n      ) : null}\n\n      <span\n        style={{\n          background: genomeColor,\n        }}\n      >\n        {sequence}\n      </span>\n\n      {downstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {downstream}\n        </span>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\n\nimport { defaultCodonTable, generateCodonTable, revcom } from '../util'\nimport {\n  ParentFeat,\n  SeqState,\n  calculateUTRs,\n  calculateUTRs2,\n  dedupe,\n  revlist,\n} from './util'\nimport { GenecDNA, GeneProtein, GeneCDS, Genomic } from './SequenceBox'\n\ninterface SeqPanelProps {\n  sequence: SeqState\n  feature: ParentFeat\n  mode: string\n  intronBp?: number\n}\nconst SeqPanel = React.forwardRef<HTMLDivElement, SeqPanelProps>(function (\n  props,\n  ref,\n) {\n  const { feature, mode, intronBp = 10 } = props\n  let {\n    sequence: { seq, upstream = '', downstream = '' },\n  } = props\n  const { subfeatures = [] } = feature\n\n  const children = subfeatures\n    .sort((a, b) => a.start - b.start)\n    .map(sub => ({\n      ...sub,\n      start: sub.start - feature.start,\n      end: sub.end - feature.start,\n    }))\n\n  // we filter duplicate entries in cds and exon lists duplicate entries may be\n  // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n  // probably worth ignoring here (produces broken protein translations if\n  // included)\n  //\n  // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n  // transcript ENST00000445597.6\n  //\n  // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n  let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n  let utr = dedupe(children.filter(sub => sub.type.match(/utr/i)))\n  let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n  if (!utr.length && cds.length && exons.length) {\n    utr = calculateUTRs(cds, exons)\n  }\n  if (!utr.length && cds.length && !exons.length) {\n    utr = calculateUTRs2(cds, {\n      start: 0,\n      end: feature.end - feature.start,\n      type: 'gene',\n    })\n  }\n\n  if (feature.strand === -1) {\n    // doing this in a single assignment is needed because downstream and\n    // upstream are swapped so this avoids a temp variable\n    ;[seq, upstream, downstream] = [\n      revcom(seq),\n      revcom(downstream),\n      revcom(upstream),\n    ]\n    cds = revlist(cds, seq.length)\n    exons = revlist(exons, seq.length)\n    utr = revlist(utr, seq.length)\n  }\n  const codonTable = generateCodonTable(defaultCodonTable)\n\n  return (\n    <div ref={ref} data-testid=\"sequence_panel\">\n      <div\n        style={\n          /* raw styles so that html copy works */\n          {\n            fontFamily: 'monospace',\n            wordWrap: 'break-word',\n            overflow: 'auto',\n            color: 'black',\n            fontSize: 12,\n            maxWidth: 600,\n            maxHeight: 500,\n          }\n        }\n      >\n        <span style={{ background: 'white' }}>\n          {`>${\n            feature.name ||\n            feature.id ||\n            feature.refName + ':' + (feature.start + 1) + '-' + feature.end\n          }-${mode}\\n`}\n        </span>\n        <br />\n        {mode === 'genomic' ? (\n          <Genomic sequence={seq} />\n        ) : mode === 'genomic_sequence_updown' ? (\n          <Genomic sequence={seq} upstream={upstream} downstream={downstream} />\n        ) : mode === 'cds' ? (\n          <GeneCDS cds={cds} sequence={seq} />\n        ) : mode === 'cdna' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            utr={utr}\n            sequence={seq}\n            intronBp={intronBp}\n          />\n        ) : mode === 'protein' ? (\n          <GeneProtein cds={cds} codonTable={codonTable} sequence={seq} />\n        ) : mode === 'gene' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            utr={utr}\n            sequence={seq}\n            includeIntrons\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_collapsed_intron' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            includeIntrons\n            collapseIntron\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_updownstream' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            upstream={upstream}\n            downstream={downstream}\n            includeIntrons\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_updownstream_collapsed_intron' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            upstream={upstream}\n            downstream={downstream}\n            includeIntrons\n            collapseIntron\n            intronBp={intronBp}\n          />\n        ) : (\n          <div>Unknown type</div>\n        )}\n      </div>\n    </div>\n  )\n})\n\nexport default SeqPanel\n"],"names":["proteinColor","intronColor","undefined","cdsColor","updownstreamColor","utrColor","genomeColor","GeneCDS","_ref","cds","sequence","_jsx","style","background","children","stitch","GeneProtein","_ref2","codonTable","str","protein","i","length","slice","GenecDNA","_ref3","utr","exons","upstream","downstream","includeIntrons","collapseIntron","intronBp","chunks","concat","_toConsumableArray","sort","a","b","start","filter","f","end","_jsxs","_Fragment","map","chunk","idx","_chunks","intron","React","type","JSON","stringify","Genomic","_ref4","props","ref","feature","mode","_props$intronBp","_props$sequence","seq","_props$sequence$upstr","_props$sequence$downs","_feature$subfeatures","subfeatures","sub","_objectSpread","dedupe","match","calculateUTRs","calculateUTRs2","strand","revcom","revlist","generateCodonTable","defaultCodonTable","fontFamily","wordWrap","overflow","color","fontSize","maxWidth","maxHeight","name","id","refName"],"sourceRoot":""}