{"version":3,"file":"static/js/6431.f61cbd39.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceBox.tsx","../../../packages/core/BaseFeatureWidget/SequencePanel.tsx"],"sourcesContent":["import React from 'react'\nimport { Feat, stitch } from './util'\n\n// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nconst proteinColor = 'rgb(220,160,220)'\nconst intronColor = undefined\nconst cdsColor = 'rgb(220,220,180)'\nconst updownstreamColor = 'rgba(250,200,200)'\nconst utrColor = 'rgb(200,240,240)'\nconst genomeColor = 'rgb(200,280,200)'\n\nexport function GeneCDS({ cds, sequence }: { cds: Feat[]; sequence: string }) {\n  return <span style={{ background: cdsColor }}>{stitch(cds, sequence)}</span>\n}\n\nexport function GeneProtein({\n  cds,\n  sequence,\n  codonTable,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: { [key: string]: string }\n}) {\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n\n  return <span style={{ background: proteinColor }}>{protein}</span>\n}\n\nexport function GenecDNA({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  includeIntrons,\n  collapseIntron,\n  intronBp,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  intronBp: number\n}) {\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  return (\n    <>\n      {upstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {upstream}\n        </span>\n      ) : null}\n\n      {chunks.map((chunk, idx) => {\n        const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n\n        return (\n          <React.Fragment key={JSON.stringify(chunk)}>\n            <span\n              style={{\n                background: chunk.type === 'CDS' ? cdsColor : utrColor,\n              }}\n            >\n              {sequence.slice(chunk.start, chunk.end)}\n            </span>\n            {includeIntrons && idx < chunks.length - 1 ? (\n              <span style={{ background: intronColor }}>\n                {collapseIntron && intron.length > intronBp * 2\n                  ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n                  : intron}\n              </span>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>{downstream}</span>\n      ) : null}\n    </>\n  )\n}\n\nexport function Genomic({\n  sequence,\n  upstream,\n  downstream,\n}: {\n  sequence: string\n  upstream?: string\n  downstream?: string\n}) {\n  return (\n    <>\n      {upstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {upstream}\n        </span>\n      ) : null}\n\n      <span\n        style={{\n          background: genomeColor,\n        }}\n      >\n        {sequence}\n      </span>\n\n      {downstream ? (\n        <span\n          style={{\n            background: updownstreamColor,\n          }}\n        >\n          {downstream}\n        </span>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\n\nimport { defaultCodonTable, generateCodonTable, revcom } from '../util'\nimport {\n  ParentFeat,\n  SeqState,\n  calculateUTRs,\n  calculateUTRs2,\n  dedupe,\n  revlist,\n} from './util'\nimport { GenecDNA, GeneProtein, GeneCDS, Genomic } from './SequenceBox'\n\ninterface SeqPanelProps {\n  sequence: SeqState\n  feature: ParentFeat\n  mode: string\n  intronBp?: number\n}\nconst SeqPanel = React.forwardRef<HTMLDivElement, SeqPanelProps>(function (\n  props,\n  ref,\n) {\n  const { feature, mode, intronBp = 10 } = props\n  let {\n    sequence: { seq, upstream = '', downstream = '' },\n  } = props\n  const { subfeatures = [] } = feature\n\n  const children = subfeatures\n    .sort((a, b) => a.start - b.start)\n    .map(sub => ({\n      ...sub,\n      start: sub.start - feature.start,\n      end: sub.end - feature.start,\n    }))\n\n  // we filter duplicate entries in cds and exon lists duplicate entries may be\n  // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n  // probably worth ignoring here (produces broken protein translations if\n  // included)\n  //\n  // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n  // transcript ENST00000445597.6\n  //\n  // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n  let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n  let utr = dedupe(children.filter(sub => sub.type.match(/utr/i)))\n  let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n  if (!utr.length && cds.length && exons.length) {\n    utr = calculateUTRs(cds, exons)\n  }\n  if (!utr.length && cds.length && !exons.length) {\n    utr = calculateUTRs2(cds, {\n      start: 0,\n      end: feature.end - feature.start,\n      type: 'gene',\n    })\n  }\n\n  if (feature.strand === -1) {\n    // doing this in a single assignment is needed because downstream and\n    // upstream are swapped so this avoids a temp variable\n    ;[seq, upstream, downstream] = [\n      revcom(seq),\n      revcom(downstream),\n      revcom(upstream),\n    ]\n    cds = revlist(cds, seq.length)\n    exons = revlist(exons, seq.length)\n    utr = revlist(utr, seq.length)\n  }\n  const codonTable = generateCodonTable(defaultCodonTable)\n\n  return (\n    <div ref={ref} data-testid=\"sequence_panel\">\n      <div\n        style={\n          /* raw styles so that html copy works */\n          {\n            fontFamily: 'monospace',\n            wordWrap: 'break-word',\n            overflow: 'auto',\n            color: 'black',\n            fontSize: 12,\n            maxWidth: 600,\n            maxHeight: 500,\n          }\n        }\n      >\n        <span style={{ background: 'white' }}>\n          {`>${\n            feature.name ||\n            feature.id ||\n            feature.refName + ':' + (feature.start + 1) + '-' + feature.end\n          }-${mode}\\n`}\n        </span>\n        <br />\n        {mode === 'genomic' ? (\n          <Genomic sequence={seq} />\n        ) : mode === 'genomic_sequence_updown' ? (\n          <Genomic sequence={seq} upstream={upstream} downstream={downstream} />\n        ) : mode === 'cds' ? (\n          <GeneCDS cds={cds} sequence={seq} />\n        ) : mode === 'cdna' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            utr={utr}\n            sequence={seq}\n            intronBp={intronBp}\n          />\n        ) : mode === 'protein' ? (\n          <GeneProtein cds={cds} codonTable={codonTable} sequence={seq} />\n        ) : mode === 'gene' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            utr={utr}\n            sequence={seq}\n            includeIntrons\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_collapsed_intron' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            includeIntrons\n            collapseIntron\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_updownstream' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            upstream={upstream}\n            downstream={downstream}\n            includeIntrons\n            intronBp={intronBp}\n          />\n        ) : mode === 'gene_updownstream_collapsed_intron' ? (\n          <GenecDNA\n            exons={exons}\n            cds={cds}\n            sequence={seq}\n            utr={utr}\n            upstream={upstream}\n            downstream={downstream}\n            includeIntrons\n            collapseIntron\n            intronBp={intronBp}\n          />\n        ) : (\n          <div>Unknown type</div>\n        )}\n      </div>\n    </div>\n  )\n})\n\nexport default SeqPanel\n"],"names":["proteinColor","intronColor","undefined","cdsColor","updownstreamColor","utrColor","genomeColor","GeneCDS","cds","sequence","style","background","stitch","GeneProtein","codonTable","str","protein","i","length","slice","GenecDNA","utr","exons","upstream","downstream","includeIntrons","collapseIntron","intronBp","chunks","sort","a","b","start","filter","f","end","map","chunk","idx","intron","type","JSON","stringify","Genomic","React","props","ref","feature","mode","seq","subfeatures","children","sub","dedupe","match","calculateUTRs","calculateUTRs2","strand","revcom","revlist","generateCodonTable","defaultCodonTable","fontFamily","wordWrap","overflow","color","fontSize","maxWidth","maxHeight","name","id","refName"],"sourceRoot":""}