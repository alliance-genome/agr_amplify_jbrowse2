{"version":3,"file":"static/js/754.a2467feb.chunk.js","mappings":"uSAqBA,SAASA,EAAUC,GACjB,IAAQC,EAAkBD,EAAlBC,cACAC,GAAgBC,EAAAA,EAAAA,mBAAkBH,GAAlCE,YACFE,GAAQC,EAAAA,EAAAA,oBAAmBL,GAC3BM,GAAYC,EAAAA,EAAAA,SAAQH,EAAO,QACjC,MAAuB,gBAAhBF,GAAkCD,EAErC,IADAO,EAAAA,EAAAA,aAAYF,EARS,MAQwB,GAEnD,CAEA,IAAMG,GAAUC,EAAAA,EAAAA,WAAS,SAAAC,GAQrB,IAPFC,EAAQD,EAARC,SACAZ,EAAKW,EAALX,MAOA,GANSW,EAATE,UAOE,OAAOC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAH,SAAGA,IAEV,IAAQI,EAAWhB,EAAXgB,OACR,OACEF,EAAAA,EAAAA,KAAA,OACEG,MAAO,CACLC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,cAAe,OACfL,OAAAA,EACAM,OAAOnB,EAAAA,EAAAA,mBAAkBH,GAAOsB,OAChCV,SAEDA,GAIT,IAEMW,EAAS,SAACC,GAOd,IAAAC,EAA2CD,EAAnCE,MAAAA,OAAK,IAAAD,EAAG,uBAAsBA,EACtC,OAAOX,EAAAA,EAAAA,KAAA,QAAAa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUH,GAAK,IAAEI,KAAMF,IAChC,EAEMG,GAAcnB,EAAAA,EAAAA,WAAS,SAAAoB,GAA+C,IAA5C9B,EAAK8B,EAAL9B,MACtB+B,EAAqB/B,EAArB+B,MAAOC,EAAchC,EAAdgC,UACPV,GAAUnB,EAAAA,EAAAA,mBAAkBH,GAA5BsB,MACFW,EACJ,IAAAC,OAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOI,OAAO,GAAE,KAAAD,OAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOI,OAAO,GAAE,MACzB,QAAdH,EAAsB,eAAiB,IACpCI,GAAM5B,EAAAA,EAAAA,aAAYyB,EAAQ,IAE1BI,EAAOf,EAAQc,EADL,GAEhB,OACEE,EAAAA,EAAAA,MAAAvB,EAAAA,SAAA,CAAAH,SAAA,EACEE,EAAAA,EAAAA,KAACS,EAAM,CAACgB,EAAG,EAAGC,EAAGH,EAAMf,MAAOc,EAAM,EAAGpB,OAAQ,MAC/CF,EAAAA,EAAAA,KAAA,QAAMyB,EAAG,GAAIC,EAAGH,EAAKzB,SAClBqB,MAIT,IAEMQ,GAAc/B,EAAAA,EAAAA,WAAS,SAAAgC,GAUzB,IATF1C,EAAK0C,EAAL1C,MACA2C,EAASD,EAATC,UACAC,EAAUF,EAAVE,WACA/B,EAAS6B,EAAT7B,UAQEgC,EAME7C,EANF6C,kBACAC,EAKE9C,EALF8C,cACAC,EAIE/C,EAJF+C,wBACAC,EAGEhD,EAHFgD,6BACAC,EAEEjD,EAFFiD,iBACAC,EACElD,EADFkD,QAEIC,EAAcC,KAAKC,IAAIV,EAAW,IAClCW,EAAkBX,EAAY,GAC9BY,EAAgBN,EAAmB,GAAK,EACxCO,EAAcZ,EAAaW,EAAgB,EAE3CE,GADY5C,EAAY,GAAK,KAEnBiC,IAAkBE,EAA+B,GAAK,GAEtE,OAAOE,GACLZ,EAAAA,EAAAA,MAAAvB,EAAAA,SAAA,CAAAH,SAAA,CAGImC,GACEjC,EAAAA,EAAAA,KAACS,EAAM,CACLgB,EAAG,EACHC,EAAGiB,EACHnC,MAAOkC,EACPxC,QAASkC,EAAQQ,OAAS,KAAQf,IAElC,KAELO,EAAQS,KAAI,SAACC,EAAQC,GACpB,IAAMC,EAAYV,KAAKC,IAAI,GAAIV,GAC/B,OACEL,EAAAA,EAAAA,MAACyB,EAAAA,SAAc,CAAAnD,SAAA,CACZmC,EAA0B,MACzBjC,EAAAA,EAAAA,KAACS,EAAM,CACLgB,EAAGsB,EAAMlB,EAAY,EACrBH,EAAGiB,EACHnC,MAAOkC,EACPxC,OAAQ8C,IAGXF,EAAOlC,OACNZ,EAAAA,EAAAA,KAACS,EAAM,CACLgB,EAAGsB,EAAMlB,EAAY,EACrBH,EAAGiB,EACHnC,MAAOiC,EACPvC,OAAQ6B,EAAoBF,EAAYmB,EACxCpC,MAAOkC,EAAOlC,QAEd,KACH4B,GACCxC,EAAAA,EAAAA,KAAA,QACEyB,EAAGsB,EAAMlB,EAAY,GACrBH,EAAGiB,EAAcF,EAAgB,EACjCS,SAAUb,EAAYvC,SAErBgD,EAAOK,OAER,OAAI,GAAA/B,OA1Bc0B,EAAOK,KAAI,KAAA/B,OAAI2B,GA6B3C,OAEA,IACN,IAEaK,GAAWxD,EAAAA,EAAAA,WAAS,SAAUc,GAKzC,IAAQxB,EAAkCwB,EAAlCxB,MAAOmE,EAA2B3C,EAA3B2C,YAAatD,EAAcW,EAAdX,UAE1BuD,EAOEpE,EAPFoE,MACAvB,EAME7C,EANF6C,kBACAE,EAKE/C,EALF+C,wBACAC,EAIEhD,EAJFgD,6BACAL,EAGE3C,EAHF2C,UACAO,EAEElD,EAFFkD,QACAnB,EACE/B,EADF+B,MAEIoB,EAAcC,KAAKC,IAAIV,EAAW,IAClCW,EAAkBX,EAAY,GACrB0B,GAAclE,EAAAA,EAAAA,mBAAkBH,GAAvCsB,MAIR,KADc8C,GAASlB,GAErB,OAAO,KAGT,IAAMN,EAAaQ,KAAKkB,IAAGC,MAARnB,MAAIoB,EAAAA,EAAAA,GACjBtB,EACDS,KAAI,SAAAc,GAAC,OAAIjE,EAAAA,EAAAA,aAAYiE,EAAER,KAAMd,EAAY,IACzCQ,KAAI,SAAArC,GAAK,OAAKgC,EAAkBhC,EAVpB,EAUoC,KAAM,CAAC,KAG5D,OACER,EAAAA,EAAAA,KAACL,GAAOkB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKH,GAAK,IAAAZ,SACfmC,GACCT,EAAAA,EAAAA,MAAAvB,EAAAA,SAAA,CAAAH,SAAA,EACEE,EAAAA,EAAAA,KAAA,KAAG4D,UAAS,aAAAxC,OAAgBrB,EAA+B,EAAnBd,EAAUC,GAAU,OAAMY,UAChEE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAS,CAAC3E,MAAOA,EAAOmE,YAAaA,OAExCrD,EAAAA,EAAAA,KAAA,KAAG4D,UAAS,aAAAxC,OAAemC,EAAYzB,EAAa,IAAG,OAAMhC,UAC3DE,EAAAA,EAAAA,KAAC2B,EAAW,CACV5B,UAAWA,EACXb,MAAOA,EACP2C,UAAW,GACXC,WAAYA,UAKlBN,EAAAA,EAAAA,MAAAvB,EAAAA,SAAA,CAAAH,SAAA,EACEE,EAAAA,EAAAA,KAAC2B,EAAW,CACV5B,UAAWA,EACXb,MAAOA,EACP2C,UAAW3C,EAAM2C,UACjBC,WAAYA,IAGbI,GAAgCH,GAC/B/B,EAAAA,EAAAA,KAACe,GAAWF,EAAAA,EAAAA,GAAA,GAAKH,IAEjB0B,EAAQS,KAAI,SAACiB,EAASf,GAAG,OACvB/C,EAAAA,EAAAA,KAAA,KACE4D,UAAS,eAAAxC,OAAiBS,EAAYkB,EAAG,KAAIjD,UAG7CE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAS,CAAC3E,MAAOA,EAAOmE,YAAaA,KAAe,GAAAjC,OAF7C2C,KAAKC,UAAU/C,GAAM,KAAAG,OAAI2B,GAG/B,SAOlB,IAEA,WAAenD,EAAAA,EAAAA,WAAS,SAACc,GACvB,IAAQxB,EAAUwB,EAAVxB,MAER,OACEsC,EAAAA,EAAAA,MAAA,OAAA1B,SAAA,EACEE,EAAAA,EAAAA,KAACiE,EAAAA,IAA0BpD,EAAAA,EAAAA,GAAA,GAAKH,KAChCV,EAAAA,EAAAA,KAACoD,EAAQ,CAAClE,MAAOA,MAGvB,G","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  measureText,\n  getContainingView,\n  getContainingTrack,\n} from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport {\n  LinearGenomeViewModel,\n  BaseLinearDisplayComponent,\n} from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport YScaleBar from '../../shared/YScaleBar'\n\ntype LGV = LinearGenomeViewModel\n\nconst trackLabelFontSize = 12.8\n\nfunction getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LGV\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  if (exportSVG) {\n    return <>{children}</>\n  } else {\n    const { height } = model\n    return (\n      <svg\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          pointerEvents: 'none',\n          height,\n          width: getContainingView(model).width,\n        }}\n      >\n        {children}\n      </svg>\n    )\n  }\n})\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} fill={color} />\n}\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend =\n    `[${ticks?.values[0]}-${ticks?.values[1]}]` +\n    (scaleType === 'log' ? ' (log scale)' : '')\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  labelWidth,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  labelWidth: number\n  exportSVG?: boolean\n}) {\n  const {\n    needsCustomLegend,\n    needsScalebar,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (needsScalebar && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => {\n        const boxHeight = Math.min(20, rowHeight)\n        return (\n          <React.Fragment key={`${source.name}-${idx}`}>\n            {needsFullHeightScalebar ? null : (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={legendWidth}\n                height={boxHeight}\n              />\n            )}\n            {source.color ? (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={colorBoxWidth}\n                height={needsCustomLegend ? rowHeight : boxHeight}\n                color={source.color}\n              />\n            ) : null}\n            {canDisplayLabel ? (\n              <text\n                y={idx * rowHeight + 13}\n                x={extraOffset + colorBoxWidth + 2}\n                fontSize={svgFontSize}\n              >\n                {source.name}\n              </text>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n    </>\n  ) : null\n})\n\nexport const StatBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const {\n    stats,\n    needsCustomLegend,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    rowHeight,\n    sources,\n    ticks,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const { width: viewWidth } = getContainingView(model) as LGV\n  const minWidth = 20\n\n  const ready = stats && sources\n  if (!ready) {\n    return null\n  }\n\n  const labelWidth = Math.max(\n    ...(sources\n      .map(s => measureText(s.name, svgFontSize))\n      .map(width => (canDisplayLabel ? width : minWidth)) || [0]),\n  )\n\n  return (\n    <Wrapper {...props}>\n      {needsFullHeightScalebar ? (\n        <>\n          <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n          <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n            <ColorLegend\n              exportSVG={exportSVG}\n              model={model}\n              rowHeight={12}\n              labelWidth={labelWidth}\n            />\n          </g>\n        </>\n      ) : (\n        <>\n          <ColorLegend\n            exportSVG={exportSVG}\n            model={model}\n            rowHeight={model.rowHeight}\n            labelWidth={labelWidth}\n          />\n\n          {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n            <ScoreLegend {...props} />\n          ) : (\n            sources.map((_source, idx) => (\n              <g\n                transform={`translate(0 ${rowHeight * idx})`}\n                key={`${JSON.stringify(ticks)}-${idx}`}\n              >\n                <YScaleBar model={model} orientation={orientation} />\n              </g>\n            ))\n          )}\n        </>\n      )}\n    </Wrapper>\n  )\n})\n\nexport default observer((props: { model: WiggleDisplayModel }) => {\n  const { model } = props\n\n  return (\n    <div>\n      <BaseLinearDisplayComponent {...props} />\n      <StatBars model={model} />\n    </div>\n  )\n})\n\nexport { default as YScaleBar } from '../../shared/YScaleBar'\n"],"names":["getOffset","model","prefersOffset","trackLabels","getContainingView","track","getContainingTrack","trackName","getConf","measureText","Wrapper","observer","_ref2","children","exportSVG","_jsx","_Fragment","height","style","position","top","left","pointerEvents","width","RectBg","props","_props$color","color","_objectSpread","fill","ScoreLegend","_ref3","ticks","scaleType","legend","concat","values","len","xpos","_jsxs","y","x","ColorLegend","_ref5","rowHeight","labelWidth","needsCustomLegend","needsScalebar","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","sources","svgFontSize","Math","min","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","length","map","source","idx","boxHeight","React","fontSize","name","StatBars","orientation","stats","viewWidth","max","apply","_toConsumableArray","s","transform","YScaleBar","_source","JSON","stringify","BaseLinearDisplayComponent"],"sourceRoot":""}