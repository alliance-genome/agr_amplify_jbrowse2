{"version":3,"file":"static/js/644.60458392.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["getMismatches","MismatchParser","SyntenyFeature","arg","this","get","SimpleFeature","getWeightedMeans","ret","scoreMap","i","length","entry","key","qname","tname","quals","len","push","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","reduce","valueSum","weightSum","value","weight","parsePAF","text","split","filter","line","qstart","qend","strand","tstart","tend","numMatches","fields","rest","field","r","indexOf","slice","flipCigar","cigar","arr","op","swapIndelCigar","replaceAll","parseCigar","PAFAdapter","setupP","opts","setupPre","catch","e","undefined","pm","pluginManager","pafLocation","openLocation","getConf","readFile","buffer","isGzip","unzip","buf","Error","TextDecoder","fatal","decode","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","start","end","qref","refName","complete","mateName","mateStart","mateEnd","flip","doesIntersect2","cg","CIGAR","join","next","uniqueId","type","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}