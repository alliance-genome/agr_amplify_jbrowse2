{"version":3,"file":"static/js/4133.0c3a3d61.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/bam/src/virtualOffset.ts","../../../node_modules/@gmod/bam/src/chunk.ts","../../../node_modules/@gmod/bam/src/util.ts","../../../node_modules/@gmod/bam/src/indexFile.ts","../../../node_modules/@gmod/bam/src/bai.ts","../../../node_modules/@gmod/bam/src/csi.ts","../../../node_modules/@gmod/bam/src/constants.ts","../../../node_modules/@gmod/bam/src/record.ts","../../../node_modules/@gmod/bam/src/sam.ts","../../../node_modules/@gmod/bam/src/bamFile.ts","../../../node_modules/@gmod/bam/src/htsget.ts"],"sourcesContent":["export default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public buffer?: Buffer\n\n  constructor(\n    public minv: VirtualOffset,\n    public maxv: VirtualOffset,\n    public bin: number,\n    public _fetchedSize?: number,\n  ) {}\n\n  toUniqueString() {\n    return `${this.minv.toString()}..${this.maxv.toString()} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import Long from 'long'\nimport Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new Error('aborted')\n      //@ts-ignore\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport interface BamOpts {\n  viewAsPairs?: boolean\n  pairAcrossChr?: boolean\n  maxInsertSize?: number\n  signal?: AbortSignal\n}\n\nexport interface BaseOpts {\n  signal?: AbortSignal\n}\n\nexport function makeOpts(obj: AbortSignal | BaseOpts = {}): BaseOpts {\n  return 'aborted' in obj ? ({ signal: obj } as BaseOpts) : obj\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest?: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | undefined\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort((c0, c1) => {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif === 0 ? c0.minv.dataPosition - c1.minv.dataPosition : dif\n  })\n\n  for (const chunk of chunks) {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === undefined) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  }\n\n  return mergedChunks\n}\n\nexport function parsePseudoBin(bytes: Buffer, offset: number) {\n  const lineCount = longToNumber(\n    Long.fromBytesLE(\n      Array.prototype.slice.call(bytes, offset, offset + 8),\n      true,\n    ),\n  )\n  return { lineCount }\n}\n\nexport function findFirstData(\n  firstDataLine: VirtualOffset | undefined,\n  virtualOffset: VirtualOffset,\n) {\n  return firstDataLine\n    ? firstDataLine.compareTo(virtualOffset) > 0\n      ? virtualOffset\n      : firstDataLine\n    : virtualOffset\n}\n\nexport function parseNameBytes(\n  namesBytes: Buffer,\n  renameRefSeq: (arg: string) => string = s => s,\n) {\n  let currRefId = 0\n  let currNameStart = 0\n  const refIdToName = []\n  const refNameToId: Record<string, number> = {}\n  for (let i = 0; i < namesBytes.length; i += 1) {\n    if (!namesBytes[i]) {\n      if (currNameStart < i) {\n        let refName = namesBytes.toString('utf8', currNameStart, i)\n        refName = renameRefSeq(refName)\n        refIdToName[currRefId] = refName\n        refNameToId[refName] = currRefId\n      }\n      currNameStart = i + 1\n      currRefId += 1\n    }\n  }\n  return { refNameToId, refIdToName }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport Chunk from './chunk'\nimport { BaseOpts } from './util'\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (s: string) => string\n\n  /**\n   * @param {filehandle} filehandle\n   * @param {function} [renameRefSeqs]\n   */\n  constructor({\n    filehandle,\n    renameRefSeq = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeq?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeq\n  }\n  public abstract lineCount(refId: number): Promise<number>\n  public abstract indexCov(\n    refId: number,\n    start?: number,\n    end?: number,\n  ): Promise<{ start: number; end: number; score: number }[]>\n\n  public abstract blocksForRange(\n    chrId: number,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ): Promise<Chunk[]>\n}\n","import VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\n\nimport { optimizeChunks, parsePseudoBin, findFirstData, BaseOpts } from './util'\nimport IndexFile from './indexFile'\n\nconst BAI_MAGIC = 21578050 // BAI\\1\n\nfunction roundDown(n: number, multiple: number) {\n  return n - (n % multiple)\n}\nfunction roundUp(n: number, multiple: number) {\n  return n - (n % multiple) + multiple\n}\n\nfunction reg2bins(beg: number, end: number) {\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class BAI extends IndexFile {\n  public setupP?: ReturnType<BAI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  // fetch and parse the index\n  async _parse(opts?: BaseOpts) {\n    const bytes = (await this.filehandle.readFile(opts)) as Buffer\n\n    // check BAI magic numbers\n    if (bytes.readUInt32LE(0) !== BAI_MAGIC) {\n      throw new Error('Not a BAI file')\n    }\n\n    const refCount = bytes.readInt32LE(4)\n    const depth = 5\n    const binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7\n\n    // read the indexes for each reference sequence\n    let curr = 8\n    let firstDataLine: VirtualOffset | undefined\n\n    type BinIndex = Record<string, Chunk[]>\n    type LinearIndex = VirtualOffset[]\n    const indices = new Array<{\n      binIndex: BinIndex\n      linearIndex: LinearIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n      const binCount = bytes.readInt32LE(curr)\n      let stats\n\n      curr += 4\n      const binIndex: Record<number, Chunk[]> = {}\n\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(curr)\n        curr += 4\n        if (bin === binLimit + 1) {\n          curr += 4\n          stats = parsePseudoBin(bytes, curr + 16)\n          curr += 32\n        } else if (bin > binLimit + 1) {\n          throw new Error('bai index contains too many bins, please use CSI')\n        } else {\n          const chunkCount = bytes.readInt32LE(curr)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k++) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      const linearCount = bytes.readInt32LE(curr)\n      curr += 4\n      // as we're going through the linear index, figure out the smallest\n      // virtual offset in the indexes, which tells us where the BAM header\n      // ends\n      const linearIndex = new Array<VirtualOffset>(linearCount)\n      for (let j = 0; j < linearCount; j++) {\n        const offset = fromBytes(bytes, curr)\n        curr += 8\n        firstDataLine = findFirstData(firstDataLine, offset)\n        linearIndex[j] = offset\n      }\n\n      indices[i] = { binIndex, linearIndex, stats }\n    }\n\n    return {\n      bai: true,\n      firstDataLine,\n      maxBlockSize: 1 << 16,\n      indices,\n      refCount,\n    }\n  }\n\n  async indexCov(\n    seqId: number,\n    start?: number,\n    end?: number,\n    opts: BaseOpts = {},\n  ): Promise<{ start: number; end: number; score: number }[]> {\n    const v = 16384\n    const range = start !== undefined\n    const indexData = await this.parse(opts)\n    const seqIdx = indexData.indices[seqId]\n    if (!seqIdx) {\n      return []\n    }\n    const { linearIndex = [], stats } = seqIdx\n    if (linearIndex.length === 0) {\n      return []\n    }\n    const e = end === undefined ? (linearIndex.length - 1) * v : roundUp(end, v)\n    const s = start === undefined ? 0 : roundDown(start, v)\n    const depths = range\n      ? new Array((e - s) / v)\n      : new Array(linearIndex.length - 1)\n    const totalSize = linearIndex[linearIndex.length - 1].blockPosition\n    if (e > (linearIndex.length - 1) * v) {\n      throw new Error('query outside of range of linear index')\n    }\n    let currentPos = linearIndex[s / v].blockPosition\n    for (let i = s / v, j = 0; i < e / v; i++, j++) {\n      depths[j] = {\n        score: linearIndex[i + 1].blockPosition - currentPos,\n        start: i * v,\n        end: i * v + v,\n      }\n      currentPos = linearIndex[i + 1].blockPosition\n    }\n    return depths.map(d => ({\n      ...d,\n      score: (d.score * (stats?.lineCount || 0)) / totalSize,\n    }))\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // List of bin #s that overlap min, max\n    const overlappingBins = reg2bins(min, max)\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const binChunk of binChunks) {\n            chunks.push(binChunk)\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest: VirtualOffset | undefined\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp && (!lowest || vp.compareTo(lowest) < 0)) {\n        lowest = vp\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport {\n  optimizeChunks,\n  findFirstData,\n  parsePseudoBin,\n  parseNameBytes,\n  BaseOpts,\n} from './util'\n\nimport IndexFile from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber = 0\n  private depth = 0\n  private minShift = 0\n\n  public setupP?: ReturnType<CSI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  async indexCov() {\n    return []\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = (\n      { 0: 'generic', 1: 'SAM', 2: 'VCF' } as Record<number, string>\n    )[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : ''\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    return {\n      columnNumbers,\n      coordinateType,\n      metaValue,\n      metaChar,\n      skipLines,\n      format,\n      formatFlags,\n      ...parseNameBytes(\n        bytes.subarray(offset + 28, offset + 28 + nameSectionLength),\n        this.renameRefSeq,\n      ),\n    }\n  }\n\n  // fetch and parse the index\n  async _parse(opts: { signal?: AbortSignal }) {\n    const buffer = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buffer)\n\n    let csiVersion\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const auxLength = bytes.readInt32LE(12)\n    const aux = auxLength >= 30 ? this.parseAuxData(bytes, 16) : undefined\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    type BinIndex = Record<string, Chunk[]>\n\n    // read the indexes for each reference sequence\n    let curr = 16 + auxLength + 4\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array<{\n      binIndex: BinIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n      const binCount = bytes.readInt32LE(curr)\n      curr += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j++) {\n        const bin = bytes.readUInt32LE(curr)\n        curr += 4\n        if (bin > this.maxBinNumber) {\n          stats = parsePseudoBin(bytes, curr + 28)\n          curr += 28 + 16\n        } else {\n          firstDataLine = findFirstData(firstDataLine, fromBytes(bytes, curr))\n          curr += 8\n          const chunkCount = bytes.readInt32LE(curr)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      indices[i] = { binIndex, stats }\n    }\n\n    return {\n      csiVersion,\n      firstDataLine,\n      indices,\n      refCount,\n      csi: true,\n      maxBlockSize: 1 << 16,\n      ...aux,\n    }\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const ba = indexData?.indices[refId]\n    if (!ba) {\n      return []\n    }\n    const overlappingBins = this.reg2bins(min, max)\n\n    if (overlappingBins.length === 0) {\n      return []\n    }\n\n    const chunks = []\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const c of binChunks) {\n            chunks.push(c)\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end)\n   * (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","export default {\n  //  the read is paired in sequencing, no matter whether it is mapped in a pair\n  BAM_FPAIRED: 1,\n  //  the read is mapped in a proper pair\n  BAM_FPROPER_PAIR: 2,\n  //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n  BAM_FUNMAP: 4,\n  //  the mate is unmapped\n  BAM_FMUNMAP: 8,\n  //  the read is mapped to the reverse strand\n  BAM_FREVERSE: 16,\n  //  the mate is mapped to the reverse strand\n  BAM_FMREVERSE: 32,\n  //  this is read1\n  BAM_FREAD1: 64,\n  //  this is read2\n  BAM_FREAD2: 128,\n  //  not primary alignment\n  BAM_FSECONDARY: 256,\n  //  QC failure\n  BAM_FQCFAIL: 512,\n  //  optical or PCR duplicate\n  BAM_FDUP: 1024,\n  //  supplementary alignment\n  BAM_FSUPPLEMENTARY: 2048,\n}\n","import Constants from './constants'\n\nconst SEQRET_DECODER = '=ACMGRSVTWYHKDBN'.split('')\nconst CIGAR_DECODER = 'MIDNSHP=X???????'.split('')\n\n/**\n * Class of each BAM record returned by this API.\n */\nexport default class BamRecord {\n  private data = {} as Record<string, any>\n  private bytes: { start: number; end: number; byteArray: Buffer }\n  private _id: number\n  private _tagOffset: number | undefined\n  private _tagList: string[] = []\n  private _allTagsParsed = false\n\n  public flags: any\n  public _refID: number\n  constructor(args: any) {\n    const { bytes, fileOffset } = args\n    const { byteArray, start } = bytes\n    this.data = {}\n    this.bytes = bytes\n    this._id = fileOffset\n    this._refID = byteArray.readInt32LE(start + 4)\n    this.data.start = byteArray.readInt32LE(start + 8)\n    this.flags = (byteArray.readInt32LE(start + 16) & 0xffff0000) >> 16\n  }\n\n  get(field: string) {\n    //@ts-ignore\n    if (this[field]) {\n      //@ts-ignore\n      if (this.data[field]) {\n        return this.data[field]\n      }\n      //@ts-ignore\n      this.data[field] = this[field]()\n      return this.data[field]\n    }\n    return this._get(field.toLowerCase())\n  }\n\n  end() {\n    return this.get('start') + this.get('length_on_ref')\n  }\n\n  seq_id() {\n    return this._refID\n  }\n\n  // same as get(), except requires lower-case arguments.  used\n  // internally to save lots of calls to field.toLowerCase()\n  _get(field: string) {\n    if (field in this.data) {\n      return this.data[field]\n    }\n    this.data[field] = this._parseTag(field)\n    return this.data[field]\n  }\n\n  _tags() {\n    this._parseAllTags()\n\n    let tags = ['seq']\n\n    if (!this.isSegmentUnmapped()) {\n      tags.push(\n        'start',\n        'end',\n        'strand',\n        'score',\n        'qual',\n        'MQ',\n        'CIGAR',\n        'length_on_ref',\n        'template_length',\n      )\n    }\n    if (this.isPaired()) {\n      tags.push('next_segment_position', 'pair_orientation')\n    }\n    tags = tags.concat(this._tagList || [])\n\n    for (const k of Object.keys(this.data)) {\n      if (!k.startsWith('_') && k !== 'next_seq_id') {\n        tags.push(k)\n      }\n    }\n\n    const seen: Record<string, boolean> = {}\n    return tags.filter(t => {\n      if (\n        (t in this.data && this.data[t] === undefined) ||\n        t === 'CG' ||\n        t === 'cg'\n      ) {\n        return false\n      }\n\n      const lt = t.toLowerCase()\n      const s = seen[lt]\n      seen[lt] = true\n      return !s\n    })\n  }\n\n  parent() {\n    return\n  }\n\n  children() {\n    return this.get('subfeatures')\n  }\n\n  id() {\n    return this._id\n  }\n\n  // special parsers\n  /**\n   * Mapping quality score.\n   */\n  mq() {\n    const mq = (this.get('_bin_mq_nl') & 0xff00) >> 8\n    return mq === 255 ? undefined : mq\n  }\n\n  score() {\n    return this.get('mq')\n  }\n\n  qual() {\n    return this.qualRaw()?.join(' ')\n  }\n\n  qualRaw() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const { start, byteArray } = this.bytes\n    const p =\n      start +\n      36 +\n      this.get('_l_read_name') +\n      this.get('_n_cigar_op') * 4 +\n      this.get('_seq_bytes')\n    const lseq = this.get('seq_length')\n    return byteArray.subarray(p, p + lseq)\n  }\n\n  strand() {\n    return this.isReverseComplemented() ? -1 : 1\n  }\n\n  multi_segment_next_segment_strand() {\n    if (this.isMateUnmapped()) {\n      return\n    }\n    return this.isMateReverseComplemented() ? -1 : 1\n  }\n\n  name() {\n    return this.get('_read_name')\n  }\n\n  _read_name() {\n    const nl = this.get('_l_read_name')\n    const { byteArray, start } = this.bytes\n    return byteArray.toString('ascii', start + 36, start + 36 + nl - 1)\n  }\n\n  /**\n   * Get the value of a tag, parsing the tags as far as necessary.\n   * Only called if we have not already parsed that field.\n   */\n  _parseTag(tagName?: string) {\n    // if all of the tags have been parsed and we're still being\n    // called, we already know that we have no such tag, because\n    // it would already have been cached.\n    if (this._allTagsParsed) {\n      return\n    }\n\n    const { byteArray, start } = this.bytes\n    let p =\n      this._tagOffset ||\n      start +\n        36 +\n        this.get('_l_read_name') +\n        this.get('_n_cigar_op') * 4 +\n        this.get('_seq_bytes') +\n        this.get('seq_length')\n\n    const blockEnd = this.bytes.end\n    let lcTag\n    while (p < blockEnd && lcTag !== tagName) {\n      const tag = String.fromCharCode(byteArray[p], byteArray[p + 1])\n      lcTag = tag.toLowerCase()\n      const type = String.fromCharCode(byteArray[p + 2])\n      p += 3\n\n      let value\n      switch (type) {\n        case 'A': {\n          value = String.fromCharCode(byteArray[p])\n          p += 1\n          break\n        }\n        case 'i': {\n          value = byteArray.readInt32LE(p)\n          p += 4\n          break\n        }\n        case 'I': {\n          value = byteArray.readUInt32LE(p)\n          p += 4\n          break\n        }\n        case 'c': {\n          value = byteArray.readInt8(p)\n          p += 1\n          break\n        }\n        case 'C': {\n          value = byteArray.readUInt8(p)\n          p += 1\n          break\n        }\n        case 's': {\n          value = byteArray.readInt16LE(p)\n          p += 2\n          break\n        }\n        case 'S': {\n          value = byteArray.readUInt16LE(p)\n          p += 2\n          break\n        }\n        case 'f': {\n          value = byteArray.readFloatLE(p)\n          p += 4\n          break\n        }\n        case 'Z':\n        case 'H': {\n          value = ''\n          while (p <= blockEnd) {\n            const cc = byteArray[p++]\n            if (cc === 0) {\n              break\n            } else {\n              value += String.fromCharCode(cc)\n            }\n          }\n          break\n        }\n        case 'B': {\n          value = ''\n          const cc = byteArray[p++]\n          const Btype = String.fromCharCode(cc)\n          const limit = byteArray.readInt32LE(p)\n          p += 4\n          if (Btype === 'i') {\n            if (tag === 'CG') {\n              for (let k = 0; k < limit; k++) {\n                const cigop = byteArray.readInt32LE(p)\n                const lop = cigop >> 4\n                const op = CIGAR_DECODER[cigop & 0xf]\n                value += lop + op\n                p += 4\n              }\n            } else {\n              for (let k = 0; k < limit; k++) {\n                value += byteArray.readInt32LE(p)\n                if (k + 1 < limit) {\n                  value += ','\n                }\n                p += 4\n              }\n            }\n          }\n          if (Btype === 'I') {\n            if (tag === 'CG') {\n              for (let k = 0; k < limit; k++) {\n                const cigop = byteArray.readUInt32LE(p)\n                const lop = cigop >> 4\n                const op = CIGAR_DECODER[cigop & 0xf]\n                value += lop + op\n                p += 4\n              }\n            } else {\n              for (let k = 0; k < limit; k++) {\n                value += byteArray.readUInt32LE(p)\n                if (k + 1 < limit) {\n                  value += ','\n                }\n                p += 4\n              }\n            }\n          }\n          if (Btype === 's') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readInt16LE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 2\n            }\n          }\n          if (Btype === 'S') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readUInt16LE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 2\n            }\n          }\n          if (Btype === 'c') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readInt8(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 1\n            }\n          }\n          if (Btype === 'C') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readUInt8(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 1\n            }\n          }\n          if (Btype === 'f') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readFloatLE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 4\n            }\n          }\n          break\n        }\n        default: {\n          console.warn(`Unknown BAM tag type '${type}', tags may be incomplete`)\n          value = undefined\n          p = blockEnd\n        } // stop parsing tags\n      }\n\n      this._tagOffset = p\n\n      this._tagList.push(tag)\n      if (lcTag === tagName) {\n        return value\n      }\n\n      this.data[lcTag] = value\n    }\n    this._allTagsParsed = true\n    return\n  }\n\n  _parseAllTags() {\n    this._parseTag('')\n  }\n\n  _parseCigar(cigar: string) {\n    return (\n      //@ts-ignore\n      cigar\n        .match(/\\d+\\D/g)\n        //@ts-ignore\n        .map(op => [op.match(/\\D/)[0].toUpperCase(), Number.parseInt(op, 10)])\n    )\n  }\n\n  /**\n   * @returns {boolean} true if the read is paired, regardless of whether both segments are mapped\n   */\n  isPaired() {\n    return !!(this.flags & Constants.BAM_FPAIRED)\n  }\n\n  /** @returns {boolean} true if the read is paired, and both segments are mapped */\n  isProperlyPaired() {\n    return !!(this.flags & Constants.BAM_FPROPER_PAIR)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isSegmentUnmapped() {\n    return !!(this.flags & Constants.BAM_FUNMAP)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isMateUnmapped() {\n    return !!(this.flags & Constants.BAM_FMUNMAP)\n  }\n\n  /** @returns {boolean} true if the read is mapped to the reverse strand */\n  isReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FREVERSE)\n  }\n\n  /** @returns {boolean} true if the mate is mapped to the reverse strand */\n  isMateReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FMREVERSE)\n  }\n\n  /** @returns {boolean} true if this is read number 1 in a pair */\n  isRead1() {\n    return !!(this.flags & Constants.BAM_FREAD1)\n  }\n\n  /** @returns {boolean} true if this is read number 2 in a pair */\n  isRead2() {\n    return !!(this.flags & Constants.BAM_FREAD2)\n  }\n\n  /** @returns {boolean} true if this is a secondary alignment */\n  isSecondary() {\n    return !!(this.flags & Constants.BAM_FSECONDARY)\n  }\n\n  /** @returns {boolean} true if this read has failed QC checks */\n  isFailedQc() {\n    return !!(this.flags & Constants.BAM_FQCFAIL)\n  }\n\n  /** @returns {boolean} true if the read is an optical or PCR duplicate */\n  isDuplicate() {\n    return !!(this.flags & Constants.BAM_FDUP)\n  }\n\n  /** @returns {boolean} true if this is a supplementary alignment */\n  isSupplementary() {\n    return !!(this.flags & Constants.BAM_FSUPPLEMENTARY)\n  }\n\n  cigar() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const { byteArray, start } = this.bytes\n    const numCigarOps = this.get('_n_cigar_op')\n    let p = start + 36 + this.get('_l_read_name')\n    const seqLen = this.get('seq_length')\n    let cigar = ''\n    let lref = 0\n\n    // check for CG tag by inspecting whether the CIGAR field\n    // contains a clip that consumes entire seqLen\n    let cigop = byteArray.readInt32LE(p)\n    let lop = cigop >> 4\n    let op = CIGAR_DECODER[cigop & 0xf]\n    if (op === 'S' && lop === seqLen) {\n      // if there is a CG the second CIGAR field will\n      // be a N tag the represents the length on ref\n      p += 4\n      cigop = byteArray.readInt32LE(p)\n      lop = cigop >> 4\n      op = CIGAR_DECODER[cigop & 0xf]\n      if (op !== 'N') {\n        console.warn('CG tag with no N tag')\n      }\n      this.data.length_on_ref = lop\n      return this.get('CG')\n    } else {\n      for (let c = 0; c < numCigarOps; ++c) {\n        cigop = byteArray.readInt32LE(p)\n        lop = cigop >> 4\n        op = CIGAR_DECODER[cigop & 0xf]\n        cigar += lop + op\n\n        // soft clip, hard clip, and insertion don't count toward\n        // the length on the reference\n        if (op !== 'H' && op !== 'S' && op !== 'I') {\n          lref += lop\n        }\n\n        p += 4\n      }\n\n      this.data.length_on_ref = lref\n      return cigar\n    }\n  }\n\n  length_on_ref() {\n    if (this.data.length_on_ref) {\n      return this.data.length_on_ref\n    } else {\n      this.get('cigar') // the length_on_ref is set as a side effect\n      return this.data.length_on_ref\n    }\n  }\n\n  _n_cigar_op() {\n    return this.get('_flag_nc') & 0xffff\n  }\n\n  _l_read_name() {\n    return this.get('_bin_mq_nl') & 0xff\n  }\n\n  /**\n   * number of bytes in the sequence field\n   */\n  _seq_bytes() {\n    return (this.get('seq_length') + 1) >> 1\n  }\n\n  getReadBases() {\n    return this.seq()\n  }\n\n  seq() {\n    const { byteArray, start } = this.bytes\n    const p =\n      start + 36 + this.get('_l_read_name') + this.get('_n_cigar_op') * 4\n    const seqBytes = this.get('_seq_bytes')\n    const len = this.get('seq_length')\n    let buf = ''\n    let i = 0\n    for (let j = 0; j < seqBytes; ++j) {\n      const sb = byteArray[p + j]\n      buf += SEQRET_DECODER[(sb & 0xf0) >> 4]\n      i++\n      if (i < len) {\n        buf += SEQRET_DECODER[sb & 0x0f]\n        i++\n      }\n    }\n    return buf\n  }\n\n  // adapted from igv.js\n  getPairOrientation() {\n    if (\n      !this.isSegmentUnmapped() &&\n      !this.isMateUnmapped() &&\n      this._refID === this._next_refid()\n    ) {\n      const s1 = this.isReverseComplemented() ? 'R' : 'F'\n      const s2 = this.isMateReverseComplemented() ? 'R' : 'F'\n      let o1 = ' '\n      let o2 = ' '\n      if (this.isRead1()) {\n        o1 = '1'\n        o2 = '2'\n      } else if (this.isRead2()) {\n        o1 = '2'\n        o2 = '1'\n      }\n\n      const tmp = []\n      const isize = this.template_length()\n      if (isize > 0) {\n        tmp[0] = s1\n        tmp[1] = o1\n        tmp[2] = s2\n        tmp[3] = o2\n      } else {\n        tmp[2] = s1\n        tmp[3] = o1\n        tmp[0] = s2\n        tmp[1] = o2\n      }\n      return tmp.join('')\n    }\n    return ''\n  }\n\n  _bin_mq_nl() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 12)\n  }\n\n  _flag_nc() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 16)\n  }\n\n  seq_length() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 20)\n  }\n\n  _next_refid() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 24)\n  }\n\n  _next_pos() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 28)\n  }\n\n  template_length() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 32)\n  }\n\n  toJSON() {\n    const data: Record<string, any> = {}\n    for (const k of Object.keys(this)) {\n      if (k.startsWith('_') || k === 'bytes') {\n        continue\n      }\n      //@ts-ignore\n      data[k] = this[k]\n    }\n\n    return data\n  }\n}\n","export function parseHeaderText(text: string) {\n  const lines = text.split(/\\r?\\n/)\n  const data: { tag: string; data: { tag: string; value: string }[] }[] = []\n  for (const line of lines) {\n    const [tag, ...fields] = line.split(/\\t/)\n    if (tag) {\n      data.push({\n        tag: tag.slice(1),\n        data: fields.map(f => {\n          const r = f.indexOf(':')\n          const fieldTag = f.slice(0, r)\n          const value = f.slice(r + 1)\n          return { tag: fieldTag, value }\n        }),\n      })\n    }\n  }\n  return data\n}\n","import { Buffer } from 'buffer'\nimport crc32 from 'buffer-crc32'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { LocalFile, RemoteFile, GenericFilehandle } from 'generic-filehandle'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\n\n// locals\nimport BAI from './bai'\nimport CSI from './csi'\nimport Chunk from './chunk'\nimport BAMFeature from './record'\nimport { parseHeaderText } from './sam'\nimport { checkAbortSignal, timeout, makeOpts, BamOpts, BaseOpts } from './util'\n\nexport const BAM_MAGIC = 21840194\n\nconst blockLen = 1 << 16\n\nasync function gen2array<T>(gen: AsyncIterable<T[]>): Promise<T[]> {\n  let out: T[] = []\n  for await (const x of gen) {\n    out = out.concat(x)\n  }\n  return out\n}\n\ninterface Args {\n  chunk: Chunk\n  opts: BaseOpts\n}\n\nclass NullFilehandle {\n  public read(): Promise<any> {\n    throw new Error('never called')\n  }\n  public stat(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public readFile(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public close(): Promise<any> {\n    throw new Error('never called')\n  }\n}\nexport default class BamFile {\n  public renameRefSeq: (a: string) => string\n  public bam: GenericFilehandle\n  public header?: string\n  public chrToIndex?: Record<string, number>\n  public indexToChr?: { refName: string; length: number }[]\n  public yieldThreadTime: number\n  public index?: BAI | CSI\n  public htsget = false\n  public headerP?: ReturnType<BamFile['getHeaderPre']>\n\n  private featureCache = new AbortablePromiseCache<Args, BAMFeature[]>({\n    cache: new QuickLRU({\n      maxSize: 50,\n    }),\n    fill: async (args: Args, signal) => {\n      const { chunk, opts } = args\n      const { data, cpositions, dpositions } = await this._readChunk({\n        chunk,\n        opts: { ...opts, signal },\n      })\n      return this.readBamFeatures(data, cpositions, dpositions, chunk)\n    },\n  })\n\n  constructor({\n    bamFilehandle,\n    bamPath,\n    bamUrl,\n    baiPath,\n    baiFilehandle,\n    baiUrl,\n    csiPath,\n    csiFilehandle,\n    csiUrl,\n    htsget,\n    yieldThreadTime = 100,\n    renameRefSeqs = n => n,\n  }: {\n    bamFilehandle?: GenericFilehandle\n    bamPath?: string\n    bamUrl?: string\n    baiPath?: string\n    baiFilehandle?: GenericFilehandle\n    baiUrl?: string\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    csiUrl?: string\n    renameRefSeqs?: (a: string) => string\n    yieldThreadTime?: number\n    htsget?: boolean\n  }) {\n    this.renameRefSeq = renameRefSeqs\n\n    if (bamFilehandle) {\n      this.bam = bamFilehandle\n    } else if (bamPath) {\n      this.bam = new LocalFile(bamPath)\n    } else if (bamUrl) {\n      this.bam = new RemoteFile(bamUrl)\n    } else if (htsget) {\n      this.htsget = true\n      this.bam = new NullFilehandle()\n    } else {\n      throw new Error('unable to initialize bam')\n    }\n    if (csiFilehandle) {\n      this.index = new CSI({ filehandle: csiFilehandle })\n    } else if (csiPath) {\n      this.index = new CSI({ filehandle: new LocalFile(csiPath) })\n    } else if (csiUrl) {\n      this.index = new CSI({ filehandle: new RemoteFile(csiUrl) })\n    } else if (baiFilehandle) {\n      this.index = new BAI({ filehandle: baiFilehandle })\n    } else if (baiPath) {\n      this.index = new BAI({ filehandle: new LocalFile(baiPath) })\n    } else if (baiUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(baiUrl) })\n    } else if (bamPath) {\n      this.index = new BAI({ filehandle: new LocalFile(`${bamPath}.bai`) })\n    } else if (bamUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(`${bamUrl}.bai`) })\n    } else if (htsget) {\n      this.htsget = true\n    } else {\n      throw new Error('unable to infer index format')\n    }\n    this.yieldThreadTime = yieldThreadTime\n  }\n\n  async getHeaderPre(origOpts?: BaseOpts) {\n    const opts = makeOpts(origOpts)\n    if (!this.index) {\n      return\n    }\n    const indexData = await this.index.parse(opts)\n    const ret = indexData.firstDataLine\n      ? indexData.firstDataLine.blockPosition + 65535\n      : undefined\n    let buffer\n    if (ret) {\n      const s = ret + blockLen\n      const res = await this.bam.read(Buffer.alloc(s), 0, s, 0, opts)\n      if (!res.bytesRead) {\n        throw new Error('Error reading header')\n      }\n      buffer = res.buffer.subarray(0, Math.min(res.bytesRead, ret))\n    } else {\n      buffer = await this.bam.readFile(opts)\n    }\n\n    const uncba = await unzip(buffer)\n\n    if (uncba.readInt32LE(0) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = uncba.readInt32LE(4)\n\n    this.header = uncba.toString('utf8', 8, 8 + headLen)\n    const { chrToIndex, indexToChr } = await this._readRefSeqs(\n      headLen + 8,\n      65535,\n      opts,\n    )\n    this.chrToIndex = chrToIndex\n    this.indexToChr = indexToChr\n\n    return parseHeaderText(this.header)\n  }\n\n  getHeader(opts?: BaseOpts) {\n    if (!this.headerP) {\n      this.headerP = this.getHeaderPre(opts).catch(e => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  async getHeaderText(opts: BaseOpts = {}) {\n    await this.getHeader(opts)\n    return this.header\n  }\n\n  // the full length of the refseq block is not given in advance so this grabs\n  // a chunk and doubles it if all refseqs haven't been processed\n  async _readRefSeqs(\n    start: number,\n    refSeqBytes: number,\n    opts?: BaseOpts,\n  ): Promise<{\n    chrToIndex: Record<string, number>\n    indexToChr: { refName: string; length: number }[]\n  }> {\n    if (start > refSeqBytes) {\n      return this._readRefSeqs(start, refSeqBytes * 2, opts)\n    }\n    const size = refSeqBytes + blockLen\n    const { bytesRead, buffer } = await this.bam.read(\n      Buffer.alloc(size),\n      0,\n      refSeqBytes,\n      0,\n      opts,\n    )\n    if (!bytesRead) {\n      throw new Error('Error reading refseqs from header')\n    }\n    const uncba = await unzip(\n      buffer.subarray(0, Math.min(bytesRead, refSeqBytes)),\n    )\n    const nRef = uncba.readInt32LE(start)\n    let p = start + 4\n    const chrToIndex: Record<string, number> = {}\n    const indexToChr: { refName: string; length: number }[] = []\n    for (let i = 0; i < nRef; i += 1) {\n      const lName = uncba.readInt32LE(p)\n      const refName = this.renameRefSeq(\n        uncba.toString('utf8', p + 4, p + 4 + lName - 1),\n      )\n      const lRef = uncba.readInt32LE(p + lName + 4)\n\n      chrToIndex[refName] = i\n      indexToChr.push({ refName, length: lRef })\n\n      p = p + 8 + lName\n      if (p > uncba.length) {\n        console.warn(\n          `BAM header is very big.  Re-fetching ${refSeqBytes} bytes.`,\n        )\n        return this._readRefSeqs(start, refSeqBytes * 2, opts)\n      }\n    }\n    return { chrToIndex, indexToChr }\n  }\n\n  async getRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    return gen2array(this.streamRecordsForRange(chr, min, max, opts))\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    await this.getHeader(opts)\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined || !this.index) {\n      yield []\n    } else {\n      const chunks = await this.index.blocksForRange(chrId, min - 1, max, opts)\n      yield* this._fetchChunkFeatures(chunks, chrId, min, max, opts)\n    }\n  }\n\n  async *_fetchChunkFeatures(\n    chunks: Chunk[],\n    chrId: number,\n    min: number,\n    max: number,\n    opts: BamOpts = {},\n  ) {\n    const { viewAsPairs } = opts\n    const feats = [] as BAMFeature[][]\n    let done = false\n\n    for (const chunk of chunks) {\n      const records = await this.featureCache.get(\n        chunk.toString(),\n        { chunk, opts },\n        opts.signal,\n      )\n\n      const recs = [] as BAMFeature[]\n      for (const feature of records) {\n        if (feature.seq_id() === chrId) {\n          if (feature.get('start') >= max) {\n            // past end of range, can stop iterating\n            done = true\n            break\n          } else if (feature.get('end') >= min) {\n            // must be in range\n            recs.push(feature)\n          }\n        }\n      }\n      feats.push(recs)\n      yield recs\n      if (done) {\n        break\n      }\n    }\n\n    checkAbortSignal(opts.signal)\n    if (viewAsPairs) {\n      yield this.fetchPairs(chrId, feats, opts)\n    }\n  }\n\n  async fetchPairs(chrId: number, feats: BAMFeature[][], opts: BamOpts) {\n    const { pairAcrossChr, maxInsertSize = 200000 } = opts\n    const unmatedPairs: Record<string, boolean> = {}\n    const readIds: Record<string, number> = {}\n    feats.map(ret => {\n      const readNames: Record<string, number> = {}\n      for (const element of ret) {\n        const name = element.name()\n        const id = element.id()\n        if (!readNames[name]) {\n          readNames[name] = 0\n        }\n        readNames[name]++\n        readIds[id] = 1\n      }\n      for (const [k, v] of Object.entries(readNames)) {\n        if (v === 1) {\n          unmatedPairs[k] = true\n        }\n      }\n    })\n\n    const matePromises: Promise<Chunk[]>[] = []\n    feats.map(ret => {\n      for (const f of ret) {\n        const name = f.name()\n        const start = f.get('start')\n        const pnext = f._next_pos()\n        const rnext = f._next_refid()\n        if (\n          this.index &&\n          unmatedPairs[name] &&\n          (pairAcrossChr ||\n            (rnext === chrId && Math.abs(start - pnext) < maxInsertSize))\n        ) {\n          matePromises.push(\n            this.index.blocksForRange(rnext, pnext, pnext + 1, opts),\n          )\n        }\n      }\n    })\n\n    // filter out duplicate chunks (the blocks are lists of chunks, blocks are\n    // concatenated, then filter dup chunks)\n    const map = new Map<string, Chunk>()\n    const res = await Promise.all(matePromises)\n    for (const m of res.flat()) {\n      if (!map.has(m.toString())) {\n        map.set(m.toString(), m)\n      }\n    }\n\n    const mateFeatPromises = await Promise.all(\n      [...map.values()].map(async c => {\n        const { data, cpositions, dpositions, chunk } = await this._readChunk({\n          chunk: c,\n          opts,\n        })\n        const mateRecs = [] as BAMFeature[]\n        for (const feature of await this.readBamFeatures(\n          data,\n          cpositions,\n          dpositions,\n          chunk,\n        )) {\n          if (unmatedPairs[feature.get('name')] && !readIds[feature.id()]) {\n            mateRecs.push(feature)\n          }\n        }\n        return mateRecs\n      }),\n    )\n    return mateFeatPromises.flat()\n  }\n\n  async _readRegion(position: number, size: number, opts: BaseOpts = {}) {\n    const { bytesRead, buffer } = await this.bam.read(\n      Buffer.alloc(size),\n      0,\n      size,\n      position,\n      opts,\n    )\n\n    return buffer.subarray(0, Math.min(bytesRead, size))\n  }\n\n  async _readChunk({ chunk, opts }: { chunk: Chunk; opts: BaseOpts }) {\n    const buffer = await this._readRegion(\n      chunk.minv.blockPosition,\n      chunk.fetchedSize(),\n      opts,\n    )\n\n    const {\n      buffer: data,\n      cpositions,\n      dpositions,\n    } = await unzipChunkSlice(buffer, chunk)\n    return { data, cpositions, dpositions, chunk }\n  }\n\n  async readBamFeatures(\n    ba: Buffer,\n    cpositions: number[],\n    dpositions: number[],\n    chunk: Chunk,\n  ) {\n    let blockStart = 0\n    const sink = [] as BAMFeature[]\n    let pos = 0\n    let last = +Date.now()\n\n    while (blockStart + 4 < ba.length) {\n      const blockSize = ba.readInt32LE(blockStart)\n      const blockEnd = blockStart + 4 + blockSize - 1\n\n      // increment position to the current decompressed status\n      if (dpositions) {\n        while (blockStart + chunk.minv.dataPosition >= dpositions[pos++]) {}\n        pos--\n      }\n\n      // only try to read the feature if we have all the bytes for it\n      if (blockEnd < ba.length) {\n        const feature = new BAMFeature({\n          bytes: {\n            byteArray: ba,\n            start: blockStart,\n            end: blockEnd,\n          },\n          // the below results in an automatically calculated file-offset based\n          // ID if the info for that is available, otherwise crc32 of the\n          // features\n          //\n          // cpositions[pos] refers to actual file offset of a bgzip block\n          // boundaries\n          //\n          // we multiply by (1 <<8) in order to make sure each block has a\n          // \"unique\" address space so that data in that block could never\n          // overlap\n          //\n          // then the blockStart-dpositions is an uncompressed file offset from\n          // that bgzip block boundary, and since the cpositions are multiplied\n          // by (1 << 8) these uncompressed offsets get a unique space\n          //\n          // this has an extra chunk.minv.dataPosition added on because it\n          // blockStart starts at 0 instead of chunk.minv.dataPosition\n          //\n          // the +1 is just to avoid any possible uniqueId 0 but this does not\n          // realistically happen\n          fileOffset:\n            cpositions.length > 0\n              ? cpositions[pos] * (1 << 8) +\n                (blockStart - dpositions[pos]) +\n                chunk.minv.dataPosition +\n                1\n              : // must be slice, not subarray for buffer polyfill on web\n                crc32.signed(ba.slice(blockStart, blockEnd)),\n        })\n\n        sink.push(feature)\n        if (this.yieldThreadTime && +Date.now() - last > this.yieldThreadTime) {\n          await timeout(1)\n          last = +Date.now()\n        }\n      }\n\n      blockStart = blockEnd + 1\n    }\n    return sink\n  }\n\n  async hasRefSeq(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? false : this.index?.hasRefSeq(seqId)\n  }\n\n  async lineCount(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined || !this.index ? 0 : this.index.lineCount(seqId)\n  }\n\n  async indexCov(seqName: string, start?: number, end?: number) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? [] : this.index.indexCov(seqId, start, end)\n  }\n\n  async blocksForRange(\n    seqName: string,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined\n      ? []\n      : this.index.blocksForRange(seqId, start, end, opts)\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport { Buffer } from 'buffer'\nimport { BaseOpts, BamOpts } from './util'\nimport BamFile, { BAM_MAGIC } from './bamFile'\nimport Chunk from './chunk'\nimport { parseHeaderText } from './sam'\n\ninterface HtsgetChunk {\n  url: string\n  headers?: Record<string, string>\n}\nasync function concat(arr: HtsgetChunk[], opts?: Record<string, any>) {\n  const res = await Promise.all(\n    arr.map(async chunk => {\n      const { url, headers } = chunk\n      if (url.startsWith('data:')) {\n        return Buffer.from(url.split(',')[1], 'base64')\n      } else {\n        //remove referer header, it is not even allowed to be specified\n        // @ts-expect-error\n\n        const { referer, ...rest } = headers\n        const res = await fetch(url, {\n          ...opts,\n          headers: { ...opts?.headers, ...rest },\n        })\n        if (!res.ok) {\n          throw new Error(\n            `HTTP ${res.status} fetching ${url}: ${await res.text()}`,\n          )\n        }\n        return Buffer.from(await res.arrayBuffer())\n      }\n    }),\n  )\n\n  return Buffer.concat(await Promise.all(res.map(elt => unzip(elt))))\n}\n\nexport default class HtsgetFile extends BamFile {\n  private baseUrl: string\n\n  private trackId: string\n\n  constructor(args: { trackId: string; baseUrl: string }) {\n    super({ htsget: true })\n    this.baseUrl = args.baseUrl\n    this.trackId = args.trackId\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    const base = `${this.baseUrl}/${this.trackId}`\n    const url = `${base}?referenceName=${chr}&start=${min}&end=${max}&format=BAM`\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined) {\n      yield []\n    } else {\n      const result = await fetch(url, { ...opts })\n      if (!result.ok) {\n        throw new Error(\n          `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n        )\n      }\n      const data = await result.json()\n      const uncba = await concat(data.htsget.urls.slice(1), opts)\n\n      yield* this._fetchChunkFeatures(\n        [\n          // fake stuff to pretend to be a Chunk\n          {\n            buffer: uncba,\n            _fetchedSize: undefined,\n            bin: 0,\n            compareTo() {\n              return 0\n            },\n            toUniqueString() {\n              return `${chr}_${min}_${max}`\n            },\n            fetchedSize() {\n              return 0\n            },\n            minv: {\n              dataPosition: 0,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            maxv: {\n              dataPosition: Number.MAX_SAFE_INTEGER,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            toString() {\n              return `${chr}_${min}_${max}`\n            },\n          },\n        ],\n        chrId,\n        min,\n        max,\n        opts,\n      )\n    }\n  }\n\n  async _readChunk({ chunk }: { chunk: Chunk; opts: BaseOpts }) {\n    if (!chunk.buffer) {\n      throw new Error('expected chunk.buffer in htsget')\n    }\n    return { data: chunk.buffer, cpositions: [], dpositions: [], chunk }\n  }\n\n  async getHeader(opts: BaseOpts = {}) {\n    const url = `${this.baseUrl}/${this.trackId}?referenceName=na&class=header`\n    const result = await fetch(url, opts)\n    if (!result.ok) {\n      throw new Error(\n        `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n      )\n    }\n    const data = await result.json()\n    const uncba = await concat(data.htsget.urls, opts)\n\n    if (uncba.readInt32LE(0) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = uncba.readInt32LE(4)\n    const headerText = uncba.toString('utf8', 8, 8 + headLen)\n    const samHeader = parseHeaderText(headerText)\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ref ID numbers and names\n    const idToName: { refName: string; length: number }[] = []\n    const nameToId: Record<string, number> = {}\n    const sqLines = samHeader.filter(l => l.tag === 'SQ')\n    for (const [refId, sqLine] of sqLines.entries()) {\n      let refName = ''\n      let length = 0\n      for (const item of sqLine.data) {\n        if (item.tag === 'SN') {\n          refName = item.value\n        } else if (item.tag === 'LN') {\n          length = +item.value\n        }\n      }\n      nameToId[refName] = refId\n      idToName[refId] = { refName, length }\n    }\n    this.chrToIndex = nameToId\n    this.indexToChr = idToName\n    return samHeader\n  }\n}\n"],"names":["VirtualOffset","constructor","blockPosition","dataPosition","this","toString","compareTo","b","min","args","i","length","fromBytes","bytes","offset","bigendian","Error","Chunk","minv","maxv","bin","_fetchedSize","toUniqueString","fetchedSize","undefined","timeout","ms","Promise","resolve","setTimeout","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","sort","c0","c1","dif","chunk","push","chunk1","chunk2","parsePseudoBin","lineCount","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","toNumber","longToNumber","Array","prototype","slice","call","findFirstData","firstDataLine","virtualOffset","parseNameBytes","namesBytes","renameRefSeq","s","currRefId","currNameStart","refIdToName","refNameToId","refName","IndexFile","filehandle","n","BAI","refId","opts","parse","indices","stats","_parse","readFile","readUInt32LE","refCount","readInt32LE","curr","binCount","binIndex","j","binLimit","chunkCount","k","u","v","linearCount","linearIndex","bai","maxBlockSize","indexCov","seqId","start","end","range","seqIdx","e","multiple","roundDown","depths","totalSize","currentPos","score","map","d","blocksForRange","max","indexData","ba","overlappingBins","beg","binChunks","binChunk","nintv","minLin","Math","maxLin","vp","setupP","catch","hasRefSeq","rshift","num","bits","floor","CSI","maxBinNumber","depth","minShift","parseAuxData","formatFlags","coordinateType","format","columnNumbers","ref","metaValue","metaChar","String","fromCharCode","skipLines","nameSectionLength","subarray","buffer","unzip","csiVersion","auxLength","aux","csi","reg2bins","c","l","t","bins","SEQRET_DECODER","split","CIGAR_DECODER","BamRecord","data","_tagList","_allTagsParsed","fileOffset","byteArray","_id","_refID","flags","get","field","_get","toLowerCase","seq_id","_parseTag","_tags","_parseAllTags","tags","isSegmentUnmapped","isPaired","concat","Object","keys","startsWith","seen","filter","lt","parent","children","id","mq","qual","qualRaw","join","p","lseq","strand","isReverseComplemented","multi_segment_next_segment_strand","isMateUnmapped","isMateReverseComplemented","name","_read_name","nl","tagName","_tagOffset","blockEnd","lcTag","tag","type","value","readInt8","readUInt8","readInt16LE","readUInt16LE","readFloatLE","cc","Btype","limit","cigop","console","warn","_parseCigar","cigar","match","op","toUpperCase","parseInt","isProperlyPaired","isRead1","isRead2","isSecondary","isFailedQc","isDuplicate","isSupplementary","numCigarOps","seqLen","lref","lop","length_on_ref","_n_cigar_op","_l_read_name","_seq_bytes","getReadBases","seq","seqBytes","len","buf","sb","getPairOrientation","_next_refid","s1","s2","o1","o2","tmp","template_length","_bin_mq_nl","_flag_nc","seq_length","_next_pos","toJSON","parseHeaderText","text","lines","line","fields","f","r","indexOf","BAM_MAGIC","NullFilehandle","read","stat","close","BamFile","bamFilehandle","bamPath","bamUrl","baiPath","baiFilehandle","baiUrl","csiPath","csiFilehandle","csiUrl","htsget","yieldThreadTime","renameRefSeqs","featureCache","cache","maxSize","fill","async","signal","cpositions","dpositions","_readChunk","readBamFeatures","bam","index","getHeaderPre","origOpts","obj","makeOpts","ret","res","Buffer","alloc","bytesRead","uncba","headLen","header","chrToIndex","indexToChr","_readRefSeqs","getHeader","headerP","getHeaderText","refSeqBytes","size","nRef","lName","lRef","getRecordsForRange","chr","gen","out","x","gen2array","streamRecordsForRange","chrId","_fetchChunkFeatures","viewAsPairs","feats","done","records","recs","feature","aborted","DOMException","code","checkAbortSignal","fetchPairs","pairAcrossChr","maxInsertSize","unmatedPairs","readIds","readNames","element","entries","matePromises","pnext","rnext","abs","Map","all","m","flat","has","set","values","mateRecs","_readRegion","position","blockStart","sink","pos","last","Date","now","signed","seqName","arr","url","headers","from","referer","rest","fetch","ok","status","arrayBuffer","elt","HtsgetFile","super","baseUrl","trackId","result","json","urls","samHeader","idToName","nameToId","sqLines","sqLine","item"],"sourceRoot":""}