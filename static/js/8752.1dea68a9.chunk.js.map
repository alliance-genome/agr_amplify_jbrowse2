{"version":3,"file":"static/js/8752.1dea68a9.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport {\n  supportedIndexingAdapters,\n  getSession,\n  isElectron,\n} from '@jbrowse/core/util'\nimport {\n  Link,\n  MenuItem,\n  TextField,\n  ListSubheader,\n  Typography,\n  FormControl,\n  FormControlLabel,\n  Checkbox,\n  Paper,\n  Card,\n  List,\n  ListItem,\n  CardContent,\n  IconButton,\n  InputLabel,\n  InputAdornment,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon from '@material-ui/icons/Add'\n// other\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\n\n// locals\nimport { AddTrackModel } from '../model'\nimport { AdapterMetadata } from '@jbrowse/core/pluggableElementTypes/AdapterType'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nfunction StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const classes = useStyles()\n  return trackAdapter.type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter{' '}\n      <code>{trackAdapter.type}</code> with subadapter{' '}\n      <code>{trackAdapter.subadapter?.type}</code>. Please enter a track name\n      and, if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{trackAdapter.type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n\n/**\n * categorizeAdapters takes a list of adapters and sorts their menu item elements under an appropriate ListSubheader\n *  element. In this way, adapters that are from external plugins can have headers that differentiate them from the\n *  out-of-the-box plugins.\n * @param adaptersList - a list of adapters found in the PluginManager\n * @returns a series of JSX elements that are ListSubheaders followed by the adapters\n *   found under that subheader\n */\nfunction categorizeAdapters(\n  adaptersList: { name: string; adapterMetadata: AdapterMetadata }[],\n) {\n  let currentCategory = ''\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: any = []\n  adaptersList.forEach(adapter => {\n    if (adapter.adapterMetadata?.category) {\n      if (currentCategory !== adapter.adapterMetadata?.category) {\n        currentCategory = adapter.adapterMetadata?.category\n        items.push(\n          <ListSubheader\n            key={adapter.adapterMetadata?.category}\n            value={adapter.adapterMetadata?.category}\n          >\n            {adapter.adapterMetadata?.category}\n          </ListSubheader>,\n        )\n      }\n      items.push(\n        <MenuItem key={adapter.name} value={adapter.name}>\n          {adapter.adapterMetadata?.displayName\n            ? adapter.adapterMetadata?.displayName\n            : adapter.name}\n        </MenuItem>,\n      )\n    }\n  })\n  return items\n}\n\nfunction getAdapterTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('adapter') as {\n    name: string\n    adapterMetadata: AdapterMetadata\n  }[]\n}\n\nfunction getTrackTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('track') as { name: string }[]\n}\n\nconst TextIndexingConfig = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [attributes, setAttributes] = useState(['Name', 'ID'])\n  const [exclude, setExclude] = useState(['CDS', 'exon'])\n  const sections = [\n    {\n      label: 'Indexing attributes',\n      values: attributes,\n    },\n    {\n      label: 'Feature types to exclude',\n      values: exclude,\n    },\n  ]\n  useEffect(() => {\n    model.setTextIndexingConf({ attributes, exclude })\n  }, [model, attributes, exclude])\n\n  return (\n    <Paper className={classes.paper}>\n      <InputLabel>Indexing configuration</InputLabel>\n      {sections.map((section, index) => (\n        <Card raised key={section.label} className={classes.card}>\n          <CardContent>\n            <InputLabel>{section.label}</InputLabel>\n            <List disablePadding>\n              {section.values.map((val: string, idx: number) => (\n                <ListItem key={idx} disableGutters>\n                  <TextField\n                    value={val}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            color=\"secondary\"\n                            onClick={() => {\n                              const newAttr = section.values.filter((a, i) => {\n                                return i !== idx\n                              })\n                              index === 0\n                                ? setAttributes(newAttr)\n                                : setExclude(newAttr)\n                            }}\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </ListItem>\n              ))}\n              <ListItem disableGutters>\n                <TextField\n                  value={index === 0 ? value1 : value2}\n                  placeholder=\"add new\"\n                  onChange={event => {\n                    index === 0\n                      ? setValue1(event.target.value)\n                      : setValue2(event.target.value)\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          onClick={() => {\n                            if (index === 0) {\n                              const newAttr: string[] = attributes\n                              newAttr.push(value1)\n                              setAttributes(newAttr)\n                              setValue1('')\n                            } else {\n                              const newFeat: string[] = exclude\n                              newFeat.push(value2)\n                              setExclude(newFeat)\n                              setValue2('')\n                            }\n                          }}\n                          disabled={index === 0 ? value1 === '' : value2 === ''}\n                          color=\"secondary\"\n                          data-testid={`stringArrayAdd-Feat`}\n                        >\n                          <AddIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </ListItem>\n            </List>\n          </CardContent>\n        </Card>\n      ))}\n    </Paper>\n  )\n})\n\nconst TrackAdapterSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackAdapter } = model\n  // prettier-ignore\n  const adapters = getAdapterTypes(getEnv(session).pluginManager)\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackAdapter?.type !== 'UNKNOWN' ? trackAdapter?.type : ''}\n      label=\"adapterType\"\n      helperText=\"Select an adapter type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n      }}\n    >\n      {adapters\n        // Excludes any adapter with the 'adapterMetadata.hiddenFromGUI' property, and anything with the 'adapterMetadata.category' property\n        .filter(\n          elt =>\n            !elt.adapterMetadata?.hiddenFromGUI &&\n            !elt.adapterMetadata?.category,\n        )\n        .map(elt => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.adapterMetadata?.displayName\n              ? elt.adapterMetadata?.displayName\n              : elt.name}\n          </MenuItem>\n        ))}\n      {/* adapters with the 'adapterMetadata.category' property are categorized by the value of the property here */}\n      {categorizeAdapters(\n        adapters.filter(elt => !elt.adapterMetadata?.hiddenFromGUI),\n      )}\n    </TextField>\n  )\n})\n\nfunction UnknownAdapterPrompt({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        JBrowse was not able to guess the adapter type for this data, but it may\n        be in the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector model={model} />\n    </>\n  )\n}\n\nconst TrackTypeSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackType } = model\n  const trackTypes = getTrackTypes(getEnv(session).pluginManager)\n\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackType}\n      label=\"trackType\"\n      helperText=\"Select a track type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setTrackType(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n      }}\n    >\n      {trackTypes.map(({ name }) => (\n        <MenuItem key={name} value={name}>\n          {name}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst TrackAssemblySelector = observer(\n  ({ model }: { model: AddTrackModel }) => {\n    const session = getSession(model)\n    const { assembly } = model\n    return (\n      <TextField\n        value={assembly}\n        label=\"assemblyName\"\n        helperText=\"Assembly to which the track will be added\"\n        select\n        fullWidth\n        onChange={event => model.setAssembly(event.target.value)}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        }}\n      >\n        {session.assemblies\n          .map(conf => readConfObject(conf, 'name'))\n          .map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n      </TextField>\n    )\n  },\n)\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const [check, setCheck] = useState(true)\n  const { trackName, trackAdapter, trackType, warningMessage, adapterHint } =\n    model\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  }\n\n  if (adapterHint === '' && trackAdapter) {\n    model.setAdapterHint(trackAdapter.type)\n  }\n\n  if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n\n  const supportedForIndexing = supportedIndexingAdapters(trackAdapter?.type)\n  return (\n    <div>\n      {trackAdapter ? (\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n      ) : null}\n      {warningMessage ? (\n        <Typography style={{ color: 'orange' }}>{warningMessage}</Typography>\n      ) : null}\n      <TextField\n        className={classes.spacing}\n        label=\"trackName\"\n        helperText=\"A name for this track\"\n        fullWidth\n        value={trackName}\n        onChange={event => model.setTrackName(event.target.value)}\n        inputProps={{ 'data-testid': 'trackNameInput' }}\n      />\n      <TrackAdapterSelector model={model} />\n      <TrackTypeSelector model={model} />\n      <TrackAssemblySelector model={model} />\n      {isElectron && supportedForIndexing && (\n        <FormControl>\n          <FormControlLabel\n            label={'Index track for text searching?'}\n            control={\n              <Checkbox\n                checked={check}\n                onChange={e => {\n                  setCheck(e.target.checked)\n                  model.setTextIndexTrack(e.target.checked)\n                }}\n              />\n            }\n          />\n        </FormControl>\n      )}\n      {isElectron && check && supportedForIndexing ? (\n        <TextIndexingConfig model={model} />\n      ) : null}\n    </div>\n  )\n}\n\nexport default observer(ConfirmTrack)\n","import React from 'react'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { Paper, makeStyles } from '@material-ui/core'\nimport { AddTrackModel } from '../model'\nimport { getRoot } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const rootModel = getRoot(model)\n\n  return (\n    <Paper className={classes.paper}>\n      <FileSelector\n        name=\"Main file\"\n        description=\"\"\n        location={model.trackData}\n        setLocation={model.setTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n      <div className={classes.spacer} />\n      <FileSelector\n        name=\"Index file\"\n        description=\"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\"\n        location={model.indexTrackData}\n        setLocation={model.setIndexTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n    </Paper>\n  )\n}\n\nexport default observer(TrackSourceSelect)\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport {\n  getSession,\n  isElectron,\n  supportedIndexingAdapters,\n} from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { Alert } from '@material-ui/lab'\n\n// locals\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  const { rootModel } = pluginManager\n  const { jobsManager } = rootModel\n  const {\n    assembly,\n    trackAdapter,\n    trackData,\n    trackName,\n    trackType,\n    textIndexTrack,\n    textIndexingConf,\n  } = model\n  const [trackErrorMessage, setTrackErrorMessage] = useState<string>()\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  async function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}${\n      session.adminMode ? '' : '-sessionTrack'\n    }`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n      // @ts-ignore\n      session.addTrackConf({\n        trackId,\n        type: trackType,\n        name: trackName,\n        assemblyNames: [assembly],\n        adapter: {\n          ...trackAdapter,\n          sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n        },\n      })\n      const textSearchingDefault = {\n        attributes: ['Name', 'ID'],\n        exclude: ['CDS', 'exon'],\n      }\n      if (model.view) {\n        model.view.showTrack(trackId)\n        if (isElectron) {\n          if (textIndexTrack && supportedIndexingAdapters(trackAdapter.type)) {\n            const attr = textIndexingConf || textSearchingDefault\n            const indexName = trackName + '-index'\n            const indexingParams = {\n              ...attr,\n              assemblies: [assembly],\n              tracks: [trackId],\n              indexType: 'perTrack',\n              name: indexName,\n              timestamp: new Date().toISOString(),\n            }\n            const newEntry = {\n              indexingParams: indexingParams,\n              name: indexName,\n              cancelCallback: () => {\n                jobsManager.abortJob()\n              },\n            }\n            jobsManager.queueJob(newEntry)\n          }\n        }\n      } else {\n        session.notify(\n          'Open a new view, or use the track selector in an existing view, to view this track',\n          'info',\n        )\n      }\n      model.clearData()\n      // @ts-ignore\n      session.hideWidget(model)\n    } else {\n      setTrackErrorMessage(\n        'Failed to add track.\\nThe configuration of this file is not currently supported.',\n      )\n    }\n  }\n\n  function handleBack() {\n    setTrackErrorMessage(undefined)\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n              {trackErrorMessage ? (\n                <div className={classes.alertContainer}>\n                  <Alert severity=\"error\">{trackErrorMessage}</Alert>\n                </div>\n              ) : null}\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddTrackWidget)\n"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","paper","display","flexDirection","padding","spacer","height","card","marginTop","StatusMessage","trackAdapter","trackType","classes","type","Typography","className","subadapter","categorizeAdapters","adaptersList","currentCategory","items","forEach","adapter","adapterMetadata","category","push","ListSubheader","value","MenuItem","name","displayName","TextIndexingConfig","observer","model","useState","value1","setValue1","value2","setValue2","attributes","setAttributes","exclude","setExclude","sections","label","values","useEffect","setTextIndexingConf","Paper","InputLabel","map","section","index","Card","raised","CardContent","List","disablePadding","val","idx","ListItem","disableGutters","TextField","InputProps","endAdornment","InputAdornment","position","IconButton","color","onClick","newAttr","filter","a","i","Delete","placeholder","onChange","event","target","newFeat","disabled","Add","TrackAdapterSelector","session","getSession","adapters","getEnv","pluginManager","getElementTypesInGroup","helperText","select","fullWidth","setAdapterHint","SelectProps","SelectDisplayProps","elt","hiddenFromGUI","UnknownAdapterPrompt","Link","href","rel","TrackTypeSelector","trackTypes","setTrackType","TrackAssemblySelector","assembly","setAssembly","assemblies","conf","readConfObject","check","setCheck","trackName","warningMessage","adapterHint","unsupported","UNKNOWN","supportedForIndexing","supportedIndexingAdapters","style","setTrackName","inputProps","isElectron","FormControl","FormControlLabel","control","Checkbox","checked","e","setTextIndexTrack","rootModel","getRoot","FileSelector","description","location","trackData","setLocation","setTrackData","setName","indexTrackData","setIndexTrackData","root","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","alertContainer","steps","activeStep","setActiveStep","jobsManager","textIndexTrack","textIndexingConf","trackErrorMessage","setTrackErrorMessage","getStepContent","step","handleNext","length","trackId","toLowerCase","replace","Date","now","adminMode","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","sequenceAdapter","getConf","textSearchingDefault","view","showTrack","attr","indexName","indexingParams","tracks","indexType","timestamp","toISOString","newEntry","cancelCallback","abortJob","queueJob","notify","clearData","hideWidget","handleBack","undefined","isNextDisabled","Stepper","orientation","Step","StepLabel","StepContent","Button","variant","Alert","severity"],"sourceRoot":""}