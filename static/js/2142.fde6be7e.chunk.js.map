{"version":3,"file":"static/js/2142.fde6be7e.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/cram/src/unzip-pako.ts","../../../node_modules/@gmod/cram/src/errors.ts","../../../node_modules/@gmod/cram/src/rans/constants.js","../../../node_modules/@gmod/cram/src/rans/decoding.js","../../../node_modules/@gmod/cram/src/rans/frequencies.js","../../../node_modules/@gmod/cram/src/rans/index.js","../../../node_modules/@gmod/cram/src/rans/d04.js","../../../node_modules/@gmod/cram/src/rans/d14.js","../../../node_modules/@gmod/cram/src/cramFile/sectionParsers.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/getBits.ts","../../../node_modules/@gmod/cram/src/cramFile/util.ts","../../../node_modules/@gmod/cram/src/cramFile/constants.ts","../../../node_modules/@gmod/cram/src/cramFile/record.ts","../../../node_modules/@gmod/cram/src/cramFile/slice/decodeRecord.ts","../../../node_modules/@gmod/cram/src/cramFile/slice/index.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/_base.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/huffman.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/external.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/byteArrayStop.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/byteArrayLength.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/beta.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/gamma.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/index.ts","../../../node_modules/@gmod/cram/src/cramFile/codecs/subexp.ts","../../../node_modules/@gmod/cram/src/cramFile/container/compressionScheme.ts","../../../node_modules/@gmod/cram/src/cramFile/container/index.ts","../../../node_modules/@gmod/cram/src/io/index.ts","../../../node_modules/@gmod/cram/src/typescript.ts","../../../node_modules/@gmod/cram/src/sam.ts","../../../node_modules/@gmod/cram/src/cramFile/file.ts","../../../node_modules/@gmod/cram/src/cramFile/index.ts","../../../node_modules/@gmod/cram/src/indexedCramFile.ts","../../../node_modules/@gmod/cram/src/craiIndex.ts","../../../node_modules/@jkbonfield/htscodecs/arith_gen.js","../../../node_modules/@jkbonfield/htscodecs/arith_sh.js","../../../node_modules/@jkbonfield/htscodecs/byte_model.js","../../../node_modules/@jkbonfield/htscodecs/fqzcomp.js","../../../node_modules/@jkbonfield/htscodecs/index.js","../../../node_modules/@jkbonfield/htscodecs/iostream.js","../../../node_modules/@jkbonfield/htscodecs/rans.js","../../../node_modules/@jkbonfield/htscodecs/rans4x16.js","../../../node_modules/@jkbonfield/htscodecs/tok3.js","../../../node_modules/bzip2/bzip2.js","../../../node_modules/charenc/charenc.js","../../../node_modules/crypt/crypt.js","../../../node_modules/is-buffer/index.js","../../../node_modules/md5/md5.js"],"sourcesContent":["import { inflate } from 'pako'\n\nexport function unzip(input: Buffer) {\n  return Buffer.from(inflate(input))\n}\n","export class CramError extends Error {}\n\n/** Error caused by encountering a part of the CRAM spec that has not yet been implemented */\nexport class CramUnimplementedError extends Error {}\n\n/** An error caused by malformed data.  */\nexport class CramMalformedError extends CramError {}\n\n/**\n * An error caused by data being too big, exceeding a size limit.\n */\nexport class CramSizeLimitError extends CramError {}\n\n/**\n * An invalid argument was supplied to a cram-js method or object.\n */\nexport class CramArgumentError extends CramError {}\n","const TF_SHIFT = 12\nconst TOTFREQ = 1 << TF_SHIFT\nconst RANS_BYTE_L = 1 << 23\n\nexport { TF_SHIFT, TOTFREQ, RANS_BYTE_L }\n","import { CramMalformedError } from '../errors'\n\nimport { RANS_BYTE_L } from './constants'\n\nclass FC {\n  // int F, C;\n  constructor() {\n    this.F = undefined\n    this.C = undefined\n  }\n}\n\nclass AriDecoder {\n  // final FC[] fc = new FC[256];\n  // byte[] R;\n\n  constructor() {\n    this.fc = new Array(256)\n    for (let i = 0; i < this.fc.length; i += 1) {\n      this.fc[i] = new FC()\n    }\n    this.R = null\n  }\n}\n\nclass Symbol {\n  // int start; // Start of range.\n  // int freq; // Symbol frequency.\n  constructor() {\n    this.start = undefined\n    this.freq = undefined\n  }\n}\n\n// Initialize a decoder symbol to start \"start\" and frequency \"freq\"\nfunction symbolInit(sym, start, freq) {\n  if (!(start <= 1 << 16)) {\n    throw new CramMalformedError(`assertion failed: start <= 1<<16`)\n  }\n  if (!(freq <= (1 << 16) - start)) {\n    throw new CramMalformedError(`assertion failed: freq <= 1<<16`)\n  }\n  sym.start = start\n  sym.freq = freq\n}\n\n// Advances in the bit stream by \"popping\" a single symbol with range start\n// \"start\" and frequency \"freq\". All frequencies are assumed to sum to\n// \"1 << scaleBits\".\n// No renormalization or output happens.\n/* private static int */ function advanceStep(\n  /* final int */ r,\n  /* final int */ start,\n  /* final int */ freq,\n  /* final int */ scaleBits,\n) {\n  /* final int */ const mask = (1 << scaleBits) - 1\n\n  // s, x = D(x)\n  return freq * (r >> scaleBits) + (r & mask) - start\n}\n\n// Equivalent to RansDecAdvanceStep that takes a symbol.\n/* static int  */ function advanceSymbolStep(\n  /* final int */ r,\n  /* final RansDecSymbol */ sym,\n  /* final int */ scaleBits,\n) {\n  return advanceStep(r, sym.start, sym.freq, scaleBits)\n}\n\n// Returns the current cumulative frequency (map it to a symbol yourself!)\n/* static int */ function get(/* final int */ r, /* final int */ scaleBits) {\n  return r & ((1 << scaleBits) - 1)\n}\n\n// Advances in the bit stream by \"popping\" a single symbol with range start\n// \"start\" and frequency \"freq\". All frequencies are assumed to sum to\n// \"1 << scaleBits\",\n// and the resulting bytes get written to ptr (which is updated).\n/* private static int */ function advance(\n  /* int */ r,\n  /* final ByteBuffer */ pptr,\n  /* final int */ start,\n  /* final int */ freq,\n  /* final int */ scaleBits,\n) {\n  /* final int */ const mask = (1 << scaleBits) - 1\n\n  // s, x = D(x)\n  r = freq * (r >> scaleBits) + (r & mask) - start\n\n  // re-normalize\n  if (r < RANS_BYTE_L) {\n    do {\n      /* final int */ const b = 0xff & pptr.get()\n      r = (r << 8) | b\n    } while (r < RANS_BYTE_L)\n  }\n\n  return r\n}\n\n// Equivalent to RansDecAdvance that takes a symbol.\n/*  static int */ function advanceSymbol(\n  /* final int */ r,\n  /* final ByteBuffer */ pptr,\n  /* final RansDecSymbol */ sym,\n  /* final int */ scaleBits,\n) {\n  return advance(r, pptr, sym.start, sym.freq, scaleBits)\n}\n\n// Re-normalize.\n/*  static int */ function renormalize(\n  /* int */ r,\n  /* final ByteBuffer */ pptr,\n) {\n  // re-normalize\n  if (r < RANS_BYTE_L) {\n    do {\n      r = (r << 8) | (0xff & pptr.get())\n    } while (r < RANS_BYTE_L)\n  }\n\n  return r\n}\n\nconst Decode = {\n  FC,\n  AriDecoder,\n  Symbol,\n  symbolInit,\n  advanceStep,\n  advanceSymbolStep,\n  get,\n  advanceSymbol,\n  renormalize,\n}\n\nexport default Decode\n","import { CramMalformedError } from '../errors'\n\nimport { TOTFREQ } from './constants'\nimport Decoding from './decoding'\n\nfunction assert(result) {\n  if (!result) {\n    throw new CramMalformedError('assertion failed')\n  }\n}\n\nexport function readStatsO0(\n  /* ByteBuffer */ cp,\n  /* Decoding.AriDecoder */ decoder,\n  /* Decoding.RansDecSymbol[] */ syms,\n) {\n  // Pre-compute reverse lookup of frequency.\n  let rle = 0\n  let x = 0\n  let j = cp.get() & 0xff\n  do {\n    if (decoder.fc[j] == null) {\n      decoder.fc[j] = new Decoding.FC()\n    }\n    decoder.fc[j].F = cp.get() & 0xff\n    if (decoder.fc[j].F >= 128) {\n      decoder.fc[j].F &= ~128\n      decoder.fc[j].F = ((decoder.fc[j].F & 127) << 8) | (cp.get() & 0xff)\n    }\n    decoder.fc[j].C = x\n\n    Decoding.symbolInit(syms[j], decoder.fc[j].C, decoder.fc[j].F)\n\n    /* Build reverse lookup table */\n    if (!decoder.R) {\n      decoder.R = new Array(TOTFREQ)\n    }\n    decoder.R.fill(j, x, x + decoder.fc[j].F)\n\n    x += decoder.fc[j].F\n\n    if (rle === 0 && j + 1 === (0xff & cp.getByteAt(cp.position()))) {\n      j = cp.get() & 0xff\n      rle = cp.get() & 0xff\n    } else if (rle !== 0) {\n      rle -= 1\n      j += 1\n    } else {\n      j = cp.get() & 0xff\n    }\n  } while (j !== 0)\n\n  assert(x < TOTFREQ)\n}\n\nexport function readStatsO1(\n  /* ByteBuffer */ cp,\n  /*  Decoding.AriDecoder[] */ D,\n  /* Decoding.RansDecSymbol[][] */ syms,\n) {\n  let rlei = 0\n  let i = 0xff & cp.get()\n  do {\n    let rlej = 0\n    let x = 0\n    let j = 0xff & cp.get()\n    if (D[i] == null) {\n      D[i] = new Decoding.AriDecoder()\n    }\n    do {\n      if (D[i].fc[j] == null) {\n        D[i].fc[j] = new Decoding.FC()\n      }\n      D[i].fc[j].F = 0xff & cp.get()\n      if (D[i].fc[j].F >= 128) {\n        D[i].fc[j].F &= ~128\n        D[i].fc[j].F = ((D[i].fc[j].F & 127) << 8) | (0xff & cp.get())\n      }\n      D[i].fc[j].C = x\n\n      if (D[i].fc[j].F === 0) {\n        D[i].fc[j].F = TOTFREQ\n      }\n\n      if (syms[i][j] == null) {\n        syms[i][j] = new Decoding.RansDecSymbol()\n      }\n\n      Decoding.symbolInit(syms[i][j], D[i].fc[j].C, D[i].fc[j].F)\n\n      /* Build reverse lookup table */\n      if (D[i].R == null) {\n        D[i].R = new Array(TOTFREQ)\n      }\n      D[i].R.fill(j, x, x + D[i].fc[j].F)\n\n      x += D[i].fc[j].F\n      assert(x <= TOTFREQ)\n\n      if (rlej === 0 && j + 1 === (0xff & cp.getByteAt(cp.position()))) {\n        j = 0xff & cp.get()\n        rlej = 0xff & cp.get()\n      } else if (rlej !== 0) {\n        rlej -= 1\n        j += 1\n      } else {\n        j = 0xff & cp.get()\n      }\n    } while (j !== 0)\n\n    if (rlei === 0 && i + 1 === (0xff & cp.getByteAt(cp.position()))) {\n      i = 0xff & cp.get()\n      rlei = 0xff & cp.get()\n    } else if (rlei !== 0) {\n      rlei -= 1\n      i += 1\n    } else {\n      i = 0xff & cp.get()\n    }\n  } while (i !== 0)\n}\n","import { CramMalformedError } from '../errors'\n\nimport Decoding from './decoding'\nimport { readStatsO0, readStatsO1 } from './frequencies'\n\nimport D04 from './d04'\nimport D14 from './d14'\n\n// const /* int */ ORDER_BYTE_LENGTH = 1\n// const /* int */ COMPRESSED_BYTE_LENGTH = 4\nconst /* int */ RAW_BYTE_LENGTH = 4\n// const /* int */ PREFIX_BYTE_LENGTH =\n//   ORDER_BYTE_LENGTH + COMPRESSED_BYTE_LENGTH + RAW_BYTE_LENGTH\n\n// enum ORDER {\n//     ZERO, ONE;\n\n//     static ORDER fromInt(const /* int */ value) {\n//         try {\n//             return ORDER.values()[value];\n//         } catch (const ArrayIndexOutOfBoundsException e) {\n//             throw new RuntimeException(\"Unknown rANS order: \" + value);\n//         }\n//     }\n// }\n\n// static ByteBuffer compress(const ByteBuffer input, const ORDER order, const ByteBuffer out) {\n//     if (input.remaining() == 0)\n//         return EMPTY_BUFFER;\n\n//     if (input.remaining() < 4)\n//         return encode_order0_way4(input, out);\n\n//     switch (order) {\n//         case ZERO:\n//             return encode_order0_way4(input, out);\n//         case ONE:\n//             return encode_order1_way4(input, out);\n\n//         default:\n//             throw new RuntimeException(\"Unknown rANS order: \" + order);\n//     }\n// }\n\n// static /* ByteBuffer */ allocateIfNeeded(/* const int */ in_size,\n//                                            /* const ByteBuffer */ out_buf) {\n//     const /* int */ compressedSize = (/* int */) (1.05 * in_size + 257 * 257 * 3 + 4);\n//     if (out_buf == null)\n//         return ByteBuffer.allocate(compressedSize);\n//     if (out_buf.remaining() < compressedSize)\n//         throw new RuntimeException(\"Insufficient buffer size.\");\n//     out_buf.order(ByteOrder.LITTLE_ENDIAN);\n//     return out_buf;\n// }\n\n// static ByteBuffer encode_order0_way4(const ByteBuffer input,\n//                                              ByteBuffer out_buf) {\n//     const /* int */ in_size = input.remaining();\n//     out_buf = allocateIfNeeded(in_size, out_buf);\n//     const /* int */ freqTableStart = PREFIX_BYTE_LENGTH;\n//     out_buf.position(freqTableStart);\n\n//     const /* int */[] F = Frequencies.calcFrequencies_o0(in);\n//     const RansEncSymbol[] syms = Frequencies.buildSyms_o0(F);\n\n//     const ByteBuffer cp = out_buf.slice();\n//     const /* int */ frequencyTable_size = Frequencies.writeFrequencies_o0(cp, F);\n\n//     input.rewind();\n//     const /* int */ compressedBlob_size = E04.compress(input, syms, cp);\n\n//     finalizeCompressed(0, out_buf, in_size, frequencyTable_size,\n//             compressedBlob_size);\n//     return out_buf;\n// }\n\n// static ByteBuffer encode_order1_way4(const ByteBuffer input,\n//                                              ByteBuffer out_buf) {\n//     const /* int */ in_size = input.remaining();\n//     out_buf = allocateIfNeeded(in_size, out_buf);\n//     const /* int */ freqTableStart = PREFIX_BYTE_LENGTH;\n//     out_buf.position(freqTableStart);\n\n//     const /* int */[][] F = Frequencies.calcFrequencies_o1(in);\n//     const RansEncSymbol[][] syms = Frequencies.buildSyms_o1(F);\n\n//     const ByteBuffer cp = out_buf.slice();\n//     const /* int */ frequencyTable_size = Frequencies.writeFrequencies_o1(cp, F);\n\n//     input.rewind();\n//     const /* int */ compressedBlob_size = E14.compress(input, syms, cp);\n\n//     finalizeCompressed(1, out_buf, in_size, frequencyTable_size,\n//             compressedBlob_size);\n//     return out_buf;\n// }\n\n// static void finalizeCompressed(const /* int */ order, const ByteBuffer out_buf,\n//                                        const /* int */ in_size, const /* int */ frequencyTable_size, const /* int */ compressedBlob_size) {\n//     out_buf.limit(PREFIX_BYTE_LENGTH + frequencyTable_size\n//             + compressedBlob_size);\n//     out_buf.put(0, (byte) order);\n//     out_buf.order(ByteOrder.LITTLE_ENDIAN);\n//     const /* int */ compressedSizeOffset = ORDER_BYTE_LENGTH;\n//     out_buf.putInt(compressedSizeOffset, frequencyTable_size\n//             + compressedBlob_size);\n//     const /* int */ rawSizeOffset = ORDER_BYTE_LENGTH + COMPRESSED_BYTE_LENGTH;\n//     out_buf.putInt(rawSizeOffset, in_size);\n//     out_buf.rewind();\n// }\n\nfunction /* static ByteBuffer */ uncompressOrder0Way4(\n  /* const ByteBuffer  */ input,\n  /* const ByteBuffer  */ out,\n) {\n  // input.order(ByteOrder.LITTLE_ENDIAN);\n  const D = new Decoding.AriDecoder()\n  const syms = new Array(256)\n  for (let i = 0; i < syms.length; i += 1) {\n    syms[i] = new Decoding.Symbol()\n  }\n\n  readStatsO0(input, D, syms)\n\n  D04(input, D, syms, out)\n\n  return out\n}\n\nfunction /* static ByteBuffer */ uncompressOrder1Way4(\n  /* const ByteBuffer */ input,\n  /* const ByteBuffer */ output,\n) {\n  const D = new Array(256)\n  for (let i = 0; i < D.length; i += 1) {\n    D[i] = new Decoding.AriDecoder()\n  }\n  const /* Decoding.RansDecSymbol[][]  */ syms = new Array(256)\n  for (let i = 0; i < syms.length; i += 1) {\n    syms[i] = new Array(256)\n    for (let j = 0; j < syms[i].length; j += 1) {\n      syms[i][j] = new Decoding.Symbol()\n    }\n  }\n  readStatsO1(input, D, syms)\n\n  D14(input, output, D, syms)\n\n  return output\n}\n\n/* compat layer to make a node buffer act like a java ByteBuffer */\nclass ByteBuffer {\n  constructor(nodeBuffer, initialInputPosition = 0) {\n    this._buffer = nodeBuffer\n    this._position = initialInputPosition\n    this.length = nodeBuffer.length\n  }\n\n  get() {\n    const b = this._buffer[this._position]\n    this._position += 1\n    return b\n  }\n\n  getByte() {\n    return this.get()\n  }\n\n  getByteAt(position) {\n    return this._buffer[position]\n  }\n\n  position() {\n    return this._position\n  }\n\n  put(val) {\n    this._buffer[this._position] = val\n    this._position += 1\n    return val\n  }\n\n  putAt(position, val) {\n    this._buffer[position] = val\n    return val\n  }\n\n  setPosition(pos) {\n    this._position = pos\n    return pos\n  }\n\n  getInt() {\n    const i = this._buffer.readInt32LE(this._position)\n    this._position += 4\n    return i\n  }\n\n  remaining() {\n    return this._buffer.length - this._position\n  }\n}\n\n// static /* const */ ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);\nexport default function uncompress(\n  inputBuffer,\n  outputBuffer,\n  initialInputPosition = 0,\n) {\n  if (inputBuffer.length === 0) {\n    outputBuffer.fill(0)\n    return outputBuffer\n  }\n\n  const input = new ByteBuffer(inputBuffer, initialInputPosition)\n  // input.order(ByteOrder.LITTLE_ENDIAN);\n\n  const order = input.get()\n  if (order !== 0 && order !== 1) {\n    throw new CramMalformedError(`Invalid rANS order ${order}`)\n  }\n\n  const /* int */ inputSize = input.getInt()\n  if (inputSize !== input.remaining() - RAW_BYTE_LENGTH) {\n    throw new CramMalformedError('Incorrect input length.')\n  }\n\n  const /* int */ outputSize = input.getInt()\n  const output = new ByteBuffer(outputBuffer || Buffer.allocUnsafe(outputSize))\n  // TODO output.limit(outputSize)\n\n  if (output.length < outputSize) {\n    throw new CramMalformedError(\n      `Output buffer too small to fit ${outputSize} bytes.`,\n    )\n  }\n\n  switch (order) {\n    case 0:\n      return uncompressOrder0Way4(input, output)\n\n    case 1:\n      return uncompressOrder1Way4(input, output)\n\n    default:\n      throw new CramMalformedError(`Invalid rANS order: ${order}`)\n  }\n}\n","import { CramMalformedError } from '../errors'\n\nimport { TF_SHIFT } from './constants'\nimport Decoding from './decoding'\n\nexport default function uncompress(\n  /* ByteBuffer */ input,\n  /* Decoding.AriDecoder */ D,\n  /* Decoding.Symbol[] */ syms,\n  /* ByteBuffer */ out,\n) {\n  let rans0 = input.getInt()\n  let rans1 = input.getInt()\n  let rans2 = input.getInt()\n  let rans3 = input.getInt()\n\n  const /* int */ outputSize = out.remaining()\n  const /* int */ outputEnd = outputSize & ~3\n  for (let i = 0; i < outputEnd; i += 4) {\n    const /* byte */ c0 = D.R[Decoding.get(rans0, TF_SHIFT)]\n    const /* byte */ c1 = D.R[Decoding.get(rans1, TF_SHIFT)]\n    const /* byte */ c2 = D.R[Decoding.get(rans2, TF_SHIFT)]\n    const /* byte */ c3 = D.R[Decoding.get(rans3, TF_SHIFT)]\n\n    out.putAt(i, c0)\n    out.putAt(i + 1, c1)\n    out.putAt(i + 2, c2)\n    out.putAt(i + 3, c3)\n\n    rans0 = Decoding.advanceSymbolStep(rans0, syms[0xff & c0], TF_SHIFT)\n    rans1 = Decoding.advanceSymbolStep(rans1, syms[0xff & c1], TF_SHIFT)\n    rans2 = Decoding.advanceSymbolStep(rans2, syms[0xff & c2], TF_SHIFT)\n    rans3 = Decoding.advanceSymbolStep(rans3, syms[0xff & c3], TF_SHIFT)\n\n    rans0 = Decoding.renormalize(rans0, input)\n    rans1 = Decoding.renormalize(rans1, input)\n    rans2 = Decoding.renormalize(rans2, input)\n    rans3 = Decoding.renormalize(rans3, input)\n  }\n\n  out.setPosition(outputEnd)\n  let /* byte */ c\n  switch (outputSize & 3) {\n    case 0:\n      break\n    case 1:\n      c = D.R[Decoding.get(rans0, TF_SHIFT)]\n      Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n      break\n\n    case 2:\n      c = D.R[Decoding.get(rans0, TF_SHIFT)]\n      Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n\n      c = D.R[Decoding.get(rans1, TF_SHIFT)]\n      Decoding.advanceSymbol(rans1, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n      break\n\n    case 3:\n      c = D.R[Decoding.get(rans0, TF_SHIFT)]\n      Decoding.advanceSymbol(rans0, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n\n      c = D.R[Decoding.get(rans1, TF_SHIFT)]\n      Decoding.advanceSymbol(rans1, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n\n      c = D.R[Decoding.get(rans2, TF_SHIFT)]\n      Decoding.advanceSymbol(rans2, input, syms[0xff & c], TF_SHIFT)\n      out.put(c)\n      break\n\n    default:\n      throw new CramMalformedError(\n        'invalid output size encountered during rANS decoding',\n      )\n  }\n\n  out.setPosition(0)\n}\n","import { TF_SHIFT } from './constants'\nimport Decoding from './decoding'\n\nexport default function uncompress(\n  /* ByteBuffer */ input,\n  /* ByteBuffer */ output,\n  /* Decoding.AriDecoder[] */ D,\n  /* Decoding.Symbol[][] */ syms,\n) {\n  const /* int */ outputSize = output.remaining()\n  let rans0 = input.getInt()\n  let rans1 = input.getInt()\n  let rans2 = input.getInt()\n  let rans7 = input.getInt()\n\n  const /* int */ isz4 = outputSize >> 2\n  let /* int */ i0 = 0\n  let /* int */ i1 = isz4\n  let /* int */ i2 = 2 * isz4\n  let /* int */ i7 = 3 * isz4\n  let /* int */ l0 = 0\n  let /* int */ l1 = 0\n  let /* int */ l2 = 0\n  let /* int */ l7 = 0\n  for (; i0 < isz4; i0 += 1, i1 += 1, i2 += 1, i7 += 1) {\n    const /* int */ c0 = 0xff & D[l0].R[Decoding.get(rans0, TF_SHIFT)]\n    const /* int */ c1 = 0xff & D[l1].R[Decoding.get(rans1, TF_SHIFT)]\n    const /* int */ c2 = 0xff & D[l2].R[Decoding.get(rans2, TF_SHIFT)]\n    const /* int */ c7 = 0xff & D[l7].R[Decoding.get(rans7, TF_SHIFT)]\n\n    output.putAt(i0, c0)\n    output.putAt(i1, c1)\n    output.putAt(i2, c2)\n    output.putAt(i7, c7)\n\n    rans0 = Decoding.advanceSymbolStep(rans0, syms[l0][c0], TF_SHIFT)\n    rans1 = Decoding.advanceSymbolStep(rans1, syms[l1][c1], TF_SHIFT)\n    rans2 = Decoding.advanceSymbolStep(rans2, syms[l2][c2], TF_SHIFT)\n    rans7 = Decoding.advanceSymbolStep(rans7, syms[l7][c7], TF_SHIFT)\n\n    rans0 = Decoding.renormalize(rans0, input)\n    rans1 = Decoding.renormalize(rans1, input)\n    rans2 = Decoding.renormalize(rans2, input)\n    rans7 = Decoding.renormalize(rans7, input)\n\n    l0 = c0\n    l1 = c1\n    l2 = c2\n    l7 = c7\n  }\n\n  // Remainder\n  for (; i7 < outputSize; i7 += 1) {\n    const /* int */ c7 = 0xff & D[l7].R[Decoding.get(rans7, TF_SHIFT)]\n    output.putAt(i7, c7)\n    rans7 = Decoding.advanceSymbol(rans7, input, syms[l7][c7], TF_SHIFT)\n    l7 = c7\n  }\n}\n","import { Parser } from '@gmod/binary-parser'\nimport { TupleOf } from '../typescript'\nimport { ParsedItem } from './util'\nimport { DataSeriesEncodingMap } from './codecs/dataSeriesTypes'\nimport { CramEncoding } from './encoding'\n\nconst singleItf8 = new Parser().itf8()\n\nconst cramFileDefinition = {\n  parser: new Parser()\n    .string('magic', { length: 4 })\n    .uint8('majorVersion')\n    .uint8('minorVersion')\n    .string('fileId', { length: 20, stripNull: true }),\n  maxLength: 26,\n}\n\nconst cramBlockHeader = {\n  parser: new Parser()\n    .uint8('compressionMethod', {\n      formatter: /* istanbul ignore next */ b => {\n        const method = [\n          'raw',\n          'gzip',\n          'bzip2',\n          'lzma',\n          'rans',\n          'rans4x16',\n          'arith',\n          'fqzcomp',\n          'tok3',\n        ][b]\n        if (!method) {\n          throw new Error(`compression method number ${b} not implemented`)\n        }\n        return method\n      },\n    })\n    .uint8('contentType', {\n      formatter: /* istanbul ignore next */ b => {\n        const type = [\n          'FILE_HEADER',\n          'COMPRESSION_HEADER',\n          'MAPPED_SLICE_HEADER',\n          'UNMAPPED_SLICE_HEADER', // < only used in cram v1\n          'EXTERNAL_DATA',\n          'CORE_DATA',\n        ][b]\n        if (!type) {\n          throw new Error(`invalid block content type id ${b}`)\n        }\n        return type\n      },\n    })\n    .itf8('contentId')\n    .itf8('compressedSize')\n    .itf8('uncompressedSize'),\n  maxLength: 17,\n}\n\nconst cramBlockCrc32 = {\n  parser: new Parser().uint32('crc32'),\n  maxLength: 4,\n}\n\n// const ENCODING_NAMES = [\n//   'NULL', // 0\n//   'EXTERNAL', // 1\n//   'GOLOMB', // 2\n//   'HUFFMAN_INT', // 3\n//   'BYTE_ARRAY_LEN', // 4\n//   'BYTE_ARRAY_STOP', // 5\n//   'BETA', // 6\n//   'SUBEXP', // 7\n//   'GOLOMB_RICE', // 8\n//   'GAMMA', // 9\n// ]\n\nexport type CramTagDictionary = string[][]\n\nconst cramTagDictionary = new Parser().itf8('size').buffer('ents', {\n  length: 'size',\n  formatter: /* istanbul ignore next */ buffer => {\n    function makeTagSet(stringStart: number, stringEnd: number) {\n      const str = buffer.toString('utf8', stringStart, stringEnd)\n      const tags = []\n      for (let i = 0; i < str.length; i += 3) {\n        tags.push(str.substr(i, 3))\n      }\n      return tags\n    }\n\n    /* eslint-disable */\n    var tagSets = []\n    var stringStart = 0\n    var i\n    /* eslint-enable */\n    for (i = 0; i < buffer.length; i += 1) {\n      if (!buffer[i]) {\n        tagSets.push(makeTagSet(stringStart, i))\n        stringStart = i + 1\n      }\n    }\n    if (i > stringStart) {\n      tagSets.push(makeTagSet(stringStart, i))\n    }\n    return tagSets\n  },\n})\n\n// const cramPreservationMapKeys = 'XX RN AP RR SM TD'.split(' ')\nconst parseByteAsBool = new Parser().uint8(null, {\n  formatter: /* istanbul ignore next */ val => !!val,\n})\n\nexport type CramPreservationMap = {\n  MI: boolean\n  UI: boolean\n  PI: boolean\n  RN: boolean\n  AP: boolean\n  RR: boolean\n  SM: [number, number, number, number, number]\n  TD: CramTagDictionary\n}\n\nconst cramPreservationMap = new Parser()\n  .itf8('mapSize')\n  .itf8('mapCount')\n  .array('ents', {\n    length: 'mapCount',\n    type: new Parser()\n      .string('key', {\n        length: 2,\n        stripNull: false,\n        // formatter: val => cramPreservationMapKeys[val] || 0,\n      })\n      .choice('value', {\n        tag: 'key',\n        choices: {\n          MI: parseByteAsBool,\n          UI: parseByteAsBool,\n          PI: parseByteAsBool,\n          RN: parseByteAsBool,\n          AP: parseByteAsBool,\n          RR: parseByteAsBool,\n          SM: new Parser().array(null, { type: 'uint8', length: 5 }),\n          TD: new Parser().nest(null, {\n            type: cramTagDictionary,\n            formatter: /* istanbul ignore next */ data => data.ents,\n          }),\n        },\n      }),\n  })\n\n/* istanbul ignore next */\nfunction formatMap<T>(data: { ents: { key: string; value: T }[] }) {\n  const map: { [x: string]: T } = {}\n  for (let i = 0; i < data.ents.length; i += 1) {\n    const { key, value } = data.ents[i]\n    if (map[key]) {\n      console.warn(`duplicate key ${key} in map`)\n    }\n    map[key] = value\n  }\n  return map\n}\n\nconst unversionedParsers = {\n  cramFileDefinition,\n  cramBlockHeader,\n  cramBlockCrc32,\n}\n\nexport type MappedSliceHeader = {\n  refSeqId: number\n  refSeqStart: number\n  refSeqSpan: number\n  numRecords: number\n  recordCounter: number\n  numBlocks: number\n  numContentIds: number\n  contentIds: number[]\n  refBaseBlockId: number\n  md5: TupleOf<number, 16>\n}\n\nexport type UnmappedSliceHeader = {\n  numRecords: number\n  recordCounter: number\n  numBlocks: number\n  numContentIds: number\n  contentIds: number[]\n  md5: TupleOf<number, 16>\n}\n\nexport function isMappedSliceHeader(\n  header: MappedSliceHeader | UnmappedSliceHeader,\n): header is MappedSliceHeader {\n  return typeof (header as any).refSeqId === 'number'\n}\n\n// each of these is a function of the major and minor version\nconst versionedParsers = {\n  // assemble a section parser for the unmapped slice header, with slight\n  // variations depending on the major version of the cram file\n  cramUnmappedSliceHeader(majorVersion: number) {\n    let maxLength = 0\n    let parser = new Parser().itf8('numRecords')\n    maxLength += 5\n\n    // recordCounter is itf8 in a CRAM v2 file, absent in CRAM v1\n    if (majorVersion >= 3) {\n      parser = parser.ltf8('recordCounter')\n      maxLength += 9\n    } else if (majorVersion === 2) {\n      parser = parser.itf8('recordCounter')\n      maxLength += 5\n    }\n\n    parser = parser\n      .itf8('numBlocks')\n      .itf8('numContentIds')\n      .array('contentIds', {\n        type: singleItf8,\n        length: 'numContentIds',\n      })\n    maxLength += 5 * 2 // + numContentIds*5\n\n    // the md5 sum is missing in cram v1\n    if (majorVersion >= 2) {\n      parser = parser.array('md5', { type: 'uint8', length: 16 })\n      maxLength += 16\n    }\n\n    const maxLengthFunc = (numContentIds: number) =>\n      maxLength + numContentIds * 5\n\n    return { parser, maxLength: maxLengthFunc } // : p, maxLength: numContentIds => 5 + 9 + 5 * 2 + 5 * numContentIds + 16 }\n  },\n\n  // assembles a section parser for the unmapped slice header, with slight\n  // variations depending on the major version of the cram file\n  cramMappedSliceHeader(majorVersion: number) {\n    let parser = new Parser()\n      .itf8('refSeqId')\n      .itf8('refSeqStart')\n      .itf8('refSeqSpan')\n      .itf8('numRecords')\n    let maxLength = 5 * 4\n\n    if (majorVersion >= 3) {\n      parser = parser.ltf8('recordCounter')\n      maxLength += 9\n    } else if (majorVersion === 2) {\n      parser = parser.itf8('recordCounter')\n      maxLength += 5\n    }\n\n    parser = parser\n      .itf8('numBlocks')\n      .itf8('numContentIds')\n      .array('contentIds', {\n        type: singleItf8,\n        length: 'numContentIds',\n      })\n      .itf8('refBaseBlockId')\n    maxLength += 5 * 3\n\n    // the md5 sum is missing in cram v1\n    if (majorVersion >= 2) {\n      parser = parser.array('md5', { type: 'uint8', length: 16 })\n      maxLength += 16\n    }\n\n    const maxLengthFunc = (numContentIds: number) =>\n      maxLength + numContentIds * 5\n\n    return { parser, maxLength: maxLengthFunc }\n  },\n\n  cramEncoding(majorVersion: number) {\n    const parser = new Parser()\n      .namely('cramEncoding')\n      .itf8('codecId')\n      .itf8('parametersBytes')\n      .choice('parameters', {\n        tag: 'codecId',\n        choices: {\n          0: new Parser(), // NULL\n          1: new Parser().itf8('blockContentId'), // EXTERNAL\n          2: new Parser().itf8('offset').itf8('M'), // GOLOMB,\n          // HUFFMAN_INT\n          3: Parser.start()\n            .itf8('numCodes')\n            .array('symbols', { length: 'numCodes', type: singleItf8 })\n            .itf8('numLengths')\n            .array('bitLengths', { length: 'numLengths', type: singleItf8 }),\n          4: Parser.start() // BYTE_ARRAY_LEN\n            .nest('lengthsEncoding', { type: 'cramEncoding' })\n            .nest('valuesEncoding', { type: 'cramEncoding' }),\n          // BYTE_ARRAY_STOP is a little different for CRAM v1\n          5: new Parser().uint8('stopByte').itf8('blockContentId'),\n          6: new Parser().itf8('offset').itf8('length'), // BETA\n          7: new Parser().itf8('offset').itf8('K'), // SUBEXP\n          8: new Parser().itf8('offset').itf8('log2m'), // GOLOMB_RICE\n          9: new Parser().itf8('offset'), // GAMMA\n        },\n      })\n\n    return { parser }\n  },\n\n  cramDataSeriesEncodingMap(majorVersion: number) {\n    return new Parser()\n      .itf8('mapSize')\n      .itf8('mapCount')\n      .array('ents', {\n        length: 'mapCount',\n        type: new Parser()\n          .string('key', { length: 2, stripNull: false })\n          .nest('value', { type: this.cramEncoding(majorVersion).parser }),\n      })\n  },\n\n  cramTagEncodingMap(majorVersion: number) {\n    return new Parser()\n      .itf8('mapSize')\n      .itf8('mapCount')\n      .array('ents', {\n        length: 'mapCount',\n        type: new Parser()\n          .itf8('key', {\n            formatter: /* istanbul ignore next */ integerRepresentation =>\n              /* istanbul ignore next */\n              String.fromCharCode((integerRepresentation >> 16) & 0xff) +\n              String.fromCharCode((integerRepresentation >> 8) & 0xff) +\n              String.fromCharCode(integerRepresentation & 0xff),\n          })\n          .nest('value', { type: this.cramEncoding(majorVersion).parser }),\n      })\n  },\n\n  cramCompressionHeader(majorVersion: number) {\n    let parser = new Parser()\n    // TODO: if we want to support CRAM v1, we will need to refactor\n    // compression header into 2 parts to parse the landmarks,\n    // like the container header\n    parser = parser\n      .nest('preservation', {\n        type: cramPreservationMap,\n        formatter: formatMap,\n      })\n      .nest('dataSeriesEncoding', {\n        type: this.cramDataSeriesEncodingMap(majorVersion),\n        formatter: formatMap,\n      })\n      .nest('tagEncoding', {\n        type: this.cramTagEncodingMap(majorVersion),\n        formatter: formatMap,\n      })\n    return { parser }\n  },\n\n  cramContainerHeader1(majorVersion: number) {\n    let parser = new Parser()\n      .int32('length') // byte size of the container data (blocks)\n      .itf8('refSeqId') // reference sequence identifier, -1 for unmapped reads, -2 for multiple reference sequences\n      .itf8('refSeqStart') // the alignment start position or 0 for unmapped reads\n      .itf8('alignmentSpan') // the length of the alignment or 0 for unmapped reads\n      .itf8('numRecords') // number of records in the container\n    let maxLength = 4 + 5 * 4\n\n    if (majorVersion >= 3) {\n      parser = parser.ltf8('recordCounter') // 1-based sequential index of records in the file/stream.\n      maxLength += 9\n    } else if (majorVersion === 2) {\n      parser = parser.itf8('recordCounter')\n      maxLength += 5\n    }\n\n    if (majorVersion > 1) {\n      parser = parser.ltf8('numBases') // number of read bases\n      maxLength += 9\n    }\n    parser = parser\n      .itf8('numBlocks') // the number of blocks\n      .itf8('numLandmarks') // the number of landmarks\n    maxLength += 5 + 5\n\n    return { parser, maxLength }\n  },\n\n  cramContainerHeader2(majorVersion: number) {\n    let parser = new Parser()\n      .itf8('numLandmarks') // the number of blocks\n      // Each integer value of this array is a byte offset\n      // into the blocks byte array. Landmarks are used for\n      // random access indexing.\n      .array('landmarks', {\n        type: new Parser().itf8(),\n        length: 'numLandmarks',\n      })\n\n    let crcLength = 0\n    if (majorVersion >= 3) {\n      parser = parser.uint32('crc32')\n      crcLength = 4\n    }\n    return {\n      parser,\n      maxLength: (numLandmarks: number) => 5 + numLandmarks * 5 + crcLength,\n    }\n  },\n}\n\nexport type CompressionMethod =\n  | 'raw'\n  | 'gzip'\n  | 'bzip2'\n  | 'lzma'\n  | 'rans'\n  | 'rans4x16'\n  | 'arith'\n  | 'fqzcomp'\n  | 'tok3'\n\nexport type BlockHeader = {\n  compressionMethod: CompressionMethod\n  contentType:\n    | 'FILE_HEADER'\n    | 'COMPRESSION_HEADER'\n    | 'MAPPED_SLICE_HEADER'\n    | 'UNMAPPED_SLICE_HEADER' // < only used in cram v1\n    | 'EXTERNAL_DATA'\n    | 'CORE_DATA'\n  contentId: number\n  compressedSize: number\n  uncompressedSize: number\n}\n\nexport type CramCompressionHeader = ParsedItem<{\n  preservation: CramPreservationMap\n  dataSeriesEncoding: DataSeriesEncodingMap\n  tagEncoding: Record<string, CramEncoding>\n}>\n\nfunction getSectionParsers(majorVersion: number): {\n  cramFileDefinition: {\n    parser: Parser<{\n      magic: string\n      majorVersion: number\n      minorVersion: number\n      fileId: string\n    }>\n    maxLength: number\n  }\n  cramContainerHeader1: {\n    parser: Parser<{\n      length: number\n      refSeqId: number\n      refSeqStart: number\n      alignmentSpan: number\n      numRecords: number\n      recordCounter: number\n      numBases: number\n      numBlocks: number\n      numLandmarks: number\n    }>\n    maxLength: number\n  }\n  cramContainerHeader2: {\n    parser: Parser<{\n      numLandmarks: number\n      landmarks: number[]\n      crc32: number\n    }>\n    maxLength: (x: number) => number\n  }\n  cramBlockHeader: {\n    parser: Parser<BlockHeader>\n    maxLength: number\n  }\n  cramBlockCrc32: {\n    parser: Parser<{ crc32: number }>\n    maxLength: number\n  }\n  cramCompressionHeader: {\n    parser: Parser<CramCompressionHeader>\n  }\n  cramMappedSliceHeader: {\n    parser: Parser<MappedSliceHeader>\n    maxLength: (numContentIds: number) => number\n  }\n  cramUnmappedSliceHeader: {\n    parser: Parser<UnmappedSliceHeader>\n    maxLength: (numContentIds: number) => number\n  }\n} {\n  const parsers: any = Object.assign({}, unversionedParsers)\n  Object.keys(versionedParsers).forEach(parserName => {\n    parsers[parserName] = (versionedParsers as any)[parserName](majorVersion)\n  })\n  return parsers\n}\n\nexport { cramFileDefinition, getSectionParsers }\n","export class CramBufferOverrunError extends Error {}\n\nexport function getBits(\n  data: Buffer,\n  cursor: { bytePosition: number; bitPosition: number },\n  numBits: number,\n) {\n  let val = 0\n  if (\n    cursor.bytePosition + (7 - cursor.bitPosition + numBits) / 8 >\n    data.length\n  ) {\n    throw new CramBufferOverrunError(\n      'read error during decoding. the file seems to be truncated.',\n    )\n  }\n  for (let dlen = numBits; dlen; dlen--) {\n    // get the next `dlen` bits in the input, put them in val\n    val <<= 1\n    val |= (data[cursor.bytePosition] >> cursor.bitPosition) & 1\n    cursor.bitPosition -= 1\n    if (cursor.bitPosition < 0) {\n      cursor.bytePosition += 1\n    }\n    cursor.bitPosition &= 7\n  }\n  return val\n}\n","import md5 from 'md5'\nimport { Parser } from '@gmod/binary-parser'\nimport { CramBufferOverrunError } from './codecs/getBits'\n\nexport function itf8Size(v: number) {\n  if (!(v & ~0x7f)) {\n    return 1\n  }\n  if (!(v & ~0x3fff)) {\n    return 2\n  }\n  if (!(v & ~0x1fffff)) {\n    return 3\n  }\n  if (!(v & ~0xfffffff)) {\n    return 4\n  }\n  return 5\n}\n\nexport function parseItf8(\n  buffer: Uint8Array,\n  initialOffset: number,\n): [number, number] {\n  let offset = initialOffset\n  const countFlags = buffer[offset]\n  let result\n  if (countFlags < 0x80) {\n    result = countFlags\n    offset = offset + 1\n  } else if (countFlags < 0xc0) {\n    result = ((countFlags << 8) | buffer[offset + 1]) & 0x3fff\n    offset = offset + 2\n  } else if (countFlags < 0xe0) {\n    result =\n      ((countFlags << 16) | (buffer[offset + 1] << 8) | buffer[offset + 2]) &\n      0x1fffff\n    offset = offset + 3\n  } else if (countFlags < 0xf0) {\n    result =\n      ((countFlags << 24) |\n        (buffer[offset + 1] << 16) |\n        (buffer[offset + 2] << 8) |\n        buffer[offset + 3]) &\n      0x0fffffff\n    offset = offset + 4\n  } else {\n    result =\n      ((countFlags & 0x0f) << 28) |\n      (buffer[offset + 1] << 20) |\n      (buffer[offset + 2] << 12) |\n      (buffer[offset + 3] << 4) |\n      (buffer[offset + 4] & 0x0f)\n    // x=((0xff & 0x0f)<<28) | (0xff<<20) | (0xff<<12) | (0xff<<4) | (0x0f & 0x0f);\n    // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n    offset = offset + 5\n  }\n  if (offset > buffer.length) {\n    throw new CramBufferOverrunError(\n      'Attempted to read beyond end of buffer; this file seems truncated.',\n    )\n  }\n  return [result, offset - initialOffset]\n}\n\n// parseLtf8(buffer, initialOffset) {\n//   let offset = initialOffset\n//   const countFlags = buffer[offset]\n//   let result\n//   if (countFlags < 0x80) {\n//     result = countFlags\n//     offset += 1\n//   } else if (countFlags < 0xc0) {\n//     result = ((buffer[offset] << 8) | buffer[offset + 1]) & 0x3fff\n//     offset += 2\n//   } else if (countFlags < 0xe0) {\n//     result =\n//       ((buffer[offset] << 16) |\n//         (buffer[offset + 1] << 8) |\n//         buffer[offset + 2]) &\n//       0x1fffff\n//     offset += 3\n//   } else if (countFlags < 0xf0) {\n//     result =\n//       ((buffer[offset] << 24) |\n//         (buffer[offset + 1] << 16) |\n//         (buffer[offset + 2] << 8) |\n//         buffer[offset + 3]) &\n//       0x0fffffff\n//     offset += 4\n//   } else if (countFlags < 0xf8) {\n//     result =\n//       ((buffer[offset] & 15) * Math.pow(2,32) + (buffer[offset + 1] << 24)) |\n//       ((buffer[offset + 2] << 16) |\n//         (buffer[offset + 3] << 8) |\n//         buffer[offset + 4])\n//     // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n//     offset += 5\n//   } else if (countFlags < 0xfc) {\n//     result =\n//       ((((buffer[offset] & 7) << 8) | buffer[offset + 1]) * Math.pow(2,32) +\n//         (buffer[offset + 2] << 24)) |\n//       ((buffer[offset + 3] << 16) |\n//         (buffer[offset + 4] << 8) |\n//         buffer[offset + 5])\n//     offset += 6\n//   } else if (countFlags < 0xfe) {\n//     result =\n//       ((((buffer[offset] & 3) << 16) |\n//         (buffer[offset + 1] << 8) |\n//         buffer[offset + 2]) *\n//         Math.pow(2,32) +\n//         (buffer[offset + 3] << 24)) |\n//       ((buffer[offset + 4] << 16) |\n//         (buffer[offset + 5] << 8) |\n//         buffer[offset + 6])\n//     offset += 7\n//   } else if (countFlags < 0xff) {\n//     result = Long.fromBytesBE(buffer.slice(offset + 1, offset + 8))\n//     if (\n//       result.greaterThan(Number.MAX_SAFE_INTEGER) ||\n//       result.lessThan(Number.MIN_SAFE_INTEGER)\n//     )\n//       throw new CramUnimplementedError('integer overflow')\n//     result = result.toNumber()\n//     offset += 8\n//   } else {\n//     result = Long.fromBytesBE(buffer.slice(offset + 1, offset + 9))\n//     if (\n//       result.greaterThan(Number.MAX_SAFE_INTEGER) ||\n//       result.lessThan(Number.MIN_SAFE_INTEGER)\n//     )\n//       throw new CramUnimplementedError('integer overflow')\n//     result = result.toNumber()\n//     offset += 9\n//   }\n//   return [result, offset - initialOffset]\n// },\n\nexport type ParsedItem<T> = T & {\n  _endPosition: number\n  _size: number\n}\n\nexport function parseItem<T>(\n  buffer: Buffer,\n  parser: Parser<T>,\n  startBufferPosition = 0,\n  startFilePosition = 0,\n): ParsedItem<T> {\n  const { offset, result } = parser.parse(buffer)\n  return {\n    ...result,\n    _endPosition: offset + startFilePosition,\n    _size: offset - startBufferPosition,\n  }\n}\n\n// this would be nice as a decorator, but i'm a little worried about\n// babel support for it going away or changing.\n// memoizes a method in the stupidest possible way, with no regard for the\n// arguments.  actually, this only works on methods that take no arguments\nexport function tinyMemoize(_class: any, methodName: any) {\n  const method = _class.prototype[methodName]\n  const memoAttrName = `_memo_${methodName}`\n  _class.prototype[methodName] = function _tinyMemoized() {\n    if (!(memoAttrName in this)) {\n      const res = method.call(this)\n      this[memoAttrName] = res\n      Promise.resolve(res).catch(() => {\n        delete this[memoAttrName]\n      })\n    }\n    return this[memoAttrName]\n  }\n}\n\nexport function sequenceMD5(seq: string) {\n  return md5(seq.toUpperCase().replace(/[^\\x21-\\x7e]/g, ''))\n}\n","const Constants = {\n  CRAM_FLAG_PRESERVE_QUAL_SCORES: 1 << 0,\n  CRAM_FLAG_DETACHED: 1 << 1,\n  CRAM_FLAG_MATE_DOWNSTREAM: 1 << 2,\n  CRAM_FLAG_NO_SEQ: 1 << 3,\n  CRAM_FLAG_MASK: (1 << 4) - 1,\n\n  // mate read is reversed\n  CRAM_M_REVERSE: 1,\n  // mated read is unmapped\n  CRAM_M_UNMAP: 2,\n\n  //  the read is paired in sequencing, no matter whether it is mapped in a pair\n  BAM_FPAIRED: 1,\n  //  the read is mapped in a proper pair\n  BAM_FPROPER_PAIR: 2,\n  //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n  BAM_FUNMAP: 4,\n  //  the mate is unmapped\n  BAM_FMUNMAP: 8,\n  //  the read is mapped to the reverse strand\n  BAM_FREVERSE: 16,\n  //  the mate is mapped to the reverse strand\n  BAM_FMREVERSE: 32,\n  //  this is read1\n  BAM_FREAD1: 64,\n  //  this is read2\n  BAM_FREAD2: 128,\n  //  not primary alignment\n  BAM_FSECONDARY: 256,\n  //  QC failure\n  BAM_FQCFAIL: 512,\n  //  optical or PCR duplicate\n  BAM_FDUP: 1024,\n  //  supplementary alignment\n  BAM_FSUPPLEMENTARY: 2048,\n\n  BAM_CMATCH: 0,\n  BAM_CINS: 1,\n  BAM_CDEL: 2,\n  BAM_CREF_SKIP: 3,\n  BAM_CSOFT_CLIP: 4,\n  BAM_CHARD_CLIP: 5,\n  BAM_CPAD: 6,\n  BAM_CEQUAL: 7,\n  BAM_CDIFF: 8,\n  BAM_CBACK: 9,\n\n  BAM_CIGAR_STR: 'MIDNSHP:XB',\n  BAM_CIGAR_SHIFT: 4,\n  BAM_CIGAR_MASK: 0xf,\n  BAM_CIGAR_TYPE: 0x3c1a7,\n}\n\nexport default Constants\n","import Constants from './constants'\nimport CramContainerCompressionScheme from './container/compressionScheme'\nimport decodeRecord from './slice/decodeRecord'\n\nexport type RefRegion = {\n  start: number\n  end: number\n  seq: string\n}\n\nexport type ReadFeature = {\n  code: string\n  pos: number\n  refPos: number\n  data: any\n\n  ref?: string\n  sub?: string\n}\n\nfunction decodeReadSequence(\n  cramRecord: CramRecord,\n  refRegion: RefRegion,\n): string | null {\n  // if it has no length, it has no sequence\n  if (!cramRecord.lengthOnRef && !cramRecord.readLength) {\n    return null\n  }\n\n  if (cramRecord.isUnknownBases()) {\n    return null\n  }\n\n  // remember: all coordinates are 1-based closed\n  const regionSeqOffset = cramRecord.alignmentStart - refRegion.start\n\n  if (!cramRecord.readFeatures) {\n    return refRegion.seq\n      .substr(regionSeqOffset, cramRecord.lengthOnRef)\n      .toUpperCase()\n  }\n\n  let bases = ''\n  let regionPos = regionSeqOffset\n  let currentReadFeature = 0\n  while (bases.length < cramRecord.readLength) {\n    if (currentReadFeature < cramRecord.readFeatures.length) {\n      const feature = cramRecord.readFeatures[currentReadFeature]\n      if (feature.code === 'Q' || feature.code === 'q') {\n        currentReadFeature += 1\n      } else if (feature.pos === bases.length + 1) {\n        // process the read feature\n        currentReadFeature += 1\n\n        if (feature.code === 'b') {\n          // specify a base pair for some reason\n          const added = feature.data\n          bases += added\n          regionPos += added.length\n        } else if (feature.code === 'B') {\n          // base pair and associated quality\n          // TODO: do we need to set the quality in the qual scores?\n          bases += feature.data[0]\n          regionPos += 1\n        } else if (feature.code === 'X') {\n          // base substitution\n          bases += feature.sub\n          regionPos += 1\n        } else if (feature.code === 'I') {\n          // insertion\n          bases += feature.data\n        } else if (feature.code === 'D') {\n          // deletion\n          regionPos += feature.data\n        } else if (feature.code === 'i') {\n          // insert single base\n          bases += feature.data\n        } else if (feature.code === 'N') {\n          // reference skip. delete some bases\n          // do nothing\n          // seqBases.splice(feature.pos - 1, feature.data)\n          regionPos += feature.data\n        } else if (feature.code === 'S') {\n          // soft clipped bases that should be present in the read seq\n          // seqBases.splice(feature.pos - 1, 0, ...feature.data.split(''))\n          bases += feature.data\n        } else if (feature.code === 'P') {\n          // padding, do nothing\n        } else if (feature.code === 'H') {\n          // hard clip, do nothing\n        }\n      } else if (currentReadFeature < cramRecord.readFeatures.length) {\n        // put down a chunk of sequence up to the next read feature\n        const chunk = refRegion.seq.substr(\n          regionPos,\n          cramRecord.readFeatures[currentReadFeature].pos - bases.length - 1,\n        )\n        bases += chunk\n        regionPos += chunk.length\n      }\n    } else {\n      // put down a chunk of reference up to the full read length\n      const chunk = refRegion.seq.substr(\n        regionPos,\n        cramRecord.readLength - bases.length,\n      )\n      bases += chunk\n      regionPos += chunk.length\n    }\n  }\n\n  return bases.toUpperCase()\n}\n\nconst baseNumbers = {\n  a: 0,\n  A: 0,\n  c: 1,\n  C: 1,\n  g: 2,\n  G: 2,\n  t: 3,\n  T: 3,\n  n: 4,\n  N: 4,\n}\n\nfunction decodeBaseSubstitution(\n  cramRecord: CramRecord,\n  refRegion: RefRegion,\n  compressionScheme: CramContainerCompressionScheme,\n  readFeature: ReadFeature,\n) {\n  if (!refRegion) {\n    return\n  }\n\n  // decode base substitution code using the substitution matrix\n  const refCoord = readFeature.refPos - refRegion.start\n  const refBase = refRegion.seq.charAt(refCoord)\n  if (refBase) {\n    readFeature.ref = refBase\n  }\n  let baseNumber = (baseNumbers as any)[refBase]\n  if (baseNumber === undefined) {\n    baseNumber = 4\n  }\n  const substitutionScheme = compressionScheme.substitutionMatrix[baseNumber]\n  const base = substitutionScheme[readFeature.data]\n  if (base) {\n    readFeature.sub = base\n  }\n}\n\nexport type MateRecord = {\n  readName?: string\n  sequenceId: number\n  alignmentStart: number\n  flags?: number\n\n  uniqueId?: number\n}\n\nexport const BamFlags = [\n  [0x1, 'Paired'],\n  [0x2, 'ProperlyPaired'],\n  [0x4, 'SegmentUnmapped'],\n  [0x8, 'MateUnmapped'],\n  [0x10, 'ReverseComplemented'],\n  //  the mate is mapped to the reverse strand\n  [0x20, 'MateReverseComplemented'],\n  //  this is read1\n  [0x40, 'Read1'],\n  //  this is read2\n  [0x80, 'Read2'],\n  //  not primary alignment\n  [0x100, 'Secondary'],\n  //  QC failure\n  [0x200, 'FailedQc'],\n  //  optical or PCR duplicate\n  [0x400, 'Duplicate'],\n  //  supplementary alignment\n  [0x800, 'Supplementary'],\n] as const\n\nexport const CramFlags = [\n  [0x1, 'PreservingQualityScores'],\n  [0x2, 'Detached'],\n  [0x4, 'WithMateDownstream'],\n  [0x8, 'DecodeSequenceAsStar'],\n] as const\n\nexport const MateFlags = [\n  [0x1, 'OnNegativeStrand'],\n  [0x2, 'Unmapped'],\n] as const\n\ntype FlagsDecoder<Type> = {\n  [Property in Type as `is${Capitalize<string & Property>}`]: (\n    flags: number,\n  ) => boolean\n}\n\ntype FlagsEncoder<Type> = {\n  [Property in Type as `set${Capitalize<string & Property>}`]: (\n    flags: number,\n  ) => number\n}\n\nfunction makeFlagsHelper<T>(\n  x: ReadonlyArray<readonly [number, T]>,\n): FlagsDecoder<T> & FlagsEncoder<T> {\n  const r: any = {}\n  for (const [code, name] of x) {\n    r['is' + name] = (flags: number) => !!(flags & code)\n    r['set' + name] = (flags: number) => flags | code\n  }\n\n  return r\n}\n\nexport const BamFlagsDecoder = makeFlagsHelper(BamFlags)\nexport const CramFlagsDecoder = makeFlagsHelper(CramFlags)\nexport const MateFlagsDecoder = makeFlagsHelper(MateFlags)\n\n/**\n * Class of each CRAM record returned by this API.\n */\nexport default class CramRecord {\n  public tags: Record<string, string>\n  public flags: number\n  public cramFlags: number\n  public readBases?: string | null\n  public _refRegion?: RefRegion\n  public readFeatures?: ReadFeature[]\n  public alignmentStart: number\n  public lengthOnRef: number | undefined\n  public readLength: number\n  public templateLength?: number\n  public templateSize?: number\n  public readName?: string\n  public mateRecordNumber?: number\n  public mate?: MateRecord\n  public uniqueId: number\n  public sequenceId: number\n  public readGroupId: number\n  public mappingQuality: number | undefined\n  public qualityScores: number[] | null | undefined\n\n  constructor({\n    flags,\n    cramFlags,\n    readLength,\n    mappingQuality,\n    lengthOnRef,\n    qualityScores,\n    mateRecordNumber,\n    readBases,\n    readFeatures,\n    mateToUse,\n    readGroupId,\n    readName,\n    sequenceId,\n    uniqueId,\n    templateSize,\n    alignmentStart,\n    tags,\n  }: ReturnType<typeof decodeRecord> & { uniqueId: number }) {\n    this.flags = flags\n    this.cramFlags = cramFlags\n    this.readLength = readLength\n    this.mappingQuality = mappingQuality\n    this.lengthOnRef = lengthOnRef\n    this.qualityScores = qualityScores\n    if (readBases) {\n      this.readBases = readBases\n    }\n\n    this.readGroupId = readGroupId\n    this.readName = readName\n    this.sequenceId = sequenceId\n    this.uniqueId = uniqueId\n    this.templateSize = templateSize\n    this.alignmentStart = alignmentStart\n    this.tags = tags\n\n    // backwards compatibility\n    if (readFeatures) {\n      this.readFeatures = readFeatures\n    }\n    if (mateToUse) {\n      this.mate = {\n        flags: mateToUse.mateFlags,\n        readName: mateToUse.mateReadName,\n        sequenceId: mateToUse.mateSequenceId,\n        alignmentStart: mateToUse.mateAlignmentStart,\n      }\n    }\n    if (mateRecordNumber) {\n      this.mateRecordNumber = mateRecordNumber\n    }\n  }\n\n  /**\n   * @returns {boolean} true if the read is paired, regardless of whether both segments are mapped\n   */\n  isPaired() {\n    return !!(this.flags & Constants.BAM_FPAIRED)\n  }\n\n  /** @returns {boolean} true if the read is paired, and both segments are mapped */\n  isProperlyPaired() {\n    return !!(this.flags & Constants.BAM_FPROPER_PAIR)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isSegmentUnmapped() {\n    return !!(this.flags & Constants.BAM_FUNMAP)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isMateUnmapped() {\n    return !!(this.flags & Constants.BAM_FMUNMAP)\n  }\n\n  /** @returns {boolean} true if the read is mapped to the reverse strand */\n  isReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FREVERSE)\n  }\n\n  /** @returns {boolean} true if the mate is mapped to the reverse strand */\n  isMateReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FMREVERSE)\n  }\n\n  /** @returns {boolean} true if this is read number 1 in a pair */\n  isRead1() {\n    return !!(this.flags & Constants.BAM_FREAD1)\n  }\n\n  /** @returns {boolean} true if this is read number 2 in a pair */\n  isRead2() {\n    return !!(this.flags & Constants.BAM_FREAD2)\n  }\n\n  /** @returns {boolean} true if this is a secondary alignment */\n  isSecondary() {\n    return !!(this.flags & Constants.BAM_FSECONDARY)\n  }\n\n  /** @returns {boolean} true if this read has failed QC checks */\n  isFailedQc() {\n    return !!(this.flags & Constants.BAM_FQCFAIL)\n  }\n\n  /** @returns {boolean} true if the read is an optical or PCR duplicate */\n  isDuplicate() {\n    return !!(this.flags & Constants.BAM_FDUP)\n  }\n\n  /** @returns {boolean} true if this is a supplementary alignment */\n  isSupplementary() {\n    return !!(this.flags & Constants.BAM_FSUPPLEMENTARY)\n  }\n\n  /**\n   * @returns {boolean} true if the read is detached\n   */\n  isDetached() {\n    return !!(this.cramFlags & Constants.CRAM_FLAG_DETACHED)\n  }\n\n  /** @returns {boolean} true if the read has a mate in this same CRAM segment */\n  hasMateDownStream() {\n    return !!(this.cramFlags & Constants.CRAM_FLAG_MATE_DOWNSTREAM)\n  }\n\n  /** @returns {boolean} true if the read contains qual scores */\n  isPreservingQualityScores() {\n    return !!(this.cramFlags & Constants.CRAM_FLAG_PRESERVE_QUAL_SCORES)\n  }\n\n  /** @returns {boolean} true if the read has no sequence bases */\n  isUnknownBases() {\n    return !!(this.cramFlags & Constants.CRAM_FLAG_NO_SEQ)\n  }\n\n  /**\n   * Get the original sequence of this read.\n   * @returns {String} sequence basepairs\n   */\n  getReadBases() {\n    if (!this.readBases && this._refRegion) {\n      const decoded = decodeReadSequence(this, this._refRegion)\n      if (decoded) {\n        this.readBases = decoded\n      }\n    }\n    return this.readBases\n  }\n\n  /**\n   * Get the pair orientation of a paired read. Adapted from igv.js\n   * @returns {String} of paired orientatin\n   */\n  getPairOrientation() {\n    if (\n      !this.isSegmentUnmapped() &&\n      this.isPaired() &&\n      !this.isMateUnmapped() &&\n      this.mate &&\n      this.sequenceId === this.mate.sequenceId\n    ) {\n      const s1 = this.isReverseComplemented() ? 'R' : 'F'\n      const s2 = this.isMateReverseComplemented() ? 'R' : 'F'\n      let o1 = ' '\n      let o2 = ' '\n      if (this.isRead1()) {\n        o1 = '1'\n        o2 = '2'\n      } else if (this.isRead2()) {\n        o1 = '2'\n        o2 = '1'\n      }\n\n      const tmp = []\n      let isize = this.templateLength || this.templateSize\n      if (isize === undefined) {\n        throw new Error('One of templateSize and templateLength must be set')\n      }\n      if (this.alignmentStart > this.mate.alignmentStart && isize > 0) {\n        isize = -isize\n      }\n      if (isize > 0) {\n        tmp[0] = s1\n        tmp[1] = o1\n        tmp[2] = s2\n        tmp[3] = o2\n      } else {\n        tmp[2] = s1\n        tmp[3] = o1\n        tmp[0] = s2\n        tmp[1] = o2\n      }\n      return tmp.join('')\n    }\n    return null\n  }\n\n  /**\n   * Annotates this feature with the given reference sequence basepair\n   * information. This will add a `sub` and a `ref` item to base\n   * subsitution read features given the actual substituted and reference\n   * base pairs, and will make the `getReadSequence()` method work.\n   *\n   * @param {object} refRegion\n   * @param {number} refRegion.start\n   * @param {number} refRegion.end\n   * @param {string} refRegion.seq\n   * @param {CramContainerCompressionScheme} compressionScheme\n   * @returns {undefined} nothing\n   */\n  addReferenceSequence(\n    refRegion: RefRegion,\n    compressionScheme: CramContainerCompressionScheme,\n  ) {\n    if (this.readFeatures) {\n      // use the reference bases to decode the bases\n      // substituted in each base substitution\n      this.readFeatures.forEach(readFeature => {\n        if (readFeature.code === 'X') {\n          decodeBaseSubstitution(\n            this,\n            refRegion,\n            compressionScheme,\n            readFeature,\n          )\n        }\n      })\n    }\n\n    // if this region completely covers this read,\n    // keep a reference to it\n    if (\n      !this.readBases &&\n      refRegion.start <= this.alignmentStart &&\n      refRegion.end >=\n        this.alignmentStart + (this.lengthOnRef || this.readLength) - 1\n    ) {\n      this._refRegion = refRegion\n    }\n  }\n\n  toJSON() {\n    const data: any = {}\n    Object.keys(this).forEach(k => {\n      if (k.charAt(0) === '_') {\n        return\n      }\n      data[k] = (this as any)[k]\n    })\n\n    data.readBases = this.getReadBases()\n\n    return data\n  }\n}\n","import Long from 'long'\nimport { CramMalformedError } from '../../errors'\nimport {\n  BamFlagsDecoder,\n  CramFlagsDecoder,\n  MateFlagsDecoder,\n  ReadFeature,\n} from '../record'\nimport CramSlice, { SliceHeader } from './index'\nimport { isMappedSliceHeader } from '../sectionParsers'\nimport CramContainerCompressionScheme, {\n  DataSeriesTypes,\n} from '../container/compressionScheme'\nimport { CramFileBlock } from '../file'\nimport { Cursors, DataTypeMapping } from '../codecs/_base'\nimport { DataSeriesEncodingKey } from '../codecs/dataSeriesTypes'\n\n/**\n * given a Buffer, read a string up to the first null character\n * @private\n */\nfunction readNullTerminatedString(buffer: Uint8Array) {\n  let r = ''\n  for (let i = 0; i < buffer.length && buffer[i] !== 0; i++) {\n    r += String.fromCharCode(buffer[i])\n  }\n  return r\n}\n\n/**\n * parse a BAM tag's array value from a binary buffer\n * @private\n */\nfunction parseTagValueArray(buffer: Buffer) {\n  const arrayType = String.fromCharCode(buffer[0])\n  const length = Int32Array.from(buffer.slice(1))[0]\n\n  const array: number[] = new Array(length)\n  buffer = buffer.slice(5)\n\n  if (arrayType === 'c') {\n    const arr = new Int8Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 'C') {\n    const arr = new Uint8Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 's') {\n    const arr = new Int16Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 'S') {\n    const arr = new Uint16Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 'i') {\n    const arr = new Int32Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 'I') {\n    const arr = new Uint32Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else if (arrayType === 'f') {\n    const arr = new Float32Array(buffer.buffer)\n    for (let i = 0; i < length; i += 1) {\n      array[i] = arr[i]\n    }\n  } else {\n    throw new Error('unknown type: ' + arrayType)\n  }\n\n  return array\n}\n\nfunction parseTagData(tagType: string, buffer: any) {\n  if (tagType === 'Z') {\n    return readNullTerminatedString(buffer)\n  }\n  if (tagType === 'A') {\n    return String.fromCharCode(buffer[0])\n  }\n  if (tagType === 'I') {\n    return Long.fromBytesLE(buffer).toNumber()\n  }\n  if (tagType === 'i') {\n    return new Int32Array(buffer.buffer)[0]\n  }\n  if (tagType === 's') {\n    return new Int16Array(buffer.buffer)[0]\n  }\n  if (tagType === 'S') {\n    return new Uint16Array(buffer.buffer)[0]\n  }\n  if (tagType === 'c') {\n    return new Int8Array(buffer.buffer)[0]\n  }\n  if (tagType === 'C') {\n    return buffer[0] as number\n  }\n  if (tagType === 'f') {\n    return new Float32Array(buffer.buffer)[0]\n  }\n  if (tagType === 'H') {\n    return Number.parseInt(\n      readNullTerminatedString(buffer).replace(/^0x/, ''),\n      16,\n    )\n  }\n  if (tagType === 'B') {\n    return parseTagValueArray(buffer)\n  }\n\n  throw new CramMalformedError(`Unrecognized tag type ${tagType}`)\n}\n\nfunction decodeReadFeatures(\n  alignmentStart: number,\n  readFeatureCount: number,\n  decodeDataSeries: any,\n  compressionScheme: CramContainerCompressionScheme,\n  majorVersion: number,\n) {\n  let currentReadPos = 0\n  let currentRefPos = alignmentStart - 1\n  const readFeatures: ReadFeature[] = new Array(readFeatureCount)\n\n  function decodeRFData([type, dataSeriesName]: readonly [\n    type: string,\n    dataSeriesName: string,\n  ]) {\n    const data = decodeDataSeries(dataSeriesName)\n    if (type === 'character') {\n      return String.fromCharCode(data)\n    }\n    if (type === 'string') {\n      let r = ''\n      for (let i = 0; i < data.byteLength; i++) {\n        r += String.fromCharCode(data[i])\n      }\n      return r\n    }\n    if (type === 'numArray') {\n      return data.toArray()\n    }\n    // else if (type === 'number') {\n    //   return data[0]\n    // }\n    return data\n  }\n\n  for (let i = 0; i < readFeatureCount; i += 1) {\n    const code = String.fromCharCode(decodeDataSeries('FC'))\n\n    const readPosDelta = decodeDataSeries('FP')\n\n    // map of operator name -> data series name\n    const data1Schema = {\n      B: ['character', 'BA'] as const,\n      S: ['string', majorVersion > 1 ? 'SC' : 'IN'] as const, // IN if cram v1, SC otherwise\n      X: ['number', 'BS'] as const,\n      D: ['number', 'DL'] as const,\n      I: ['string', 'IN'] as const,\n      i: ['character', 'BA'] as const,\n      b: ['string', 'BB'] as const,\n      q: ['numArray', 'QQ'] as const,\n      Q: ['number', 'QS'] as const,\n      H: ['number', 'HC'] as const,\n      P: ['number', 'PD'] as const,\n      N: ['number', 'RS'] as const,\n    }[code]\n\n    if (!data1Schema) {\n      throw new CramMalformedError(`invalid read feature code \"${code}\"`)\n    }\n\n    let data = decodeRFData(data1Schema)\n\n    // if this is a tag with two data items, make the data an array and add the second item\n    const data2Schema = { B: ['number', 'QS'] as const }[code]\n    if (data2Schema) {\n      data = [data, decodeRFData(data2Schema)]\n    }\n\n    currentReadPos += readPosDelta\n    const pos = currentReadPos\n\n    currentRefPos += readPosDelta\n    const refPos = currentRefPos\n\n    // for gapping features, adjust the reference position for read features that follow\n    if (code === 'D' || code === 'N') {\n      currentRefPos += data\n    } else if (code === 'I' || code === 'S') {\n      currentRefPos -= data.length\n    } else if (code === 'i') {\n      currentRefPos -= 1\n    }\n\n    readFeatures[i] = { code, pos, refPos, data }\n  }\n  return readFeatures\n}\n\nexport type DataSeriesDecoder = <T extends DataSeriesEncodingKey>(\n  dataSeriesName: T,\n) => DataTypeMapping[DataSeriesTypes[T]]\n\nexport default function decodeRecord(\n  slice: CramSlice,\n  decodeDataSeries: DataSeriesDecoder,\n  compressionScheme: CramContainerCompressionScheme,\n  sliceHeader: SliceHeader,\n  coreDataBlock: CramFileBlock,\n  blocksByContentId: Record<number, CramFileBlock>,\n  cursors: Cursors,\n  majorVersion: number,\n  recordNumber: number,\n) {\n  let flags = decodeDataSeries('BF') as number\n\n  // note: the C data type of compressionFlags is byte in cram v1\n  // and int32 in cram v2+, but that does not matter for us here\n  // in javascript land.\n  const cramFlags = decodeDataSeries('CF') as number\n\n  if (!isMappedSliceHeader(sliceHeader.parsedContent)) {\n    throw new Error()\n  }\n\n  let sequenceId\n  if (majorVersion > 1 && sliceHeader.parsedContent.refSeqId === -2) {\n    sequenceId = decodeDataSeries('RI')\n  } else {\n    sequenceId = sliceHeader.parsedContent.refSeqId\n  }\n\n  const readLength = decodeDataSeries('RL')\n  // if APDelta, will calculate the true start in a second pass\n  let alignmentStart = decodeDataSeries('AP')\n  if (compressionScheme.APdelta) {\n    alignmentStart = alignmentStart + cursors.lastAlignmentStart\n  }\n  cursors.lastAlignmentStart = alignmentStart\n  const readGroupId = decodeDataSeries('RG')\n\n  let readName\n  if (compressionScheme.readNamesIncluded) {\n    readName = readNullTerminatedString(decodeDataSeries('RN'))\n  }\n\n  let mateToUse\n  let templateSize\n  let mateRecordNumber\n  // mate record\n  if (CramFlagsDecoder.isDetached(cramFlags)) {\n    // note: the MF is a byte in 1.0, int32 in 2+, but once again this doesn't matter for javascript\n    // const mate: any = {}\n    const mateFlags = decodeDataSeries('MF') as number\n    let mateReadName\n    if (!compressionScheme.readNamesIncluded) {\n      mateReadName = readNullTerminatedString(decodeDataSeries('RN'))\n      readName = mateReadName\n    }\n    const mateSequenceId = decodeDataSeries('NS') as number\n    const mateAlignmentStart = decodeDataSeries('NP') as number\n    if (mateFlags || mateSequenceId > -1) {\n      mateToUse = {\n        mateFlags,\n        mateSequenceId,\n        mateAlignmentStart,\n        mateReadName,\n      }\n    }\n\n    templateSize = decodeDataSeries('TS')\n\n    // set mate unmapped if needed\n    if (MateFlagsDecoder.isUnmapped(mateFlags)) {\n      flags = BamFlagsDecoder.setMateUnmapped(flags)\n    }\n    // set mate reversed if needed\n    if (MateFlagsDecoder.isOnNegativeStrand(mateFlags)) {\n      flags = BamFlagsDecoder.setMateReverseComplemented(flags)\n    }\n\n    // detachedCount++\n  } else if (CramFlagsDecoder.isWithMateDownstream(cramFlags)) {\n    mateRecordNumber = (decodeDataSeries('NF') as number) + recordNumber + 1\n  }\n\n  // TODO: the aux tag parsing will have to be refactored if we want to support\n  // cram v1\n  const TLindex = decodeDataSeries('TL')\n  if (TLindex < 0) {\n    /* TODO: check nTL: TLindex >= compressionHeader.tagEncoding.size */\n    throw new CramMalformedError('invalid TL index')\n  }\n\n  const tags: Record<string, any> = {}\n  // TN = tag names\n  const TN = compressionScheme.getTagNames(TLindex)\n  const ntags = TN.length\n\n  for (let i = 0; i < ntags; i += 1) {\n    const tagId = TN[i]\n    const tagName = tagId.substr(0, 2)\n    const tagType = tagId.substr(2, 1)\n\n    const tagCodec = compressionScheme.getCodecForTag(tagId)\n    if (!tagCodec) {\n      throw new CramMalformedError(\n        `no codec defined for auxiliary tag ${tagId}`,\n      )\n    }\n    const tagData = tagCodec.decode(\n      slice,\n      coreDataBlock,\n      blocksByContentId,\n      cursors,\n    )\n    tags[tagName] = parseTagData(tagType, tagData)\n  }\n\n  let readFeatures\n  let lengthOnRef\n  let mappingQuality\n  let qualityScores: number[] | undefined | null\n  let readBases = undefined\n  if (!BamFlagsDecoder.isSegmentUnmapped(flags)) {\n    // reading read features\n    const readFeatureCount = decodeDataSeries('FN') as number\n    if (readFeatureCount) {\n      readFeatures = decodeReadFeatures(\n        alignmentStart,\n        readFeatureCount,\n        decodeDataSeries,\n        compressionScheme,\n        majorVersion,\n      )\n    }\n\n    // compute the read's true span on the reference sequence, and the end coordinate of the alignment on the reference\n    lengthOnRef = readLength\n    if (readFeatures) {\n      for (const { code, data } of readFeatures) {\n        if (code === 'D' || code === 'N') {\n          lengthOnRef += data\n        } else if (code === 'I' || code === 'S') {\n          lengthOnRef = lengthOnRef - data.length\n        } else if (code === 'i') {\n          lengthOnRef = lengthOnRef - 1\n        }\n      }\n    }\n    if (Number.isNaN(lengthOnRef)) {\n      console.warn(\n        `${\n          readName || `${sequenceId}:${alignmentStart}`\n        } record has invalid read features`,\n      )\n      lengthOnRef = readLength\n    }\n\n    // mapping quality\n    mappingQuality = decodeDataSeries('MQ') as number\n    if (CramFlagsDecoder.isPreservingQualityScores(cramFlags)) {\n      qualityScores = new Array(readLength)\n      for (let i = 0; i < qualityScores.length; i++) {\n        qualityScores[i] = decodeDataSeries('QS')\n      }\n    }\n  } else if (CramFlagsDecoder.isDecodeSequenceAsStar(cramFlags)) {\n    readBases = null\n    qualityScores = null\n  } else {\n    const bases = new Array(readLength) as number[]\n    for (let i = 0; i < bases.length; i += 1) {\n      bases[i] = decodeDataSeries('BA')\n    }\n    readBases = String.fromCharCode(...bases)\n\n    if (CramFlagsDecoder.isPreservingQualityScores(cramFlags)) {\n      qualityScores = new Array(readLength)\n      for (let i = 0; i < bases.length; i += 1) {\n        qualityScores[i] = decodeDataSeries('QS')\n      }\n    }\n  }\n\n  return {\n    readLength,\n    sequenceId,\n    cramFlags,\n    flags,\n    alignmentStart,\n    readGroupId,\n    readName,\n    mateToUse,\n    templateSize,\n    mateRecordNumber,\n    readFeatures,\n    lengthOnRef,\n    mappingQuality,\n    qualityScores,\n    readBases,\n    tags,\n  }\n}\n","import { CramArgumentError, CramMalformedError } from '../../errors'\nimport { parseItem, sequenceMD5, tinyMemoize } from '../util'\n\nimport Constants from '../constants'\nimport decodeRecord, { DataSeriesDecoder } from './decodeRecord'\nimport CramRecord from '../record'\nimport CramContainer from '../container'\nimport CramFile, { CramFileBlock } from '../file'\nimport {\n  isMappedSliceHeader,\n  MappedSliceHeader,\n  UnmappedSliceHeader,\n} from '../sectionParsers'\nimport { CramBufferOverrunError } from '../codecs/getBits'\nimport { Cursors, DataTypeMapping } from '../codecs/_base'\nimport { DataSeriesEncodingKey } from '../codecs/dataSeriesTypes'\nimport { DataSeriesTypes } from '../container/compressionScheme'\n\nexport type SliceHeader = CramFileBlock & {\n  parsedContent: MappedSliceHeader | UnmappedSliceHeader\n}\n\n/**\n * @private\n * Try to estimate the template length from a bunch of interrelated multi-segment reads.\n * @param {Array[CramRecord]} allRecords\n * @param {number} currentRecordNumber\n * @param {CramRecord} thisRecord\n */\nfunction calculateMultiSegmentMatedTemplateLength(\n  allRecords: CramRecord[],\n  currentRecordNumber: number,\n  thisRecord: CramRecord,\n) {\n  function getAllMatedRecords(startRecord: CramRecord) {\n    const records = [startRecord]\n    if (\n      startRecord.mateRecordNumber !== undefined &&\n      startRecord.mateRecordNumber >= 0\n    ) {\n      const mateRecord = allRecords[startRecord.mateRecordNumber]\n      if (!mateRecord) {\n        throw new CramMalformedError(\n          'intra-slice mate record not found, this file seems malformed',\n        )\n      }\n      records.push(...getAllMatedRecords(mateRecord))\n    }\n    return records\n  }\n\n  const matedRecords = getAllMatedRecords(thisRecord)\n  const starts = matedRecords.map(r => r.alignmentStart)\n  const ends = matedRecords.map(r => r.alignmentStart + r.readLength - 1)\n  const estimatedTemplateLength = Math.max(...ends) - Math.min(...starts) + 1\n  if (estimatedTemplateLength >= 0) {\n    matedRecords.forEach(r => {\n      if (r.templateLength !== undefined) {\n        throw new CramMalformedError(\n          'mate pair group has some members that have template lengths already, this file seems malformed',\n        )\n      }\n      r.templateLength = estimatedTemplateLength\n    })\n  }\n}\n\n/**\n * @private\n * Attempt to calculate the `templateLength` for a pair of intra-slice paired reads.\n * Ported from htslib. Algorithm is imperfect.\n * @param {CramRecord} thisRecord\n * @param {CramRecord} mateRecord\n */\nfunction calculateIntraSliceMatePairTemplateLength(\n  thisRecord: CramRecord,\n  mateRecord: CramRecord,\n) {\n  // this just estimates the template length by using the simple (non-gapped) end coordinate of each\n  // read, because gapping in the alignment doesn't mean the template is longer or shorter\n  const start = Math.min(thisRecord.alignmentStart, mateRecord.alignmentStart)\n  const end = Math.max(\n    thisRecord.alignmentStart + thisRecord.readLength - 1,\n    mateRecord.alignmentStart + mateRecord.readLength - 1,\n  )\n  const lengthEstimate = end - start + 1\n  thisRecord.templateLength = lengthEstimate\n  mateRecord.templateLength = lengthEstimate\n}\n\n/**\n * @private establishes a mate-pair relationship between two records in the same slice.\n * CRAM compresses mate-pair relationships between records in the same slice down into\n * just one record having the index in the slice of its mate\n */\nfunction associateIntraSliceMate(\n  allRecords: CramRecord[],\n  currentRecordNumber: number,\n  thisRecord: CramRecord,\n  mateRecord: CramRecord,\n) {\n  if (!mateRecord) {\n    throw new CramMalformedError(\n      'could not resolve intra-slice mate pairs, file seems truncated or malformed',\n    )\n  }\n\n  const complicatedMultiSegment = !!(\n    mateRecord.mate ||\n    (mateRecord.mateRecordNumber !== undefined &&\n      mateRecord.mateRecordNumber !== currentRecordNumber)\n  )\n\n  // Deal with lossy read names\n  if (!thisRecord.readName) {\n    thisRecord.readName = String(thisRecord.uniqueId)\n    mateRecord.readName = thisRecord.readName\n  }\n\n  thisRecord.mate = {\n    sequenceId: mateRecord.sequenceId,\n    alignmentStart: mateRecord.alignmentStart,\n    uniqueId: mateRecord.uniqueId,\n  }\n  if (mateRecord.readName) {\n    thisRecord.mate.readName = mateRecord.readName\n  }\n\n  // the mate record might have its own mate pointer, if this is some kind of\n  // multi-segment (more than paired) scheme, so only relate that one back to this one\n  // if it does not have any other relationship\n  if (!mateRecord.mate && mateRecord.mateRecordNumber === undefined) {\n    mateRecord.mate = {\n      sequenceId: thisRecord.sequenceId,\n      alignmentStart: thisRecord.alignmentStart,\n      uniqueId: thisRecord.uniqueId,\n    }\n    if (thisRecord.readName) {\n      mateRecord.mate.readName = thisRecord.readName\n    }\n  }\n\n  // make sure the proper flags and cramFlags are set on both records\n  // paired\n  thisRecord.flags |= Constants.BAM_FPAIRED\n\n  // set mate unmapped if needed\n  if (mateRecord.flags & Constants.BAM_FUNMAP) {\n    thisRecord.flags |= Constants.BAM_FMUNMAP\n    // thisRecord.templateLength = 0\n  }\n  if (thisRecord.flags & Constants.BAM_FUNMAP) {\n    // thisRecord.templateLength = 0\n    mateRecord.flags |= Constants.BAM_FMUNMAP\n  }\n\n  // set mate reversed if needed\n  if (mateRecord.flags & Constants.BAM_FREVERSE) {\n    thisRecord.flags |= Constants.BAM_FMREVERSE\n  }\n  if (thisRecord.flags & Constants.BAM_FREVERSE) {\n    mateRecord.flags |= Constants.BAM_FMREVERSE\n  }\n\n  if (thisRecord.templateLength === undefined) {\n    if (complicatedMultiSegment) {\n      calculateMultiSegmentMatedTemplateLength(\n        allRecords,\n        currentRecordNumber,\n        thisRecord,\n      )\n    } else {\n      calculateIntraSliceMatePairTemplateLength(thisRecord, mateRecord)\n    }\n  }\n\n  // delete this last because it's used by the\n  // complicated template length estimation\n  delete thisRecord.mateRecordNumber\n}\n\nexport default class CramSlice {\n  private file: CramFile\n\n  constructor(\n    public container: CramContainer,\n    public containerPosition: number,\n    _unused: number,\n  ) {\n    this.file = container.file\n  }\n\n  // memoize\n  async getHeader(): Promise<SliceHeader> {\n    // fetch and parse the slice header\n    const sectionParsers = await this.file.getSectionParsers()\n    const containerHeader = await this.container.getHeader()\n    const header = await this.file.readBlock(\n      containerHeader._endPosition + this.containerPosition,\n    )\n    if (header === undefined) {\n      throw new Error()\n    }\n    if (header.contentType === 'MAPPED_SLICE_HEADER') {\n      const content = parseItem(\n        header.content,\n        sectionParsers.cramMappedSliceHeader.parser,\n        0,\n        containerHeader._endPosition,\n      )\n      return { ...header, parsedContent: content }\n    } else if (header.contentType === 'UNMAPPED_SLICE_HEADER') {\n      const content = parseItem(\n        header.content,\n        sectionParsers.cramUnmappedSliceHeader.parser,\n        0,\n        containerHeader._endPosition,\n      )\n      return { ...header, parsedContent: content }\n    } else {\n      throw new CramMalformedError(\n        `error reading slice header block, invalid content type ${header.contentType}`,\n      )\n    }\n  }\n\n  // memoize\n  async getBlocks() {\n    const header = await this.getHeader()\n    // read all the blocks into memory and store them\n    let blockPosition = header._endPosition\n    const blocks: CramFileBlock[] = new Array(header.parsedContent.numBlocks)\n    for (let i = 0; i < blocks.length; i += 1) {\n      const block = await this.file.readBlock(blockPosition)\n      if (block === undefined) {\n        throw new Error()\n      }\n      blocks[i] = block\n      blockPosition = blocks[i]._endPosition\n    }\n\n    return blocks\n  }\n\n  // no memoize\n  async getCoreDataBlock() {\n    const blocks = await this.getBlocks()\n    // the core data block is always the first block in the slice\n    return blocks[0]\n  }\n\n  // memoize\n  async _getBlocksContentIdIndex(): Promise<Record<number, CramFileBlock>> {\n    const blocks = await this.getBlocks()\n    const blocksByContentId: Record<number, CramFileBlock> = {}\n    blocks.forEach(block => {\n      if (block.contentType === 'EXTERNAL_DATA') {\n        blocksByContentId[block.contentId] = block\n      }\n    })\n    return blocksByContentId\n  }\n\n  async getBlockByContentId(id: number) {\n    const blocksByContentId = await this._getBlocksContentIdIndex()\n    return blocksByContentId[id]\n  }\n\n  async getReferenceRegion() {\n    // read the slice header\n    const sliceHeader = (await this.getHeader()).parsedContent\n    if (!isMappedSliceHeader(sliceHeader)) {\n      throw new Error()\n    }\n\n    if (sliceHeader.refSeqId < 0) {\n      return undefined\n    }\n\n    const compressionScheme = await this.container.getCompressionScheme()\n    if (compressionScheme === undefined) {\n      throw new Error()\n    }\n\n    // console.log(JSON.stringify(sliceHeader, null, '  '))\n\n    if (sliceHeader.refBaseBlockId >= 0) {\n      const refBlock = await this.getBlockByContentId(\n        sliceHeader.refBaseBlockId,\n      )\n      if (!refBlock) {\n        throw new CramMalformedError(\n          'embedded reference specified, but reference block does not exist',\n        )\n      }\n\n      // TODO: we do not read anything named 'span'\n      // if (sliceHeader.span > refBlock.uncompressedSize) {\n      //   throw new CramMalformedError('Embedded reference is too small')\n      // }\n\n      // TODO verify\n      return {\n        seq: (refBlock as any).data.toString('utf8'),\n        start: sliceHeader.refSeqStart,\n        end: sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1,\n        span: sliceHeader.refSeqSpan,\n      }\n    }\n    if (\n      compressionScheme.referenceRequired ||\n      this.file.fetchReferenceSequenceCallback\n    ) {\n      if (!this.file.fetchReferenceSequenceCallback) {\n        throw new Error(\n          'reference sequence not embedded, and seqFetch callback not provided, cannot fetch reference sequence',\n        )\n      }\n\n      const seq = await this.file.fetchReferenceSequenceCallback(\n        sliceHeader.refSeqId,\n        sliceHeader.refSeqStart,\n        sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1,\n      )\n\n      if (seq.length !== sliceHeader.refSeqSpan) {\n        throw new CramArgumentError(\n          'seqFetch callback returned a reference sequence of the wrong length',\n        )\n      }\n\n      return {\n        seq,\n        start: sliceHeader.refSeqStart,\n        end: sliceHeader.refSeqStart + sliceHeader.refSeqSpan - 1,\n        span: sliceHeader.refSeqSpan,\n      }\n    }\n\n    return undefined\n  }\n\n  getAllRecords() {\n    return this.getRecords(() => true)\n  }\n\n  async _fetchRecords() {\n    const { majorVersion } = await this.file.getDefinition()\n\n    const compressionScheme = await this.container.getCompressionScheme()\n    if (compressionScheme === undefined) {\n      throw new Error()\n    }\n\n    const sliceHeader = await this.getHeader()\n    if (sliceHeader === undefined) {\n      throw new Error()\n    }\n\n    const blocksByContentId = await this._getBlocksContentIdIndex()\n\n    // check MD5 of reference if available\n    if (\n      majorVersion > 1 &&\n      this.file.options.checkSequenceMD5 &&\n      isMappedSliceHeader(sliceHeader.parsedContent) &&\n      sliceHeader.parsedContent.refSeqId >= 0 &&\n      sliceHeader.parsedContent.md5.join('') !== '0000000000000000'\n    ) {\n      const refRegion = await this.getReferenceRegion()\n      if (refRegion) {\n        const { seq, start, end } = refRegion\n        const seqMd5 = sequenceMD5(seq)\n        const storedMd5 = sliceHeader.parsedContent.md5\n          .map(byte => (byte < 16 ? '0' : '') + byte.toString(16))\n          .join('')\n        if (seqMd5 !== storedMd5) {\n          throw new CramMalformedError(\n            `MD5 checksum reference mismatch for ref ${sliceHeader.parsedContent.refSeqId} pos ${start}..${end}. recorded MD5: ${storedMd5}, calculated MD5: ${seqMd5}`,\n          )\n        }\n      }\n    }\n\n    // tracks the read position within the block. codec.decode() methods\n    // advance the byte and bit positions in the cursor as they decode\n    // data note that we are only decoding a single block here, the core\n    // data block\n    const coreDataBlock = await this.getCoreDataBlock()\n    const cursors: Cursors = {\n      lastAlignmentStart: isMappedSliceHeader(sliceHeader.parsedContent)\n        ? sliceHeader.parsedContent.refSeqStart\n        : 0,\n      coreBlock: { bitPosition: 7, bytePosition: 0 },\n      externalBlocks: {\n        map: new Map(),\n        getCursor(contentId: number) {\n          let r = this.map.get(contentId)\n          if (r === undefined) {\n            r = { bitPosition: 7, bytePosition: 0 }\n            this.map.set(contentId, r)\n          }\n          return r\n        },\n      },\n    }\n\n    const decodeDataSeries: DataSeriesDecoder = <\n      T extends DataSeriesEncodingKey,\n    >(\n      dataSeriesName: T,\n    ): DataTypeMapping[DataSeriesTypes[T]] => {\n      const codec = compressionScheme.getCodecForDataSeries(dataSeriesName)\n      if (!codec) {\n        throw new CramMalformedError(\n          `no codec defined for ${dataSeriesName} data series`,\n        )\n      }\n      // console.log(dataSeriesName, Object.getPrototypeOf(codec))\n      const decoded = codec.decode(\n        this,\n        coreDataBlock,\n        blocksByContentId,\n        cursors,\n      )\n      return decoded\n    }\n    let records: CramRecord[] = new Array(sliceHeader.parsedContent.numRecords)\n    for (let i = 0; i < records.length; i += 1) {\n      try {\n        const init = decodeRecord(\n          this,\n          decodeDataSeries,\n          compressionScheme,\n          sliceHeader,\n          coreDataBlock,\n          blocksByContentId,\n          cursors,\n          majorVersion,\n          i,\n        )\n        records[i] = new CramRecord({\n          ...init,\n          uniqueId:\n            sliceHeader.contentPosition +\n            sliceHeader.parsedContent.recordCounter +\n            i +\n            1,\n        })\n      } catch (e) {\n        if (e instanceof CramBufferOverrunError) {\n          console.warn(\n            'read attempted beyond end of buffer, file seems truncated.',\n          )\n          records = records.filter(r => !!r)\n          break\n        } else {\n          throw e\n        }\n      }\n    }\n\n    // interpret `recordsToNextFragment` attributes to make standard `mate`\n    // objects Resolve mate pair cross-references between records in this slice\n    for (let i = 0; i < records.length; i += 1) {\n      const { mateRecordNumber } = records[i]\n      if (mateRecordNumber !== undefined && mateRecordNumber >= 0) {\n        associateIntraSliceMate(\n          records,\n          i,\n          records[i],\n          records[mateRecordNumber],\n        )\n      }\n    }\n\n    return records\n  }\n\n  async getRecords(filterFunction: (r: CramRecord) => boolean) {\n    // fetch the features if necessary, using the file-level feature cache\n    const cacheKey = this.container.filePosition + this.containerPosition\n    let recordsPromise = this.file.featureCache.get(cacheKey.toString())\n    if (!recordsPromise) {\n      recordsPromise = this._fetchRecords()\n      this.file.featureCache.set(cacheKey.toString(), recordsPromise)\n    }\n\n    const unfiltered = await recordsPromise\n    const records = unfiltered.filter(filterFunction)\n\n    // if we can fetch reference sequence, add the reference sequence to the records\n    if (records.length && this.file.fetchReferenceSequenceCallback) {\n      const sliceHeader = await this.getHeader()\n      if (\n        isMappedSliceHeader(sliceHeader.parsedContent) &&\n        (sliceHeader.parsedContent.refSeqId >= 0 || // single-ref slice\n          sliceHeader.parsedContent.refSeqId === -2) // multi-ref slice\n      ) {\n        const singleRefId =\n          sliceHeader.parsedContent.refSeqId >= 0\n            ? sliceHeader.parsedContent.refSeqId\n            : undefined\n        const compressionScheme = await this.container.getCompressionScheme()\n        if (compressionScheme === undefined) {\n          throw new Error()\n        }\n        const refRegions: Record<\n          string,\n          { id: number; start: number; end: number; seq: string | null }\n        > = {} // seqId => { start, end, seq }\n\n        // iterate over the records to find the spans of the reference sequences we need to fetch\n        for (let i = 0; i < records.length; i += 1) {\n          const seqId =\n            singleRefId !== undefined ? singleRefId : records[i].sequenceId\n          let refRegion = refRegions[seqId]\n          if (!refRegion) {\n            refRegion = {\n              id: seqId,\n              start: records[i].alignmentStart,\n              end: -Infinity,\n              seq: null,\n            }\n            refRegions[seqId] = refRegion\n          }\n\n          const end =\n            records[i].alignmentStart +\n            (records[i].lengthOnRef || records[i].readLength) -\n            1\n          if (end > refRegion.end) {\n            refRegion.end = end\n          }\n          if (records[i].alignmentStart < refRegion.start) {\n            refRegion.start = records[i].alignmentStart\n          }\n        }\n\n        // fetch the `seq` for all of the ref regions\n        await Promise.all(\n          Object.values(refRegions).map(async refRegion => {\n            if (refRegion.id !== -1 && refRegion.start <= refRegion.end) {\n              refRegion.seq = await this.file.fetchReferenceSequenceCallback(\n                refRegion.id,\n                refRegion.start,\n                refRegion.end,\n              )\n            }\n          }),\n        )\n\n        // now decorate all the records with them\n        for (let i = 0; i < records.length; i += 1) {\n          const seqId =\n            singleRefId !== undefined ? singleRefId : records[i].sequenceId\n          const refRegion = refRegions[seqId]\n          if (refRegion && refRegion.seq) {\n            const seq = refRegion.seq\n            records[i].addReferenceSequence(\n              { ...refRegion, seq },\n              compressionScheme,\n            )\n          }\n        }\n      }\n    }\n\n    return records\n  }\n}\n\n// memoize several methods in the class for performance\n'getHeader getBlocks _getBlocksContentIdIndex'\n  .split(' ')\n  .forEach(method => tinyMemoize(CramSlice, method))\n","import CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { DataType } from './dataSeriesTypes'\n\nexport type DataTypeMapping = {\n  byte: number\n  int: number\n  long: number\n  byteArray: Uint8Array\n}\n\nexport type Cursor = {\n  bitPosition: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7\n  bytePosition: number\n}\n\nexport type Cursors = {\n  lastAlignmentStart: number\n  coreBlock: Cursor\n  externalBlocks: {\n    map: Map<any, any>\n    getCursor: (contentId: number) => Cursor\n  }\n}\n\n// codec base class\nexport default abstract class CramCodec<\n  TResult extends DataType = DataType,\n  TParameters = unknown,\n> {\n  public parameters: TParameters\n  public dataType: DataType\n\n  constructor(parameters: TParameters, dataType: TResult) {\n    this.parameters = parameters\n    this.dataType = dataType\n  }\n\n  abstract decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ): DataTypeMapping[TResult]\n}\n","import { CramMalformedError } from '../../errors'\nimport CramCodec, { Cursor, Cursors } from './_base'\nimport { getBits } from './getBits'\nimport { HuffmanEncoding } from '../encoding'\n\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\n\nfunction numberOfSetBits(ii: number) {\n  let i = (ii - (ii >> 1)) & 0x55555555\n  i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n  return (((i + (i >> 4)) & 0x0f0f0f0f) * 0x01010101) >> 24\n}\n\ntype Code = { bitLength: number; value: number; bitCode: number }\n\nexport default class HuffmanIntCodec extends CramCodec<\n  'byte' | 'int',\n  HuffmanEncoding['parameters']\n> {\n  private codes: Record<number, Code> = {}\n  private codeBook: Record<number, number[]> = {}\n  private sortedByValue: Code[] = []\n  private sortedCodes: Code[] = []\n  private sortedValuesByBitCode: number[] = []\n  private sortedBitCodes: number[] = []\n  private sortedBitLengthsByBitCode: number[] = []\n  private bitCodeToValue: number[] = []\n\n  constructor(\n    parameters: HuffmanEncoding['parameters'],\n    dataType: 'byte' | 'int',\n  ) {\n    super(parameters, dataType)\n    if (!['byte', 'int'].includes(this.dataType)) {\n      throw new TypeError(\n        `${this.dataType} decoding not yet implemented by HUFFMAN_INT codec`,\n      )\n    }\n\n    this.buildCodeBook()\n    this.buildCodes()\n    this.buildCaches()\n\n    // if this is a degenerate zero-length huffman code, special-case the decoding\n    if (this.sortedCodes[0].bitLength === 0) {\n      this._decode = this._decodeZeroLengthCode\n    }\n  }\n\n  buildCodeBook() {\n    // parse the parameters together into a `codes` data structure\n    let codes: Array<{ symbol: number; bitLength: number }> = new Array(\n      this.parameters.numCodes,\n    )\n    for (let i = 0; i < this.parameters.numCodes; i += 1) {\n      codes[i] = {\n        symbol: this.parameters.symbols[i],\n        bitLength: this.parameters.bitLengths[i],\n      }\n    }\n    // sort the codes by bit length and symbol value\n    codes = codes.sort(\n      (a, b) => a.bitLength - b.bitLength || a.symbol - b.symbol,\n    )\n\n    this.codeBook = {}\n    codes.forEach(code => {\n      if (!this.codeBook[code.bitLength]) {\n        this.codeBook[code.bitLength] = []\n      }\n      this.codeBook[code.bitLength].push(code.symbol)\n    })\n  }\n\n  buildCodes() {\n    this.codes = {} /*  new TreeMap<Integer, HuffmanBitCode>(); */\n    let codeLength = 0\n    let codeValue = -1\n    Object.entries(this.codeBook).forEach(([bitLength, symbols]) => {\n      const bitLengthInt = parseInt(bitLength, 10)\n      symbols.forEach(symbol => {\n        const code = {\n          bitLength: bitLengthInt,\n          value: symbol,\n          bitCode: 0,\n        }\n        codeValue = codeValue + 1\n        const delta = bitLengthInt - codeLength // new length?\n        codeValue = codeValue << delta // pad with 0's\n        code.bitCode = codeValue // calculated: huffman code\n        codeLength = codeLength + delta // adjust current code length\n\n        if (numberOfSetBits(codeValue) > bitLengthInt) {\n          throw new CramMalformedError('Symbol out of range')\n        }\n\n        this.codes[symbol] = code\n      })\n    })\n  }\n\n  buildCaches() {\n    this.sortedCodes = Object.values(this.codes).sort(\n      (a, b) => a.bitLength - b.bitLength || a.bitCode - b.bitCode,\n    )\n\n    // this.sortedValues = this.parameters.values.sort((a,b) => a-b)\n    this.sortedByValue = Object.values(this.codes).sort(\n      (a, b) => a.value - b.value,\n    )\n\n    this.sortedValuesByBitCode = this.sortedCodes.map(c => c.value)\n    this.sortedBitCodes = this.sortedCodes.map(c => c.bitCode)\n    this.sortedBitLengthsByBitCode = this.sortedCodes.map(c => c.bitLength)\n    const maxBitCode = Math.max(...this.sortedBitCodes)\n\n    this.bitCodeToValue = new Array(maxBitCode + 1).fill(-1)\n    for (let i = 0; i < this.sortedBitCodes.length; i += 1) {\n      this.bitCodeToValue[this.sortedCodes[i].bitCode] = i\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    return this._decode(slice, coreDataBlock, cursors.coreBlock)\n  }\n\n  // _decodeNull() {\n  //   return -1\n  // }\n\n  // the special case for zero-length codes\n  _decodeZeroLengthCode() {\n    return this.sortedCodes[0].value\n  }\n\n  _decode(slice: CramSlice, coreDataBlock: CramFileBlock, coreCursor: Cursor) {\n    const input = coreDataBlock.content\n\n    let prevLen = 0\n    let bits = 0\n    for (let i = 0; i < this.sortedCodes.length; i += 1) {\n      const length = this.sortedCodes[i].bitLength\n      bits <<= length - prevLen\n      bits |= getBits(input, coreCursor, length - prevLen)\n      prevLen = length\n      {\n        const index = this.bitCodeToValue[bits]\n        if (index > -1 && this.sortedBitLengthsByBitCode[index] === length) {\n          return this.sortedValuesByBitCode[index]\n        }\n\n        for (\n          let j = i;\n          this.sortedCodes[j + 1].bitLength === length &&\n          j < this.sortedCodes.length;\n          j += 1\n        ) {\n          i += 1\n        }\n      }\n    }\n    throw new CramMalformedError('Huffman symbol not found.')\n  }\n}\n","import { CramMalformedError, CramUnimplementedError } from '../../errors'\nimport CramCodec, { Cursor, Cursors } from './_base'\nimport { parseItf8 } from '../util'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { CramBufferOverrunError } from './getBits'\nimport { ExternalCramEncoding } from '../encoding'\n\nexport default class ExternalCodec extends CramCodec<\n  'int' | 'byte',\n  ExternalCramEncoding['parameters']\n> {\n  private readonly _decodeData: (\n    contentBlock: CramFileBlock,\n    cursor: Cursor,\n  ) => number\n\n  constructor(\n    parameters: ExternalCramEncoding['parameters'],\n    dataType: 'int' | 'byte',\n  ) {\n    super(parameters, dataType)\n    if (this.dataType === 'int') {\n      this._decodeData = this._decodeInt\n    } else if (this.dataType === 'byte') {\n      this._decodeData = this._decodeByte\n    } else {\n      throw new CramUnimplementedError(\n        `${this.dataType} decoding not yet implemented by EXTERNAL codec`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    const { blockContentId } = this.parameters\n    const contentBlock = blocksByContentId[blockContentId]\n    if (!contentBlock) {\n      throw new CramMalformedError(\n        `no block found with content ID ${blockContentId}`,\n      )\n    }\n    const cursor = cursors.externalBlocks.getCursor(blockContentId)\n    return this._decodeData(contentBlock, cursor)\n  }\n\n  _decodeInt(contentBlock: CramFileBlock, cursor: Cursor) {\n    const [result, bytesRead] = parseItf8(\n      contentBlock.content,\n      cursor.bytePosition,\n    )\n    cursor.bytePosition = cursor.bytePosition + bytesRead\n    return result\n  }\n\n  _decodeByte(contentBlock: CramFileBlock, cursor: Cursor) {\n    if (cursor.bytePosition >= contentBlock.content.length) {\n      throw new CramBufferOverrunError(\n        'attempted to read beyond end of block. this file seems truncated.',\n      )\n    }\n    return contentBlock.content[cursor.bytePosition++]\n  }\n}\n","import { CramMalformedError } from '../../errors'\n\nimport CramCodec, { Cursor, Cursors } from './_base'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { ByteArrayStopCramEncoding } from '../encoding'\nimport { CramBufferOverrunError } from './getBits'\n\nexport default class ByteArrayStopCodec extends CramCodec<\n  'byteArray',\n  ByteArrayStopCramEncoding['parameters']\n> {\n  constructor(\n    parameters: ByteArrayStopCramEncoding['parameters'],\n    dataType: 'byteArray',\n  ) {\n    super(parameters, dataType)\n    if (dataType !== 'byteArray') {\n      throw new TypeError(\n        `byteArrayStop codec does not support data type ${dataType}`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    const { blockContentId } = this.parameters\n    const contentBlock = blocksByContentId[blockContentId]\n    if (!contentBlock) {\n      throw new CramMalformedError(\n        `no block found with content ID ${blockContentId}`,\n      )\n    }\n    const cursor = cursors.externalBlocks.getCursor(blockContentId)\n    return this._decodeByteArray(contentBlock, cursor)\n  }\n\n  _decodeByteArray(contentBlock: CramFileBlock, cursor: Cursor) {\n    const dataBuffer = contentBlock.content\n    const { stopByte } = this.parameters\n    // scan to the next stop byte\n    const startPosition = cursor.bytePosition\n    let stopPosition = cursor.bytePosition\n    while (\n      dataBuffer[stopPosition] !== stopByte &&\n      stopPosition < dataBuffer.length\n    ) {\n      if (stopPosition === dataBuffer.length) {\n        throw new CramBufferOverrunError(\n          `byteArrayStop reading beyond length of data buffer?`,\n        )\n      }\n      stopPosition = stopPosition + 1\n    }\n    cursor.bytePosition = stopPosition + 1\n    return dataBuffer.subarray(startPosition, stopPosition)\n  }\n}\n","import { tinyMemoize } from '../util'\n\nimport CramCodec, { Cursors } from './_base'\nimport { ByteArrayLengthEncoding, CramEncoding } from '../encoding'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { DataType } from './dataSeriesTypes'\n\ntype CramCodecFactory = <TData extends DataType = DataType>(\n  encodingData: CramEncoding,\n  dataType: TData | 'ignore',\n) => CramCodec<TData>\n\nexport default class ByteArrayStopCodec extends CramCodec<\n  'byteArray',\n  ByteArrayLengthEncoding['parameters']\n> {\n  private instantiateCodec: CramCodecFactory\n\n  constructor(\n    parameters: ByteArrayLengthEncoding['parameters'],\n    dataType: 'byteArray',\n    instantiateCodec: CramCodecFactory,\n  ) {\n    super(parameters, dataType)\n    this.instantiateCodec = instantiateCodec\n    if (dataType !== 'byteArray') {\n      throw new TypeError(\n        `byteArrayLength does not support data type ${dataType}`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    const lengthCodec = this._getLengthCodec()\n    const arrayLength = lengthCodec.decode(\n      slice,\n      coreDataBlock,\n      blocksByContentId,\n      cursors,\n    )\n\n    const dataCodec = this._getDataCodec()\n    const data = new Uint8Array(arrayLength)\n    for (let i = 0; i < arrayLength; i += 1) {\n      data[i] = dataCodec.decode(\n        slice,\n        coreDataBlock,\n        blocksByContentId,\n        cursors,\n      )\n    }\n\n    return data\n  }\n\n  // memoize\n  _getLengthCodec() {\n    const encodingParams = this.parameters.lengthsEncoding\n    return this.instantiateCodec(encodingParams, 'int')\n  }\n\n  // memoize\n  _getDataCodec() {\n    const encodingParams = this.parameters.valuesEncoding\n    return this.instantiateCodec(encodingParams, 'byte')\n  }\n}\n\n'_getLengthCodec _getDataCodec'\n  .split(' ')\n  .forEach(method => tinyMemoize(ByteArrayStopCodec, method))\n","import { CramUnimplementedError } from '../../errors'\nimport CramCodec, { Cursors } from './_base'\nimport { getBits } from './getBits'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { BetaEncoding } from '../encoding'\n\nexport default class BetaCodec extends CramCodec<\n  'int',\n  BetaEncoding['parameters']\n> {\n  constructor(parameters: BetaEncoding['parameters'], dataType: 'int') {\n    super(parameters, dataType)\n    if (this.dataType !== 'int') {\n      throw new CramUnimplementedError(\n        `${this.dataType} decoding not yet implemented by BETA codec`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    const fromBits = getBits(\n      coreDataBlock.content,\n      cursors.coreBlock,\n      this.parameters.length,\n    )\n    return fromBits - this.parameters.offset\n  }\n}\n","import { CramUnimplementedError } from '../../errors'\nimport CramCodec, { Cursors } from './_base'\nimport { getBits } from './getBits'\nimport { GammaEncoding } from '../encoding'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\n\nexport default class GammaCodec extends CramCodec<\n  'int',\n  GammaEncoding['parameters']\n> {\n  constructor(parameters: GammaEncoding['parameters'], dataType: 'int') {\n    super(parameters, dataType)\n    if (this.dataType !== 'int') {\n      throw new CramUnimplementedError(\n        `${this.dataType} decoding not yet implemented by GAMMA codec`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    let length = 1\n\n    while (getBits(coreDataBlock.content, cursors.coreBlock, 1) === 0) {\n      length = length + 1\n    }\n\n    const readBits = getBits(\n      coreDataBlock.content,\n      cursors.coreBlock,\n      length - 1,\n    )\n\n    const value = readBits | (1 << (length - 1))\n    return value - this.parameters.offset\n  }\n}\n","import { CramUnimplementedError } from '../../errors'\n\nimport HuffmanIntCodec from './huffman'\nimport ExternalCodec from './external'\nimport ByteArrayStopCodec from './byteArrayStop'\nimport ByteArrayLengthCodec from './byteArrayLength'\nimport BetaCodec from './beta'\nimport GammaCodec from './gamma'\nimport SubexpCodec from './subexp'\nimport CramCodec from './_base'\nimport { CramEncoding } from '../encoding'\nimport { DataType } from './dataSeriesTypes'\n\nconst codecClasses = {\n  1: ExternalCodec,\n  // 2: GolombCodec,\n  3: HuffmanIntCodec,\n  4: ByteArrayLengthCodec,\n  5: ByteArrayStopCodec,\n  6: BetaCodec,\n  7: SubexpCodec,\n  // 8: GolombRiceCodec,\n  9: GammaCodec,\n}\n\nfunction getCodecClassWithId(id: number) {\n  return (codecClasses as any)[id]\n}\n\nexport function instantiateCodec<TResult extends DataType = DataType>(\n  encodingData: CramEncoding,\n  dataType: DataType | 'ignore',\n): CramCodec<TResult> {\n  const CodecClass = getCodecClassWithId(\n    dataType === 'ignore' ? 0 : encodingData.codecId,\n  )\n  if (!CodecClass) {\n    throw new CramUnimplementedError(\n      `no codec implemented for codec ID ${encodingData.codecId}`,\n    )\n  }\n\n  return new CodecClass(encodingData.parameters, dataType, instantiateCodec)\n}\n","import { CramUnimplementedError } from '../../errors'\nimport CramCodec, { Cursors } from './_base'\nimport { getBits } from './getBits'\nimport CramSlice from '../slice'\nimport { CramFileBlock } from '../file'\nimport { SubexpEncoding } from '../encoding'\n\nexport default class SubexpCodec extends CramCodec<\n  'int',\n  SubexpEncoding['parameters']\n> {\n  constructor(parameters: SubexpEncoding['parameters'], dataType: 'int') {\n    super(parameters, dataType)\n    if (this.dataType !== 'int') {\n      throw new CramUnimplementedError(\n        `${this.dataType} decoding not yet implemented by SUBEXP codec`,\n      )\n    }\n  }\n\n  decode(\n    slice: CramSlice,\n    coreDataBlock: CramFileBlock,\n    blocksByContentId: Record<number, CramFileBlock>,\n    cursors: Cursors,\n  ) {\n    let numLeadingOnes = 0\n    while (getBits(coreDataBlock.content, cursors.coreBlock, 1)) {\n      numLeadingOnes = numLeadingOnes + 1\n    }\n\n    let b\n    let n\n    if (numLeadingOnes === 0) {\n      b = this.parameters.K\n      n = getBits(coreDataBlock.content, cursors.coreBlock, b)\n    } else {\n      b = numLeadingOnes + this.parameters.K - 1\n      const bits = getBits(coreDataBlock.content, cursors.coreBlock, b)\n      n = (1 << b) | bits\n    }\n\n    return n - this.parameters.offset\n  }\n}\n","import { instantiateCodec } from '../codecs'\nimport CramCodec from '../codecs/_base'\nimport { CramCompressionHeader, CramPreservationMap } from '../sectionParsers'\nimport { CramEncoding } from '../encoding'\nimport { CramMalformedError } from '../../errors'\nimport {\n  DataSeriesEncodingKey,\n  DataSeriesEncodingMap,\n} from '../codecs/dataSeriesTypes'\n\n// the hardcoded data type to be decoded for each core\n// data field\nconst dataSeriesTypes = {\n  BF: 'int',\n  CF: 'int',\n  RI: 'int',\n  RL: 'int',\n  AP: 'int',\n  RG: 'int',\n  MF: 'int',\n  NS: 'int',\n  NP: 'int',\n  TS: 'int',\n  NF: 'int',\n  TC: 'byte',\n  TN: 'int',\n  FN: 'int',\n  FC: 'byte',\n  FP: 'int',\n  BS: 'byte',\n  IN: 'byteArray',\n  SC: 'byteArray',\n  DL: 'int',\n  BA: 'byte',\n  BB: 'byteArray',\n  RS: 'int',\n  PD: 'int',\n  HC: 'int',\n  MQ: 'int',\n  RN: 'byteArray',\n  QS: 'byte',\n  QQ: 'byteArray',\n  TL: 'int',\n  // TM: 'ignore',\n  // TV: 'ignore',\n} as const\n\nexport type DataSeriesTypes = typeof dataSeriesTypes\n\nfunction parseSubstitutionMatrix(byteArray: number[]) {\n  const matrix: string[][] = new Array(5)\n  for (let i = 0; i < 5; i += 1) {\n    matrix[i] = new Array(4)\n  }\n\n  matrix[0][(byteArray[0] >> 6) & 3] = 'C'\n  matrix[0][(byteArray[0] >> 4) & 3] = 'G'\n  matrix[0][(byteArray[0] >> 2) & 3] = 'T'\n  matrix[0][(byteArray[0] >> 0) & 3] = 'N'\n\n  matrix[1][(byteArray[1] >> 6) & 3] = 'A'\n  matrix[1][(byteArray[1] >> 4) & 3] = 'G'\n  matrix[1][(byteArray[1] >> 2) & 3] = 'T'\n  matrix[1][(byteArray[1] >> 0) & 3] = 'N'\n\n  matrix[2][(byteArray[2] >> 6) & 3] = 'A'\n  matrix[2][(byteArray[2] >> 4) & 3] = 'C'\n  matrix[2][(byteArray[2] >> 2) & 3] = 'T'\n  matrix[2][(byteArray[2] >> 0) & 3] = 'N'\n\n  matrix[3][(byteArray[3] >> 6) & 3] = 'A'\n  matrix[3][(byteArray[3] >> 4) & 3] = 'C'\n  matrix[3][(byteArray[3] >> 2) & 3] = 'G'\n  matrix[3][(byteArray[3] >> 0) & 3] = 'N'\n\n  matrix[4][(byteArray[4] >> 6) & 3] = 'A'\n  matrix[4][(byteArray[4] >> 4) & 3] = 'C'\n  matrix[4][(byteArray[4] >> 2) & 3] = 'G'\n  matrix[4][(byteArray[4] >> 0) & 3] = 'T'\n\n  return matrix\n}\n\ntype DataSeriesCache = {\n  [K in DataSeriesEncodingKey]?: CramCodec<DataSeriesTypes[K]>\n}\n\nexport default class CramContainerCompressionScheme {\n  public readNamesIncluded: boolean\n  public APdelta: boolean\n  public referenceRequired: boolean\n  public tagIdsDictionary: Record<number, string[]>\n  public substitutionMatrix: string[][]\n  public dataSeriesCodecCache: DataSeriesCache = {}\n  public tagCodecCache: Record<string, CramCodec> = {}\n  public tagEncoding: Record<string, CramEncoding> = {}\n  public dataSeriesEncoding: DataSeriesEncodingMap\n  private preservation: CramPreservationMap\n  private _endPosition: number\n  private _size: number\n\n  constructor(content: CramCompressionHeader) {\n    // Object.assign(this, content)\n    // interpret some of the preservation map tags for convenient use\n    this.readNamesIncluded = content.preservation.RN\n    this.APdelta = content.preservation.AP\n    this.referenceRequired = !!content.preservation.RR\n    this.tagIdsDictionary = content.preservation.TD\n    this.substitutionMatrix = parseSubstitutionMatrix(content.preservation.SM)\n    this.dataSeriesEncoding = content.dataSeriesEncoding\n    this.tagEncoding = content.tagEncoding\n    this.preservation = content.preservation\n    this._size = content._size\n    this._endPosition = content._endPosition\n  }\n\n  /**\n   * @param {string} tagName three-character tag name\n   * @private\n   */\n  getCodecForTag(tagName: string): CramCodec {\n    if (!this.tagCodecCache[tagName]) {\n      const encodingData = this.tagEncoding[tagName]\n      if (encodingData) {\n        this.tagCodecCache[tagName] = instantiateCodec(\n          encodingData,\n          'byteArray', // all tags are byte array data\n        )\n      }\n    }\n    return this.tagCodecCache[tagName]\n  }\n\n  /**\n   *\n   * @param {number} tagListId ID of the tag list to fetch from the tag dictionary\n   * @private\n   */\n  getTagNames(tagListId: number) {\n    return this.tagIdsDictionary[tagListId]\n  }\n\n  getCodecForDataSeries<TDataSeries extends DataSeriesEncodingKey>(\n    dataSeriesName: TDataSeries,\n  ): CramCodec<DataSeriesTypes[TDataSeries]> | undefined {\n    let r: CramCodec<DataSeriesTypes[TDataSeries]> | undefined =\n      this.dataSeriesCodecCache[dataSeriesName]\n    if (r === undefined) {\n      const encodingData = this.dataSeriesEncoding[dataSeriesName]\n      if (encodingData) {\n        const dataType = dataSeriesTypes[dataSeriesName]\n        if (!dataType) {\n          throw new CramMalformedError(\n            `data series name ${dataSeriesName} not defined in file compression header`,\n          )\n        }\n        r = instantiateCodec(encodingData, dataType)\n        // didn't find a way to make TS understand this\n        this.dataSeriesCodecCache[dataSeriesName] = r as CramCodec<any>\n      }\n    }\n    return r\n  }\n\n  toJSON() {\n    const data: any = {}\n    Object.keys(this).forEach(k => {\n      if (/Cache$/.test(k)) {\n        return\n      }\n      data[k] = (this as any)[k]\n    })\n    return data\n  }\n}\n","import { CramMalformedError } from '../../errors'\n\nimport { itf8Size, parseItem, tinyMemoize } from '../util'\nimport CramSlice from '../slice'\nimport CramContainerCompressionScheme from './compressionScheme'\nimport CramFile from '../file'\n\nexport default class CramContainer {\n  constructor(public file: CramFile, public filePosition: number) {}\n\n  // memoize\n  getHeader() {\n    return this._readContainerHeader(this.filePosition)\n  }\n\n  // memoize\n  async getCompressionHeaderBlock() {\n    const containerHeader = await this.getHeader()\n\n    // if there are no records in the container, there will be no compression header\n    if (!containerHeader.numRecords) {\n      return null\n    }\n    const sectionParsers = await this.file.getSectionParsers()\n    const block = await this.getFirstBlock()\n    if (block === undefined) {\n      return undefined\n    }\n    if (block.contentType !== 'COMPRESSION_HEADER') {\n      throw new CramMalformedError(\n        `invalid content type ${block.contentType} in what is supposed to be the compression header block`,\n      )\n    }\n    const content = parseItem(\n      block.content,\n      sectionParsers.cramCompressionHeader.parser,\n      0,\n      block.contentPosition,\n    )\n    return {\n      ...block,\n      parsedContent: content,\n    }\n  }\n\n  async getFirstBlock() {\n    const containerHeader = await this.getHeader()\n    return this.file.readBlock(containerHeader._endPosition)\n  }\n\n  // parses the compression header data into a CramContainerCompressionScheme object\n  // memoize\n  async getCompressionScheme() {\n    const header = await this.getCompressionHeaderBlock()\n    if (!header) {\n      return undefined\n    }\n    return new CramContainerCompressionScheme(header.parsedContent)\n  }\n\n  getSlice(slicePosition: number, sliceSize: number) {\n    // note: slicePosition is relative to the end of the container header\n    // TODO: perhaps we should cache slices?\n    return new CramSlice(this, slicePosition, sliceSize)\n  }\n\n  async _readContainerHeader(position: number) {\n    const sectionParsers = await this.file.getSectionParsers()\n    const { cramContainerHeader1, cramContainerHeader2 } = sectionParsers\n    const { size: fileSize } = await this.file.stat()\n\n    if (position >= fileSize) {\n      return undefined\n    }\n\n    // parse the container header. do it in 2 pieces because you cannot tell\n    // how much to buffer until you read numLandmarks\n    const bytes1 = Buffer.allocUnsafe(cramContainerHeader1.maxLength)\n    await this.file.read(bytes1, 0, cramContainerHeader1.maxLength, position)\n    const header1 = parseItem(bytes1, cramContainerHeader1.parser) as any\n    const numLandmarksSize = itf8Size(header1.numLandmarks)\n    if (position + header1.length >= fileSize) {\n      console.warn(\n        `${this.file}: container header at ${position} indicates that the container has length ${header1.length}, which extends beyond the length of the file. Skipping this container.`,\n      )\n      return undefined\n    }\n    const bytes2 = Buffer.allocUnsafe(\n      cramContainerHeader2.maxLength(header1.numLandmarks),\n    )\n    await this.file.read(\n      bytes2,\n      0,\n      cramContainerHeader2.maxLength(header1.numLandmarks),\n      position + header1._size - numLandmarksSize,\n    )\n    const header2 = parseItem(bytes2, cramContainerHeader2.parser)\n\n    if (this.file.validateChecksums && header2.crc32 !== undefined) {\n      await this.file.checkCrc32(\n        position,\n        header1._size + header2._size - numLandmarksSize - 4,\n        header2.crc32,\n        `container header beginning at position ${position}`,\n      )\n    }\n\n    const completeHeader = Object.assign(header1, header2, {\n      _size: header1._size + header2._size - numLandmarksSize,\n      _endPosition: header1._size + header2._size - numLandmarksSize + position,\n    })\n\n    return completeHeader\n  }\n}\n\n'getHeader getCompressionHeaderBlock getCompressionScheme'\n  .split(' ')\n  .forEach(method => tinyMemoize(CramContainer, method))\n","import url from 'url'\nimport { ensureNotNullish } from '../typescript'\nimport { Filehandle } from '../cramFile/filehandle'\nimport { LocalFile, RemoteFile } from 'generic-filehandle'\n\nfunction fromUrl(source: string) {\n  const { protocol, pathname } = url.parse(source)\n  if (protocol === 'file:') {\n    return new LocalFile(unescape(ensureNotNullish(pathname)))\n  }\n  return new RemoteFile(source)\n}\n\nfunction open(\n  maybeUrl?: string,\n  maybePath?: string,\n  maybeFilehandle?: Filehandle,\n): Filehandle {\n  if (maybeFilehandle) {\n    return maybeFilehandle\n  }\n  if (maybeUrl) {\n    return fromUrl(maybeUrl)\n  }\n  if (maybePath) {\n    return new LocalFile(maybePath)\n  }\n  throw new Error('no url, path, or filehandle provided, cannot open')\n}\n\nexport { LocalFile, RemoteFile, fromUrl, open }\n","export function ensureNotNullish<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    throw new Error('Value must not be nullish.')\n  }\n  return x\n}\n\nexport type TupleOf<T, N extends number> = N extends N\n  ? number extends N\n    ? T[]\n    : _TupleOf<T, N, []>\n  : never\nexport type _TupleOf<\n  T,\n  N extends number,\n  R extends unknown[],\n> = R['length'] extends N ? R : _TupleOf<T, N, [T, ...R]>\n","export type HeaderDataItem = {\n  tag: string\n  data: Array<{ tag: string; value: string }>\n}\n\nexport function parseHeaderText(text: string): HeaderDataItem[] {\n  const lines = text.split(/\\r?\\n/)\n  const data: HeaderDataItem[] = []\n  lines.forEach(line => {\n    const [tag, ...fields] = line.split(/\\t/)\n    const parsedFields = fields.map(f => {\n      const [fieldTag, value] = f.split(':', 2)\n      return { tag: fieldTag, value }\n    })\n    if (tag) {\n      data.push({ tag: tag.substr(1), data: parsedFields })\n    }\n  })\n  return data\n}\n","import { unzip } from '../unzip'\nimport crc32 from 'buffer-crc32'\nimport QuickLRU from 'quick-lru'\n\nimport { CramMalformedError, CramUnimplementedError } from '../errors'\nimport ransuncompress from '../rans'\nimport {\n  BlockHeader,\n  CompressionMethod,\n  cramFileDefinition as cramFileDefinitionParser,\n  getSectionParsers,\n} from './sectionParsers'\nimport htscodecs from '@jkbonfield/htscodecs'\nimport CramContainer from './container'\n\nimport { open } from '../io'\nimport { parseItem, tinyMemoize } from './util'\nimport { parseHeaderText } from '../sam'\nimport { Parser } from '@gmod/binary-parser'\nimport CramRecord from './record'\nimport { Filehandle } from './filehandle'\n\n//source:https://abdulapopoola.com/2019/01/20/check-endianness-with-javascript/\nfunction getEndianness() {\n  const uInt32 = new Uint32Array([0x11223344])\n  const uInt8 = new Uint8Array(uInt32.buffer)\n\n  if (uInt8[0] === 0x44) {\n    return 0 //little-endian\n  } else if (uInt8[0] === 0x11) {\n    return 1 //big-endian\n  } else {\n    return 2 //mixed-endian?\n  }\n}\n\n// export type CramFileSource =\n//   | { url: string; path?: undefined; filehandle?: undefined }\n//   | { path: string; url?: undefined; filehandle?: undefined }\n//   | { filehandle: Filehandle; url?: undefined; path?: undefined }\n\nexport type CramFileSource = {\n  filehandle?: Filehandle\n  url?: string\n  path?: string\n}\n\nexport type SeqFetch = (\n  seqId: number,\n  start: number,\n  end: number,\n) => Promise<string>\n\nexport type CramFileArgs = CramFileSource & {\n  checkSequenceMD5: boolean\n  cacheSize?: number\n  seqFetch: SeqFetch\n}\n\nexport type CramFileBlock = BlockHeader & {\n  _endPosition: number\n  contentPosition: number\n  _size: number\n  content: Buffer\n  crc32?: number\n}\n\nexport default class CramFile {\n  private file: Filehandle\n  public validateChecksums: boolean\n  public fetchReferenceSequenceCallback: SeqFetch\n  public options: {\n    checkSequenceMD5: boolean\n    cacheSize: number\n  }\n  public featureCache: QuickLRU<string, Promise<CramRecord[]>>\n  private header: string | undefined\n\n  constructor(args: CramFileArgs) {\n    this.file = open(args.url, args.path, args.filehandle)\n    this.validateChecksums = true\n    this.fetchReferenceSequenceCallback = args.seqFetch\n    this.options = {\n      checkSequenceMD5: args.checkSequenceMD5,\n      cacheSize: args.cacheSize ?? 20000,\n    }\n\n    // cache of features in a slice, keyed by the\n    // slice offset. caches all of the features in a slice, or none.\n    // the cache is actually used by the slice object, it's just\n    // kept here at the level of the file\n    this.featureCache = new QuickLRU({\n      maxSize: this.options.cacheSize,\n    })\n    if (getEndianness() > 0) {\n      throw new Error('Detected big-endian machine, may be unable to run')\n    }\n  }\n\n  // toString() {\n  //   if (this.file.filename) {\n  //     return this.file.filename\n  //   }\n  //   if (this.file.url) {\n  //     return this.file.url\n  //   }\n  //\n  //   return '(cram file)'\n  // }\n\n  // can just read this object like a filehandle\n  read(\n    buffer: Buffer,\n    offset: number,\n    length: number,\n    position: number,\n  ): Promise<{\n    bytesRead: number\n    buffer: Buffer\n  }> {\n    return this.file.read(buffer, offset, length, position)\n  }\n\n  // can just stat this object like a filehandle\n  stat() {\n    return this.file.stat()\n  }\n\n  // memoized\n  async getDefinition() {\n    const headbytes = Buffer.allocUnsafe(cramFileDefinitionParser.maxLength)\n    await this.file.read(headbytes, 0, cramFileDefinitionParser.maxLength, 0)\n    const definition = cramFileDefinitionParser.parser.parse(headbytes)\n      .result as any\n    if (definition.majorVersion !== 2 && definition.majorVersion !== 3) {\n      throw new CramUnimplementedError(\n        `CRAM version ${definition.majorVersion} not supported`,\n      )\n    }\n    return definition\n  }\n\n  // memoize\n  async getSamHeader() {\n    const firstContainer = await this.getContainerById(0)\n    if (!firstContainer) {\n      throw new CramMalformedError('file contains no containers')\n    }\n\n    const firstBlock = await firstContainer.getFirstBlock()\n    if (firstBlock === undefined) {\n      return parseHeaderText('')\n    }\n    const content = firstBlock.content\n    // find the end of the trailing zeros in the header text\n    const headerLength = content.readInt32LE(0)\n    const textStart = 4\n    // let textEnd = content.length - 1\n    // while (textEnd >= textStart && !content[textEnd]) textEnd -= 1\n    // trim off the trailing zeros\n    const text = content.toString('utf8', textStart, textStart + headerLength)\n    this.header = text\n    return parseHeaderText(text)\n  }\n\n  async getHeaderText() {\n    await this.getSamHeader()\n    return this.header\n  }\n\n  // memoize\n  async getSectionParsers() {\n    const { majorVersion } = await this.getDefinition()\n    return getSectionParsers(majorVersion)\n  }\n\n  async getContainerById(containerNumber: number) {\n    const sectionParsers = await this.getSectionParsers()\n    let position = sectionParsers.cramFileDefinition.maxLength\n    const { size: fileSize } = await this.file.stat()\n    const { cramContainerHeader1 } = sectionParsers\n\n    // skip with a series of reads to the proper container\n    let currentContainer\n    for (let i = 0; i <= containerNumber; i += 1) {\n      // if we are about to go off the end of the file\n      // and have not found that container, it does not exist\n      if (position + cramContainerHeader1.maxLength + 8 >= fileSize) {\n        return undefined\n      }\n\n      currentContainer = this.getContainerAtPosition(position)\n      const currentHeader = await currentContainer.getHeader()\n      if (!currentHeader) {\n        throw new CramMalformedError(\n          `container ${containerNumber} not found in file`,\n        )\n      }\n      // if this is the first container, read all the blocks in the\n      // container to determine its length, because we cannot trust\n      // the container header's given length due to a bug somewhere\n      // in htslib\n      if (i === 0) {\n        position = currentHeader._endPosition\n        for (let j = 0; j < currentHeader.numBlocks; j += 1) {\n          const block = await this.readBlock(position)\n          if (block === undefined) {\n            return undefined\n          }\n          position = block._endPosition\n        }\n      } else {\n        // otherwise, just traverse to the next container using the container's length\n        position += currentHeader._size + currentHeader.length\n      }\n    }\n\n    return currentContainer\n  }\n\n  async checkCrc32(\n    position: number,\n    length: number,\n    recordedCrc32: number,\n    description: string,\n  ) {\n    const b = Buffer.allocUnsafe(length)\n    await this.file.read(b, 0, length, position)\n    const calculatedCrc32 = crc32.unsigned(b)\n    if (calculatedCrc32 !== recordedCrc32) {\n      throw new CramMalformedError(\n        `crc mismatch in ${description}: recorded CRC32 = ${recordedCrc32}, but calculated CRC32 = ${calculatedCrc32}`,\n      )\n    }\n  }\n\n  /**\n   * @returns {Promise[number]} the number of containers in the file\n   */\n  async containerCount(): Promise<number | undefined> {\n    const sectionParsers = await this.getSectionParsers()\n    const { size: fileSize } = await this.file.stat()\n    const { cramContainerHeader1 } = sectionParsers\n\n    let containerCount = 0\n    let position = sectionParsers.cramFileDefinition.maxLength\n    while (position + cramContainerHeader1.maxLength + 8 < fileSize) {\n      const currentHeader = await this.getContainerAtPosition(\n        position,\n      ).getHeader()\n      if (!currentHeader) {\n        break\n      }\n      // if this is the first container, read all the blocks in the\n      // container, because we cannot trust the container\n      // header's given length due to a bug somewhere in htslib\n      if (containerCount === 0) {\n        position = currentHeader._endPosition\n        for (let j = 0; j < currentHeader.numBlocks; j += 1) {\n          const block = await this.readBlock(position)\n          if (block === undefined) {\n            return undefined\n          }\n          position = block._endPosition\n        }\n      } else {\n        // otherwise, just traverse to the next container using the container's length\n        position += currentHeader._size + currentHeader.length\n      }\n      containerCount += 1\n    }\n\n    return containerCount\n  }\n\n  getContainerAtPosition(position: number) {\n    return new CramContainer(this, position)\n  }\n\n  async readBlockHeader(position: number) {\n    const sectionParsers = await this.getSectionParsers()\n    const { cramBlockHeader } = sectionParsers\n    const { size: fileSize } = await this.file.stat()\n\n    if (position + cramBlockHeader.maxLength >= fileSize) {\n      return undefined\n    }\n\n    const buffer = Buffer.allocUnsafe(cramBlockHeader.maxLength)\n    await this.file.read(buffer, 0, cramBlockHeader.maxLength, position)\n    return parseItem(buffer, cramBlockHeader.parser, 0, position)\n  }\n\n  async _parseSection<T>(\n    section: { parser: Parser<T>; maxLength: number },\n    position: number,\n    size = section.maxLength,\n    preReadBuffer = undefined,\n  ) {\n    let buffer\n    if (preReadBuffer) {\n      buffer = preReadBuffer\n    } else {\n      const { size: fileSize } = await this.file.stat()\n      if (position + size >= fileSize) {\n        return undefined\n      }\n      buffer = Buffer.allocUnsafe(size)\n      await this.file.read(buffer, 0, size, position)\n    }\n    const data = parseItem(buffer, section.parser, 0, position)\n    if (data._size !== size) {\n      throw new CramMalformedError(\n        `section read error: requested size ${size} does not equal parsed size ${data._size}`,\n      )\n    }\n    return data\n  }\n\n  _uncompress(\n    compressionMethod: CompressionMethod,\n    inputBuffer: Buffer,\n    outputBuffer: Buffer,\n  ) {\n    if (compressionMethod === 'gzip') {\n      const result = unzip(inputBuffer)\n      result.copy(outputBuffer)\n    } else if (compressionMethod === 'bzip2') {\n      const bits = bzip2.array(inputBuffer)\n      let size = bzip2.header(bits)\n      let j = 0\n      let chunk\n      do {\n        chunk = bzip2.decompress(bits, size)\n        if (chunk != -1) {\n          Buffer.from(chunk).copy(outputBuffer, j)\n          j += chunk.length\n          size -= chunk.length\n        }\n      } while (chunk != -1)\n    } else if (compressionMethod === 'rans') {\n      ransuncompress(inputBuffer, outputBuffer)\n      //htscodecs r4x8 is slower, but compatible.\n      //htscodecs.r4x8_uncompress(inputBuffer, outputBuffer);\n    } else if (compressionMethod === 'rans4x16') {\n      htscodecs.r4x16_uncompress(inputBuffer, outputBuffer)\n    } else if (compressionMethod === 'arith') {\n      htscodecs.arith_uncompress(inputBuffer, outputBuffer)\n    } else if (compressionMethod === 'fqzcomp') {\n      htscodecs.fqzcomp_uncompress(inputBuffer, outputBuffer)\n    } else if (compressionMethod === 'tok3') {\n      htscodecs.tok3_uncompress(inputBuffer, outputBuffer)\n    } else {\n      throw new CramUnimplementedError(\n        `${compressionMethod} decompression not yet implemented`,\n      )\n    }\n  }\n\n  async readBlock(position: number): Promise<CramFileBlock | undefined> {\n    const { majorVersion } = await this.getDefinition()\n    const sectionParsers = await this.getSectionParsers()\n    const blockHeader = await this.readBlockHeader(position)\n    if (blockHeader === undefined) {\n      return undefined\n    }\n    const blockContentPosition = blockHeader._endPosition\n\n    const uncompressedData = Buffer.allocUnsafe(blockHeader.uncompressedSize)\n\n    const block: CramFileBlock = {\n      ...blockHeader,\n      _endPosition: blockContentPosition,\n      contentPosition: blockContentPosition,\n      content: uncompressedData,\n    }\n\n    if (blockHeader.compressionMethod !== 'raw') {\n      const compressedData = Buffer.allocUnsafe(blockHeader.compressedSize)\n      await this.read(\n        compressedData,\n        0,\n        blockHeader.compressedSize,\n        blockContentPosition,\n      )\n\n      this._uncompress(\n        blockHeader.compressionMethod,\n        compressedData,\n        uncompressedData,\n      )\n    } else {\n      await this.read(\n        uncompressedData,\n        0,\n        blockHeader.uncompressedSize,\n        blockContentPosition,\n      )\n    }\n\n    if (majorVersion >= 3) {\n      // parse the crc32\n      const crc = await this._parseSection(\n        sectionParsers.cramBlockCrc32,\n        blockContentPosition + blockHeader.compressedSize,\n      )\n      if (crc === undefined) {\n        return undefined\n      }\n      block.crc32 = crc.crc32\n\n      // check the block data crc32\n      if (this.validateChecksums) {\n        await this.checkCrc32(\n          position,\n          blockHeader._size + blockHeader.compressedSize,\n          crc.crc32,\n          'block data',\n        )\n      }\n\n      // make the endposition and size reflect the whole block\n      block._endPosition = crc._endPosition\n      block._size =\n        block.compressedSize + sectionParsers.cramBlockCrc32.maxLength\n    } else {\n      block._endPosition = blockContentPosition + block.compressedSize\n      block._size = block.compressedSize\n    }\n\n    return block\n  }\n}\n\n'getDefinition getSectionParsers getSamHeader'\n  .split(' ')\n  .forEach(method => tinyMemoize(CramFile, method))\n","import CramFile from './file'\nexport { default as CramRecord } from './record'\n\nexport default CramFile\n","import { CramSizeLimitError, CramUnimplementedError } from './errors'\n\nimport CramFile from './cramFile'\nimport CramRecord from './cramFile/record'\nimport { SeqFetch } from './cramFile/file'\nimport { Filehandle } from './cramFile/filehandle'\nimport { Slice } from './craiIndex'\n\nexport type CramFileSource = {\n  cramFilehandle?: Filehandle\n  cramUrl?: string\n  cramPath?: string\n}\n\nexport type CramIndexLike = {\n  getEntriesForRange: (\n    seqId: number,\n    start: number,\n    end: number,\n  ) => Promise<Slice[]>\n  hasDataForReferenceSequence: (seqId: number) => Promise<boolean>\n}\n\nexport default class IndexedCramFile {\n  public cram: CramFile\n  public index: CramIndexLike\n  private fetchSizeLimit: number\n\n  /**\n   *\n   * @param {object} args\n   * @param {CramFile} args.cram\n   * @param {Index-like} args.index object that supports getEntriesForRange(seqId,start,end) -> Promise[Array[index entries]]\n   * @param {number} [args.cacheSize] optional maximum number of CRAM records to cache.  default 20,000\n   * @param {number} [args.fetchSizeLimit] optional maximum number of bytes to fetch in a single getRecordsForRange call.  Default 3 MiB.\n   * @param {boolean} [args.checkSequenceMD5] - default true. if false, disables verifying the MD5\n   * checksum of the reference sequence underlying a slice. In some applications, this check can cause an inconvenient amount (many megabases) of sequences to be fetched.\n   */\n  constructor(\n    args: {\n      index: CramIndexLike\n      fetchSizeLimit?: number\n    } & (\n      | { cram: CramFile }\n      | ({\n          cram?: undefined\n          seqFetch: SeqFetch\n          checkSequenceMD5: boolean\n          cacheSize?: number\n        } & CramFileSource)\n    ),\n  ) {\n    // { cram, index, seqFetch /* fasta, fastaIndex */ }) {\n    if (args.cram) {\n      this.cram = args.cram\n    } else {\n      this.cram = new CramFile({\n        url: args.cramUrl,\n        path: args.cramPath,\n        filehandle: args.cramFilehandle,\n        seqFetch: args.seqFetch,\n        checkSequenceMD5: args.checkSequenceMD5,\n        cacheSize: args.cacheSize,\n      })\n    }\n\n    if (!(this.cram instanceof CramFile)) {\n      throw new Error('invalid arguments: no cramfile')\n    }\n\n    this.index = args.index\n    if (!this.index.getEntriesForRange) {\n      throw new Error('invalid arguments: not an index')\n    }\n\n    this.fetchSizeLimit = args.fetchSizeLimit || 3000000\n  }\n\n  /**\n   *\n   * @param {number} seq numeric ID of the reference sequence\n   * @param {number} start start of the range of interest. 1-based closed coordinates.\n   * @param {number} end end of the range of interest. 1-based closed coordinates.\n   * @returns {Promise[Array[CramRecord]]}\n   */\n  async getRecordsForRange(\n    seq: number,\n    start: number,\n    end: number,\n    opts: {\n      viewAsPairs?: boolean\n      pairAcrossChr?: boolean\n      maxInsertSize?: number\n    } = {},\n  ) {\n    opts.viewAsPairs = opts.viewAsPairs || false\n    opts.pairAcrossChr = opts.pairAcrossChr || false\n    opts.maxInsertSize = opts.maxInsertSize || 200000\n\n    if (typeof seq === 'string') {\n      // TODO: support string reference sequence names somehow\n      throw new CramUnimplementedError(\n        'string sequence names not yet supported',\n      )\n    }\n    const seqId = seq\n    const slices = await this.index.getEntriesForRange(seqId, start, end)\n    const totalSize = slices.map(s => s.sliceBytes).reduce((a, b) => a + b, 0)\n    if (totalSize > this.fetchSizeLimit) {\n      throw new CramSizeLimitError(\n        `data size of ${totalSize.toLocaleString()} bytes exceeded fetch size limit of ${this.fetchSizeLimit.toLocaleString()} bytes`,\n      )\n    }\n\n    // TODO: do we need to merge or de-duplicate the blocks?\n\n    // fetch all the slices and parse the feature data\n    const filter = (feature: CramRecord) =>\n      feature.sequenceId === seq &&\n      feature.alignmentStart <= end &&\n      feature.lengthOnRef !== undefined &&\n      feature.alignmentStart + feature.lengthOnRef - 1 >= start\n    const sliceResults = await Promise.all(\n      slices.map(slice => this.getRecordsInSlice(slice, filter)),\n    )\n\n    let ret: CramRecord[] = Array.prototype.concat(...sliceResults)\n    if (opts.viewAsPairs) {\n      const readNames: Record<string, number> = {}\n      const readIds: Record<string, number> = {}\n      for (let i = 0; i < ret.length; i += 1) {\n        const name = ret[i].readName\n        if (name === undefined) {\n          throw new Error()\n        }\n        const id = ret[i].uniqueId\n        if (!readNames[name]) {\n          readNames[name] = 0\n        }\n        readNames[name] += 1\n        readIds[id] = 1\n      }\n      const unmatedPairs: Record<string, boolean> = {}\n      Object.entries(readNames).forEach(([k, v]) => {\n        if (v === 1) {\n          unmatedPairs[k] = true\n        }\n      })\n      const matePromises = []\n      for (let i = 0; i < ret.length; i += 1) {\n        const cramRecord = ret[i]\n        const name = cramRecord.readName\n        if (name === undefined) {\n          throw new Error()\n        }\n        if (\n          unmatedPairs[name] &&\n          cramRecord.mate &&\n          (cramRecord.mate.sequenceId === seqId || opts.pairAcrossChr) &&\n          Math.abs(cramRecord.alignmentStart - cramRecord.mate.alignmentStart) <\n            opts.maxInsertSize\n        ) {\n          const mateSlices = this.index.getEntriesForRange(\n            cramRecord.mate.sequenceId,\n            cramRecord.mate.alignmentStart,\n            cramRecord.mate.alignmentStart + 1,\n          )\n          matePromises.push(mateSlices)\n        }\n      }\n      const mateBlocks = await Promise.all(matePromises)\n      let mateChunks = []\n      for (let i = 0; i < mateBlocks.length; i += 1) {\n        mateChunks.push(...mateBlocks[i])\n      }\n      // filter out duplicates\n      mateChunks = mateChunks\n        .sort((a, b) => a.toString().localeCompare(b.toString()))\n        .filter(\n          (item, pos, ary) =>\n            !pos || item.toString() !== ary[pos - 1].toString(),\n        )\n\n      const mateRecordPromises = []\n      const mateFeatPromises: Array<Promise<CramRecord[]>> = []\n\n      const mateTotalSize = mateChunks\n        .map(s => s.sliceBytes)\n        .reduce((a, b) => a + b, 0)\n      if (mateTotalSize > this.fetchSizeLimit) {\n        throw new Error(\n          `mate data size of ${mateTotalSize.toLocaleString()} bytes exceeded fetch size limit of ${this.fetchSizeLimit.toLocaleString()} bytes`,\n        )\n      }\n\n      mateChunks.forEach(c => {\n        let recordPromise = this.cram.featureCache.get(c.toString())\n        if (!recordPromise) {\n          recordPromise = this.getRecordsInSlice(c, () => true)\n          this.cram.featureCache.set(c.toString(), recordPromise)\n        }\n        mateRecordPromises.push(recordPromise)\n        const featPromise = recordPromise.then(feats => {\n          const mateRecs = []\n          for (let i = 0; i < feats.length; i += 1) {\n            const feature = feats[i]\n            if (feature.readName === undefined) {\n              throw new Error()\n            }\n            if (unmatedPairs[feature.readName] && !readIds[feature.uniqueId]) {\n              mateRecs.push(feature)\n            }\n          }\n          return mateRecs\n        })\n        mateFeatPromises.push(featPromise)\n      })\n      const newMateFeats = await Promise.all(mateFeatPromises)\n      if (newMateFeats.length) {\n        const newMates = newMateFeats.reduce((result, current) =>\n          result.concat(current),\n        )\n        ret = ret.concat(newMates)\n      }\n    }\n    return ret\n  }\n\n  getRecordsInSlice(\n    {\n      containerStart,\n      sliceStart,\n      sliceBytes,\n    }: { containerStart: number; sliceStart: number; sliceBytes: number },\n    filterFunction: (r: CramRecord) => boolean,\n  ) {\n    const container = this.cram.getContainerAtPosition(containerStart)\n    const slice = container.getSlice(sliceStart, sliceBytes)\n    return slice.getRecords(filterFunction)\n  }\n\n  /**\n   *\n   * @param {number} seqId\n   * @returns {Promise} true if the CRAM file contains data for the given\n   * reference sequence numerical ID\n   */\n  hasDataForReferenceSequence(seqId: number) {\n    return this.index.hasDataForReferenceSequence(seqId)\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport { unzip } from './unzip'\nimport { open } from './io'\nimport { CramMalformedError } from './errors'\nimport { CramFileSource } from './cramFile/file'\nimport { Filehandle } from './cramFile/filehandle'\n\nconst BAI_MAGIC = 21578050 // BAI\\1\n\nexport type Slice = {\n  start: number\n  span: number\n  containerStart: number\n  sliceStart: number\n  sliceBytes: number\n}\n\ntype ParsedIndex = Record<string, Slice[]>\n\nfunction addRecordToIndex(index: ParsedIndex, record: number[]) {\n  if (record.some(el => el === undefined)) {\n    throw new CramMalformedError('invalid .crai index file')\n  }\n\n  const [seqId, start, span, containerStart, sliceStart, sliceBytes] = record\n\n  if (!index[seqId]) {\n    index[seqId] = []\n  }\n\n  index[seqId].push({\n    start,\n    span,\n    containerStart,\n    sliceStart,\n    sliceBytes,\n  })\n}\n\nexport default class CraiIndex {\n  // A CRAM index (.crai) is a gzipped tab delimited file containing the following columns:\n  // 1. Sequence id\n  // 2. Alignment start\n  // 3. Alignment span\n  // 4. Container start byte position in the file\n  // 5. Slice start byte position in the container data (‘blocks’)\n  // 6. Slice size in bytes\n  // Each line represents a slice in the CRAM file. Please note that all slices must be listed in index file.\n  private _parseCache: AbortablePromiseCache<unknown, ParsedIndex>\n  private filehandle: Filehandle\n\n  /**\n   *\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {string} [args.url]\n   * @param {FileHandle} [args.filehandle]\n   */\n  constructor(args: CramFileSource) {\n    this.filehandle = open(args.url, args.path, args.filehandle)\n    this._parseCache = new AbortablePromiseCache<unknown, ParsedIndex>({\n      cache: new QuickLRU({ maxSize: 1 }),\n      fill: (data, signal) => this.parseIndex(),\n    })\n  }\n\n  parseIndex() {\n    const index: ParsedIndex = {}\n    return this.filehandle\n      .readFile()\n      .then(data => {\n        if (data[0] === 31 && data[1] === 139) {\n          return unzip(data)\n        }\n        return data\n      })\n      .then(uncompressedBuffer => {\n        if (\n          uncompressedBuffer.length > 4 &&\n          uncompressedBuffer.readUInt32LE(0) === BAI_MAGIC\n        ) {\n          throw new CramMalformedError(\n            'invalid .crai index file. note: file appears to be a .bai index. this is technically legal but please open a github issue if you need support',\n          )\n        }\n        // interpret the text as regular ascii, since it is\n        // supposed to be only digits and whitespace characters\n        // this is written in a deliberately low-level fashion for performance,\n        // because some .crai files can be pretty large.\n        let currentRecord: number[] = []\n        let currentString = ''\n        for (let i = 0; i < uncompressedBuffer.length; i += 1) {\n          const charCode = uncompressedBuffer[i]\n          if (\n            (charCode >= 48 && charCode <= 57) /* 0-9 */ ||\n            (!currentString && charCode === 45) /* leading - */\n          ) {\n            currentString += String.fromCharCode(charCode)\n          } else if (charCode === 9 /* \\t */) {\n            currentRecord.push(Number.parseInt(currentString, 10))\n            currentString = ''\n          } else if (charCode === 10 /* \\n */) {\n            currentRecord.push(Number.parseInt(currentString, 10))\n            currentString = ''\n            addRecordToIndex(index, currentRecord)\n            currentRecord = []\n          } else if (charCode !== 13 /* \\r */ && charCode !== 32 /* space */) {\n            // if there are other characters in the file besides\n            // space and \\r, something is wrong.\n            throw new CramMalformedError('invalid .crai index file')\n          }\n        }\n\n        // if the file ends without a \\n, we need to flush our buffers\n        if (currentString) {\n          currentRecord.push(Number.parseInt(currentString, 10))\n        }\n        if (currentRecord.length === 6) {\n          addRecordToIndex(index, currentRecord)\n        }\n\n        // sort each of them by start\n        Object.entries(index).forEach(([seqId, ent]) => {\n          index[seqId] = ent.sort(\n            (a, b) => a.start - b.start || a.span - b.span,\n          )\n        })\n        return index\n      })\n  }\n\n  getIndex(opts: { signal?: AbortSignal } = {}) {\n    return this._parseCache.get('index', null, opts.signal)\n  }\n\n  /**\n   * @param {number} seqId\n   * @returns {Promise} true if the index contains entries for\n   * the given reference sequence ID, false otherwise\n   */\n  async hasDataForReferenceSequence(seqId: number) {\n    return !!(await this.getIndex())[seqId]\n  }\n\n  /**\n   * fetch index entries for the given range\n   *\n   * @param {number} seqId\n   * @param {number} queryStart\n   * @param {number} queryEnd\n   *\n   * @returns {Promise} promise for\n   * an array of objects of the form\n   * `{start, span, containerStart, sliceStart, sliceBytes }`\n   */\n  async getEntriesForRange(\n    seqId: number,\n    queryStart: number,\n    queryEnd: number,\n  ) {\n    const seqEntries = (await this.getIndex())[seqId]\n    if (!seqEntries) {\n      return []\n    }\n\n    const compare = (entry: Slice) => {\n      const entryStart = entry.start\n      const entryEnd = entry.start + entry.span\n      if (entryStart > queryEnd) {\n        return -1\n      } // entry is ahead of query\n      if (entryEnd <= queryStart) {\n        return 1\n      } // entry is behind query\n      return 0 // entry overlaps query\n    }\n    const bins = []\n    for (let i = 0; i < seqEntries.length; i += 1) {\n      if (compare(seqEntries[i]) === 0) {\n        bins.push(seqEntries[i])\n      }\n    }\n    return bins\n  }\n}\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst RangeCoder = require(\"./arith_sh\");\nconst IOStream = require(\"./iostream\");\nconst ByteModel = require(\"./byte_model\");\nconst bzip2 = require(\"bzip2\");\n\nconst ARITH_ORDER  = 1\nconst ARITH_EXT    = 4\nconst ARITH_STRIPE = 8\nconst ARITH_NOSIZE = 16\nconst ARITH_CAT    = 32\nconst ARITH_RLE    = 64\nconst ARITH_PACK   = 128\n\nmodule.exports = class RangeCoderGen {\n    decode(src) {\n\tthis.stream = new IOStream(src);\n\treturn this.decodeStream(this.stream)\n    }\n\n    decodeStream(stream, n_out=0) {\n\tvar flags = this.stream.ReadByte();\n\tif (!(flags & ARITH_NOSIZE))\n\t    n_out = this.stream.ReadUint7();\n\tvar e_len = n_out;\n\n\tvar order = flags & ARITH_ORDER;\n\n\t// 4-way recursion\n\tif (flags & ARITH_STRIPE)\n\t    return this.decodeStripe(this.stream, n_out)\n\n\t// Meta data\n\tif (flags & ARITH_PACK) {\n\t    var P\n\t    [P, e_len] = this.decodePackMeta(this.stream)\n\t}\n\n\t// NOP, useful for tiny blocks\n\tif (flags & ARITH_CAT)\n\t    var data = this.decodeCat(this.stream, e_len)\n\n\t// Entropy decode\n\telse if (flags & ARITH_EXT) {\n\t    var data = this.decodeExt(this.stream, e_len)\n\t} else if (flags & ARITH_RLE) {\n\t    var data = order\n\t\t? this.decodeRLE1(this.stream, e_len)\n\t\t: this.decodeRLE0(this.stream, e_len)\n\t} else {\n\t    var data = order\n\t\t? this.decode1(this.stream, e_len)\n\t\t: this.decode0(this.stream, e_len)\n\t}\n\n\t// Transforms\n\tif (flags & ARITH_PACK)\n\t    data = this.decodePack(data, P, n_out)\n\n\treturn data\n    }\n\n    encode(src, flags) {\n\tthis.stream = new IOStream(\"\", 0, src.length*1.1 + 100); // guestimate worst case!\n\n\tthis.stream.WriteByte(flags);\n\tif (!(flags & ARITH_NOSIZE))\n\t    this.stream.WriteUint7(src.length);\n\n\tif (flags & ARITH_STRIPE)\n\t    return Buffer.concat([this.stream.buf.slice(0, this.stream.pos),\n\t\t\t\t  this.encodeStripe(this.stream, src, flags>>8)])\n\n\tvar order = flags & ARITH_ORDER;\n\tvar e_len = src.length;\n\n\t// step 1: Encode meta-data\n\tvar pack_meta\n\tif (flags & ARITH_PACK)\n\t    [pack_meta, src, e_len] = this.encodePack(src)\n\n\t// step 2: Write any meta data\n\tif (flags & ARITH_PACK)\n\t    this.stream.WriteStream(pack_meta)\n\n\t// step 3: arith encoding below\n\tif (flags & ARITH_RLE) {\n\t    return order\n\t\t? this.encodeRLE1(src, e_len, this.stream)\n\t\t: this.encodeRLE0(src, e_len, this.stream);\n\t} else {\n\t    return order\n\t\t? this.encode1(src, e_len, this.stream)\n\t\t: this.encode0(src, e_len, this.stream);\n\t}\n    }\n\n    //----------------------------------------------------------------------\n    // Order-0 codec\n    decode0(stream, n_out) {\n\tvar output = new Buffer.allocUnsafe(n_out);\n\n\tvar max_sym = stream.ReadByte()\n\tif (max_sym == 0)\n\t    max_sym = 256\n\n\tvar byte_model = new ByteModel(max_sym);\n\n\tvar rc = new RangeCoder(stream);\n\trc.RangeStartDecode(stream);\n\n\tfor (var i = 0; i < n_out; i++)\n\t    output[i] = byte_model.ModelDecode(stream, rc);\n\n\treturn output;\n    }\n\n    encode0(src, n_in, out) {\n\t// Count the maximum symbol present\n\tvar max_sym = 0;\n\tfor (var i = 0; i < n_in; i++)\n\t    if (max_sym < src[i])\n\t\tmax_sym = src[i]\n\tmax_sym++;  // FIXME not what spec states!?\n\n\tvar byte_model = new ByteModel(max_sym);\n\tout.WriteByte(max_sym);\n\tvar rc = new RangeCoder(out);\n\n\tfor (var i = 0; i < n_in; i++)\n\t    byte_model.ModelEncode(out, rc, src[i])\n\trc.RangeFinishEncode(out)\n\n\treturn out.buf.slice(0, out.pos);\n    }\n\n    //----------------------------------------------------------------------\n    // Order-1 codec\n\n    decode1(stream, n_out) {\n\tvar output = new Buffer.allocUnsafe(n_out);\n\n\tvar max_sym = stream.ReadByte()\n\tif (max_sym == 0)\n\t    max_sym = 256\n\n\tvar byte_model = new Array(max_sym);\n\tfor (var i = 0; i < max_sym; i++)\n\t    byte_model[i] = new ByteModel(max_sym);\n\n\tvar rc = new RangeCoder(stream);\n\trc.RangeStartDecode(stream);\n\n\tvar last = 0;\n\tfor (var i = 0; i < n_out; i++) {\n\t    output[i] = byte_model[last].ModelDecode(stream, rc);\n\t    last = output[i];\n\t}\n\n\treturn output;\n    }\n\n    encode1(src, n_in, out) {\n\t// Count the maximum symbol present\n\tvar max_sym = 0;\n\tfor (var i = 0; i < n_in; i++)\n\t    if (max_sym < src[i])\n\t\tmax_sym = src[i]\n\tmax_sym++;  // FIXME not what spec states!\n\n\tvar byte_model = new Array(max_sym);\n\tfor (var i = 0; i < max_sym; i++)\n\t    byte_model[i] = new ByteModel(max_sym);\n\tout.WriteByte(max_sym);\n\tvar rc = new RangeCoder(out);\n\n\tvar last = 0;\n\tfor (var i = 0; i < n_in; i++) {\n\t    byte_model[last].ModelEncode(out, rc, src[i])\n\t    last = src[i]\n\t}\n\trc.RangeFinishEncode(out)\n\n\treturn out.buf.slice(0, out.pos);\n    }\n\n    //----------------------------------------------------------------------\n    // External codec\n    decodeExt(stream, n_out) {\n\t// Bzip2 only for now\n\tvar output = new Buffer.allocUnsafe(n_out)\n\tvar bits = bzip2.array(stream.buf.slice(stream.pos))\n\tvar size = bzip2.header(bits)\n\tvar j = 0\n\tdo {\n\t    var chunk = bzip2.decompress(bits, size);\n\t    if (chunk != -1) {\n\t        Buffer.from(chunk).copy(output, j)\n\t        j += chunk.length\n\t\tsize -= chunk.length\n\t    }\n\t} while(chunk != -1);\n\n\treturn output\n    }\n\n    encodeExt(stream, n_out) {\n\t// We cannot compress using Bzip2 now as it's\n\t// absent from bzip2.js, but consider using\n\t// https://github.com/cscott/compressjs\n    }\n\n    //----------------------------------------------------------------------\n    // Order-0 RLE codec\n    decodeRLE0(stream, n_out) {\n\tvar output = new Buffer.allocUnsafe(n_out);\n\n\tvar max_sym = stream.ReadByte()\n\tif (max_sym == 0)\n\t    max_sym = 256\n\n\tvar model_lit = new ByteModel(max_sym);\n\tvar model_run = new Array(258);\n\tfor (var i = 0; i <= 257; i++)\n\t    model_run[i] = new ByteModel(4)\n\n\tvar rc = new RangeCoder(stream);\n\trc.RangeStartDecode(stream);\n\n\tvar i = 0;\n\twhile (i < n_out) {\n\t    output[i] = model_lit.ModelDecode(stream, rc)\n\t    var part = model_run[output[i]].ModelDecode(stream, rc)\n\t    var run = part\n\t    var rctx = 256\n\t    while (part == 3) {\n\t\tpart = model_run[rctx].ModelDecode(stream, rc)\n\t\trctx = 257\n\t\trun += part\n\t    }\n\t    for (var j = 1; j <= run; j++)\n\t\toutput[i+j] = output[i]\n\t    i += run+1\n\t}\n\n\treturn output;\n    }\n\n    encodeRLE0(src, n_in, out) {\n\t// Count the maximum symbol present\n\tvar max_sym = 0;\n\tfor (var i = 0; i < n_in; i++)\n\t    if (max_sym < src[i])\n\t\tmax_sym = src[i]\n\tmax_sym++;  // FIXME not what spec states!\n\n\tvar model_lit = new ByteModel(max_sym);\n\tvar model_run = new Array(258);\n\tfor (var i = 0; i <= 257; i++)\n\t    model_run[i] = new ByteModel(4)\n\n\tout.WriteByte(max_sym);\n\tvar rc = new RangeCoder(out);\n\n\tvar i = 0\n\twhile (i < n_in) {\n\t    model_lit.ModelEncode(out, rc, src[i])\n\t    var run = 1\n\t    while (i+run < n_in && src[i+run] == src[i])\n\t\trun++\n\t    run--\n\n\t    var rctx = src[i]\n\t    var last = src[i]\n\t    i += run+1\n\n\t    var part = run >= 3 ? 3 : run\n\t    model_run[rctx].ModelEncode(out, rc, part)\n\t    run -= part\n\t    rctx = 256\n\t    while (part == 3) {\n\t\tpart = run >= 3 ? 3 : run\n\t\tmodel_run[rctx].ModelEncode(out, rc, part)\n\t\trctx = 257\n\t\trun -= part\n\t    }\n\t}\n\trc.RangeFinishEncode(out)\n\n\treturn out.buf.slice(0, out.pos);\n    }\n\n    //----------------------------------------------------------------------\n    // Order-1 RLE codec\n\n    decodeRLE1(stream, n_out) {\n\tvar output = new Buffer.allocUnsafe(n_out);\n\n\tvar max_sym = stream.ReadByte()\n\tif (max_sym == 0)\n\t    max_sym = 256\n\n\tvar model_lit = new Array(max_sym);\n\tfor (var i = 0; i < max_sym; i++)\n\t    model_lit[i] = new ByteModel(max_sym);\n\n\tvar model_run = new Array(258);\n\tfor (var i = 0; i <= 257; i++)\n\t    model_run[i] = new ByteModel(4)\n\n\tvar rc = new RangeCoder(stream);\n\trc.RangeStartDecode(stream);\n\n\tvar last = 0;\n\tvar i = 0;\n\twhile (i < n_out) {\n\t    output[i] = model_lit[last].ModelDecode(stream, rc)\n\t    last = output[i]\n\t    var part = model_run[output[i]].ModelDecode(stream, rc)\n\t    var run = part\n\t    var rctx = 256\n\t    while (part == 3) {\n\t\tpart = model_run[rctx].ModelDecode(stream, rc)\n\t\trctx = 257\n\t\trun += part\n\t    }\n\t    for (var j = 1; j <= run; j++)\n\t\toutput[i+j] = output[i]\n\t    i += run+1\n\t}\n\n\treturn output;\n    }\n\n    encodeRLE1(src, n_in, out) {\n\t// Count the maximum symbol present\n\tvar max_sym = 0;\n\tfor (var i = 0; i < n_in; i++)\n\t    if (max_sym < src[i])\n\t\tmax_sym = src[i]\n\tmax_sym++;  // FIXME not what spec states!\n\n\tvar model_lit = new Array(max_sym)\n\tfor (var i = 0; i < max_sym; i++)\n\t    model_lit[i] = new ByteModel(max_sym);\n\tvar model_run = new Array(258);\n\tfor (var i = 0; i <= 257; i++)\n\t    model_run[i] = new ByteModel(4)\n\n\tout.WriteByte(max_sym);\n\tvar rc = new RangeCoder(out);\n\n\tvar i = 0\n\tvar last = 0\n\twhile (i < n_in) {\n\t    model_lit[last].ModelEncode(out, rc, src[i])\n\t    var run = 1\n\t    while (i+run < n_in && src[i+run] == src[i])\n\t\trun++\n\t    run--\n\n\t    var rctx = src[i]\n\t    last = src[i]\n\t    i += run+1\n\n\t    var part = run >= 3 ? 3 : run\n\t    model_run[rctx].ModelEncode(out, rc, part)\n\t    run -= part\n\t    rctx = 256\n\t    while (part == 3) {\n\t\tpart = run >= 3 ? 3 : run\n\t\tmodel_run[rctx].ModelEncode(out, rc, part)\n\t\trctx = 257\n\t\trun -= part\n\t    }\n\t}\n\trc.RangeFinishEncode(out)\n\n\treturn out.buf.slice(0, out.pos);\n    }\n\n    //----------------------------------------------------------------------\n    // Pack method\n    decodePackMeta(stream) {\n\tthis.nsym  = stream.ReadByte()\n\n\tvar M = new Array(this.nsym);\n\tfor (var i = 0; i < this.nsym; i++)\n\t    M[i] = stream.ReadByte()\n\n\tvar e_len = stream.ReadUint7(); // Could be derived data from nsym and n_out\n\n\treturn [M, e_len]\n    }\n\n    decodePack(data, M, len) {\n\tvar out = new Buffer.allocUnsafe(len);\n\n\tif (this.nsym <= 1) {\n\t    // Constant value\n\t    for (var i = 0; i < len; i++)\n\t\tout[i] = M[0]\n\n\t} else if (this.nsym <= 2) {\n\t    // 1 bit per value\n\t    for (var i = 0, j = 0; i < len; i++) {\n\t\tif (i % 8 == 0)\n\t\t    var v = data[j++]\n\t\tout[i] = M[v & 1]\n\t\tv >>= 1\n\t    }\n\n\t} else if (this.nsym <= 4) {\n\t    // 2 bits per value\n\t    for (var i = 0, j = 0; i < len; i++) {\n\t\tif (i % 4 == 0)\n\t\t    var v = data[j++]\n\t\tout[i] = M[v & 3]\n\t\tv >>= 2\n\t    }\n\n\t} else if (this.nsym <= 16) {\n\t    // 4 bits per value\n\t    for (var i = 0, j = 0; i < len; i++) {\n\t\tif (i % 2 == 0)\n\t\t    var v = data[j++]\n\t\tout[i] = M[v & 15]\n\t\tv >>= 4\n\t    }\n\n\t} else {\n\t    // 8 bits per value: NOP\n\t    return data\n\t}\n\n\treturn out\n    }\n\n    // Compute M array and return meta-data stream\n    packMeta(src) {\n\tvar stream = new IOStream(\"\", 0, 1024)\n\n\t// Count symbols\n\tvar M = new Array(256)\n\tfor (var i = 0; i < src.length; i++)\n\t    M[src[i]] = 1\n\n\t// Write Map\n\tfor (var nsym = 0, i = 0; i < 256; i++)\n\t    if (M[i])\n\t\tM[i] = ++nsym; // map to 1..N\n\tstream.WriteByte(nsym);\n\n\t// FIXME: add check for nsym > 16?\n\t// Or just accept it as an inefficient waste of time.\n\tfor (var i = 0; i < 256; i++) {\n\t    if (M[i]) {\n\t\tstream.WriteByte(i) // adjust to 0..N-1\n\t\tM[i]--;\n\t    }\n\t}\n\n\treturn [stream, M, nsym]\n    }\n\n    encodePack(data) {\n\tvar meta, M, nsym\n\t[meta, M, nsym] = this.packMeta(data)\n\n\tvar len = data.length\n\tvar i = 0;\n\tif (nsym <= 1) {\n\t    // Constant values\n\t    meta.WriteUint7(0)\n\t    return [meta, new Buffer.allocUnsafe(0), 0];\n\t}\n\n\tif (nsym <= 2) {\n\t    // 1 bit per value\n\t    var out = new Buffer.allocUnsafe(Math.floor((len+7)/8));\n\t    for (var i = 0, j = 0; i < (len & ~7); i+=8, j++)\n\t\tout[j] = (M[data[i+0]]<<0)\n\t\t       + (M[data[i+1]]<<1)\n\t\t       + (M[data[i+2]]<<2)\n\t\t       + (M[data[i+3]]<<3)\n\t\t       + (M[data[i+4]]<<4)\n\t\t       + (M[data[i+5]]<<5)\n\t\t       + (M[data[i+6]]<<6)\n\t\t       + (M[data[i+7]]<<7)\n\t    if (i < len) {\n\t\tout[j] = 0;\n\t\tvar v = 0;\n\t\twhile (i < len) {\n\t\t    out[j] |= M[data[i++]]<<v;\n\t\t    v++;\n\t\t}\n\t\tj++;\n\t    }\n\n\t    meta.WriteUint7(j)\n\t    return [meta, out, out.length]\n\t}\n\n\tif (nsym <= 4) {\n\t    // 2 bits per value\n\t    var out = new Buffer.allocUnsafe(Math.floor((len+3)/4));\n\t    for (var i = 0, j = 0; i < (len & ~3); i+=4, j++)\n\t\tout[j] = (M[data[i+0]]<<0)\n\t\t       + (M[data[i+1]]<<2)\n\t\t       + (M[data[i+2]]<<4)\n\t\t       + (M[data[i+3]]<<6)\n\n\t    if (i < len) {\n\t\tout[j] = 0;\n\t\tvar v = 0;\n\t\twhile (i < len) {\n\t\t    out[j] |= M[data[i++]]<<v;\n\t\t    v+=2;\n\t\t}\n\t\tj++;\n\t    }\n\n\t    meta.WriteUint7(j)\n\t    return [meta, out, out.length]\n\t}\n\n\tif (nsym <= 16) {\n\t    // 4 bits per value\n\t    var out = new Buffer.allocUnsafe(Math.floor((len+1)/2));\n\t    for (var i = 0, j = 0; i < (len & ~1); i+=2, j++)\n\t\tout[j] = (M[data[i+0]]<<0)\n\t\t       + (M[data[i+1]]<<4)\n\t    if (i < len)\n\t\tout[j++] = M[data[i++]];\n\n\t    meta.WriteUint7(j)\n\t    return [meta, out, out.length]\n\t}\n\n\t// Otherwise an expensive NOP\n\tmeta.WriteUint7(data.length)\n\treturn [meta, data, data.length]\n    }\n\n    //----------------------------------------------------------------------\n    // STRIPE method\n    encodeStripe(hdr, src, N) {\n    if (N == 0)\n\tN = 4; // old default\n\n\t// Split into multiple streams\n\tvar part = new Array(N)\n\tvar ulen = new Array(N)\n\tfor (var s = 0; s < N; s++) {\n\t    ulen[s] = Math.floor(src.length / N) + ((src.length % N) > s);\n\t    part[s] = new Array(ulen[s])\n\t}\n\n\tfor (var x = 0, i = 0; i < src.length; i+=N, x++) {\n\t    for (var j = 0; j < N; j++)\n\t\tif (x < part[j].length)\n\t\t    part[j][x] = src[i+j]\n\t}\n\n\t// Compress each part\n\tvar comp = new Array(N)\n\tvar total = 0\n\tfor (var s = 0; s < N; s++) {\n\t    // Example: try O0 and O1 and choose best\n\t    var comp0 = this.encode(part[s], 0)\n\t    var comp1 = this.encode(part[s], 1)\n\t    comp[s] = (comp1.length < comp0.length) ? comp1 : comp0\n\t    total += comp[s].length\n\t}\n\n\t// Serialise\n\tvar out = new IOStream(\"\", 0, total+5*N + 1)\n\tout.WriteByte(N)\n\tfor (var s = 0; s < N; s++)\n\t    out.WriteUint7(comp[s].length)\n\n\tfor (var s = 0; s < N; s++)\n\t    out.WriteData(comp[s], comp[s].length)\n\n\treturn out.buf.slice(0, out.buf.pos)\n    }\n\n    decodeStripe(stream, len) {\n\tvar N = stream.ReadByte()\n\t\n\t// Retrieve lengths\n\tvar clen = new Array(N)\n\tvar ulen = new Array(N)\n\tfor (var j = 0; j < N; j++)\n\t    clen[j] = stream.ReadUint7()\n\n\t// Decode streams\n\tvar T = new Array(N);\n\tfor (var j = 0; j < N; j++) {\n\t    ulen[j] = Math.floor(len / N) + ((len % N) > j)\n\t    T[j] = this.decodeStream(stream, ulen[j])\n\t}\n\n\t// Transpose\n\tvar out = new Buffer.allocUnsafe(len)\n\tfor (var j = 0; j < N; j++) {\n\t    for (var i = 0; i < ulen[j]; i++) {\n\t\tout[i*N + j] = T[j][i];\n\t    }\n\t}\n\n\treturn out\n    }\n\n    //----------------------------------------------------------------------\n    // Cat method\n    decodeCat(stream, len) {\n\tvar out = new Buffer.allocUnsafe(len);\n\tfor (var i = 0; i < len; i++)\n\t    out[i] = stream.ReadByte()\n\n\treturn out\n    }\n}\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// An arithmetic coder, based on Eugene Shelwien's reimplementation of\n// Michael Schindler range coder.\n//\n// Order-0 byte stream of ~/scratch/data/q40b\n// C:              3.1s decode  (approx same vs 32-bit and 64-bit)\n// Arith_sh.js     6.7s decode  (32-bit with carries)\n// Arith.js      317.0s decode  (64-bit no carries); int64 crippling it.\n\n//----------------------------------------------------------------------\n// Arithmetic (range) coder\nmodule.exports = class RangeCoder {\n    constructor(src) {\n\tthis.low   = 0;\n\tthis.range = 0xffffffff;\n\tthis.code  = 0;\n\tthis.FFnum = 0;\n\tthis.carry = 0;\n\tthis.cache = 0;\n    }\n\n    RangeStartDecode(src) {\n\tfor (var i = 0; i < 5; i++)\n\t    this.code = (this.code << 8) + src.ReadByte();\n\tthis.code &= 0xffffffff;\n\tthis.code >>>= 0; // force to be +ve int\n    }\n\n    RangeGetFrequency(tot_freq) {\n\tthis.range = Math.floor(this.range / tot_freq);\n\t//return this.code / this.range;\n\treturn Math.floor(this.code / this.range);\n\n\t// Conceptual scenario; return freq only and don't modify range yet\n\t//return Math.floor(this.code / (Math.floor(this.range / tot_freq)));\n    }\n\n    RangeDecode(src, sym_low, sym_freq, tot_freq) {\n\t// Conceptually we divide range here, but in practice we cached it earlier\n\t//this.range = Math.floor(this.range / tot_freq);\n\n\tthis.code  -= sym_low * this.range;\n\tthis.range *= sym_freq;\n\n\twhile (this.range < (1<<24)) {\n\t    this.range *= 256;\n\t    this.code = (this.code*256 + src.ReadByte());\n\t}\n    }\n\n    RangeShiftLow(dst) {\n\t// We know range is < (1<<24) as we got here.  We already have a\n\t// cached copy of 8 bits from low.  Is this correct, or does it need\n\t// fixing?  Possible scenarios.\n\t// 1. Low < 0xff000000 thus low+range < 0xffffffff and cache\n\t//    cannot possibly change.  Output cache and as many ffs as needed.\n\t// 2. We already detected an overflow in RangeEncode, setting carry.\n\t//    In this case output cached byte + 1 and any 00s needed.\n\t// 3. Neither case - range is low but we haven't yet detected if we're\n\t//    XXffffff or XY000000 scenario.  Increase counter for ff/00s.\n\n\tif (this.low < 0xff000000 | this.carry) {\n\t    // cached byte if no overflow, byte+1 otherwise\n\t    dst.WriteByte(this.cache + this.carry);\n\n\t    // Flush any tracked FFs (no carry) or 00s (carry).\n\t    while (this.FFnum) {\n\t\tdst.WriteByte(this.carry-1);\n\t\tthis.FFnum--;\n\t    }\n\n\t    // Take a copy of top byte ready for next flush\n\t    this.cache = this.low >>> 24;\n\t    this.carry = 0;\n\t} else {\n\t    this.FFnum++; // keep track of number of trailing ff/00 bytes to write\n\t}\n\tthis.low <<= 8;\n\tthis.low >>>= 0; // force to be +ve int\n    }\n\n    RangeEncode(dst, sym_low, sym_freq, tot_freq) {\n\tvar old_low = this.low\n\tthis.range  = Math.floor(this.range / tot_freq)\n\tthis.low   += sym_low * this.range;\n\tthis.low >>>= 0; // Truncate to +ve int so we can spot overflow\n\tthis.range *= sym_freq;\n\n\t// \"low + sym*range < old_low\" means we overflow; set carry.\n\t// NB: can this.low < old_low occur twice before range < (1<<24)?\n\t// We claim not, but prove it!\n\tif (this.low < old_low) {\n\t    if (this.carry != 0) console.log(\"ERROR: Multiple carry\")\n\t    this.carry = 1\n\t}\n\n\t// Renormalise if range gets too small\n\twhile (this.range < (1<<24)) {\n\t    this.range *= 256;\n\t    this.RangeShiftLow(dst);\n\t}\n    }\n\n    RangeFinishEncode(dst) {\n\tfor (var i = 0; i < 5; i++)\n\t    this.RangeShiftLow(dst)\n    }\n};\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// An adaptive probability model for encoding and decoding of symbols\n// within a given alphabet, using the range coder to get/put the\n// compressed data.\n\nconst MAX_FREQ = ((1<<16)-17)\nconst STEP     = 16\n\nmodule.exports = class ByteModel {\n    constructor(max_sym = 256) {\n\tthis.total_freq = max_sym;\n\tthis.max_sym = max_sym-1;\n\tthis.S = new Array\n\tthis.F = new Array\n\n\tfor (var i = 0; i <= this.max_sym; i++) {\n\t    this.S[i] = i;\n\t    this.F[i] = 1;\n\t}\n    }\n\n    ModelDecode(src, rc) {\n\t// Find symbol\n\tvar freq = rc.RangeGetFrequency(this.total_freq);\n\n\t// Linear scan to find cumulative frequency 'freq'\n\tvar acc = 0;\n\tvar x = 0;\n\twhile (acc + this.F[x] <= freq)\n\t    acc += this.F[x++];\n\n//\tfor (var acc = 0; (acc += this.F[x]) <= freq; x++)\n//\t    ;\n//\tacc -= this.F[x];\n\n\t// Update range coder\n\trc.RangeDecode(src, acc, this.F[x], this.total_freq);\n\n\t// Update model\n\tthis.F[x]       += STEP;\n\tthis.total_freq += STEP;\n\tif (this.total_freq > MAX_FREQ)\n\t    this.ModelRenormalise();\n\t\n\n\t// Keep symbols approximately frequency sorted\n\tvar sym = this.S[x];\n\tif (x > 0 && this.F[x] > this.F[x-1]) {\n\t    var tmp = this.F[x];\n\t    this.F[x] = this.F[x-1];\n\t    this.F[x-1] = tmp;\n\n\t    tmp = this.S[x];\n\t    this.S[x] = this.S[x-1];\n\t    this.S[x-1] = tmp;\n\t}\n\n\treturn sym;\n    }\n\n    ModelRenormalise() {\n\t// Halve all the frequencies, being careful not to hit zero\n\tthis.total_freq = 0;\n\tfor (var i = 0; i <= this.max_sym; i++) {\n\t    this.F[i] -= Math.floor(this.F[i] / 2);\n\t    this.total_freq += this.F[i];\n\t}\n    }\n\n    ModelEncode(dst, rc, sym) {\n\t// Find cumulative frequency\n\tvar acc = 0;\n\tfor (var x = 0; this.S[x] != sym; x++)\n\t    acc += this.F[x];\n\n\t// Encode\n\trc.RangeEncode(dst, acc, this.F[x], this.total_freq);\n\n\t// Update model\n\tthis.F[x]       += STEP;\n\tthis.total_freq += STEP;\n\tif (this.total_freq > MAX_FREQ) // FIXME x2\n\t    this.ModelRenormalise();\n\n\t// Keep symbols approximately frequency sorted\n\tvar sym = this.S[x];\n\tif (x > 0 && this.F[x] > this.F[x-1]) {\n\t    var tmp = this.F[x];\n\t    this.F[x] = this.F[x-1];\n\t    this.F[x-1] = tmp;\n\n\t    tmp = this.S[x];\n\t    this.S[x] = this.S[x-1];\n\t    this.S[x-1] = tmp;\n\t}\n    }\n};\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst IOStream = require(\"./iostream\");\nconst ByteModel = require(\"./byte_model\");\nconst RangeCoder = require(\"./arith_sh\");\n\n\n//----------------------------------------------------------------------\n// Main arithmetic entry function: decodes a compressed src and\n// returns the uncompressed buffer.\n\nfunction read_array(src, tab, size) {\n    var j = 0; // array value\n    var z = 0; // array index: tab[j]\n    var last = -1;\n\n    // Remove first level of run-length encoding\n    var R = new Array(1024) // runs\n    while (z < size) {\n\tvar run = src.ReadByte()\n\tR[j++] = run\n\tz += run\n\n\tif (run == last) {\n\t    var copy = src.ReadByte()\n\t    z += run * copy\n\t    while (copy--)\n\t\tR[j++] = run\n\t}\n\tlast = run\n    }\n\n    // Now expand runs in R to tab, noting 255 is max run\n    var i = 0\n    j = 0\n    z = 0\n    while (z < size) {\n\tvar run_len = 0\n\tdo {\n\t    var part = R[j++]\n\t    run_len += part\n\t} while (part == 255)\n\t\n\twhile (run_len--)\n\t    tab[z++] = i;\n\ti++\n    }\n}\n\nconst QMAX = 256\n\nconst FLAG_DEDUP  = 2\nconst FLAG_FLEN   = 4\nconst FLAG_SEL    = 8    // whether selector is used in context\nconst FLAG_QMAP   = 16\nconst FLAG_PTAB   = 32\nconst FLAG_DTAB   = 64\nconst FLAG_QTAB   = 128\n\nconst GFLAG_MULTI_PARAM = 1\nconst GFLAG_HAVE_STAB   = 2\nconst GFLAG_DO_REV      = 4\n\n// Compute a new context from our current state and qual q\nfunction fqz_update_ctx(params, state, q) {\n    var last = params.context\n    state.qctx = ((state.qctx << params.qshift) + params.qtab[q]); // >>> 0\n    last += ((state.qctx & ((1<<params.qbits)-1)) << params.qloc); // >>> 0\n\n    if (params.do_pos)\n\tlast += params.ptab[Math.min(state.p, 1023)] << params.ploc\n\n    if (params.do_delta) {\n\tlast += params.dtab[Math.min(state.delta, 255)] << params.dloc\n\t// Is it better to use q here or qtab[q]?\n\t// If qtab[q] we can map eg [a-z0-9A-Z]->0 ,->1 and have\n\t// delta being a token number count into comma separated lists?\n\tstate.delta += (state.prevq != q) ? 1 : 0\n\tstate.prevq = q\n    }\n\n    if (params.do_sel)\n\tlast += state.s << params.sloc\n\n    state.p--\n\n    return last & 0xffff\n}\n\nfunction decode_fqz_single_param(src) {\n    var p = {} // params\n    \n    // Load FQZ parameters\n    p.context = src.ReadUint16()\n    p.pflags  = src.ReadByte()\n\n    p.do_dedup  = p.pflags & FLAG_DEDUP\n    p.fixed_len = p.pflags & FLAG_FLEN\n    p.do_sel    = p.pflags & FLAG_SEL\n    p.do_qmap   = p.pflags & FLAG_QMAP\n    p.do_pos    = p.pflags & FLAG_PTAB\n    p.do_delta  = p.pflags & FLAG_DTAB\n    p.do_qtab   = p.pflags & FLAG_QTAB\n\n    p.max_sym = src.ReadByte()\n\n    var x = src.ReadByte()\n    p.qbits  = x>>4\n    p.qshift = x&15\n    x = src.ReadByte()\n    p.qloc = x>>4\n    p.sloc = x&15\n    x = src.ReadByte()\n    p.ploc = x>>4\n    p.dloc = x&15\n\n    // Qual map, eg to \"unbin\" Illumina qualities\n    p.qmap = new Array(256);\n    if (p.pflags & FLAG_QMAP) {\n\tfor (var i = 0; i < p.max_sym; i++)\n\t    p.qmap[i] = src.ReadByte()\n    } else {\n\t// Useful optimisation to speed up main loop\n\tfor (var i = 0; i < 256; i++)\n\t    p.qmap[i] = i;  // NOP\n    }\n\n    // Read tables\n    p.qtab = new Array(1024);\n    if (p.qbits > 0 && (p.pflags & FLAG_QTAB)) {\n\tread_array(src, p.qtab, 256)\n    } else {\n\t// Useful optimisation to speed up main loop\n\tfor (var i = 0; i < 256; i++)\n\t    p.qtab[i] = i;  // NOP\n    }\n\n    p.ptab = new Array(1024);\n    if (p.pflags & FLAG_PTAB)\n\tread_array(src, p.ptab, 1024);\n\n    p.dtab = new Array(256);\n    if (p.pflags & FLAG_DTAB)\n\tread_array(src, p.dtab, 256);\n\n    return p\n}\n\nfunction decode_fqz_params(src) {\n    var gparams = {\n\tmax_sym: 0\n    }\n\n    // Check fqz format version\n    var vers = src.ReadByte()\n    if (vers != 5) {\n\tconsole.error(\"Invalid FQZComp version number\");\n\treturn;\n    }\n\n    var gflags = src.ReadByte()\n    var nparam = (gflags & GFLAG_MULTI_PARAM) ? src.ReadByte() : 1\n    var max_sel = gflags.nparam > 1 ? gflags.nparam-1 : 0 // Note max_sel, not num_sel\n\n    var stab = new Array(256);\n    if (gflags & GFLAG_HAVE_STAB) {\n\tmax_sel = src.ReadByte()\n\tread_array(src, stab, 256);\n    } else {\n\tfor (var i = 0; i < nparam; i++)\n\t    stab[i] = i;\n\tfor (; i < 256; i++)\n\t    stab[i] = nparam-1;\n    }\n    gparams.do_rev = (gflags & GFLAG_DO_REV)\n    gparams.stab = stab\n    gparams.max_sel = max_sel\n\n    gparams.params = new Array(gparams.nparam)\n    for (var p = 0; p < nparam; p++) {\n\tgparams.params[p] = decode_fqz_single_param(src)\n\tif (gparams.max_sym < gparams.params[p].max_sym)\n\t    gparams.max_sym = gparams.params[p].max_sym\n    }\n\n    return gparams\n}\n\nfunction fqz_create_models(gparams) {\n    var model = {}\n\n    model.qual = new Array(1<<16)\n    for (var i = 0; i < (1<<16); i++)\n\tmodel.qual[i] = new ByteModel(gparams.max_sym+1) // +1 as max value not num. values\n\n    model.len = new Array(4)\n    for (var i = 0; i < 4; i++)\n\tmodel.len[i] = new ByteModel(256)\n\n    model.rev   = new ByteModel(2)\n    model.dup   = new ByteModel(2)\n\n    if (gparams.max_sel > 0)\n\tmodel.sel = new ByteModel(gparams.max_sel+1) // +1 as max value not num. values\n\n    return model\n}\n\n// Initialise a new record, updating state.\n// Returns 1 if dup, otherwise 0\nfunction decode_fqz_new_record(src, rc, gparams, model, state, rev) {\n    // Parameter selector\n    if (gparams.max_sel > 0) {\n\tstate.s = model.sel.ModelDecode(src, rc)\n    } else {\n\tstate.s = 0;\n    }\n    state.x = gparams.stab[state.s]\n\n    var params = gparams.params[state.x]\n\n    // Reset contexts at the start of each new record\n    if (params.fixed_len >= 0) {\n\t// Not fixed or fixed but first record\n\tvar len = model.len[0].ModelDecode(src, rc)\n\tlen |= model.len[1].ModelDecode(src, rc) << 8\n\tlen |= model.len[2].ModelDecode(src, rc) << 16\n\tlen |= model.len[3].ModelDecode(src, rc) << 24\n\tif (params.fixed_len > 0)\n\t    params.fixed_len = -len\n    } else {\n\tlen = -params.fixed_len\n    }\n    state.len = len\n\n    if (gparams.do_rev)\n\trev[state.rec] = model.rev.ModelDecode(src, rc)\n\n    state.is_dup = 0\n    if (params.pflags & FLAG_DEDUP) {\n\tif (model.dup.ModelDecode(src, rc))\n\t    state.is_dup = 1\n    }\n\n    state.p = len;  // number of remaining bytes in this record\n    state.delta = 0\n    state.qctx = 0\n    state.prevq = 0\n    state.rec++\n}\n\nfunction decode_fqz(src, q_lens) {\n    // Decode parameter block\n    var n_out = src.ReadUint7()\n    var gparams = decode_fqz_params(src)\n    if (!gparams) return\n    var params = gparams.params\n    var rev = new Array(q_lens.length)\n\n    // Create initial models\n    var model = fqz_create_models(gparams)\n\n    // Create our entropy encoder and output buffers\n    var rc = new RangeCoder(src)\n    rc.RangeStartDecode(src)\n    var output = new Buffer.allocUnsafe(n_out)\n\n    // Internal FQZ state\n    var state = {\n\tqctx:0,   // Qual-only sub-context\n\tprevq:0,  // Previous quality value\n\tdelta:0,  // Running delta (q vs prevq)\n\tp:0,      // Number of bases left in current record\n\ts:0,      // Current parameter selector value (0 if unused)\n\tx:0,      // \"stab\" tabulated copy of s\n\tlen:0,    // Length of current string\n\tis_dup:0, // This string is a duplicate of last\n\trec:0     // Record number\n    }\n\n    // The main decode loop itself\n    var i = 0     // position in output buffer\n    while (i < n_out) {\n\tif (state.p == 0) {\n\t    decode_fqz_new_record(src, rc, gparams, model, state, rev)\n\t    if (state.is_dup > 0) {\n\t\tif (model.dup.ModelDecode(src, rc)) {\n\t\t    // Duplicate of last line\n\t\t    for (var x = 0; x < len; x++)\n\t\t\toutput[i+x] = output[i+x-state.len]\n\t\t    i += state.len\n\t\t    state.p = 0\n\t\t    continue\n\t\t}\n\t    }\n\t    q_lens.push(state.len)\n\n\t    var params = gparams.params[state.x]\n\t    var last = params.context\n\t}\n\n\t// Decode the current quality (possibly mapped via qmap)\n\tvar Q = model.qual[last].ModelDecode(src, rc)\n\n\t//if (params.do_qmap)\n\t//    output[i++] = params.qmap[Q];\n\t//else\n\t//    output[i++] = Q\n\toutput[i++] = params.qmap[Q]; // optimised version of above\n\tlast = fqz_update_ctx(params, state, Q)\n    }\n\n    if (gparams.do_rev)\n\treverse_qualities(output, n_out, rev, q_lens)\n\n    return output;\n}\n\nfunction reverse_qualities(qual, qual_len, rev, len) {\n    var rec = 0\n    var i = 0\n    while (i < qual_len) {\n\tif (rev[rec]) {\n\t    var j = 0\n\t    var k = len[rec]-1\n\t    while (j < k) {\n\t\tvar tmp   = qual[i+j]\n\t\tqual[i+j] = qual[i+k]\n\t\tqual[i+k] = tmp\n\t\tj++\n\t\tk--\n\t    }\n\t}\n\n\ti += len[rec++];\n    }\n}\n\nfunction decode(src, q_lens) {\n    var stream = new IOStream(src);\n\n    //var n_out = stream.ReadUint32(); stream.ReadUint32(); // move to main\n\n    return decode_fqz(stream, q_lens);\n}\n    \n//----------------------------------------------------------------------\n// FQZComp encoder.\n\nfunction pick_fqz_params(src, q_lens, q_dirs, qhist) {\n    // Find cardinality of q_dirs\n    var qd_last = q_dirs[0];\n    for (var i = 0; i < q_dirs.length; i++)\n\tif (q_dirs[i] != qd_last)\n\t    break;\n    var qd_fixed = (i == q_dirs.length) ? 1 : 0\n\n    // Scan input to find number of symbols and max symbol\n    var nsym = 0\n    var max_sym = 0\n\n    // selector == 0: Assume one single input dataset\n    for (var i = 0; i < 256; i++)\n\tqhist[0][i] = 0;\n\n    var rec = 0;\n    var len = 0\n    for (var i = 0; i < src.length; i++) {\n\tif (len == 0) {\n\t    len = q_lens[rec < q_lens.length-1 ? rec++ : rec]\n\t}\n\tqhist[0][src[i]]++;\n\tlen--;\n    }\n    for (var i = 0; i < 256; i++) {\n\tif (!qhist[0][i])\n\t    continue;\n\tif (max_sym < i)\n\t    max_sym = i;\n\tnsym++;\n    }\n\n    var qshift = 5\n    var do_qmap = 0\n    // Reduced symbol frequencies implies lower qshift and\n    // a lookup table to go from qual to Q\n    if (nsym <= 16) {\n\tdo_qmap = 1 // based on qhist\n\tif (nsym <= 2)\n\t    qshift = 1\n\telse if (nsym <= 4)\n\t    qshift = 2\n\telse if (nsym <= 8)\n\t    qshift = 3\n\telse\n\t    qshift = 4\n    }\n\n//    // Two params and a 1-bit selector.\n//    // This is 1% overhead vs two data sets compressed independently.\n//    // It's 6.9% smaller than compressing both together with 1 param.\n//    if (0) return [{\n//\t// q4\n//\tqbits:     8,\n//\tqshift:    2,\n//\tqloc:      7,\n//\n//\tpbits:     7,\n//\tpshift:    1,\n//\tploc:      0,\n//\n//\tdbits:     0,\n//\tdshift:    0,\n//\tdloc:      0,\n//\n//      sbits:     0,\n//      sloc:      0,\n//\n//\t//sbits:     2,\n//\t//do_stab:   1,\n//\tsbits:     1,\n//\tdo_stab:   0,\n//\tcontext:   (0<<15),\n//\n//\tmax_sym:   36,\n//\tnsym:      4,\n//\n//\tdo_qmap:   1,\n//\tdo_dedup:  0,\n//\tfixed_len: 1,\n//\tdo_sel:  0,\n//\tdo_rev:    0,\n//\tdo_pos:    1,\n//\tdo_delta:  0,\n//\tdo_qtab:   0\n//    }, {\n//\t//q40\n//\tqbits:     9,\n//\tqshift:    5,\n//\tqloc:      7,\n//\n//\tpbits:     7,\n//\tpshift:    0,\n//\tploc:      0,\n//\n//\tdbits:     0,\n//\tdshift:    0,\n//\tdloc:      0,\n//\n//      sbits:     0,\n//      sloc:      0,\n//\n//\t//sbits:     2,\n//\t//do_stab:   1,\n//\tsbits:     1,\n//\tdo_stab:   0,\n//\tcontext:   (1<<15),\n//\n//\tmax_sym:   44,\n//\tnsym:      45,\n//\n//\tdo_qmap:   0,\n//\tdo_dedup:  0,\n//\tfixed_len: 1,\n//\tdo_sel:  0,\n//\tdo_rev:    0,\n//\tdo_pos:    1,\n//\tdo_delta:  0,\n//\tdo_qtab:   0\n//    }]\n\n    return [{qbits:     8+(qshift>4),\n\t     qshift:    qshift,\n\t     qloc:      7,\n\n\t     pbits:     7,\n\t     pshift:    q_lens[0] > 128 ? 1 : 0,\n\t     ploc:      0,\n\n\t     dbits:     qshift>4 ? 0 : 1,\n\t     dshift:    3,\n\t     dloc:      15,\n\n\n\t     // NB: Also useful as a way of embedding sel and doing sel\n\t     // specific contexts. Identical bar context. Eg 0<<15 or 1<<15.\n\t     sbits:     0,\n\t     sloc:      15,\n\t     do_stab:   0,\n\t     context:   (0<<15),\n\n\t     max_sym:   max_sym,\n\t     nsym:      nsym,\n\n\t     do_qmap:   do_qmap,\n\t     do_dedup:  0,\n\t     fixed_len: (q_lens.length == 1) ? 1 : 0,\n\t     do_sel:    0,\n\t     do_rev:    0,\n\t     do_pos:    1,\n\t     do_delta:  (qshift <= 4) ? 1 : 0,\n\t     do_qtab:   0,\n\n\t     // Override above with some attempt at using selectors\n\t     // when the q_dirs are specific and non-fixed.\n\t     qbits:     8+(qshift>4)-(qd_fixed==0),\n\t     sbits:     1,\n\t     sloc:      15-(qshift<=4), // read1 vs read2\n\t     do_stab:   1,\n\t     do_sel:    1,\n\t     \n//\t     // q4+dir: 7245769 with, 7353962 without. 1.5% saving\n//\t     qbits:     6,\n//\t     dbits:     2,\n//\t     dshift:    2,\n//\t     dloc:      13,\n//\t     sbits:     1,\n//\t     sloc:      15,\n//\t     do_stab:   1,\n//\t     do_sel:    1,\n\n\t     // with 20 bits of context, q40 = 31741545\n\t     // qbits 10, dbits 2, pbits 7, sbits 1\n\t    }]\n}\n\nfunction store_array(out, tab, size) {\n    var i = 0; // index into tab\n    var j = 0; // current value in tab[i]\n\n    var tmp1 = new Array(size*2);\n    var sz1 = 0;\n\n    // First level of RLE.  Replace all runs of 'j' values\n    // with run-lengths, including zeros for missing values.\n    // Eg 0 1 2 2 2 3 3 3 4 4 4 5 5 5 5   7 7\n    // to 1 1 3     3     3     4       0 2\n    while (i < size) {\n\t// Length of j^{th} element\n\tvar i_start = i\n\twhile (i < size && tab[i] == j)\n\t    i++;\n\tvar run_len = i - i_start\n\n\t// Encode run length to tmp array\n\tdo {\n\t    var r = Math.min(255, run_len)\n\t    tmp1[sz1++] = r\n\t    run_len -= r\n\t} while (r == 255)\n\tj++;\n    }\n\n    // Second round of RLE on our tmp array, using a different\n    // RLE algorithm.\n    // Eg 1 1    3 3  3 4 0 2\n    // to 1 1 +0 3 3 +1 4 0 2\n    var last = -1\n    var tmp2 = new Array(size*2)\n    var sz2 = 0\n    i = 0  // index into tmp1]\n    // k is used size of tmp1[]\n    while (i < sz1) {\n\tvar curr = tmp1[i++];\n\ttmp2[sz2++] = curr\n\tif (curr == last) {\n\t    var i_start = i;\n\t    while (i < sz1 && tmp1[i] == last && i - i_start < 255)\n\t\ti++;\n\t    tmp2[sz2++] = i - i_start;\n\t} else {\n\t    last = curr\n\t}\n    }\n\n    // Append 2nd RLE, tmp2, to out.\n    out.WriteData(tmp2, sz2)\n}\n\n\t\t\t\t     \n\n// q_lens is an array of quality lengths per record.\n// (If they're all the same, just set one value.)\nfunction encode_fqz_params(out, params, qhist, qtab, ptab, dtab, stab) {\n    var dsqr = [\n        0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3,\n        4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5,\n        5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n        6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\n    ]\n\n    for (var i = 0; i < params.length; i++)\n\tstab[i] = i; // 1 parameter set per selector value\n    for (; i < 256; i++)\n\tstab[i] = params.length-1;\n\n    // Store global meta-data\n    out.WriteByte(5);            // FQZ format number\n    var gflags = ((params.length > 1) ? GFLAG_MULTI_PARAM : 0)\n\t       | ((params[0].do_stab) ? GFLAG_HAVE_STAB   : 0)\n    out.WriteByte(gflags)\n\n    if (gflags & GFLAG_MULTI_PARAM)\n\tout.WriteByte(params.length) // Number of parameter blocks.\n\n    if (gflags & GFLAG_HAVE_STAB) {\n\tvar max_sel = 1<<params[0].sbits;\n\tif (max_sel > 0) max_sel--;\n\tout.WriteByte(max_sel)\n\tstore_array(out, stab, 256)\n    }\n\n    // Store per-param meta-data\n    for (var p = 0; p < params.length; p++) {\n\tout.WriteUint16(params[p].context)\n\tout.WriteByte((params[p].do_qtab  ? FLAG_QTAB  : 0) |  // FLAG\n\t\t      (params[p].do_delta ? FLAG_DTAB  : 0) |\n\t\t      (params[p].do_pos   ? FLAG_PTAB  : 0) |\n\t\t      (params[p].do_qmap  ? FLAG_QMAP  : 0) |\n\t\t      (params[p].do_sel   ? FLAG_SEL   : 0) |\n\t\t      (params[p].fixed_len? FLAG_FLEN  : 0) |\n\t\t      (params[p].do_dedup ? FLAG_DEDUP : 0))\n\tif (params[p].do_qmap)\n\t    out.WriteByte(params[p].nsym)\n\telse\n\t    out.WriteByte(params[p].max_sym)\n\tout.WriteByte((params[p].qbits << 4) | (params[p].qshift))\n\tout.WriteByte((params[p].qloc  << 4) | (params[p].sloc))\n\tout.WriteByte((params[p].ploc  << 4) | (params[p].dloc))\n\n\tif (params[p].do_qmap) {\n\t    params[p].max_sym = params[p].nsym\n\t    var n = 0;\n\t    for (var i = 0; i < 256; i++) {\n\t\tif (qhist[p][i]) {\n\t\t    out.WriteByte(i)\n\t\t    qhist[p][i] = n++;\n\t\t}\n\t    }\n\t    // Ensure we have all matched input params\n\t    for (; n < params[p].nsym; n++)\n\t\tout.WriteByte(0)\n\t} else {\n\t    //params[p].nsym = 255;\n\t    for (var i = 0; i < 256; i++)\n\t\tqhist[p][i] = i; // NOP\n\t}\n\n\tif (params[p].qbits > 0) {\n\t    //\t// Eg map 0-44 to a smaller range, to improve context usage.\n\t    //\t// Makes q40 test set go from 33596471 to 33450075 (-0.4%)\n\t    //\tparams[p].do_qtab = 1;\n\t    //\tfor (var j = i = 0; i < params[p].max_sym; i++) {\n\t    //\t    qtab[i]=j;\n\t    //\t    if ((i%3)!=0 | i >= 28) j++\n\t    //\t    console.log(\"qtab[\",i,\"]=\",qtab[i]);\n\t    //\t}\n\t    //\tfor (; i < 256; i++)\n\t    //\t    qtab[i] = qtab[params[p].max_sym-1]\n\n\t    for (var i = 0; i < 256; i++)\n\t\tqtab[p][i] = i; // NOP for now\n\n\t    if (params[p].do_qtab)\n\t\tstore_array(out, qtab[p], 256)\n\t}\n\n\tif (params[p].pbits > 0) {\n\t    for (var i = 0; i < 1024; i++)\n\t\tptab[p][i] = Math.min((1<<params[p].pbits)-1, i >> params[p].pshift)\n\n\t    store_array(out, ptab[p], 1024)\n\t}\n\n\tif (params[p].dbits > 0) {\n\t    for (var i = 0; i < 256; i++)\n\t\tif (dsqr[i] > (1<<params[p].dbits) - 1)\n\t\t    dsqr[i] = (1<<params[p].dbits) - 1\n\t    for (var i = 0; i < 256; i++)\n\t\tdtab[p][i] = dsqr[Math.min(dsqr.length-1, i >> params[p].dshift)]\n\n\t    store_array(out, dtab[p], 256)\n\t}\n    }\n\n    return out\n}\n\nfunction encode_fqz(out, src, q_lens, q_dirs, params, qhist, qtab, ptab, dtab, stab) {\n    //console.error(\"0:\",params[0])\n    //console.error(\"1:\",params[1])\n\n    var max_sel = 1<<params[0].sbits\n    if (max_sel > 0) max_sel--\n    var n_in = src.length\n\n    // Create the models\n    var max_sym = 0;\n    for (var p = 0; p < params.length; p++)\n\tif (max_sym < params[p].max_sym)\n\t    max_sym = params[p].max_sym;\n\n    var model_qual = new Array(1<<16)\n    for (var i = 0; i < (1<<16); i++)\n\tmodel_qual[i] = new ByteModel(max_sym+1)\n\n    var model_len = new Array(4)\n    for (var i = 0; i < 4; i++)\n\tmodel_len[i] = new ByteModel(256)\n\n    var model_rev    = new ByteModel(2)\n    var model_dup    = new ByteModel(2)\n    var model_sel    = new ByteModel(max_sel+1)\n\n    // Note: our JavaScript encoder doesn't have a way for reversing\n    // some quality strings, so we ignore do_rev for now.\n    var rc = new RangeCoder(src)\n\n    // The main encoding loop\n    var p = 0; // remaining position along current record\n    var i = 0; // index in src data\n    var rec = 0;\n\n    while (i < n_in) {\n\tif (p == 0) {\n\t    //var s = 0 // single non-mixed sample\n\t    var s = q_dirs[rec]\n\t    if (params[0].sbits > 0) {// FIXME: check All params[].do_stab / sbits must be identical\n\t\t//console.log(\"Ssel\", s)\n\t        model_sel.ModelEncode(out, rc, s)\n\t    }\n\t    var x = stab[s]\n\n\t    // Reset contexts at the statr of each new record\n\t    var len = q_lens[Math.min(q_lens.length-1, rec++)]\n\t    if (params[x].fixed_len) {\n\t\tif (params[x].fixed_len > 0) { // First length\n\t\t    //console.log(\"Len\", len)\n\t\t    model_len[0].ModelEncode(out, rc, len       & 0xff)\n\t\t    model_len[1].ModelEncode(out, rc, (len>>8)  & 0xff)\n\t\t    model_len[2].ModelEncode(out, rc, (len>>16) & 0xff)\n\t\t    model_len[3].ModelEncode(out, rc, (len>>24) & 0xff)\n\t\t    params[x].fixed_len = -1; // indicate we've stored it once\n\t\t}\n\t    } else {\n\t\t//console.log(\"len\", len)\n\t\tmodel_len[0].ModelEncode(out, rc, len       & 0xff)\n\t\tmodel_len[1].ModelEncode(out, rc, (len>>8)  & 0xff)\n\t\tmodel_len[2].ModelEncode(out, rc, (len>>16) & 0xff)\n\t\tmodel_len[3].ModelEncode(out, rc, (len>>24) & 0xff)\n\t    }\n\n\t    if (params[x].do_dedup)\n\t\tprocess.exit(1) // FIXME\n\n\t    p = len\n\t    var delta = 0\n\t    //var last  = 0\n\t    var last  = params[x].context\n\t    var qlast = 0\n\t    var q1    = 0\n\t}\n\n\t// Encode current quality\n\tvar q = src[i++]\n\tvar Q = qhist[x][q]\n\tmodel_qual[last].ModelEncode(out, rc, Q)\n\t//console.log(\"Ctx\",last,qhist[x][q])\n\n\t// Update contexts for next quality\n\tqlast = (qlast << params[x].qshift) + qtab[x][Q]\n\tlast  = params[x].context\n\tlast += (qlast & ((1<<params[x].qbits)-1)) << params[x].qloc\n\n\t// 46.6-48.6 billion cycles with ifs + \"<< params[x].?loc\" shifts\n\t// 47.3-47.3 billion cycles with ifs\n\t// 47.1-47.9 billion cycles without ifs\n\tif (params[x].pbits > 0)\n\t    last += ptab[x][Math.min(p, 1023)] << params[x].ploc\n\n\tif (params[x].dbits > 0) {\n\t    last += dtab[x][Math.min(delta, 255)] << params[x].dloc\n\t    delta += (q1 != Q) ? 1 : 0\n\t    q1 = Q\n\t}\n\n\tif (params[x].do_sel)\n\t    last += s << params[x].sloc\n\n\tlast = (last & 0xffff)\n\tp--\n    }\n\n    rc.RangeFinishEncode(out)\n    return out.buf.slice(0, out.pos)\n}\n\nfunction encode(src, q_lens, q_dirs) {\n    var qhist = new Array(2)\n    var qtab  = new Array(2)\n    var ptab  = new Array(2)\n    var dtab  = new Array(2)\n    var stab  = new Array(256)\n\n    for (var s = 0; s < 2; s++) {\n        qhist[s] = new Array(256)\n        qtab[s]  = new Array(256)\n        ptab[s]  = new Array(1024) \n        dtab[s]  = new Array(256)\n    }\n\n    var out = new IOStream(\"\", 0, src.length*1.1 + 100); // FIXME: guestimate worst case\n\n    out.WriteUint7(src.length);\n    var params = pick_fqz_params(src, q_lens, q_dirs, qhist)\n    var out = encode_fqz_params(out, params, qhist, qtab, ptab, dtab, stab)\n    return encode_fqz(out, src, q_lens, q_dirs, params, qhist, qtab, ptab, dtab, stab)\n}\n\nmodule.exports = { decode, encode }\n","/*\n * Copyright (c) 2020 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// This is an interface to the htscodecs reference implementation of\n// the CRAM 3.1 codecs.\n\n// This JavaScript file is not part of the reference implementation\n// and is simply and interface to get a consistent interface for cram-js.\n\n\"use strict\";\n\nvar r4x8    = require('./rans');\nvar r4x16   = require('./rans4x16');\nvar arith   = require('./arith_gen');\nvar fqzcomp = require('./fqzcomp');\nvar tok3    = require('./tok3');\n\nfunction r4x8_uncompress(inputBuffer, outputBuffer) {\n    r4x8.decode(inputBuffer).copy(outputBuffer, 0, 0);\n}\n\nfunction r4x16_uncompress(inputBuffer, outputBuffer) {\n    r4x16.decode(inputBuffer).copy(outputBuffer, 0, 0);\n}\n\nfunction arith_uncompress(inputBuffer, outputBuffer) {\n    arith.decode(inputBuffer).copy(outputBuffer, 0, 0);\n}\n\nfunction fqzcomp_uncompress(inputBuffer, outputBuffer) {\n    var q_lens = new Array\n    fqzcomp.decode(inputBuffer, q_lens).copy(outputBuffer, 0, 0);\n}\n\nfunction tok3_uncompress(inputBuffer, outputBuffer) {\n    // Returns in string form instead of buffer\n    var out = tok3.decode(inputBuffer, 0, '\\0');\n    Buffer.from(out, 'binary').copy(outputBuffer, 0, 0);\n}\n\nmodule.exports = {\n  r4x8_uncompress:    r4x8_uncompress,\n  r4x16_uncompress:   r4x16_uncompress,\n  arith_uncompress:   arith_uncompress,\n  fqzcomp_uncompress: fqzcomp_uncompress,\n  tok3_uncompress:    tok3_uncompress,\n};\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Turn a buffer into a fake stream with get / put commands.\n// This enables up to closely match the published pseudocode.\nmodule.exports = class IOStream {\n    constructor(buf, start_pos = 0, size = 0) {\n\tif (size != 0) {\n\t    this.buf = Buffer.allocUnsafe(size)\n\t    this.length = size\n\t} else {\n\t    this.buf = buf\n\t    this.length = buf.length\n\t}\n\tthis.pos = start_pos\n    }\n\n    // ----------\n    // Reading\n    EOF() {\n\treturn this.pos >= this.length\n    }\n\n    ReadData(len) {\n\tvar A = this.buf.slice(this.pos, this.pos+len)\n\tthis.pos += len;\n\treturn A\n    }\n\n    ReadByte() {\n\tconst b = this.buf[this.pos]\n\tthis.pos++\n\treturn b\n    }\n\n    ReadChar() {\n\tconst b = this.buf[this.pos]\n\tthis.pos++\n\treturn String.fromCharCode(b)\n    }\n\n    ReadUint16() {\n\tvar i = this.ReadByte()\n\ti |= this.ReadByte()<<8\n\treturn i\n    }\n\n    ReadUint32() {\n\tconst i = this.buf.readInt32LE(this.pos)\n\tthis.pos += 4\n\treturn i\n    }\n\n    // nul terminated string\n    ReadString() {\n\tvar s = \"\"\n\tdo {\n\t    var b = this.buf[this.pos++]\n\t    if (b)\n\t\ts += String.fromCharCode(b)\n\t} while (b)\n\treturn s\n    }\n\n//    ReadUint7() {\n//\t// Variable sized unsigned integers\n//\tvar i = 0;\n//\tvar s = 0;\n//\tdo {\n//\t    var c = this.ReadByte();\n//\t    i = i | ((c & 0x7f)<<s);\n//\t    s += 7;\n//\t} while ((c & 0x80))\n//\n//\treturn i;\n//    }\n\n    ReadUint7() {\n\t// Variable sized unsigned integers\n\tvar i = 0;\n\tdo {\n\t    var c = this.ReadByte();\n\t    i = (i<<7) | (c & 0x7f)\n\t} while ((c & 0x80))\n\n\treturn i;\n    }\n\n    ReadITF8() {\n\tvar i = this.buf[this.pos];\n\tthis.pos++;\n\n\t//process.stderr.write(\"i=\"+i+\"\\n\");\n\n\tif (i >= 0xf0) {\n\t    // 1111xxxx => +4 bytes\n\t    i = (i & 0x0f) << 28;\n\t    i += (this.buf[this.pos+0] << 20)\n\t      +  (this.buf[this.pos+1] << 12)\n\t      +  (this.buf[this.pos+2] <<  4)\n\t      +  (this.buf[this.pos+3] >>  4);\n\t    this.pos += 4;\n\t    //process.stderr.write(\"  4i=\"+i+\"\\n\");\n\t} else if (i >= 0xe0) {\n\t    // 1110xxxx => +3 bytes\n\t    i = (i & 0x0f) << 24;\n\t    i += (this.buf[this.pos+0] << 16)\n\t      +  (this.buf[this.pos+1] <<  8)\n\t      +  (this.buf[this.pos+2] <<  0);\n\t    this.pos += 3;\n\t    //process.stderr.write(\"  3i=\"+i+\"\\n\");\n\t} else if (i >= 0xc0) {\n\t    // 110xxxxx => +2 bytes\n\t    i = (i & 0x1f) << 16;\n\t    i += (this.buf[this.pos+0] << 8)\n\t      +  (this.buf[this.pos+1] << 0);\n\t    this.pos += 2;\n\t    //process.stderr.write(\"  2i=\"+i+\"\\n\");\n\t} else if (i >= 0x80) {\n\t    // 10xxxxxx => +1 bytes\n\t    i = (i & 0x3f) << 8;\n\t    i += this.buf[this.pos];\n\t    this.pos++;;\n\t    //process.stderr.write(\"  1i=\"+i+\"\\n\");\n\t} else {\n\t    // 0xxxxxxx => +0 bytes\n\t}\n\n\treturn i;\n    }\n\n    // ----------\n    // Writing\n    WriteByte(b) {\n\tthis.buf[this.pos++] = b\n    }\n\n    WriteChar(b) {\n\tthis.buf[this.pos++] = b.charCodeAt(0)\n    }\n\n    WriteString(str) {\n\tfor (var i = 0; i < str.length; i++)\n\t    this.buf[this.pos++] = str.charCodeAt(i)\n\tthis.buf[this.pos++] = 0\n    }\n\n    WriteData(buf, len) {\n\tfor (var i = 0; i < len; i++)\n\t    this.buf[this.pos++] = buf[i]\n    }\n\n    WriteStream(stream) {\n\tthis.WriteData(stream.buf, stream.pos)\n    }\n\n    WriteUint16(u) {\n\t//this.buf.writeInt16LE(u, this.pos);\n\tthis.WriteByte(u&0xff)\n\tthis.WriteByte((u>>8)&0xff)\n    }\n\n    WriteUint32(u) {\n\tthis.buf.writeInt32LE(u, this.pos);\n\tthis.pos += 4;\n    }\n\n//    WriteUint7(i) {\n//\tdo {\n//\t    this.WriteByte((i & 0x7f) | ((i > 0x80) << 7));\n//\t    i >>= 7;\n//\t} while (i > 0);\n//    }\n\n    WriteUint7(i) {\n\tvar s = 0;\n\tvar X = i;\n\tdo {\n\t    s += 7;\n\t    X >>= 7;\n\t} while (X > 0);\n\n\tdo {\n\t    s -= 7;\n\t    this.WriteByte(((i >> s) & 0x7f) + ((s > 0) << 7))\n\t} while (s > 0);\n    }\n\n    WriteITF8(i) {\n\t// Horrid, ITF8 is unsigned, but we still write signed into it\n\tif (i < 0)\n\t    i = (1<<32) + i\n\n\tif (i <= 0x0000007f) {\n\t    // 1 byte\n\t    this.buf[this.pos++] = i\n\t} else if (i <= 0x00003fff) {\n\t    // 2 bytes\n\t    this.buf[this.pos++] = 0x80 | Math.floor(i / 256)\n\t    this.buf[this.pos++] = i & 0xff;\n\t} else if (i < 0x0001ffff) {\n\t    // 3 bytes\n\t    this.buf[this.pos++] = 0xc0 | Math.floor(i / 65536)\n\t    this.buf[this.pos++] = Math.floor(i / 256) & 0xff\n\t    this.buf[this.pos++] = i & 0xff;\n\t} else if (i < 0x0fffffff) {\n\t    // 4 bytes\n\t    this.buf[this.pos++] = 0xe0 | Math.floor(i / 16777216)\n\t    this.buf[this.pos++] = Math.floor(i / 65536) & 0xff\n\t    this.buf[this.pos++] = Math.floor(i /   256) & 0xff\n\t    this.buf[this.pos++] = i & 0xff;\n\t} else {\n\t    // 5 bytes; oddly using 4.5 bytes\n\t    this.buf[this.pos++] = 0xf0 | Math.floor(i / 268435456)\n\t    this.buf[this.pos++] = Math.floor(i / 1048576) & 0xff\n\t    this.buf[this.pos++] = Math.floor(i /    4096) & 0xff\n\t    this.buf[this.pos++] = Math.floor(i /       4) & 0xff\n\t    this.buf[this.pos++] = i & 0x0f;\n\t}\n    }\n\n    // ----------\n    // Writing from end of buffer going backwards.\n    // Needed by rANS codec.\n    WriteByteNeg(b) {\n\tthis.buf[--this.pos] = b;\n    }\n};\n","/*\n * Copyright (c) 2019-2020 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst IOStream = require(\"./iostream\");\n\n//----------------------------------------------------------------------\n// rANS primitives itself\n//\n// RansGet* is decoder side\n\nfunction RansGetCumulativeFreq(R) {\n    return R & 0xfff;\n}\n\nfunction RansGetSymbolFromFreq(C, f) {\n    // NOTE: Inefficient.\n    // In practice we would implement this via a precomputed\n    // lookup table C2S[f]; see RansBuildC2S below.\n    var s = 0;\n    while (f >= C[s+1])\n\ts++;\n\n    return s;\n}\n\nfunction RansBuildC2S(C) {\n    var C2S = new Array(0x1000);\n    var s = 0;\n    for (var f = 0; f < 0x1000; f++) {\n\twhile (f >= C[s+1])\n\t    s++;\n\tC2S[f] = s;\n    }\n    return C2S;\n}\n\nfunction RansAdvanceStep(R, c, f) {\n    return f * (R >> 12) + (R & 0xfff) - c;\n}\n\nfunction RansRenorm(src, R) {\n    while (R < (1<<23))\n\tR = (R << 8) + src.ReadByte();\n\n    return R;\n}\n\n\n// RanEnc* is for encoder\nfunction RansEncInit() {\n    return 1<<23;\n}\n\nfunction RansEncFlush(R, dst) {\n    dst.WriteByteNeg((R >> 24) & 0xff);\n    dst.WriteByteNeg((R >> 16) & 0xff);\n    dst.WriteByteNeg((R >>  8) & 0xff);\n    dst.WriteByteNeg((R >>  0) & 0xff);\n}\n\nfunction RansEncRenorm(R, dst, freq, scale_bits) {\n    var R_max = (((1 << 23) >> scale_bits) << 8) * freq;\n\n    while (R >= R_max) {\n\tdst.WriteByteNeg(R & 0xff);\n\tR >>= 8;\n    }\n    return R;\n}\n\n// Puts a symbol with frequency freq, cumulative freq start\n// and total freq 1<<scale_bits.\n//\n// Note with static probabilities, /freq and %freq could be\n// precomputed via multiplies and shifts.\nfunction RansEncPut(R, dst, start, freq, scale_bits) {\n    var scale = 1<<scale_bits;\n    R = RansEncRenorm(R, dst, freq, scale_bits);\n    R = (Math.floor(R / freq) << scale_bits) + (R % freq) + start;\n    return R;\n}\n\n//----------------------------------------------------------------------\n// Main rANS entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nfunction decode(src) {\n    var stream = new IOStream(src);\n    var order = stream.ReadByte();\n    var n_in  = stream.ReadUint32();\n    var n_out = stream.ReadUint32();\n\n    if (order == 0) {\n\treturn RansDecode0(stream, n_out)\n    } else {\n\treturn RansDecode1(stream, n_out)\n    }\n}\n\nfunction encode(src, order) {\n    //var stream = new IOStream(src);\n    //var n_in  = stream.ReadUint32();\n    //var n_out = stream.ReadUint32();\n\n    if (order == 0) {\n\treturn RansEncode0(src)\n    } else {\n\treturn RansEncode1(src)\n    }\n}\n\n//----------------------------------------------------------------------\n// Order-0 decoder\n\n// Decode a single table of order-0 frequences,\n// filling out the F and C arrays.\nfunction ReadFrequencies0(src, F, C) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++)\n\tF[i] = 0;\n\n    var sym = src.ReadByte();\n    var last_sym = sym;\n    var rle = 0;\n\n    // Read F[]\n    do {\n\tvar f = src.ReadITF8();\n\tF[sym] = f;\n\tif (rle > 0) {\n\t    rle--;\n\t    sym++;\n\t} else {\n\t    sym = src.ReadByte();\n\t    if (sym == last_sym+1)\n\t\trle = src.ReadByte();\n\t}\n\tlast_sym = sym;\n    } while (sym != 0);\n\n    // Compute C[] from F[]\n    C[0] = 0;\n    for (var i = 0; i <= 255; i++)\n\tC[i+1] = C[i] + F[i];\n}\n\nfunction RansDecode0(src, nbytes) {\n    // Decode frequencies\n    var F = new Array(256);\n    var C = new Array(256);\n    ReadFrequencies0(src, F, C);\n\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    var C2S = RansBuildC2S(C);\n\n    // Initialise rANS state\n    var R = new Array(4);\n    for (var i = 0; i < 4; i++)\n\tR[i] = src.ReadUint32();\n\n    // Main decode loop\n    var output = new Buffer.allocUnsafe(nbytes);\n    for (var i = 0; i < nbytes; i++) {\n\tvar i4 = i%4;\n\tvar f = RansGetCumulativeFreq(R[i4]);\n\tvar s = C2S[f]; // Equiv to RansGetSymbolFromFreq(C, f);\n\n\toutput[i] = s;\n\tR[i4] = RansAdvanceStep(R[i4], C[s], F[s]);\n\tR[i4] = RansRenorm(src, R[i4]);\n    }\n\n    return output;\n}\n\n//----------------------------------------------------------------------\n// Order-0 encoder\n\nfunction BuildFrequencies0(src, F) {\n    for (var i = 0; i < 256; i++)\n\tF[i] = 0;\n\n    for (var i = 0; i < src.length; i++)\n\tF[src[i]]++;\n}\n\nfunction NormaliseFrequencies0(F) {\n    // Compute total\n    var tot = 0;\n    for (var i = 0; i < 256; i++)\n\ttot += F[i];\n\n    // Scale total of frequencies to max\n    const max = (1<<12);\n    var scale = max / tot;\n    do {\n\tvar max_val = 0;\n\tvar max_idx = 0;\n\tvar renorm = 0;\n\ttot = 0;\n\tfor (var i = 0; i < 256; i++) {\n\t    if (F[i] == 0)\n\t\tcontinue\n\n\t    if (max_val < F[i]) {\n\t\tmax_val = F[i]\n\t\tmax_idx = i\n\t    }\n\n\t    F[i] = Math.floor(F[i] * scale);\n\t    if (F[i] == 0)\n\t\tF[i] = 1;\n\n\t    tot += F[i];\n\t}\n\n\t// Adjust new tot to ensure it matches.\n\tif (tot < max) {\n\t    // Too low, boost the most common symbol\n\t    F[max_idx] += max-tot;\n\t} else if (tot-max < F[max_idx]/2 && F[max_idx] > 2) {\n\t    // Too high, reduce the common symbol\n\t    F[max_idx] -= tot-max;\n\t} else if (tot != max) {\n\t    // Much too high, fudge scale and try again.\n\t    scale = scale * 0.99\n\t    renorm = 1;\n\t}\n    } while (renorm)\n}\n\nfunction WriteFrequencies0(out, F) {\n    var rle = 0;\n    for (var i = 0; i < 256; i++) {\n\tif (!F[i])\n\t    continue\n\n\t// Output Symbol if needed and Frequency\n\tif (rle > 0)\n\t    rle--\n\telse {\n\t    out.WriteByte(i)\n\n\t    if (i > 0 && F[i-1] > 0) {\n\t\t// We've encoded two symbol frequencies in a row.\n\t\t// How many more are there?  Store that count so\n\t\t// we can avoid writing consecutive symbols.\n\t\tfor (rle = i+1; rle<256 && F[rle]; rle++)\n\t\t    ;\n\t\trle -= i+1;\n\n\t\tout.WriteByte(rle);\n\t    }\n\t}\n\n\tout.WriteITF8(F[i])\n    }\n    out.WriteByte(0);\n}\n\nfunction RansEncode0(src) {\n    const nbytes = src.length\n    var output = new IOStream(\"\", 0, 257*3+9);\n\n    output.WriteByte(0);   // Order 0\n    output.WriteUint32(0); // compressed size: correct later\n    output.WriteUint32(0); // uncompressed size: correct later\n\n    // Compute frequencies\n    var F = new Array(256)\n    BuildFrequencies0(src, F)\n    NormaliseFrequencies0(F);\n    WriteFrequencies0(output, F);\n\n    // Compute cumulative frequencies\n    var C = new Array(256)\n    C[0] = 0;\n    for (var i = 1; i < 256; i++)\n\tC[i] = C[i-1] + F[i-1];\n\n    // Initialise rANS state\n    var R = new Array(4);\n    for (var i = 0; i < 4; i++)\n\tR[i] = RansEncInit();\n\n    var alloc = Math.floor(nbytes*1.05+100)\n    var rans_out = new IOStream(\"\", alloc, alloc)\n\n    // Main encode loop\n    for (var i = nbytes-1; i >= 0; i--)\n\tR[i%4] = RansEncPut(R[i%4], rans_out, C[src[i]], F[src[i]], 12);\n\n    for (var i = 3; i >= 0; i--)\n\tRansEncFlush(R[i], rans_out);\n\n    // Stitch blocks together into final output buffer\n    var freq_tab = output.pos\n    output.buf.writeInt32LE(freq_tab-9 + (rans_out.length - rans_out.pos), 1);\n    output.buf.writeInt32LE(nbytes, 5);\n\n    return Buffer.concat([output.buf.slice(0, output.pos),\n\t\t\t  rans_out.buf.slice(rans_out.pos, rans_out.length)],\n\t\t\t output.pos + rans_out.length - rans_out.pos);\n}\n\n//----------------------------------------------------------------------\n// Order-1 decoder\n\n// Decode a table of order-1 frequences,\n// filling out the F and C arrays.\nfunction ReadFrequencies1(src, F, C) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++) {\n\tF[i] = new Array(256);\n\tC[i] = new Array(256);\n\tfor (var j = 0; j < 256; j++)\n\t    F[i][j] = 0;\n    }\n\n    var sym = src.ReadByte();\n    var last_sym = sym;\n    var rle = 0;\n\n    // Read F[]\n    do {\n\tReadFrequencies0(src, F[sym], C[sym]);\n\n\tif (rle > 0) {\n\t    rle--;\n\t    sym++;\n\t} else {\n\t    sym = src.ReadByte();\n\t    if (sym == last_sym+1)\n\t\trle = src.ReadByte();\n\t}\n\tlast_sym = sym;\n    } while (sym != 0);\n}\n\nfunction RansDecode1(src, nbytes) {\n    // Decode frequencies\n    var F = new Array(256);\n    var C = new Array(256);\n    ReadFrequencies1(src, F, C);\n\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    var C2S = new Array(256);\n    for (var i = 0; i < 256; i++)\n\tC2S[i] = RansBuildC2S(C[i]);\n\n    // Initialise rANS state\n    var R = new Array(4);\n    var L = new Array(4);\n    for (var j = 0; j < 4; j++) {\n\tR[j] = src.ReadUint32();\n\tL[j] = 0;\n    }\n\n    // Main decode loop\n    var output = new Buffer.allocUnsafe(nbytes);\n    var nbytes4 = Math.floor(nbytes/4);\n    for (var i = 0; i < nbytes4; i++) {\n\tfor (var j = 0; j < 4; j++) {\n\t    var f = RansGetCumulativeFreq(R[j]);\n\n\t    //var s = RansGetSymbolFromFreq(C[L[j]], f);\n\t    var s = C2S[L[j]][f]; // Precomputed version of above\n\n\t    output[i+j*nbytes4] = s;\n\t    R[j] = RansAdvanceStep(R[j], C[L[j]][s], F[L[j]][s]);\n\t    R[j] = RansRenorm(src, R[j]);\n\t    L[j] = s;\n\t}\n    }\n\n    // Now deal with the remainder if buffer size is not a multiple of 4,\n    // using rANS state 3 exclusively.  (It'd have been nice to have\n    // designed this to just act as if we kept going with a bail out.)\n    i = 4*i;\n    while (i < nbytes) {\n\tvar f = RansGetCumulativeFreq(R[3]);\n\tvar s = RansGetSymbolFromFreq(C[L[3]], f);\n\toutput[i++] = s;\n\tR[3] = RansAdvanceStep(R[3], C[L[3]][s], F[L[3]][s]);\n\tR[3] = RansRenorm(src, R[3]);\n\tL[3] = s;\n    }\n\n    return output;\n}\n\n//----------------------------------------------------------------------\n// Order-1 encoder\n\nfunction BuildFrequencies1(src, F, F0) {\n    for (var i = 0; i < 256; i++) {\n\tF0[i] = 0;\n\tfor (var j = 0; j < 256; j++)\n\t    F[i][j] = 0;\n    }\n\n    var last = 0;\n    for (var i = 0; i < src.length; i++) {\n\tF0[src[i]]++;\n\tF[last][src[i]]++;\n\t//F[last][src[i]]++;\n\tlast = src[i];\n    }\n\n    // Also accept we'll be starting at 4 points, not just byte 0\n    F[0][src[1*(src.length >> 2)]]++;\n    F[0][src[2*(src.length >> 2)]]++;\n    F[0][src[3*(src.length >> 2)]]++;\n    F0[0] += 3;\n}\n\nfunction NormaliseFrequencies1(F, F0) {\n    for (var i = 0; i < 256; i++)\n\tif (F0[i])\n\t    NormaliseFrequencies0(F[i])\n}\n\nfunction WriteFrequencies1(out, F, F0) {\n    var rle = 0;\n    var last_sym = 0;\n\n    for (var i = 0; i < 256; i++) {\n\tif (!F0[i])\n\t    continue\n\n\t// Output Symbol if needed and Frequency\n\tif (rle > 0)\n\t    rle--\n\telse {\n\t    out.WriteByte(i)\n\n\t    if (i > 0 && F0[i-1] > 0) {\n\t\tfor (rle = i+1; rle<256 && F0[rle]; rle++)\n\t\t    ;\n\t\trle -= i+1;\n\t\tout.WriteByte(rle);\n\t    }\n\t}\n\n\tWriteFrequencies0(out, F[i]);\n    }\n    out.WriteByte(0);\n}\n\nfunction RansEncode1(src) {\n    const nbytes = src.length;\n    var output = new IOStream(\"\", 0, 257*257*3+9);\n\n    output.WriteByte(1);   // Order 0\n    output.WriteUint32(0); // compressed size: correct later\n    output.WriteUint32(0); // uncompressed size: correct later\n\n    // Compute frequencies\n    var F0 = new Array(256)\n    var F = new Array(256)\n    var C = new Array(256)\n    for (var i = 0; i < 256; i++) {\n\tF[i] = new Array(256);\n\tC[i] = new Array(256);\n    }\n\n    BuildFrequencies1(src, F, F0)\n    NormaliseFrequencies1(F, F0);\n    WriteFrequencies1(output, F, F0);\n\n    // Compute cumulative frequencies\n    for (var i = 0; i < 256; i++) {\n\tif (!F0[i])\n\t    continue;\n\n\tC[i][0] = 0;\n\tfor (var j = 1; j < 256; j++)\n\t    C[i][j] = C[i][j-1] + F[i][j-1];\n    }\n\n    // Initialise rANS state\n    var R = new Array(4);\n    var L = new Array(4);\n    for (var j = 0; j < 4; j++) {\n\tR[j] = RansEncInit();\n\tL[j] = 0;\n    }\n    var rans_out = new IOStream(\"\", nbytes, nbytes);\n\n    // We have 4 rans codecs running in parallel on its own 1/4tr of buffer\n    var nbytes4 = Math.floor(nbytes/4);\n    var idx = new Array(4);\n    var last = new Array(4)\n    for (var j = 0; j < 4; j++) {\n\tidx[j] = (j+1)*nbytes4 - 2;\n\tlast[j] = src[idx[j]+1]\n    }\n\n    // Deal with the remainder if not a multiple of 4\n    last[3] = src[nbytes-1];\n    for (var i = nbytes-2; i > 4*nbytes4-2; i--) {\n\tR[3] = RansEncPut(R[3], rans_out, C[src[i]][last[3]], F[src[i]][last[3]], 12);\n\tlast[3] = src[i];\n    }\n\n    // Main encode loop\n    while (idx[0] >= 0) {\n\tfor (var j = 3; j >= 0; j--) {\n\t    var s = src[idx[j]]\n\t    R[j] = RansEncPut(R[j], rans_out, C[s][last[j]], F[s][last[j]], 12);\n\t    last[j] = s;\n\t    idx[j]--;\n\t}\n    }\n\n    for (var j = 3; j >= 0; j--) {\n        R[j] = RansEncPut(R[j], rans_out, C[0][last[j]], F[0][last[j]], 12)\n    }\n\n    for (var i = 3; i >= 0; i--)\n\tRansEncFlush(R[i], rans_out);\n\n    // Stitch blocks together into final output buffer\n    var freq_tab = output.pos;\n    output.buf.writeInt32LE(freq_tab-9 + (rans_out.length - rans_out.pos), 1);\n    output.buf.writeInt32LE(nbytes, 5);\n\n    return Buffer.concat([output.buf.slice(0, output.pos),\n\t\t\t  rans_out.buf.slice(rans_out.pos, rans_out.length)],\n\t\t\t output.pos + rans_out.length - rans_out.pos);\n}\n\nmodule.exports = { decode, encode }\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst IOStream = require(\"./iostream\");\n\n//----------------------------------------------------------------------\n// rANS primitives itself\n//\n// RansGet* is decoder side\n\nfunction RansGetCumulativeFreq(R, bits) {\n    return R & ((1<<bits)-1)\n}\n\nfunction RansGetSymbolFromFreq(C, f) {\n    // NOTE: Inefficient.\n    // In practice we would implement this via a precomputed\n    // lookup table C2S[f]; see RansBuildC2S below.\n    var s = 0;\n    while (f >= C[s+1])\n\ts++;\n\n    //console.error(f, C, s)\n\n    return s;\n}\n\nfunction RansBuildC2S(C, bits) {\n    var max = 1<<bits\n    var C2S = new Array(max);\n    var s = 0;\n    for (var f = 0; f < max; f++) {\n\twhile (f >= C[s+1])\n\t    s++;\n\tC2S[f] = s;\n    }\n    return C2S;\n}\n\nfunction RansAdvanceStep(R, c, f, bits) {\n    return f * (R >> bits) + (R & ((1<<bits)-1)) - c;\n}\n\nfunction RansRenorm(src, R) {\n    if (R < (1<<15))\n\tR = (R << 16) + src.ReadUint16();\n\n    return R;\n}\n\n\n// RanEnc* is for encoder\nfunction RansEncInit() {\n    return 1<<15;\n}\n\nfunction RansEncFlush(R, dst) {\n    dst.WriteByteNeg((R >> 24) & 0xff);\n    dst.WriteByteNeg((R >> 16) & 0xff);\n    dst.WriteByteNeg((R >>  8) & 0xff);\n    dst.WriteByteNeg((R >>  0) & 0xff);\n}\n\nfunction RansEncRenorm(R, dst, freq, scale_bits) {\n    //var R_max = (((1 << 15) >> scale_bits) << 16) * freq;\n    var R_max = (1 << (31-scale_bits)) * freq\n\n    while (R >= R_max) {\n\tdst.WriteByteNeg((R>>8) & 0xff);\n\tdst.WriteByteNeg(R & 0xff);\n\tR >>= 16;\n    }\n    return R;\n}\n\n// Puts a symbol with frequency freq, cumulative freq start\n// and total freq 1<<scale_bits.\n//\n// Note with static probabilities, /freq and %freq could be\n// precomputed via multiplies and shifts.\nfunction RansEncPut(R, dst, start, freq, scale_bits) {\n    var scale = 1<<scale_bits;\n    R = RansEncRenorm(R, dst, freq, scale_bits);\n    R = (Math.floor(R / freq) << scale_bits) + (R % freq) + start;\n    return R;\n}\n\n\n//----------------------------------------------------------------------\n// Run length encoding\nfunction EncodeRLE(src) {\n    // Step 1: find which symbols benefit from RLE\n    var L = new Array(256)\n    for (var i = 0; i < 256; i++)\n\tL[i] = 0\n\n    var last = -1\n    for (var i = 0; i < src.length; i++) {\n\tL[src[i]] += src[i] == last ? 1 : -1\n\tlast = src[i]\n    }\n\n    var nrle = 0;\n    for (var i = 0; i < 256; i++)\n\tif (L[i] > 0)\n\t    nrle++\n\n    if (!nrle) {\n\t// Format cannot cope with zero RLE symbols, so pick one!\n\tnrle = 1;\n\tL[0] = 1;\n    }\n\n    // Start meta-data as list of symbols to RLE\n    var meta = new IOStream(\"\", 0, nrle+1 + src.length)\n    meta.WriteByte(nrle)\n    for (var i = 0; i < 256; i++)\n\tif (L[i] > 0)\n\t    meta.WriteByte(i)\n\n    // Step 2: Now apply RLE itself\n    var data = new Buffer.allocUnsafe(src.length)\n    var dpos = 0\n    for (var i = 0; i < src.length; i++) {\n\tdata[dpos++] = src[i]\n\tif (L[src[i]] > 0) {\n\t    last = src[i];\n\t    var run = 0;\n\t    while (i+run+1 < src.length && src[i+run+1] == last)\n\t\trun++;\n\t    meta.WriteUint7(run)\n\t    i += run\n\t}\n    }\n\n    // Compress the meta-data\n    var cmeta = RansEncode0(meta.buf.slice(0, meta.pos))\n    var hdr = new IOStream(\"\", 0, 16)\n    hdr.WriteUint7(meta.pos*2)   // Uncompressed meta-data length + compressed-bit-flag(0)\n    hdr.WriteUint7(dpos)         // Length of RLE encoded data\n    hdr.WriteUint7(cmeta.length) // Compressed meta-data length\n    var meta = Buffer.concat([hdr.buf.slice(0,hdr.pos), cmeta])\n\n    return [meta, data.slice(0, dpos)]\n}\n\nfunction DecodeRLEMeta(src) {\n    var u_meta_len = src.ReadUint7()\n    var rle_len = src.ReadUint7()\n\n    // Decode RLE lengths\n    if (u_meta_len & 1) {\n\tvar rle_meta = src.ReadData((u_meta_len-1)/2)\n    } else {\n\tvar comp_meta_len = src.ReadUint7()\n\tvar rle_meta = src.ReadData(comp_meta_len)\n\trle_meta = RansDecode0(new IOStream(rle_meta), u_meta_len/2)\n    }\n\n    // Decode list of symbols for which RLE lengths are applied\n    var rle_meta = new IOStream(rle_meta)\n    var L = new Array(256)\n    var n = rle_meta.ReadByte()\n    if (n == 0)\n\tn = 256;\n    for (var i = 0; i < n; i++)\n\tL[rle_meta.ReadByte()] = 1\n\n    return [L, rle_meta, rle_len]\n}\n\nfunction DecodeRLE(buf, L, rle_meta, len) {\n    var src = new IOStream(buf);\n\n    var out = new Buffer.allocUnsafe(len)\n\n    // Expand up buf+meta to out; i = buf index, j = out index\n    var j = 0;\n    for (var i = 0; j < len; i++) {\n\tvar sym = buf[i];\n\tif (L[sym]) {\n\t    var run = rle_meta.ReadUint7()\n\t    for (var r = 0; r <= run; r++)\n\t\tout[j++] = sym\n\t} else {\n\t    out[j++] = sym\n\t}\n    }\n\n    return out\n}\n\n//----------------------------------------------------------------------\n// Bit packing\n\nfunction EncodePack(src) {\n    // Step 1: identify number of distinct symbols\n    var F = new Array(256)\n    for (var i = 0; i < 256; i++)\n\tF[i] = 0\n\n    for (var i = 0; i < src.length; i++)\n\tF[src[i]]++\n\n    var P = new Array(256)\n    var nsym = 0;\n    for (var i = 0; i < 256; i++)\n\tif (F[i] > 0)\n\t    P[i] = nsym++\n\n    if (nsym > 16) {\n\t//console.error(\"Too many symbols to pack:\",nsym)\n\treturn\n    }\n\n\n    // Pack data\n    if (nsym <= 1) {\n\t// Constant\n\tvar data = new Buffer.allocUnsafe(0)\n    }\n\n    else if (nsym <= 2) {\n\t// 1 bit per value\n\tvar data = new Buffer.allocUnsafe(Math.ceil(src.length/8))\n\tvar j = -1\n\tfor (i = 0; i < src.length; i++) {\n\t    if (i % 8 == 0)\n\t\tdata[++j] = 0\n\t    data[j] += P[src[i]] << (i % 8)\n\t}\n    }\n\n    else if (nsym <= 4) {\n\t// 2 bits per value\n\tvar data = new Buffer.allocUnsafe(Math.ceil(src.length/4))\n\tvar j = -1\n\tfor (i = 0; i < src.length; i++) {\n\t    if (i % 4 == 0)\n\t\tdata[++j] = 0\n\t    data[j] += P[src[i]] << ((i % 4) * 2)\n\t}\n    }\n\n    else {\n\t// 4 bits per value\n\tvar data = new Buffer.allocUnsafe(Math.ceil(src.length/2))\n\tvar j = -1\n\tfor (i = 0; i < src.length; i++) {\n\t    if (i % 2 == 0)\n\t\tdata[++j] = 0\n\t    data[j] += P[src[i]] << ((i % 2) * 4)\n\t}\n    }\n\n\n    // Produce pack meta-data\n    var meta = new IOStream(\"\", 0, nsym+5)\n    meta.WriteByte(nsym)\n    var j = 0\n    for (var i = 0; i < 256; i++) {\n\tif (F[i] > 0) {\n\t    F[i] = j++;\n\t    meta.WriteByte(i)\n\t}\n    }\n    meta.WriteUint7(data.length)\n\n    return [meta.buf.slice(0, meta.pos), data]\n}\n\n\n// Pack meta data is the number and value of distinct symbols plus\n// the length of the packed byte stream.\nfunction DecodePackMeta(src) {\n    var nsym = src.ReadByte()\n    var P = new Array(nsym)\n\n    for (var i = 0; i < nsym; i++)\n\tP[i] = src.ReadByte()\n\n    var len = src.ReadUint7()\n\n    return [P, nsym, len]\n}\n\n// Extract bits from src producing output of length len.\n// Nsym is number of distinct symbols used.\nfunction DecodePack(data, P, nsym, len) {\n    var out = new Buffer.allocUnsafe(len)\n    var j = 0;\n\n    // Constant value\n    if (nsym <= 1) {\n\tfor (var i = 0; i < len; i++)\n\t    out[i] = P[0]\n    }\n\n    // 1 bit per value\n    else if (nsym <= 2) {\n\tfor (i = 0; i < len; i++) {\n\t    if (i % 8 == 0)\n\t\tvar v = data[j++];\n\n\t    out[i] = P[v & 1]\n\t    v >>= 1\n\t}\n    }\n\n    // 2 bits per value\n    else if (nsym <= 4) {\n\tfor (i = 0; i < len; i++) {\n\t    if (i % 4 == 0)\n\t\tvar v = data[j++];\n\n\t    out[i] = P[v & 3]\n\t    v >>= 2\n\t}\n    }\n\n    // 4 bits per value\n    else if (nsym <= 16) {\n\tfor (i = 0; i < len; i++) {\n\t    if (i % 2 == 0)\n\t\tvar v = data[j++];\n\n\t    out[i] = P[v & 15]\n\t    v >>= 4\n\t}\n    }\n\n    return out\n}\n\n\n//----------------------------------------------------------------------\n// 4 way interleaving.\n// This is simply 4 rANS streams interleaved to form bytes 0,4,8...,\n// 1,5,9..., 2,6,10... and 3,7,11...\n//\n// It works well when the distributions differ for each of the 4 bytes,\n// for example when compressing a series of 32-bit integers.\n//\n// Maybe make this more general purpose of X* where we specify the stripe\n// size instead of fixing it at 4?\nfunction RansEncodeStripe(hdr, src, N) {\n    if (N == 0)\n\tN = 4; // old default\n\n    // Split into multiple streams\n    var part = new Array(N)\n    var ulen = new Array(N)\n    for (var s = 0; s < N; s++) {\n\tulen[s] = Math.floor(src.length / N) + ((src.length % N) > s);\n\tpart[s] = new Array(ulen[s])\n    }\n\n    for (var x = 0, i = 0; i < src.length; i+=N, x++) {\n\tfor (var j = 0; j < N; j++)\n\t    if (x < part[j].length)\n\t\tpart[j][x] = src[i+j]\n    }\n\n    // Compress each part\n    var comp = new Array(N)\n    var total = 0\n    for (var s = 0; s < N; s++) {\n\t// Example: try O0 and O1 and choose best\n\tvar comp0 = encode(part[s], 0)\n\tvar comp1 = encode(part[s], 1)\n\tcomp[s] = (comp1.length < comp0.length) ? comp1 : comp0\n\ttotal += comp[s].length\n    }\n\n    // Serialise\n    var out = new IOStream(\"\", 0, total+5*N+1)\n    out.WriteByte(N)\n    for (var s = 0; s < N; s++)\n\tout.WriteUint7(comp[s].length)\n\n    for (var s = 0; s < N; s++)\n\tout.WriteData(comp[s], comp[s].length)\n\n    return out.buf.slice(0, out.buf.pos)\n}\n\nfunction RansDecodeStripe(src, len) {\n    var N = src.ReadByte()\n\n    // Retrieve lengths\n    var clen = new Array(N)\n    var ulen = new Array(N)\n    for (var j = 0; j < N; j++)\n\tclen[j] = src.ReadUint7()\n\n    // Decode streams\n    var T = new Array(N);\n    for (var j = 0; j < N; j++) {\n\tulen[j] = Math.floor(len / N) + ((len % N) > j)\n\tT[j] = RansDecodeStream(src, ulen[j])\n    }\n\n    // Transpose\n    var out = new Buffer.allocUnsafe(len)\n    for (var j = 0; j < N; j++) {\n\tfor (var i = 0; i < ulen[j]; i++) {\n\t    out[i*N + j] = T[j][i];\n\t}\n    }\n\n    return out;\n}\n\n\n//----------------------------------------------------------------------\n// Main rANS entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nfunction decode(src) {\n    var stream = new IOStream(src)\n    return RansDecodeStream(stream, 0)\n}\n\nfunction RansDecodeStream(stream, n_out) {\n    var format = stream.ReadByte();\n    var order  = format & 1\n    var stripe = format & 8\n    var nosz   = format & 16\n    var cat    = format & 32\n    var rle    = format & 64\n    var pack   = format & 128\n\n    if (!nosz)\n\tn_out = stream.ReadUint7();\n\n    // N-way interleaving\n    if (stripe)\n\treturn RansDecodeStripe(stream, n_out)\n\n    // Bit packing\n    if (pack) {\n\tvar pack_len = n_out\n\tvar [P, nsym, n_out] = DecodePackMeta(stream)\n    }\n\n    // Run length encoding\n    if (rle) {\n\tvar rle_len = n_out\n\tvar [L, rle_meta, n_out] = DecodeRLEMeta(stream)\n    }\n\n    // Uncompress data (all, packed or run literals)\n    if (cat)\n\tvar buf = stream.ReadData(n_out)\n    else if (order == 0)\n\tvar buf = RansDecode0(stream, n_out)\n    else\n\tvar buf = RansDecode1(stream, n_out)\n\n    // Apply expansion transforms\n    if (rle)\n\tbuf = DecodeRLE(buf, L, rle_meta, rle_len)\n\n    if (pack)\n\tbuf = DecodePack(buf, P, nsym, pack_len)\n\n    return buf\n}\n\nfunction encode(src, format) {\n    var hdr = new IOStream(\"\", 0, 10);\n    hdr.WriteByte(format);\n\n    var order = format & 1\n    var stripe= format & 8\n    var nosz  = format & 16\n    var cat   = format & 32\n    var rle   = format & 64\n    var pack  = format & 128\n\n    var N     = format>>8\n\n    if (!nosz)\n\thdr.WriteUint7(src.length);\n\n    if (stripe)\n\treturn Buffer.concat([hdr.buf.slice(0, hdr.pos), RansEncodeStripe(hdr, src, N)])\n\n    var pack_meta = new Buffer.alloc(0)\n    if (pack)\n\t[pack_meta, src] = EncodePack(src)\n\n    var rle_meta = new Buffer.alloc(0)\n    if (rle)\n\t[rle_meta, src] = EncodeRLE(src)\n\n    if (src.length < 4 && order == 1) {\n\t// Protect against short order-1 data due to RLE/Pack\n\torder = 0\n\thdr.buf[0] &= ~1\n    }\n\n    if (cat)\n\tvar comp = src\n    else if (order == 0)\n\tvar comp = RansEncode0(src)\n    else\n\tvar comp = RansEncode1(src)\n\n    return Buffer.concat([hdr.buf.slice(0,hdr.pos), pack_meta, rle_meta, comp])\n}\n\n//----------------------------------------------------------------------\n// Order-0 decoder\n\nfunction ReadAlphabet(src) {\n    var A = new Array(256)\n    for (var i = 0; i < 256; i++)\n\tA[i] = 0;\n\n    var rle = 0\n    var sym = src.ReadByte()\n    var last_sym = sym\n\n    do {\n\tA[sym] = 1;\n\tif (rle > 0) {\n\t    rle--\n\t    sym++\n\t} else {\n\t    sym = src.ReadByte()\n\t    if (sym == last_sym+1)\n\t\trle = src.ReadByte()\n\t}\n\tlast_sym = sym\n    } while (sym != 0)\n\n    return A\n}\n\n// Decode a single table of order-0 frequences,\n// filling out the F and C arrays.\nfunction ReadFrequencies0(src, F, C) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++)\n\tF[i] = 0;\n\n    // Fetch alphabet\n    var A = ReadAlphabet(src);\n\n    // Fetch frequencies for the symbols listed in our alphabet\n    for (var i = 0; i < 256; i++) {\n\tif (A[i] > 0)\n\t    F[i] = src.ReadUint7()\n    }\n\n    NormaliseFrequencies0_Shift(F, 12)\n\n    // Compute C[] from F[]\n    C[0] = 0;\n    for (var i = 0; i <= 255; i++)\n\tC[i+1] = C[i] + F[i];\n}\n\nfunction RansDecode0(src, nbytes) {\n    // Decode frequencies\n    var F = new Array(256);\n    var C = new Array(256);\n    ReadFrequencies0(src, F, C);\n\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    var C2S = RansBuildC2S(C, 12);\n\n    // Initialise rANS state\n    var R = new Array(4);\n    for (var i = 0; i < 4; i++)\n\tR[i] = src.ReadUint32();\n\n    // Main decode loop\n    var output = new Buffer.allocUnsafe(nbytes);\n    for (var i = 0; i < nbytes; i++) {\n\tvar i4 = i%4;\n\tvar f = RansGetCumulativeFreq(R[i4], 12);\n\tvar s = C2S[f]; // Equiv to RansGetSymbolFromFreq(C, f);\n\n\toutput[i] = s;\n\tR[i4] = RansAdvanceStep(R[i4], C[s], F[s], 12);\n\tR[i4] = RansRenorm(src, R[i4]);\n    }\n\n    return output;\n}\n\n//----------------------------------------------------------------------\n// Order-0 encoder\n\nfunction BuildFrequencies0(src, F) {\n    for (var i = 0; i < 256; i++)\n\tF[i] = 0;\n\n    for (var i = 0; i < src.length; i++)\n\tF[src[i]]++;\n}\n\nfunction NormaliseFrequencies0(F, bits) {\n    // Compute total\n    var tot = 0;\n    for (var i = 0; i < 256; i++)\n\ttot += F[i];\n\n    // Scale total of frequencies to max\n    const max = (1<<bits);\n    var scale = max / tot;\n    do {\n\tvar max_val = 0;\n\tvar max_idx = 0;\n\tvar renorm = 0;\n\ttot = 0;\n\tfor (var i = 0; i < 256; i++) {\n\t    if (F[i] == 0)\n\t\tcontinue\n\n\t    if (max_val < F[i]) {\n\t\tmax_val = F[i]\n\t\tmax_idx = i\n\t    }\n\n\t    F[i] = Math.floor(F[i] * scale);\n\t    if (F[i] == 0)\n\t\tF[i] = 1;\n\n\t    tot += F[i];\n\t}\n\n\t// Adjust new tot to ensure it matches.\n\tif (tot < max) {\n\t    // Too low, boost the most common symbol\n\t    F[max_idx] += max-tot;\n\t} else if (tot-max < F[max_idx]/2 && F[max_idx] > 2) {\n\t    // Too high, reduce the common symbol\n\t    F[max_idx] -= tot-max;\n\t} else if (tot != max) {\n\t    // Much too high, fudge scale and try again.\n\t    scale = max / tot;\n\t    renorm = 1;\n\t}\n    } while (renorm)\n}\n\nfunction NormaliseFrequencies0_Shift(F, bits) {\n    // Compute total and number of bits to shift by\n    var tot = 0;\n    for (var i = 0; i < 256; i++)\n\ttot += F[i];\n\n    if (tot == 0 || tot == (1<<bits))\n\treturn\n\n    var shift = 0;\n    while (tot < (1<<bits)) {\n\ttot *= 2;\n\tshift++;\n    }\n\n    // Scale total of frequencies to (1<<bits)\n    for (var i = 0; i < 256; i++)\n\tF[i] <<= shift;\n}\n\nfunction WriteAlphabet(out, F) {\n    var rle = 0;\n    for (var i = 0; i < 256; i++) {\n\tif (!F[i])\n\t    continue\n\n\tif (rle > 0)\n\t    rle--\n\telse {\n\t    out.WriteByte(i)\n\n\t    if (i > 0 && F[i-1] > 0) {\n\t\t// We've encoded two symbol frequencies in a row.\n\t\t// How many more are there?  Store that count so\n\t\t// we can avoid writing consecutive symbols.\n\t\tfor (rle = i+1; rle<256 && F[rle]; rle++)\n\t\t    ;\n\t\trle -= i+1;\n\n\t\tout.WriteByte(rle);\n\t    }\n\t}\n    }\n    out.WriteByte(0)\n}\n\nfunction WriteFrequencies0(out, F) {\n    WriteAlphabet(out, F)\n\n    for (var i = 0; i < 256; i++) {\n\tif (F[i])\n\t    out.WriteUint7(F[i])\n    }\n}\n\nfunction RansEncode0(src) {\n    const nbytes = src.length;\n    var output = new IOStream(\"\", 0, 257*3+9);\n\n    // Compute frequencies\n    var F = new Array(256)\n    BuildFrequencies0(src, F)\n    var bit_size = Math.ceil(Math.log2(nbytes));\n    if (bit_size > 12)\n\tbit_size = 12;\n    NormaliseFrequencies0(F, bit_size);\n    WriteFrequencies0(output, F);\n    NormaliseFrequencies0(F, 12);\n\n    // Compute cumulative frequencies\n    var C = new Array(256)\n    C[0] = 0;\n    for (var i = 1; i < 256; i++)\n\tC[i] = C[i-1] + F[i-1];\n\n    // Initialise rANS state\n    var R = new Array(4);\n    for (var i = 0; i < 4; i++)\n\tR[i] = RansEncInit();\n\n    // Allow expansion room if trying to compress random data.\n    var rans_out = new IOStream(\"\", (nbytes*1.05+100)>>0, (nbytes*1.05+100)>>0);\n\n    // Main encode loop\n    for (var i = nbytes-1; i >= 0; i--)\n\tR[i%4] = RansEncPut(R[i%4], rans_out, C[src[i]], F[src[i]], 12);\n\n    for (var i = 3; i >= 0; i--)\n\tRansEncFlush(R[i], rans_out);\n\n    // Stitch blocks together into final output buffer\n    //console.error(\"pos=\",rans_out.pos, \" len=\",rans_out.length)\n    //console.error(rans_out.buf.slice(rans_out.pos, rans_out.length))\n    return Buffer.concat([output.buf.slice(0, output.pos),\n\t\t\t  rans_out.buf.slice(rans_out.pos, rans_out.length)],\n\t\t\t output.pos + rans_out.length - rans_out.pos);\n}\n\n//----------------------------------------------------------------------\n// Order-1 decoder\n\n// Decode a table of order-1 frequences,\n// filling out the F and C arrays.\nfunction ReadFrequencies1(src, F, C, shift) {\n    // Initialise; not in the specification - implicit?\n    for (var i = 0; i < 256; i++) {\n\tF[i] = new Array(256);\n\tC[i] = new Array(256);\n\tfor (var j = 0; j < 256; j++)\n\t    F[i][j] = 0;\n    }\n\n    // Fetch alphabet\n    var A = ReadAlphabet(src);\n\n    // Read F[]\n    for (var i = 0; i < 256; i++) {\n\tif (!A[i])\n\t    continue\n\n\tvar run = 0;\n\tfor (var j = 0; j < 256; j++) {\n\t    if (!A[j])\n\t\tcontinue\n\n\t    if (run > 0) {\n\t\trun--\n\t    } else {\n\t\tF[i][j] = src.ReadUint7();\n\t\tif (F[i][j] == 0)\n\t\t    run = src.ReadByte();\n\t    }\n\t}\n\n\tNormaliseFrequencies0_Shift(F[i], shift)\n\n\t// Compute C[] from F[]\n\tC[i][0] = 0;\n\tfor (var j = 0; j < 256; j++)\n\t    C[i][j+1] = C[i][j] + F[i][j];\n    }\n}\n\nfunction RansDecode1(src, nbytes) {\n    // FIXME: this bit is missing from the RansDecode0 pseudocode.\n\n    var comp = src.ReadByte();\n    var shift = comp >> 4;\n\n    var freq_src = src\n    if (comp & 1) {\n\tvar ulen = src.ReadUint7()\n\tvar clen = src.ReadUint7()\n\tvar comp = new IOStream(src.ReadData(clen))\n\tvar freq_src = new IOStream(RansDecode0(comp, ulen));\n    }\n\n    // Decode frequencies\n    var F = new Array(256);\n    var C = new Array(256);\n    ReadFrequencies1(freq_src, F, C, shift);\n\n    // Fast lookup to avoid slow RansGetSymbolFromFreq\n    var C2S = new Array(256);\n    for (var i = 0; i < 256; i++)\n\t// Could do only for symbols in alphabet?\n\tC2S[i] = RansBuildC2S(C[i], shift);\n\n    // Initialise rANS state\n    var R = new Array(4);\n    var L = new Array(4);\n    for (var j = 0; j < 4; j++) {\n\tR[j] = src.ReadUint32();\n\tL[j] = 0;\n    }\n\n    // Main decode loop\n    var output = new Buffer.allocUnsafe(nbytes);\n    var nbytes4 = Math.floor(nbytes/4);\n    for (var i = 0; i < nbytes4; i++) {\n\tfor (var j = 0; j < 4; j++) {\n\t    var f = RansGetCumulativeFreq(R[j], shift);\n\n\t    //var s = RansGetSymbolFromFreq(C[L[j]], f);\n\t    var s = C2S[L[j]][f]; // Precomputed version of above\n\n\t    output[i+j*nbytes4] = s;\n\t    R[j] = RansAdvanceStep(R[j], C[L[j]][s], F[L[j]][s], shift);\n\t    R[j] = RansRenorm(src, R[j]);\n\t    L[j] = s;\n\t}\n    }\n\n    // Now deal with the remainder if buffer size is not a multiple of 4,\n    // using rANS state 3 exclusively.  (It'd have been nice to have\n    // designed this to just act as if we kept going with a bail out.)\n    i = 4*i;\n    while (i < nbytes) {\n\tvar f = RansGetCumulativeFreq(R[3], shift);\n\tvar s = RansGetSymbolFromFreq(C[L[3]], f);\n\toutput[i++] = s;\n\tR[3] = RansAdvanceStep(R[3], C[L[3]][s], F[L[3]][s], shift);\n\tR[3] = RansRenorm(src, R[3]);\n\tL[3] = s;\n    }\n\n    return output;\n}\n\n//----------------------------------------------------------------------\n// Order-1 encoder\n\nfunction BuildFrequencies1(src, F, F0) {\n    for (var i = 0; i < 256; i++) {\n\tF0[i] = 0;\n\tfor (var j = 0; j < 256; j++)\n\t    F[i][j] = 0;\n    }\n\n    var last = 0;\n    for (var i = 0; i < src.length; i++) {\n\tF0[last]++;\n\tF[last][src[i]]++;\n\tlast = src[i];\n    }\n    F0[last]++;\n\n    // Also accept we'll be starting at 4 points, not just byte 0\n    F[0][src[1*(src.length >> 2)]]++;\n    F[0][src[2*(src.length >> 2)]]++;\n    F[0][src[3*(src.length >> 2)]]++;\n    F0[0] += 3;\n}\n\nfunction NormaliseFrequencies1(F, F0, shift) {\n\n    for (var i = 0; i < 256; i++) {\n\tif (!F0[i])\n\t    continue;\n\n\tvar bit_size = Math.ceil(Math.log2(F0[i]));\n\tif (bit_size > shift)\n\t    bit_size = shift;\n\n\tNormaliseFrequencies0(F[i], bit_size)\n    }\n}\n\nfunction NormaliseFrequencies1_Shift(F, F0, shift) {\n    for (var i = 0; i < 256; i++)\n\tif (F0[i])\n\t    NormaliseFrequencies0_Shift(F[i], shift)\n}\n\nfunction WriteFrequencies1(out, F, F0) {\n    WriteAlphabet(out, F0)\n\n    for (var i = 0; i < 256; i++) {\n\tif (!F0[i])\n\t    continue\n\n\tvar run = 0\n\tfor (var j = 0; j < 256; j++) {\n\t    if (!F0[j])\n\t\tcontinue\n\n\t    if (run) {\n\t\trun--\n\t    } else {\n\t\tout.WriteUint7(F[i][j])\n\n\t\tif (!F[i][j]) {\n\t\t    // Count how many more zero-freqs we have\n\t\t    for (var k = j+1; k < 256; k++) {\n\t\t\tif (!F0[k])\n\t\t\t    continue\n\n\t\t\tif (F[i][k] == 0)\n\t\t\t    run++\n\t\t\telse\n\t\t\t    break\n\t\t    }\n\t\t    out.WriteByte(run)\n\t\t}\n\t    }\n\t}\n    }\n}\n\nfunction RansEncode1(src) {\n    const nbytes = src.length;\n    var output = new IOStream(\"\", 0, 257*257*3+9);\n\n    // Compute frequencies\n    var F0 = new Array(256)\n    var F = new Array(256)\n    var C = new Array(256)\n    for (var i = 0; i < 256; i++) {\n\tF[i] = new Array(256);\n\tC[i] = new Array(256);\n    }\n\n    // Frequency precision\n    var shift = 12;\n\n    BuildFrequencies1(src, F, F0)\n    NormaliseFrequencies1(F, F0, shift);\n\n    // Store frequencies, possibly compressed\n    var freq = new IOStream(\"\", 0, 257*257*3+9);\n\n    WriteFrequencies1(freq, F, F0);\n\n    var cfreq = RansEncode0(freq.buf.slice(0, freq.pos))\n    if (cfreq.length < freq.pos) {\n\toutput.WriteByte(1 | (shift<<4));\n\toutput.WriteUint7(freq.pos)\n\toutput.WriteUint7(cfreq.length)\n\toutput.WriteData(cfreq, cfreq.length);\n    } else {\n\toutput.WriteByte(0 | (shift<<4));\n\toutput.WriteData(freq.buf, freq.pos);\n    }\n\n    // Normalise and compute cumulative frequencies\n    NormaliseFrequencies1_Shift(F, F0, shift);\n    for (var i = 0; i < 256; i++) {\n\tif (!F0[i])\n\t    continue;\n\n\tC[i][0] = 0;\n\tfor (var j = 1; j < 256; j++)\n\t    C[i][j] = C[i][j-1] + F[i][j-1];\n    }\n\n    // Initialise rANS state\n    var R = new Array(4);\n    var L = new Array(4);\n    for (var j = 0; j < 4; j++) {\n\tR[j] = RansEncInit();\n\tL[j] = 0;\n    }\n    var rans_out = new IOStream(\"\", (nbytes*1.05+100)>>0, (nbytes*1.05+100)>>0);\n\n    // We have 4 rans codecs running in parallel on its own 1/4tr of buffer\n    var nbytes4 = Math.floor(nbytes/4);\n    var idx = new Array(4);\n    var last = new Array(4)\n    for (var j = 0; j < 4; j++) {\n\tidx[j] = (j+1)*nbytes4 - 2;\n\tlast[j] = src[idx[j]+1]\n    }\n\n    // Deal with the remainder if not a multiple of 4\n    last[3] = src[nbytes-1];\n    for (var i = nbytes-2; i > 4*nbytes4-2; i--) {\n\tR[3] = RansEncPut(R[3], rans_out, C[src[i]][last[3]], F[src[i]][last[3]], shift);\n\tlast[3] = src[i];\n    }\n\n    // Main encode loop\n    while (idx[0] >= 0) {\n\tfor (var j = 3; j >= 0; j--) {\n\t    var s = src[idx[j]]\n\t    R[j] = RansEncPut(R[j], rans_out, C[s][last[j]], F[s][last[j]], shift);\n\t    last[j] = s;\n\t    idx[j]--;\n\t}\n    }\n\n    for (var j = 3; j >= 0; j--) {\n        R[j] = RansEncPut(R[j], rans_out, C[0][last[j]], F[0][last[j]], shift)\n    }\n\n    for (var i = 3; i >= 0; i--)\n\tRansEncFlush(R[i], rans_out);\n\n    // Stitch blocks together into final output buffer\n    return Buffer.concat([output.buf.slice(0, output.pos),\n\t\t\t  rans_out.buf.slice(rans_out.pos, rans_out.length)],\n\t\t\t output.pos + rans_out.length - rans_out.pos);\n}\n\nmodule.exports = { decode, encode }\n","/*\n * Copyright (c) 2019 Genome Research Ltd.\n * Author(s): James Bonfield\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above\n *       copyright notice, this list of conditions and the following\n *       disclaimer in the documentation and/or other materials provided\n *       with the distribution.\n *\n *    3. Neither the names Genome Research Ltd and Wellcome Trust Sanger\n *       Institute nor the names of its contributors may be used to endorse\n *       or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH\n * LTD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Name tokeniser\n//\n// This is a reference implementation designed to match the\n// written specification as closely as possible.  It is *NOT*\n// an efficient implementation, but see comments below.\n\nconst IOStream  = require(\"./iostream\");\nconst rans      = require(\"./rans4x16\");\nconst arith_gen = require(\"./arith_gen\");\n\nvar arith = new arith_gen()\n\nconst TOK_TYPE    = 0\nconst TOK_STRING  = 1\nconst TOK_CHAR    = 2\nconst TOK_DIGITS0 = 3\nconst TOK_DZLEN   = 4\nconst TOK_DUP     = 5\nconst TOK_DIFF    = 6\nconst TOK_DIGITS  = 7\nconst TOK_DELTA   = 8\nconst TOK_DELTA0  = 9\nconst TOK_MATCH   = 10\nconst TOK_NOP     = 11\nconst TOK_END     = 12\n\n//----------------------------------------------------------------------\n// Token byte streams\nfunction DecodeTokenByteStreams(src, in_size, use_arith, nnames) {\n    var t = -1\n\n    var B = new Array(256)\n\n    while (!src.EOF()) {\n\tvar ttype = src.ReadByte()\n\tvar tok_new = ttype & 128\n\tvar tok_dup = ttype & 64\n\tvar type    = ttype & 63\n\n\tif (tok_new) {\n\t    t++\n\t    B[t] = new Array(13)\n\t}\n\n\tif (type != TOK_TYPE && tok_new) {\n\t    var M = new Array(nnames-1).fill(TOK_MATCH)\n\t    B[t][TOK_TYPE] = new IOStream(Buffer.from([type].concat(M)))\n        }\n\n\tif (tok_dup) {\n\t    var dup_pos  = src.ReadByte()\n\t    var dup_type = src.ReadByte()\n\t    B[t][type] = new IOStream(B[dup_pos][dup_type].buf)\n\t} else {\n\t    var clen = src.ReadUint7()\n\t    var data = src.ReadData(clen)\n\n\t    if (use_arith)\n\t\tB[t][type] = arith.decode(data)\n\t    else\n\t\tB[t][type] = rans.decode(data)\n\t    B[t][type] = new IOStream(B[t][type])\n\t}\n    }\n\n    return B\n}\n\n//----------------------------------------------------------------------\n// Token decode\nfunction LeftPadNumber(val, len) {\n    var str = val+\"\"\n    while (str.length < len)\n\tstr = \"0\" + str\n\n    return str\n}\n\nfunction DecodeSingleName(B, N, T, n) {\n    var type = B[0][TOK_TYPE].ReadByte()\n    var dist = B[0][type].ReadUint32()\n    var m = n - dist\n\n    if (type == TOK_DUP) {\n\tN[n] = N[m]\n\tT[n] = T[m]\n\treturn N[n]\n    }\n    \n    var t = 1\n    N[n] = \"\"\n    T[n] = new Array(256)\n    do {\n\ttype = B[t][TOK_TYPE].ReadByte()\n\n\tswitch(type) {\n\tcase TOK_CHAR:\n\t    T[n][t] = B[t][TOK_CHAR].ReadChar()\n\t    break\n\n\tcase TOK_STRING:\n\t    T[n][t] = B[t][TOK_STRING].ReadString()\n\t    break\n\t\n\tcase TOK_DIGITS:\n\t    T[n][t] = B[t][TOK_DIGITS].ReadUint32()\n\t    break\n\n\tcase TOK_DIGITS0:\n\t    var d = B[t][TOK_DIGITS0].ReadUint32()\n\t    var l = B[t][TOK_DZLEN].ReadByte()\n\t    T[n][t] = LeftPadNumber(d, l)\n\t    break\n\n\tcase TOK_DELTA:\n\t    T[n][t] = (T[m][t]>>0) + B[t][TOK_DELTA].ReadByte()\n\t    break\n\n\tcase TOK_DELTA0:\n\t    var d = (T[m][t]>>0) + B[t][TOK_DELTA0].ReadByte()\n\t    var l = T[m][t].length\n\t    T[n][t] = LeftPadNumber(d, l)\n\t    break\n\n\tcase TOK_MATCH:\n\t    T[n][t] = T[m][t]\n\t    break\n\n\tdefault:\n\t    T[n][t] = \"\"\n\t    break\n\t}\n\n\tN[n] += T[n][t++]\n    } while (type != TOK_END)\n\n    return N[n]\n}\n\n//----------------------------------------------------------------------\n// Main tokeniser decode entry function: decodes a compressed src and\n// returns the uncompressed buffer.\nfunction decode(src, len, separator) {\n    var src = new IOStream(src)\n    var ulen = src.ReadUint32()\n    var nnames = src.ReadUint32()\n    var use_arith = src.ReadByte()\n\n    var B = DecodeTokenByteStreams(src, len, use_arith, nnames)\n    var N = new Array(nnames)\n    var T = new Array(nnames)\n\n    var str = \"\"\n    if (typeof separator === 'undefined')\n\tseparator = '\\n'\n    for (var i = 0; i < nnames; i++)\n\tstr += DecodeSingleName(B, N, T, i) + separator\n\n    return str\n}\n\n//----------------------------------------------------------------------\n// Main tokeniser encode function\n\n// Encoder is trickier than decode as we have a lot of decisions to make.\n// However here we just make a simple guess without anything complex,\n// to demonstrate the basic idea.  See the C implementation for further\n// expansion on this.\nfunction encode(src, use_arith) {\n    // Convert buffer to array of names\n    var str = src.toString()\n    if (str[str.length-1] == '\\n')\n\tstr = str.substring(0,str.length-1)\n    var names = str.split(\"\\n\")\n\n    var out = new IOStream(\"\", 0, str.length*2 + 10000) // guess max size\n    out.WriteUint32(str.length)\n    out.WriteUint32(names.length)\n    out.WriteByte(use_arith)\n\n    // Tokenise names\n    var T = new Array(names.length)\n    var H = {}\n    var F = new Array(256).fill(0) // DELTA vs DIGIT frequency\n    var max_tok = 0\n    var max_len = 0\n    for (var i = 0; i < names.length; i++) {\n\tvar [ntok,len] = TokeniseName(T, H, F, names[i], i)\n\tif (max_tok < ntok)\n\t    max_tok = ntok\n\tif (max_len < len)\n\t    max_len = len\n    }\n\n    // Convert tokens to byte streams and serialise\n    for (var tnum = 0; tnum < max_tok; tnum++) {\n\tvar B = new Array(TOK_END+1)\n\tfor (var type = 0; type <= TOK_END; type++)\n\t    B[type] = new IOStream(\"\", 0, names.length * max_len)\n\n\tFillByteStreams(B, T, tnum, names, max_tok, max_len)\n\tSerialiseByteStreams(B, tnum, use_arith, out)\n    }\n\n    return out.buf.slice(0, out.pos)\n}\n\nfunction FillByteStreams(B, T, tnum, names, max_tok, max_len) {\n    // Create byte streams B[]\n    for (var n = 0; n < names.length; n++) {\n\tif (tnum > 0 && T[n][0].type == TOK_DUP)\n\t    continue\n\n\tif (!T[n][tnum])\n\t    continue\n\n\tB[TOK_TYPE].WriteByte(T[n][tnum].type)\n\n\tswitch (T[n][tnum].type) {\n\tcase TOK_DIFF:\n\t    B[TOK_DIFF].WriteUint32(T[n][tnum].val)\n\t    break\n\n\tcase TOK_DUP:\n\t    B[TOK_DUP].WriteUint32(T[n][tnum].val)\n\t    break\n\n\tcase TOK_STRING:\n\t    B[TOK_STRING].WriteString(T[n][tnum].val)\n\t    break\n\n\tcase TOK_CHAR:\n\t    B[TOK_CHAR].WriteChar(T[n][tnum].val)\n\t    break\n\n\tcase TOK_DIGITS:\n\t    B[TOK_DIGITS].WriteUint32(T[n][tnum].val)\n\t    break\n\n\tcase TOK_DIGITS0:\n\t    B[TOK_DIGITS0].WriteUint32(T[n][tnum].val)\n\t    B[TOK_DZLEN].WriteByte(T[n][tnum].val.length)\n\t    break\n\n\tcase TOK_DELTA:\n\t    B[T[n][tnum].type].WriteByte(T[n][tnum].val)\n\t    break\n\n\tcase TOK_DELTA0:\n\t    B[T[n][tnum].type].WriteByte(T[n][tnum].val)\n\t    break\n\t}\n    }\n}\n\nfunction SerialiseByteStreams(B, tnum, use_arith, out) {\n    // Compress and serialise byte streams B[]\n    for (var type = 0; type <= TOK_END; type++) {\n\tif (B[type].pos <= 0)\n\t    continue\n\n\tout.WriteByte(type + ((type == 0) ? 128 : 0))\n\n\t// IOStream to sized buffer\n\tB[type] = B[type].buf.slice(0, B[type].pos)\n\tvar comp = try_compress(B[type], use_arith)\n\n\tout.WriteUint7(comp.length)\n\tout.WriteData(comp, comp.length)\n    }\n}\n\nfunction try_compress(src, use_arith) {\n    var best = 1<<30\n    var comp\n\n    var methods = [0, 1, 64, 65, 128, 129, 193+8]\n    for (var i in methods) {\n\tvar lvl = methods[i]\n\tif ((lvl & 1) && src.length < 100)\n\t    continue\n\n\tif ((lvl & 8) && (src.length % 4) != 0)\n\t    continue\n\n\ttry {\n\t    var tmp = use_arith\n\t\t? arith.encode(src, lvl)\n\t\t: rans.encode(src, lvl)\n\t} catch (e) {\n\t    var tmp = 0\n\t}\n\tif (tmp && best > tmp.length) {\n\t    best = tmp.length\n\t    comp = tmp\n\t}\n    }\n\n    return comp\n}\n\nfunction TokeniseName(T, H, F, name, n) {\n    var max_len = 0\n\n    // Always compare against last name only\n    var p = n-1\n    T[n] = new Array(256)\n\n    if (H[name]) {\n\t//console.error(name,H[name],n)\n\tT[n][0] = {\n\t    type: TOK_DUP,\n\t    val:  n - H[name]\n\t}\n    } else {\n\tT[n][0] = {\n\t    type: TOK_DIFF,\n\t    val:  n == 0 ? 0 : 1\n\t}\n    }\n\n    H[name] = n\n\n    // Splits on alphanumerics, punctuation\n    var tok = name.match(/([a-zA-Z0-9]{1,9})|([^a-zA-Z0-9]+)/g)\n    for (var i = 0; i < tok.length; i++) {\n\tvar t = i+1 // token 0 = DIFF vs DUP\n\tvar type = TOK_STRING\n\tvar val = tok[i]\n\tif (tok[i].match(/^0+[0-9]*$/g))\n\t    type = TOK_DIGITS0\n\telse if (tok[i].match(/^[0-9]+$/g))\n\t    type = TOK_DIGITS\n\telse if (tok[i].length == 1)\n\t    type = TOK_CHAR\n\n\tif (p >= 0 && T[p][t]) {\n\t    if (T[p][t].str == tok[i]) {\n\t\ttype = TOK_MATCH\n\t\tval = \"\"\n\t    } else if (T[p][t].type == TOK_DIGITS || T[p][t].type == TOK_DELTA) {\n\t\tvar d = val - T[p][t].str;\n\t\tF[t]++\n\t\tif (d >= 0 && d < 256 && F[t] > n/2) {\n\t\t    type = TOK_DELTA\n\t\t    val = d\n\t\t}\n\t    } else if ((T[p][t].type == TOK_DIGITS0 || T[p][t].type == TOK_DELTA0)\n\t\t       && T[p][t].str.length == val.length) {\n\t\tvar d = val - T[p][t].str;\n\t\tF[t]++\n\t\tif (d >= 0 && d < 256 && F[t] > n/2) {\n\t\t    type = TOK_DELTA0\n\t\t    val = d\n\t\t}\n\t    }\n\t}\n\n\tT[n][t] = {\n\t    str:  tok[i],\n\t    val:  val,\n\t    type: type\n\t}\n\n\tif (max_len < T[n][t].val.length+3)  // +3 for integers; 5 -> (Uint32)5\n\t    max_len = T[n][t].val.length+3\n\n\t//console.error(t,T[n][t])\n    }\n    T[n][++t] = {\n\ttype: TOK_END\n    }\n\n    return [t+1, max_len]\n}\n\nmodule.exports = { encode, decode }\n","/*\nbzip2.js - a small bzip2 decompression implementation\n\nCopyright 2011 by antimatter15 (antimatter15@gmail.com)\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n\nI hereby release this code under the GNU Library General Public License\n(LGPL) version 2, available at http://www.gnu.org/copyleft/lgpl.html\n*/\n\nvar bzip2 = {};\n\nbzip2.array = function (bytes) {\n    var bit = 0,\n        byte = 0;\n    var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n    return function (n) {\n        var result = 0;\n        while (n > 0) {\n            var left = 8 - bit;\n            if (n >= left) {\n                result <<= left;\n                result |= (BITMASK[left] & bytes[byte++]);\n                bit = 0;\n                n -= left;\n            } else {\n                result <<= n;\n                result |= ((bytes[byte] & (BITMASK[n] << (8 - n - bit))) >> (8 - n - bit));\n                bit += n;\n                n = 0;\n            }\n        }\n        return result\n    }\n}\n\nbzip2.simple = function (bits) {\n    var size = bzip2.header(bits);\n    var all, chunk, chunks = [];\n    var index = 0;\n    do {\n        //all += chunk;\n        chunk = bzip2.decompress(bits, size);\n        //all.set(chunk, index);\n        if (chunk != -1) {\n            chunks.push(chunk);\n            index += chunk.byteLength;\n        }\n    } while (chunk != -1);\n    all = new Uint8Array(index);\n    index = 0;\n    for (var i = 0; i < chunks.length; ++i) {\n        chunk = chunks[i];\n        all.set(chunk, index);\n        index += chunk.byteLength;\n    }\n    return all;\n}\n\nbzip2.header = function (bits) {\n    if (bits(8 * 3) != 4348520)\n        throw \"No magic number found\";\n    var i = bits(8) - 48;\n    if (i < 1 || i > 9)\n        throw \"Not a BZIP archive\";\n    return i;\n};\n\n//takes a function for reading the block data (starting with 0x314159265359)\n//a block size (0-9) (optional, defaults to 9)\n//a length at which to stop decompressing and return the output\nbzip2.decompress = function (bits, size, len) {\n    var MAX_HUFCODE_BITS = 20;\n    var MAX_SYMBOLS = 258;\n    var SYMBOL_RUNA = 0;\n    var SYMBOL_RUNB = 1;\n    var GROUP_SIZE = 50;\n\n    var bufsize = 100000 * 9;\n    for (var h = '', i = 0; i < 6; i++)\n        h += bits(8).toString(16);\n    if (h == \"177245385090\")\n        return -1; //last block\n    if (h != \"314159265359\")\n        throw \"eek not valid bzip data\";\n    bits(32); //ignore CRC codes\n    if (bits(1))\n        throw \"unsupported obsolete version\";\n    var origPtr = bits(24);\n    if (origPtr > bufsize)\n        throw \"Initial position larger than buffer size\";\n    var t = bits(16);\n    var symToByte = new Uint8Array(256),\n        symTotal = 0;\n    for (i = 0; i < 16; i++) {\n        if (t & (1 << (15 - i))) {\n            var k = bits(16);\n            for (j = 0; j < 16; j++) {\n                if (k & (1 << (15 - j))) {\n                    symToByte[symTotal++] = (16 * i) + j;\n                }\n            }\n        }\n    }\n\n    var groupCount = bits(3);\n    if (groupCount < 2 || groupCount > 6)\n        throw \"another error\";\n    var nSelectors = bits(15);\n    if (nSelectors == 0)\n        throw \"meh\";\n    var mtfSymbol = []; //TODO: possibly replace JS array with typed arrays\n    for (var i = 0; i < groupCount; i++)\n        mtfSymbol[i] = i;\n    var selectors = new Uint8Array(32768);\n\n    for (var i = 0; i < nSelectors; i++) {\n        for (var j = 0; bits(1); j++)\n            if (j >= groupCount)\n                throw \"whoops another error\";\n        var uc = mtfSymbol[j];\n        mtfSymbol.splice(j, 1); //this is a probably inefficient MTF transform\n        mtfSymbol.splice(0, 0, uc);\n        selectors[i] = uc;\n    }\n\n    var symCount = symTotal + 2;\n    var groups = [];\n    for (var j = 0; j < groupCount; j++) {\n        var length = new Uint8Array(MAX_SYMBOLS),\n            temp = new Uint8Array(MAX_HUFCODE_BITS + 1);\n        t = bits(5); //lengths\n        for (var i = 0; i < symCount; i++) {\n            while (true) {\n                if (t < 1 || t > MAX_HUFCODE_BITS)\n                    throw \"I gave up a while ago on writing error messages\";\n                if (!bits(1))\n                    break;\n                if (!bits(1))\n                    t++;\n                else\n                    t--;\n            }\n            length[i] = t;\n        }\n        var minLen, maxLen;\n        minLen = maxLen = length[0];\n        for (var i = 1; i < symCount; i++) {\n            if (length[i] > maxLen)\n                maxLen = length[i];\n            else if (length[i] < minLen)\n                minLen = length[i];\n        }\n        var hufGroup;\n        hufGroup = groups[j] = {};\n        hufGroup.permute = new Uint32Array(MAX_SYMBOLS);\n        hufGroup.limit = new Uint32Array(MAX_HUFCODE_BITS + 1);\n        hufGroup.base = new Uint32Array(MAX_HUFCODE_BITS + 1);\n        hufGroup.minLen = minLen;\n        hufGroup.maxLen = maxLen;\n        var base = hufGroup.base.subarray(1);\n        var limit = hufGroup.limit.subarray(1);\n        var pp = 0;\n        for (var i = minLen; i <= maxLen; i++)\n            for (var t = 0; t < symCount; t++)\n                if (length[t] == i)\n                    hufGroup.permute[pp++] = t;\n        for (i = minLen; i <= maxLen; i++)\n            temp[i] = limit[i] = 0;\n        for (i = 0; i < symCount; i++)\n            temp[length[i]]++;\n        pp = t = 0;\n        for (i = minLen; i < maxLen; i++) {\n            pp += temp[i];\n            limit[i] = pp - 1;\n            pp <<= 1;\n            base[i + 1] = pp - (t += temp[i]);\n        }\n        limit[maxLen] = pp + temp[maxLen] - 1;\n        base[minLen] = 0;\n    }\n    var byteCount = new Uint32Array(256);\n    for (var i = 0; i < 256; i++)\n        mtfSymbol[i] = i;\n    var runPos, count, symCount, selector;\n    runPos = count = symCount = selector = 0;\n    var buf = new Uint32Array(bufsize);\n    while (true) {\n        if (!(symCount--)) {\n            symCount = GROUP_SIZE - 1;\n            if (selector >= nSelectors)\n                throw \"meow i'm a kitty, that's an error\";\n            hufGroup = groups[selectors[selector++]];\n            base = hufGroup.base.subarray(1);\n            limit = hufGroup.limit.subarray(1);\n        }\n        i = hufGroup.minLen;\n        j = bits(i);\n        while (true) {\n            if (i > hufGroup.maxLen)\n                throw \"rawr i'm a dinosaur\";\n            if (j <= limit[i])\n                break;\n            i++;\n            j = (j << 1) | bits(1);\n        }\n        j -= base[i];\n        if (j < 0 || j >= MAX_SYMBOLS)\n            throw \"moo i'm a cow\";\n        var nextSym = hufGroup.permute[j];\n        if (nextSym == SYMBOL_RUNA || nextSym == SYMBOL_RUNB) {\n            if (!runPos) {\n                runPos = 1;\n                t = 0;\n            }\n            if (nextSym == SYMBOL_RUNA)\n                t += runPos;\n            else\n                t += 2 * runPos;\n            runPos <<= 1;\n            continue;\n        }\n        if (runPos) {\n            runPos = 0;\n            if (count + t >= bufsize)\n                throw \"Boom.\";\n            uc = symToByte[mtfSymbol[0]];\n            byteCount[uc] += t;\n            while (t--)\n                buf[count++] = uc;\n        }\n        if (nextSym > symTotal)\n            break;\n        if (count >= bufsize)\n            throw \"I can't think of anything. Error\";\n        i = nextSym - 1;\n        uc = mtfSymbol[i];\n        mtfSymbol.splice(i, 1);\n        mtfSymbol.splice(0, 0, uc);\n        uc = symToByte[uc];\n        byteCount[uc]++;\n        buf[count++] = uc;\n    }\n    if (origPtr < 0 || origPtr >= count)\n        throw \"I'm a monkey and I'm throwing something at someone, namely you\";\n    var j = 0;\n    for (var i = 0; i < 256; i++) {\n        k = j + byteCount[i];\n        byteCount[i] = j;\n        j = k;\n    }\n    for (var i = 0; i < count; i++) {\n        uc = buf[i] & 0xff;\n        buf[byteCount[uc]] |= (i << 8);\n        byteCount[uc]++;\n    }\n    var pos = 0,\n        current = 0,\n        run = 0;\n    if (count) {\n        pos = buf[origPtr];\n        current = (pos & 0xff);\n        pos >>= 8;\n        run = -1;\n    }\n    count = count;\n    var output = new Uint8Array(bufsize);\n    var copies, previous, outbyte;\n    var index = 0;\n    if (!len)\n        len = Infinity;\n    while (count) {\n        count--;\n        previous = current;\n        pos = buf[pos];\n        current = pos & 0xff;\n        pos >>= 8;\n        if (run++ == 3) {\n            copies = current;\n            outbyte = previous;\n            current = -1;\n        } else {\n            copies = 1;\n            outbyte = current;\n        }\n        while (copies--) {\n            //output += (String.fromCharCode(outbyte));\n            output[index++] = outbyte;\n            //index++;\n            if (!--len)\n                return output;\n        }\n        if (current != previous)\n            run = 0;\n    }\n    //return output;\n    //return output.subarray(0,index-1);\n    return output.subarray(0, index);\n}\n\nmodule.exports = bzip2;\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n"],"names":["unzip","input","Buffer","from","inflate","CramError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","Error","CramUnimplementedError","_Error2","_super2","CramMalformedError","_CramError","_super3","CramSizeLimitError","_CramError2","_super4","CramArgumentError","_CramError3","_super5","TF_SHIFT","TOTFREQ","RANS_BYTE_L","FC","this","F","undefined","C","AriDecoder","fc","Array","i","length","R","advanceStep","r","start","freq","scaleBits","Symbol","symbolInit","sym","advanceSymbolStep","get","advanceSymbol","pptr","advance","renormalize","assert","result","uncompressOrder0Way4","out","D","Decoding","syms","cp","decoder","rle","x","j","fill","getByteAt","position","readStatsO0","c","rans0","getInt","rans1","rans2","rans3","outputSize","remaining","outputEnd","c0","c1","c2","c3","putAt","setPosition","put","D04","uncompressOrder1Way4","output","rlei","rlej","RansDecSymbol","readStatsO1","rans7","isz4","i0","i1","i2","i7","l0","l1","l2","l7","c7","D14","ByteBuffer","nodeBuffer","initialInputPosition","_buffer","_position","key","value","b","val","pos","readInt32LE","singleItf8","Parser","itf8","cramFileDefinition","parser","string","uint8","stripNull","maxLength","cramBlockHeader","formatter","method","concat","type","cramBlockCrc32","uint32","cramTagDictionary","buffer","makeTagSet","stringStart","stringEnd","str","toString","tags","push","substr","tagSets","parseByteAsBool","cramPreservationMap","array","choice","tag","choices","MI","UI","PI","RN","AP","RR","SM","TD","nest","data","ents","formatMap","map","_data$ents$i","console","warn","unversionedParsers","isMappedSliceHeader","header","refSeqId","versionedParsers","cramUnmappedSliceHeader","majorVersion","ltf8","numContentIds","cramMappedSliceHeader","cramEncoding","namely","cramDataSeriesEncodingMap","cramTagEncodingMap","integerRepresentation","String","fromCharCode","cramCompressionHeader","cramContainerHeader1","int32","cramContainerHeader2","crcLength","numLandmarks","getSectionParsers","parsers","Object","assign","keys","forEach","parserName","CramBufferOverrunError","getBits","cursor","numBits","bytePosition","bitPosition","dlen","parseItem","startBufferPosition","startFilePosition","_parser$parse","parse","offset","_objectSpread","_endPosition","_size","tinyMemoize","_class","methodName","prototype","memoAttrName","_this","res","call","Promise","resolve","catch","sequenceMD5","seq","md5","toUpperCase","replace","CRAM_FLAG_PRESERVE_QUAL_SCORES","CRAM_FLAG_DETACHED","CRAM_FLAG_MATE_DOWNSTREAM","CRAM_FLAG_NO_SEQ","CRAM_FLAG_MASK","CRAM_M_REVERSE","CRAM_M_UNMAP","BAM_FPAIRED","BAM_FPROPER_PAIR","BAM_FUNMAP","BAM_FMUNMAP","BAM_FREVERSE","BAM_FMREVERSE","BAM_FREAD1","BAM_FREAD2","BAM_FSECONDARY","BAM_FQCFAIL","BAM_FDUP","BAM_FSUPPLEMENTARY","BAM_CMATCH","BAM_CINS","BAM_CDEL","BAM_CREF_SKIP","BAM_CSOFT_CLIP","BAM_CHARD_CLIP","BAM_CPAD","BAM_CEQUAL","BAM_CDIFF","BAM_CBACK","BAM_CIGAR_STR","BAM_CIGAR_SHIFT","BAM_CIGAR_MASK","BAM_CIGAR_TYPE","baseNumbers","a","A","g","G","t","T","n","N","makeFlagsHelper","_step","_iterator","_createForOfIteratorHelper","_loop","_step$value","_slicedToArray","code","name","flags","s","done","err","e","f","BamFlagsDecoder","CramFlagsDecoder","MateFlagsDecoder","CramRecord","_ref","cramFlags","readLength","mappingQuality","lengthOnRef","qualityScores","mateRecordNumber","readBases","readFeatures","mateToUse","readGroupId","readName","sequenceId","uniqueId","templateSize","alignmentStart","mate","mateFlags","mateReadName","mateSequenceId","mateAlignmentStart","Constants","_refRegion","decoded","cramRecord","refRegion","isUnknownBases","regionSeqOffset","bases","regionPos","currentReadFeature","feature","added","sub","chunk","decodeReadSequence","isSegmentUnmapped","isPaired","isMateUnmapped","s1","isReverseComplemented","s2","isMateReverseComplemented","o1","o2","isRead1","isRead2","tmp","isize","templateLength","join","compressionScheme","readFeature","refCoord","refPos","refBase","charAt","ref","baseNumber","base","substitutionMatrix","decodeBaseSubstitution","end","_this2","k","getReadBases","readNullTerminatedString","parseTagData","tagType","Long","toNumber","Int32Array","Int16Array","Uint16Array","Int8Array","Float32Array","Number","parseInt","arrayType","slice","arr","Uint8Array","Uint32Array","parseTagValueArray","decodeRecord","decodeDataSeries","sliceHeader","coreDataBlock","blocksByContentId","cursors","recordNumber","parsedContent","APdelta","lastAlignmentStart","readNamesIncluded","isDetached","isUnmapped","setMateUnmapped","isOnNegativeStrand","setMateReverseComplemented","isWithMateDownstream","TLindex","TN","getTagNames","ntags","tagId","tagName","tagCodec","getCodecForTag","tagData","decode","isDecodeSequenceAsStar","isPreservingQualityScores","readFeatureCount","currentReadPos","currentRefPos","decodeRFData","_ref2","dataSeriesName","byteLength","toArray","readPosDelta","data1Schema","B","S","X","I","q","Q","H","P","data2Schema","decodeReadFeatures","isNaN","associateIntraSliceMate","allRecords","currentRecordNumber","thisRecord","mateRecord","complicatedMultiSegment","matedRecords","getAllMatedRecords","startRecord","records","_toConsumableArray","starts","ends","estimatedTemplateLength","Math","max","min","calculateMultiSegmentMatedTemplateLength","lengthEstimate","calculateIntraSliceMatePairTemplateLength","CramSlice","container","containerPosition","_unused","file","_getHeader","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sectionParsers","containerHeader","content","_content","wrap","_context","prev","next","sent","getHeader","readBlock","contentType","abrupt","stop","_getBlocks","_callee2","blockPosition","blocks","block","_context2","numBlocks","_getCoreDataBlock","_callee3","_context3","getBlocks","_getBlocksContentIdIndex2","_callee4","_context4","contentId","_getBlockByContentId","_callee5","id","_context5","_getBlocksContentIdIndex","_x","_getReferenceRegion","_callee6","refBlock","_context6","getCompressionScheme","refBaseBlockId","getBlockByContentId","refSeqStart","refSeqSpan","span","referenceRequired","fetchReferenceSequenceCallback","getRecords","_fetchRecords2","_callee7","_yield$this$file$getD","seqMd5","storedMd5","init","_i","_context7","getDefinition","options","checkSequenceMD5","getReferenceRegion","byte","getCoreDataBlock","coreBlock","externalBlocks","Map","getCursor","set","codec","getCodecForDataSeries","numRecords","contentPosition","recordCounter","t0","filter","_getRecords","_callee9","filterFunction","cacheKey","recordsPromise","unfiltered","singleRefId","_compressionScheme","refRegions","seqId","_i2","_seqId","_context9","filePosition","featureCache","_fetchRecords","Infinity","all","values","_callee8","_context8","_x3","addReferenceSequence","_x2","split","CramCodec","parameters","dataType","HuffmanIntCodec","_CramCodec","codes","codeBook","sortedByValue","sortedCodes","sortedValuesByBitCode","sortedBitCodes","sortedBitLengthsByBitCode","bitCodeToValue","includes","TypeError","buildCodeBook","buildCodes","buildCaches","bitLength","_decode","_decodeZeroLengthCode","numCodes","symbol","symbols","bitLengths","sort","_this3","codeLength","codeValue","entries","bitLengthInt","bitCode","delta","ii","numberOfSetBits","maxBitCode","coreCursor","prevLen","bits","index","ExternalCodec","_decodeData","_decodeInt","_decodeByte","blockContentId","contentBlock","_parseItf","initialOffset","countFlags","parseItf8","_parseItf2","bytesRead","ByteArrayStopCodec","_decodeByteArray","dataBuffer","stopByte","startPosition","stopPosition","subarray","instantiateCodec","arrayLength","_getLengthCodec","dataCodec","_getDataCodec","encodingParams","lengthsEncoding","valuesEncoding","BetaCodec","GammaCodec","codecClasses","ByteArrayLengthCodec","SubexpCodec","numLeadingOnes","K","encodingData","CodecClass","codecId","dataSeriesTypes","BF","CF","RI","RL","RG","MF","NS","NP","TS","NF","TC","FN","FP","BS","IN","SC","DL","BA","BB","RS","PD","HC","MQ","QS","QQ","TL","CramContainerCompressionScheme","dataSeriesCodecCache","tagCodecCache","tagEncoding","preservation","tagIdsDictionary","byteArray","matrix","parseSubstitutionMatrix","dataSeriesEncoding","tagListId","test","CramContainer","_readContainerHeader","_getCompressionHeaderBlock","getFirstBlock","_getFirstBlock","_getCompressionScheme","getCompressionHeaderBlock","slicePosition","sliceSize","_readContainerHeader2","_yield$this$file$stat","fileSize","bytes1","header1","numLandmarksSize","bytes2","header2","completeHeader","stat","size","allocUnsafe","read","v","validateChecksums","crc32","checkCrc32","fromUrl","source","_url$parse","url","protocol","pathname","LocalFile","unescape","ensureNotNullish","RemoteFile","open","maybeUrl","maybePath","maybeFilehandle","parseHeaderText","text","lines","line","_line$split","_line$split2","_toArray","parsedFields","_f$split","_f$split2","CramFile","args","path","filehandle","seqFetch","cacheSize","_a","QuickLRU","maxSize","uInt32","uInt8","getEndianness","_getDefinition","headbytes","definition","cramFileDefinitionParser","_getSamHeader","firstContainer","firstBlock","headerLength","getContainerById","_getHeaderText","getSamHeader","_getSectionParsers2","_yield$this$getDefini","_getContainerById","containerNumber","currentContainer","currentHeader","getContainerAtPosition","_checkCrc","recordedCrc32","description","calculatedCrc32","_x4","_x5","_containerCount","_yield$this$file$stat2","containerCount","_readBlockHeader","_yield$this$file$stat3","_x6","_parseSection2","section","preReadBuffer","_yield$this$file$stat4","_args9","_x7","_x8","compressionMethod","inputBuffer","outputBuffer","copy","bzip2","decompress","order","ransuncompress","htscodecs","_readBlock","_callee10","_yield$this$getDefini2","blockHeader","blockContentPosition","uncompressedData","compressedData","crc","_context10","readBlockHeader","uncompressedSize","compressedSize","_uncompress","_parseSection","_x9","IndexedCramFile","cram","cramUrl","cramPath","cramFilehandle","getEntriesForRange","fetchSizeLimit","_getRecordsForRange","_Array$prototype","opts","slices","totalSize","sliceResults","ret","readNames","readIds","unmatedPairs","matePromises","_name","mateSlices","mateBlocks","mateChunks","_mateChunks","mateRecordPromises","mateFeatPromises","mateTotalSize","newMateFeats","newMates","_args","viewAsPairs","pairAcrossChr","maxInsertSize","sliceBytes","reduce","toLocaleString","getRecordsInSlice","abs","localeCompare","item","ary","recordPromise","featPromise","then","feats","mateRecs","current","_ref3","containerStart","sliceStart","getSlice","hasDataForReferenceSequence","addRecordToIndex","record","some","el","_record","CraiIndex","_parseCache","AbortablePromiseCache","cache","signal","parseIndex","readFile","uncompressedBuffer","readUInt32LE","currentRecord","currentString","charCode","ent","_hasDataForReferenceSequence","getIndex","_getEntriesForRange","queryStart","queryEnd","seqEntries","compare","bins","entry","entryStart","entryEnd","RangeCoder","require","IOStream","ByteModel","ARITH_PACK","module","exports","RangeCoderGen","src","stream","decodeStream","n_out","ReadByte","ReadUint7","e_len","decodeStripe","_this$decodePackMeta","decodePackMeta","_this$decodePackMeta2","decodeCat","decodeExt","decodeRLE1","decodeRLE0","decode1","decode0","decodePack","WriteByte","WriteUint7","buf","encodeStripe","pack_meta","_this$encodePack","encodePack","_this$encodePack2","WriteStream","encodeRLE1","encodeRLE0","encode1","encode0","max_sym","byte_model","rc","RangeStartDecode","ModelDecode","n_in","ModelEncode","RangeFinishEncode","last","model_lit","model_run","part","run","rctx","nsym","M","len","meta","_this$packMeta","packMeta","_this$packMeta2","floor","hdr","ulen","comp","total","comp0","encode","comp1","WriteData","clen","low","range","FFnum","carry","tot_freq","sym_low","sym_freq","dst","old_low","log","RangeShiftLow","total_freq","RangeGetFrequency","acc","RangeDecode","ModelRenormalise","RangeEncode","read_array","tab","z","run_len","FLAG_DEDUP","FLAG_FLEN","FLAG_SEL","FLAG_QMAP","FLAG_PTAB","FLAG_DTAB","FLAG_QTAB","GFLAG_MULTI_PARAM","GFLAG_HAVE_STAB","GFLAG_DO_REV","fqz_update_ctx","params","state","context","qctx","qshift","qtab","qbits","qloc","do_pos","ptab","p","ploc","do_delta","dtab","dloc","prevq","do_sel","sloc","decode_fqz_single_param","ReadUint16","pflags","do_dedup","fixed_len","do_qmap","do_qtab","qmap","decode_fqz_new_record","gparams","model","rev","max_sel","sel","stab","do_rev","rec","is_dup","dup","decode_fqz","q_lens","gflags","nparam","error","decode_fqz_params","qual","fqz_create_models","qual_len","reverse_qualities","store_array","tmp1","sz1","i_start","tmp2","sz2","curr","q_dirs","qhist","qd_last","qd_fixed","pbits","pshift","dbits","dshift","sbits","do_stab","_defineProperty","pick_fqz_params","dsqr","WriteUint16","encode_fqz_params","model_qual","model_len","model_sel","process","exit","qlast","q1","encode_fqz","r4x8","r4x16","arith","fqzcomp","tok3","r4x8_uncompress","r4x16_uncompress","arith_uncompress","fqzcomp_uncompress","tok3_uncompress","start_pos","charCodeAt","u","writeInt32LE","RansGetCumulativeFreq","RansGetSymbolFromFreq","RansBuildC2S","C2S","RansAdvanceStep","RansRenorm","RansEncFlush","WriteByteNeg","RansEncPut","scale_bits","R_max","RansEncRenorm","ReadFrequencies0","last_sym","ReadITF8","NormaliseFrequencies0","tot","scale","max_val","max_idx","renorm","WriteFrequencies0","WriteITF8","ReadUint32","nbytes","i4","RansDecode0","ReadFrequencies1","L","nbytes4","RansDecode1","WriteUint32","BuildFrequencies0","alloc","rans_out","freq_tab","RansEncode0","F0","BuildFrequencies1","NormaliseFrequencies1","WriteFrequencies1","idx","RansEncode1","RansEncodeStripe","RansDecodeStream","format","stripe","cat","pack","RansDecodeStripe","pack_len","_DecodePackMeta","DecodePackMeta","_DecodePackMeta2","rle_len","_DecodeRLEMeta","u_meta_len","rle_meta","ReadData","comp_meta_len","DecodeRLEMeta","_DecodeRLEMeta2","shift","freq_src","ReadAlphabet","NormaliseFrequencies0_Shift","DecodeRLE","DecodePack","_EncodePack","ceil","EncodePack","_EncodePack2","_EncodeRLE","nrle","dpos","cmeta","EncodeRLE","_EncodeRLE2","bit_size","log2","WriteAlphabet","cfreq","NormaliseFrequencies1_Shift","rans","TOK_TYPE","TOK_STRING","TOK_CHAR","TOK_DIGITS0","TOK_DZLEN","TOK_DUP","TOK_DIFF","TOK_DIGITS","TOK_DELTA","TOK_DELTA0","TOK_MATCH","TOK_END","LeftPadNumber","DecodeSingleName","m","ReadChar","ReadString","d","l","FillByteStreams","tnum","names","max_tok","max_len","WriteString","WriteChar","SerialiseByteStreams","use_arith","try_compress","best","methods","lvl","TokeniseName","tok","match","substring","_TokeniseName","_TokeniseName2","ntok","separator","nnames","in_size","EOF","ttype","tok_new","tok_dup","dup_pos","dup_type","DecodeTokenByteStreams","bytes","bit","BITMASK","left","chunks","bufsize","h","origPtr","symToByte","symTotal","groupCount","nSelectors","mtfSymbol","selectors","uc","splice","symCount","groups","minLen","maxLen","hufGroup","temp","MAX_HUFCODE_BITS","permute","limit","pp","runPos","count","selector","byteCount","GROUP_SIZE","nextSym","copies","previous","outbyte","charenc","utf8","stringToBytes","bin","encodeURIComponent","bytesToString","decodeURIComponent","escape","base64map","crypt","rotl","rotr","endian","constructor","randomBytes","random","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","bytesToBase64","base64","triplet","base64ToBytes","imod4","indexOf","pow","isBuffer","obj","readFloatLE","isSlowBuffer","_isBuffer","message","encoding","isArray","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","_blocksize","_digestsize","digestbytes","asBytes","asString"],"sourceRoot":""}