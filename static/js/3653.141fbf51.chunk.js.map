{"version":3,"file":"static/js/3653.141fbf51.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedTabixAdapter/BedTabixAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { FileLocation, Region, Feature } from '@jbrowse/core/util'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { featureData } from '../util'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n  private parser: any\n\n  protected bed: TabixIndexedFile\n\n  protected columnNames: string[]\n\n  protected scoreColumn: string\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const bedGzLoc = this.getConf('bedGzLocation') as FileLocation\n    const type = this.getConf(['index', 'indexType'])\n    const loc = this.getConf(['index', 'location'])\n    const autoSql = this.getConf('autoSql')\n    const pm = this.pluginManager\n\n    this.bed = new TabixIndexedFile({\n      filehandle: openLocation(bedGzLoc, pm),\n      csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n      tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    this.columnNames = this.getConf('columnNames')\n    this.scoreColumn = this.getConf('scoreColumn')\n    this.parser = new BED({ autoSql })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.bed.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    return this.bed.getHeader()\n  }\n\n  async getNames() {\n    if (this.columnNames.length) {\n      return this.columnNames\n    }\n    const header = await this.bed.getHeader()\n    const defs = header.split('\\n').filter(f => !!f)\n    const defline = defs[defs.length - 1]\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const meta = await this.bed.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      // colSame handles special case for tabix where a single column is both\n      // the start and end, this is assumed to be covering the base at this\n      // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n      const names = await this.getNames()\n      await this.bed.getLines(query.refName, query.start, query.end, {\n        lineCallback: (line, fileOffset) => {\n          observer.next(\n            featureData(\n              line,\n              colRef,\n              colStart,\n              colEnd,\n              this.scoreColumn,\n              this.parser,\n              `${this.id}-${fileOffset}`,\n              names,\n            ),\n          )\n        },\n        signal: opts.signal,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  const newFeature = new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n  return newFeature\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: typeof BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["BedTabixAdapter","config","getSubAdapter","pluginManager","parser","bed","columnNames","scoreColumn","bedGzLoc","getConf","type","loc","autoSql","pm","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","BED","opts","this","getReferenceSequenceNames","getHeader","length","header","defs","split","filter","f","defline","includes","slice","map","trim","query","ObservableCreate","observer","getMetadata","meta","columnNumbers","colRef","ref","colStart","start","colEnd","end","getNames","names","getLines","refName","lineCallback","line","fileOffset","next","featureData","id","signal","complete","BaseFeatureDataAdapter","capabilities","ucscProcessedTranscript","feature","children","thickStart","get","thickEnd","blocks","child","sort","a","b","newChildren","forEach","block","prime","push","leftPrime","rightPrime","newData","Object","fromEntries","tags","tag","subfeatures","uniqueId","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","data","l","colSame","fields","i","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score"],"sourceRoot":""}