{"version":3,"file":"static/js/4630.26cb95e9.chunk.js","mappings":"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","sources":["../../../packages/core/ui/ErrorMessageStackTraceDialog.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Link,\n  Typography,\n} from '@mui/material'\n\nimport { RawSourceMap, SourceMapConsumer } from 'source-map-js'\nimport copy from 'copy-to-clipboard'\n\n// locals\nimport Dialog from './Dialog'\nimport LoadingEllipses from './LoadingEllipses'\n\n// produce a source-map resolved stack trace\n// reference code https://stackoverflow.com/a/77158517/2129219\nconst sourceMaps: Record<string, RawSourceMap> = {}\nasync function getSourceMapFromUri(uri: string) {\n  if (sourceMaps[uri] != undefined) {\n    return sourceMaps[uri]\n  }\n  const uriQuery = new URL(uri).search\n  const currentScriptContent = await (await fetch(uri)).text()\n\n  let mapUri =\n    new RegExp(/\\/\\/# sourceMappingURL=(.*)/).exec(currentScriptContent)?.[1] ||\n    ''\n  mapUri = new URL(mapUri, uri).href + uriQuery\n\n  const map = await (await fetch(mapUri)).json()\n\n  sourceMaps[uri] = map\n\n  return map\n}\n\nasync function mapStackTrace(stack: string) {\n  const stackLines = stack.split('\\n')\n  const mappedStack = []\n\n  for (const line of stackLines) {\n    const match = new RegExp(/(.*)(http:\\/\\/.*):(\\d+):(\\d+)/).exec(line)\n    if (match === null) {\n      mappedStack.push(line)\n      continue\n    }\n\n    const uri = match[2]\n    const consumer = new SourceMapConsumer(await getSourceMapFromUri(uri))\n\n    const originalPosition = consumer.originalPositionFor({\n      line: parseInt(match[3]),\n      column: parseInt(match[4]),\n    })\n\n    if (\n      originalPosition.source === null ||\n      originalPosition.line === null ||\n      originalPosition.column === null\n    ) {\n      mappedStack.push(line)\n      continue\n    }\n\n    mappedStack.push(\n      `${originalPosition.source}:${originalPosition.line}:${\n        originalPosition.column + 1\n      }`,\n    )\n  }\n\n  return mappedStack.join('\\n')\n}\n\nconst MAX_ERR_LEN = 10_000\n\n// Chrome has the error message in the stacktrace, firefox doesn't\nfunction stripMessage(trace: string, error: unknown) {\n  if (trace.startsWith('Error:')) {\n    // remove the error message, which can be very long due to mobx-state-tree\n    // stuff, to get just the stack trace\n    const err = `${error}`\n    return trace.slice(err.length)\n  } else {\n    return trace\n  }\n}\n\nexport default function ErrorMessageStackTraceDialog({\n  error,\n  onClose,\n}: {\n  onClose: () => void\n  error: Error\n}) {\n  const [mappedStackTrace, setMappedStackTrace] = useState<string>()\n  const [secondaryError, setSecondaryError] = useState<unknown>()\n  const [clicked, setClicked] = useState(false)\n  const stackTracePreProcessed = `${error.stack}`\n  const errorText = `${error}`\n  const stackTrace = stripMessage(stackTracePreProcessed, errorText)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const res = await mapStackTrace(stackTrace)\n        setMappedStackTrace(res)\n      } catch (e) {\n        console.error(e)\n        setMappedStackTrace(stackTrace)\n        setSecondaryError(e)\n      }\n    })()\n  }, [stackTrace])\n\n  const errorBoxText = [\n    secondaryError\n      ? 'Error loading source map, showing raw stack trace below:'\n      : '',\n    errorText.length > MAX_ERR_LEN\n      ? errorText.slice(0, MAX_ERR_LEN) + '...'\n      : errorText,\n    mappedStackTrace || 'No stack trace available',\n    // @ts-expect-error add version info at bottom if we are in jbrowse-web\n    window.JBrowseSession ? `JBrowse ${window.JBrowseSession.version}` : '',\n  ].join('\\n')\n\n  const err = encodeURIComponent(\n    'I got this error from JBrowse, here is the stack trace:\\n\\n```\\n' +\n      errorBoxText +\n      '\\n```\\n',\n  )\n  const githubLink = `https://github.com/GMOD/jbrowse-components/issues/new?labels=bug&title=JBrowse+issue&body=${err}`\n  const emailLink = `mailto:jbrowse2dev@gmail.com?subject=JBrowse%202%20error&body=${err}`\n  return (\n    <Dialog open onClose={onClose} title=\"Stack trace\" maxWidth=\"xl\">\n      <DialogContent>\n        {mappedStackTrace === undefined ? (\n          <LoadingEllipses variant=\"h6\" />\n        ) : (\n          <>\n            <Typography>\n              Post a new issue at{' '}\n              <Link href={githubLink} target=\"_blank\">\n                GitHub\n              </Link>{' '}\n              or send an email to{' '}\n              <Link href={emailLink} target=\"_blank\">\n                jbrowse2dev@gmail.com\n              </Link>{' '}\n            </Typography>\n            <pre\n              style={{\n                background: 'lightgrey',\n                border: '1px solid black',\n                overflow: 'auto',\n                margin: 20,\n                maxHeight: 300,\n              }}\n            >\n              {errorBoxText}\n            </pre>\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            copy(errorBoxText)\n            setClicked(true)\n            setTimeout(() => setClicked(false), 1000)\n          }}\n        >\n          {clicked ? 'Copied!' : 'Copy stack trace to clipboard'}\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["sourceMaps","async","getSourceMapFromUri","uri","undefined","uriQuery","URL","search","currentScriptContent","fetch","text","mapUri","RegExp","exec","href","map","json","MAX_ERR_LEN","ErrorMessageStackTraceDialog","error","onClose","mappedStackTrace","setMappedStackTrace","useState","secondaryError","setSecondaryError","clicked","setClicked","errorText","stackTrace","trace","startsWith","err","slice","length","stripMessage","stack","useEffect","res","stackLines","split","mappedStack","line","match","push","originalPosition","SourceMapConsumer","originalPositionFor","parseInt","column","source","join","mapStackTrace","e","console","errorBoxText","window","JBrowseSession","version","encodeURIComponent","githubLink","emailLink","React","Dialog","open","title","maxWidth","DialogContent","LoadingEllipses","variant","Typography","Link","target","style","background","border","overflow","margin","maxHeight","DialogActions","Button","color","onClick","copy","setTimeout"],"sourceRoot":""}