{"version":3,"file":"static/js/1241.522836cf.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/SequenceSearchDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormGroup,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()({\n  dialogContent: {\n    width: '40em',\n  },\n})\n\nfunction SequenceDialog({\n  model,\n  handleClose,\n}: {\n  model: { assemblyNames: string[]; toggleTrack(trackId: string): void }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  const [searchForward, setSearchForward] = useState(true)\n  const [searchReverse, setSearchReverse] = useState(true)\n  const [caseInsensitive, setCaseInsensitive] = useState(true)\n\n  let error\n\n  try {\n    new RegExp(value)\n  } catch (e) {\n    error = e\n  }\n\n  return (\n    <Dialog maxWidth=\"xl\" open onClose={handleClose} title=\"Sequence search\">\n      <DialogContent className={classes.dialogContent}>\n        <Typography>\n          Supply a sequence to search for. A track will be created with the\n          resulting matches once submitted. You can also supply regex style\n          expressions e.g. AACT(C|T).\n        </Typography>\n        <TextField\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          helperText=\"Sequence search pattern\"\n        />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={searchForward}\n                onChange={event => setSearchForward(event.target.checked)}\n              />\n            }\n            label=\"Search forward strand\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={searchReverse}\n                onChange={event => setSearchReverse(event.target.checked)}\n              />\n            }\n            label=\"Search reverse strand\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={caseInsensitive}\n                onChange={event => setCaseInsensitive(event.target.checked)}\n              />\n            }\n            label=\"Case insensitive\"\n          />\n        </FormGroup>\n        {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            if (value) {\n              const trackId = `sequence_search_${+Date.now()}`\n              const session = getSession(model)\n              const { assemblyManager } = session\n              const assemblyName = model.assemblyNames[0]\n              session.addTrackConf({\n                trackId,\n                name: `Sequence search ${value}`,\n                assemblyNames: [assemblyName],\n                type: 'FeatureTrack',\n                adapter: {\n                  type: 'SequenceSearchAdapter',\n                  search: value,\n                  searchForward,\n                  searchReverse,\n                  caseInsensitive,\n                  sequenceAdapter: getSnapshot(\n                    assemblyManager.get(assemblyName)?.configuration.sequence\n                      .adapter,\n                  ),\n                },\n              })\n              model.toggleTrack(trackId)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Submit\n        </Button>\n\n        <Button\n          onClick={() => handleClose()}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default observer(SequenceDialog)\n"],"names":["useStyles","makeStyles","dialogContent","width","observer","_ref","error","model","handleClose","classes","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","searchForward","setSearchForward","_useState5","_useState6","searchReverse","setSearchReverse","_useState7","_useState8","caseInsensitive","setCaseInsensitive","RegExp","e","_jsxs","Dialog","maxWidth","open","onClose","title","children","DialogContent","className","_jsx","Typography","TextField","onChange","target","helperText","FormGroup","FormControlLabel","control","Checkbox","checked","event","label","color","concat","DialogActions","Button","onClick","_assemblyManager$get","trackId","Date","now","session","getSession","assemblyManager","assemblyName","assemblyNames","addTrackConf","name","type","adapter","search","sequenceAdapter","getSnapshot","get","configuration","sequence","toggleTrack","variant"],"sourceRoot":""}