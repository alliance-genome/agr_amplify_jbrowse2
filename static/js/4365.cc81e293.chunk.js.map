{"version":3,"file":"static/js/4365.cc81e293.chunk.js","mappings":"wSAaMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,KAAM,CAAC,EACPC,YAAa,CACXC,SAAU,WACVC,MAAOJ,EAAMK,QAAQ,GACrBC,IAAKN,EAAMK,QAAQ,GACnBE,MAAOP,EAAMQ,QAAQC,KAAK,MAE7B,IAEc,SAASC,EAAaC,GAUnC,IAAQC,EAAYd,IAAZc,QACAC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YACPC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,SAAUC,EAAcJ,EAAdI,UAE5B,GAAsBC,EAAAA,EAAAA,UAAS,GAAD,OACzBH,IAAaI,OAAOC,UAAYL,EAAW,KAC/C,eAFMM,EAAG,KAAEC,EAAM,KAGlB,GAAsBJ,EAAAA,EAAAA,UAAS,GAAD,OACzBF,IAAaG,OAAOI,UAAYP,EAAW,KAC/C,eAFMQ,EAAG,KAAEC,EAAM,KAIZC,IACI,KAARL,GAAsB,KAARG,IAAeL,OAAOQ,OAAON,KAASF,OAAOQ,OAAOH,MAC7DA,GAAOH,EAGRO,IACU,QAAdX,GAA+B,KAARI,IAAeF,OAAOQ,OAAON,MAAQA,EAAM,EAEpE,OACE,UAAC,IAAM,CAACQ,MAAI,EAACC,QAAShB,EAAY,WAChC,UAAC,IAAW,0CAEV,SAAC,IAAU,CAACiB,UAAWnB,EAAQV,YAAa8B,QAASlB,EAAY,UAC/D,SAAC,IAAS,UAGd,SAAC,IAAa,CAACmB,MAAO,CAAEC,UAAW,UAAW,UAC5C,iBAAKH,UAAWnB,EAAQX,KAAK,WAC3B,SAAC,IAAU,oCACTyB,EAIE,MAHF,SAAC,IAAU,CAACnB,MAAM,QAAO,iDAKzBqB,EAIE,MAHF,SAAC,IAAU,CAACrB,MAAM,QAAO,+DAK3B,SAAC,IAAS,CACR4B,MAAOd,EACPe,SAAU,SAAAC,GACRf,EAAOe,EAAMC,OAAOH,MACtB,EACAI,YAAY,qBAEd,SAAC,IAAS,CACRJ,MAAOX,EACPY,SAAU,SAAAC,GACRZ,EAAOY,EAAMC,OAAOH,MACtB,EACAI,YAAY,qBAGd,SAAC,IAAM,CACLC,QAAQ,YACRjC,MAAM,UACNkC,KAAK,SACLR,MAAO,CAAES,WAAY,IACrBC,UAAWjB,EACXM,QAAS,WACPnB,EAAM+B,YACI,KAARvB,GAAeF,OAAOQ,OAAON,QAAcwB,GAANxB,GAEvCR,EAAMiC,YACI,KAARtB,GAAeL,OAAOQ,OAAOH,QAAcqB,GAANrB,GAEvCV,GACF,EAAE,2BAQd,C","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SetMinMaxDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport CloseIcon from '@mui/icons-material/Close'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {},\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nexport default function SetMinMaxDlg(props: {\n  model: {\n    minScore: number\n    maxScore: number\n    scaleType: string\n    setMinScore: Function\n    setMaxScore: Function\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { model, handleClose } = props\n  const { minScore, maxScore, scaleType } = model\n\n  const [min, setMin] = useState(\n    `${minScore !== Number.MIN_VALUE ? minScore : ''}`,\n  )\n  const [max, setMax] = useState(\n    `${maxScore !== Number.MAX_VALUE ? maxScore : ''}`,\n  )\n\n  const ok =\n    min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max)\n      ? +max > +min\n      : true\n\n  const logOk =\n    scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Set min/max score for track\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <div className={classes.root}>\n          <Typography>Enter min/max score: </Typography>\n          {!ok ? (\n            <Typography color=\"error\">\n              Max is greater than or equal to min\n            </Typography>\n          ) : null}\n\n          {!logOk ? (\n            <Typography color=\"error\">\n              Min score should be greater than 0 for log scale\n            </Typography>\n          ) : null}\n\n          <TextField\n            value={min}\n            onChange={event => {\n              setMin(event.target.value)\n            }}\n            placeholder=\"Enter min score\"\n          />\n          <TextField\n            value={max}\n            onChange={event => {\n              setMax(event.target.value)\n            }}\n            placeholder=\"Enter max score\"\n          />\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginLeft: 20 }}\n            disabled={!ok}\n            onClick={() => {\n              model.setMinScore(\n                min !== '' && !Number.isNaN(+min) ? +min : undefined,\n              )\n              model.setMaxScore(\n                max !== '' && !Number.isNaN(+max) ? +max : undefined,\n              )\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","root","closeButton","position","right","spacing","top","color","palette","grey","SetMinMaxDlg","props","classes","model","handleClose","minScore","maxScore","scaleType","useState","Number","MIN_VALUE","min","setMin","MAX_VALUE","max","setMax","ok","isNaN","logOk","open","onClose","className","onClick","style","overflowX","value","onChange","event","target","placeholder","variant","type","marginLeft","disabled","setMinScore","undefined","setMaxScore"],"sourceRoot":""}