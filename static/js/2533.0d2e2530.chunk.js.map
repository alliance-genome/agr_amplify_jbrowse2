{"version":3,"file":"static/js/2533.0d2e2530.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/STARFusionImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import { parseTsvBuffer, ParseOptions } from './ImportUtils'\n\nfunction parseSTARFusionBreakpointString(str: string) {\n  const fields = str.split(':')\n  const refName = fields[0]\n  const pos = parseInt(fields[1], 10)\n  const strand = fields[2] === '-' ? -1 : 1\n  return { refName, pos, strand }\n}\n\nconst numericColumns: Record<string, boolean> = {\n  SpanningFragCount: true,\n  FFPM: true,\n  LeftBreakEntropy: true,\n  RightBreakEntropy: true,\n  JunctionReadCount: true,\n}\n\nexport async function parseSTARFusionBuffer(\n  buffer: Buffer,\n  options: ParseOptions,\n) {\n  const data = await parseTsvBuffer(buffer, {\n    hasColumnNameLine: true,\n    columnNameLineNumber: 1,\n    selectedAssemblyName: options.selectedAssemblyName,\n    isValidRefName: () => false,\n  })\n\n  // remove the # in #FusionName\n  data.columns[0].name = data.columns[0].name.replace('#', '')\n  // set some columns to be numeric\n  data.columns.forEach(col => {\n    if (numericColumns[col.name]) {\n      col.dataType = { type: 'Number' }\n    }\n  })\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const column = data.columns[columnNumber]\n      if (column.name === 'LeftBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.refName = refName\n        featureData.start = pos\n        featureData.end = pos\n        featureData.strand = strand\n      } else if (column.name === 'RightBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.mate = {\n          refName,\n          start: pos,\n          end: pos,\n          strand,\n        }\n      } else if (text && numericColumns[column.name]) {\n        // some other column, numeric\n        featureData[column.name] = parseFloat(text)\n      } else {\n        // some other column, text\n        featureData[column.name] = text\n      }\n    })\n    featureData.uniqueId = `sf-${rowNumber + 1}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  return data\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","options","then","module","default","csv","noheader","output","fromString","guessColumnType","rowSet","columnNumber","isValidRefName","parsedLoc","text","rows","cells","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","maxCols","isLoaded","map","row","rowNumber","id","length","String","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","parseSTARFusionBreakpointString","str","fields","split","pos","parseInt","strand","numericColumns","SpanningFragCount","FFPM","LeftBreakEntropy","RightBreakEntropy","JunctionReadCount","parseSTARFusionBuffer","data","replace","col","featureData","column","end","mate","parseFloat","uniqueId","feature"],"sourceRoot":""}