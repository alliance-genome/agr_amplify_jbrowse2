{"version":3,"file":"static/js/4794.8b733807.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/BamAdapter/BamSlightlyLazyFeature.ts","../../../plugins/alignments/src/BamAdapter/BamAdapter.ts","../../../plugins/alignments/src/HtsgetBamAdapter/HtsgetBamAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { BamRecord } from '@gmod/bam'\nimport { getMismatches } from './MismatchParser'\n\nimport BamAdapter from './BamAdapter'\n\nexport default class BamSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n  constructor(\n    private record: BamRecord,\n    private adapter: BamAdapter,\n    private ref?: string,\n  ) {}\n\n  _get_name() {\n    return this.record.get('name')\n  }\n\n  _get_type(): string {\n    return 'match'\n  }\n\n  _get_score(): number {\n    return this.record.get('mq')\n  }\n\n  _get_flags(): string {\n    return this.record.flags\n  }\n\n  _get_strand(): number {\n    return this.record.isReverseComplemented() ? -1 : 1\n  }\n\n  _get_pair_orientation() {\n    return this.record.isPaired() ? this.record.getPairOrientation() : undefined\n  }\n\n  _get_next_seq_id() {\n    return this.record._next_refid()\n  }\n\n  _get_seq_id() {\n    // @ts-ignore\n    return this.record._refID\n  }\n\n  _get_next_refName() {\n    return this.adapter.refIdToName(this.record._next_refid())\n  }\n\n  _get_next_segment_position() {\n    const { record, adapter } = this\n    return record.isPaired()\n      ? `${adapter.refIdToName(record._next_refid())}:${record._next_pos() + 1}`\n      : undefined\n  }\n\n  _get_seq() {\n    return this.record.getReadBases()\n  }\n\n  qualRaw() {\n    return this.record.qualRaw()\n  }\n\n  set() {}\n\n  tags() {\n    const properties = Object.getOwnPropertyNames(\n      BamSlightlyLazyFeature.prototype,\n    )\n\n    return [\n      ...new Set(\n        properties\n          .filter(\n            prop =>\n              prop.startsWith('_get_') &&\n              prop !== '_get_mismatches' &&\n              prop !== '_get_tags' &&\n              prop !== '_get_next_seq_id' &&\n              prop !== '_get_seq_id',\n          )\n          .map(methodName => methodName.replace('_get_', ''))\n          .concat(this.record._tags()),\n      ),\n    ]\n  }\n\n  id() {\n    return `${this.adapter.id}-${this.record.id()}`\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(field: string): any {\n    const methodName = `_get_${field}`\n    // @ts-ignore\n    if (this[methodName]) {\n      // @ts-ignore\n      return this[methodName]()\n    }\n    return this.record.get(field)\n  }\n\n  _get_refName() {\n    return this.adapter.refIdToName(this.record.seq_id())\n  }\n\n  parent() {\n    return undefined\n  }\n\n  children() {\n    return undefined\n  }\n\n  pairedFeature() {\n    return false\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...Object.fromEntries(\n        this.tags()\n          .map(t => [t, this.get(t)])\n          .filter(elt => elt[1] !== undefined),\n      ),\n      uniqueId: this.id(),\n    }\n  }\n\n  _get_mismatches() {\n    return getMismatches(\n      this.get('CIGAR'),\n      this.get('MD'),\n      this.get('seq'),\n      this.ref,\n      this.qualRaw(),\n    )\n  }\n\n  _get_clipPos() {\n    const cigar = this.get('CIGAR') || ''\n    return this.get('strand') === -1\n      ? +(cigar.match(/(\\d+)[SH]$/) || [])[1] || 0\n      : +(cigar.match(/^(\\d+)([SH])/) || [])[1] || 0\n  }\n}\n","import { BamFile } from '@gmod/bam'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { bytesForRegions, updateStatus } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { toArray } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport BamSlightlyLazyFeature from './BamSlightlyLazyFeature'\n\ninterface Header {\n  idToName: string[]\n  nameToId: Record<string, number>\n}\n\nexport default class BamAdapter extends BaseFeatureDataAdapter {\n  private samHeader?: Header\n\n  private setupP?: Promise<Header>\n\n  protected configured?: Promise<{\n    bam: BamFile\n    sequenceAdapter?: BaseFeatureDataAdapter\n  }>\n\n  // derived classes may not use the same configuration so a custom\n  // configure method allows derived classes to override this behavior\n  protected async configure() {\n    if (!this.configured) {\n      const bamLocation = readConfObject(this.config, 'bamLocation')\n      const location = readConfObject(this.config, ['index', 'location'])\n      const indexType = readConfObject(this.config, ['index', 'indexType'])\n      const bam = new BamFile({\n        bamFilehandle: openLocation(bamLocation, this.pluginManager),\n        csiFilehandle:\n          indexType === 'CSI'\n            ? openLocation(location, this.pluginManager)\n            : undefined,\n        baiFilehandle:\n          indexType !== 'CSI'\n            ? openLocation(location, this.pluginManager)\n            : undefined,\n\n        // chunkSizeLimit and fetchSizeLimit are more troublesome than\n        // helpful, and have given overly large values on the ultra long\n        // nanopore reads even with 500MB limits, so disabled with infinity\n        chunkSizeLimit: Infinity,\n        fetchSizeLimit: Infinity,\n        yieldThreadTime: Infinity,\n      })\n\n      const adapterConfig = readConfObject(this.config, 'sequenceAdapter')\n      if (adapterConfig && this.getSubAdapter) {\n        this.configured = this.getSubAdapter(adapterConfig).then(\n          ({ dataAdapter }) => ({\n            bam,\n            sequenceAdapter: dataAdapter as BaseFeatureDataAdapter,\n          }),\n        )\n      } else {\n        this.configured = Promise.resolve({ bam })\n      }\n    }\n    return this.configured\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { bam } = await this.configure()\n    return bam.getHeaderText(opts)\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const { bam } = await this.configure()\n    this.samHeader = await updateStatus(\n      'Downloading index',\n      statusCallback,\n      async () => {\n        const samHeader = await bam.getHeader(opts)\n\n        // use the @SQ lines in the header to figure out the\n        // mapping between ref ref ID numbers and names\n        const idToName: string[] = []\n        const nameToId: Record<string, number> = {}\n        samHeader\n          .filter(l => l.tag === 'SQ')\n          .forEach((sqLine, refId) => {\n            sqLine.data.forEach(item => {\n              if (item.tag === 'SN') {\n                // this is the ref name\n                const refName = item.value\n                nameToId[refName] = refId\n                idToName[refId] = refName\n              }\n            })\n          })\n\n        return { idToName, nameToId }\n      },\n    )\n    return this.samHeader\n  }\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { idToName } = await this.setup(opts)\n    return idToName\n  }\n\n  private async seqFetch(refName: string, start: number, end: number) {\n    const { sequenceAdapter } = await this.configure()\n    const refSeqStore = sequenceAdapter\n    if (!refSeqStore) {\n      return undefined\n    }\n    if (!refName) {\n      return undefined\n    }\n\n    const features = refSeqStore.getFeatures({\n      refName,\n      start,\n      end,\n      assemblyName: '',\n    })\n\n    const seqChunks = await features.pipe(toArray()).toPromise()\n\n    let sequence = ''\n    seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .forEach(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        sequence += chunkSeq.substr(trimStart, trimLength)\n      })\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions & {\n      filterBy: {\n        flagInclude: number\n        flagExclude: number\n        tagFilter: { tag: string; value: unknown }\n        readName: string\n      }\n    },\n  ) {\n    const { refName, start, end, originalRefName } = region\n    const { signal, filterBy, statusCallback = () => {} } = opts || {}\n    return ObservableCreate<Feature>(async observer => {\n      const { bam } = await this.configure()\n      await this.setup(opts)\n      statusCallback('Downloading alignments')\n      const records = await bam.getRecordsForRange(refName, start, end, opts)\n\n      const {\n        flagInclude = 0,\n        flagExclude = 0,\n        tagFilter,\n        readName,\n      } = filterBy || {}\n\n      for (const record of records) {\n        let ref: string | undefined\n        if (!record.get('MD')) {\n          ref = await this.seqFetch(\n            originalRefName || refName,\n            record.get('start'),\n            record.get('end'),\n          )\n        }\n\n        const flags = record.flags\n        if (\n          !((flags & flagInclude) === flagInclude && !(flags & flagExclude))\n        ) {\n          continue\n        }\n\n        if (tagFilter) {\n          const val = record.get(tagFilter.tag)\n          if (!(val === '*' ? val !== undefined : val === tagFilter.value)) {\n            continue\n          }\n        }\n\n        if (readName && record.get('name') !== readName) {\n          continue\n        }\n\n        observer.next(new BamSlightlyLazyFeature(record, this, ref))\n      }\n      statusCallback('')\n      observer.complete()\n    }, signal)\n  }\n\n  async estimateRegionsStats(regions: Region[], opts?: BaseOptions) {\n    const { bam } = await this.configure()\n    // this is a method to avoid calling on htsget adapters\n    // @ts-ignore\n    if (bam.index.filehandle !== '?') {\n      const bytes = await bytesForRegions(regions, bam)\n      const fetchSizeLimit = readConfObject(this.config, 'fetchSizeLimit')\n      return { bytes, fetchSizeLimit }\n    } else {\n      return super.estimateRegionsStats(regions, opts)\n    }\n  }\n\n  freeResources(/* { region } */): void {}\n\n  // depends on setup being called before the BAM constructor\n  refIdToName(refId: number): string | undefined {\n    return this.samHeader?.idToName[refId]\n  }\n}\n","import { BamFile, HtsgetFile } from '@gmod/bam'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport BamAdapter from '../BamAdapter/BamAdapter'\n\nexport default class HtsgetBamAdapter extends BamAdapter {\n  protected async configure() {\n    if (!this.configured) {\n      const htsgetBase = readConfObject(this.config, 'htsgetBase')\n      const htsgetTrackId = readConfObject(this.config, 'htsgetTrackId')\n      const bam = new HtsgetFile({\n        baseUrl: htsgetBase,\n        trackId: htsgetTrackId,\n      }) as unknown as BamFile\n\n      const adapterConfig = readConfObject(this.config, 'sequenceAdapter')\n      if (adapterConfig && this.getSubAdapter) {\n        this.configured = this.getSubAdapter(adapterConfig).then(\n          ({ dataAdapter }) => {\n            return {\n              bam,\n              sequenceAdapter: dataAdapter as BaseFeatureDataAdapter,\n            }\n          },\n        )\n      }\n      this.configured = Promise.resolve({ bam })\n    }\n    return this.configured\n  }\n}\n"],"names":["BamSlightlyLazyFeature","record","adapter","ref","this","get","flags","isReverseComplemented","isPaired","getPairOrientation","undefined","_next_refid","_refID","refIdToName","_next_pos","getReadBases","qualRaw","properties","Object","getOwnPropertyNames","prototype","Set","filter","prop","startsWith","map","methodName","replace","concat","_tags","id","field","seq_id","fromEntries","tags","t","elt","uniqueId","getMismatches","cigar","match","BamAdapter","configured","samHeader","setupP","bamLocation","readConfObject","config","location","indexType","bam","BamFile","bamFilehandle","openLocation","pluginManager","csiFilehandle","baiFilehandle","chunkSizeLimit","Infinity","fetchSizeLimit","yieldThreadTime","adapterConfig","getSubAdapter","then","dataAdapter","sequenceAdapter","Promise","resolve","opts","configure","getHeaderText","statusCallback","updateStatus","getHeader","idToName","nameToId","l","tag","forEach","sqLine","refId","data","item","refName","value","setupPre","catch","e","setup","start","end","refSeqStore","features","getFeatures","assemblyName","pipe","toArray","toPromise","seqChunks","sequence","sort","a","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","chunkSeq","substr","length","Error","toLocaleString","region","originalRefName","signal","filterBy","ObservableCreate","observer","getRecordsForRange","records","flagInclude","flagExclude","tagFilter","readName","seqFetch","val","next","complete","regions","index","filehandle","bytesForRegions","bytes","BaseFeatureDataAdapter","HtsgetBamAdapter","htsgetBase","htsgetTrackId","HtsgetFile","baseUrl","trackId"],"sourceRoot":""}