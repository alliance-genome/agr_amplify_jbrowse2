{"version":3,"file":"static/js/9742.d25c6a43.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\n/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nfunction paf_chain2paf(lines: string[]) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n  for (let i = 0; i < lines.length; i++) {\n    const l = lines[i]\n    const l_tab = l.replace(/ /g, '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return paf_chain2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport { zip, isGzip } from '../util'\nconst { getMismatches } = MismatchParser\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n\n// based on \"weighted mean\" method from dotPlotly\n// https://github.com/tpoorten/dotPlotly\n// License for dotPlotly reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction getWeightedMeans(ret: PAFRecord[]) {\n  // in the weighted mean longer alignments factor in more\n  // heavily of all the fragments of a query vs the reference that it mapped\n  // to\n  //\n  // this uses a combined key query+'-'+ref to iteratively map all the\n  // alignments that match a particular ref from a particular query (so 1d\n  // array of what could be a 2d map)\n  //\n  // the result is a single number that says e.g. chr5 from human mapped to\n  // chr5 on mouse with 0.8 quality, and that0.8 is then attached to all the\n  // pieces of chr5 on human that mapped to chr5 on mouse. if chr5 on human\n  // also more weakly mapped to chr6 on mouse, then it would have another\n  // value e.g. 0.6. this can show strong and weak levels of synteny,\n  // especially in polyploidy situations\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nfunction getOrientedMismatches(flip: boolean, cigar: string) {\n  const mismatches = getMismatches(cigar)\n  if (flip) {\n    let startReadjuster = 0\n    return mismatches.map(m => {\n      if (m.type === 'insertion') {\n        m.type = 'deletion'\n        m.length = +m.base\n        m.start += startReadjuster\n        startReadjuster += m.length\n      } else if (m.type === 'deletion') {\n        const len = m.length\n        m.type = 'insertion'\n        m.base = `${len}`\n        m.length = 0\n        m.start += startReadjuster\n        startReadjuster -= len\n      }\n      return m\n    })\n  }\n  return mismatches\n}\n\nclass SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      const cg = this.get('cg')\n      const flip = this.get('flipInsDel')\n\n      return cg ? getOrientedMismatches(flip, cg) : []\n    }\n    return super.get(arg)\n  }\n}\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const [\n          qname,\n          ,\n          qstart,\n          qend,\n          strand,\n          tname,\n          ,\n          tstart,\n          tend,\n          numMatches,\n          blockLen,\n          mappingQual,\n          ...fields\n        ] = line.split('\\t')\n\n        const rest = Object.fromEntries(\n          fields.map(field => {\n            const r = field.indexOf(':')\n            const fieldName = field.slice(0, r)\n            const fieldValue = field.slice(r + 3)\n            return [fieldName, fieldValue]\n          }),\n        )\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            numMatches: +numMatches,\n            blockLen: +blockLen,\n            mappingQual: +mappingQual,\n            ...rest,\n          },\n        } as PAFRecord\n      })\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1 } = extra\n          const flip = index === 0\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: `${i}`,\n              assemblyName: assemblyNames[+!flip],\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand, // : !flip ? strand * -1 : strand,\n\n              // this is a special property of how to interpret CIGAR on PAF,\n              // intrinsic to the data format. the CIGAR is read backwards\n              // for features aligning to the negative strand of the target,\n              // which is actually different than how it works in e.g.\n              // BAM/SAM (which is visible during alignments track read vs ref)\n              revCigar: true,\n\n              // depending on whether the query or target is queried, the\n              // \"rev\" flag\n              flipInsDel: flip,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n              ...extra,\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["isGzip","buf","generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","paf_chain2paf","lines","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","i","length","l_vec","replace","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","ChainAdapter","opts","loc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","Error","text","TextDecoder","fatal","decode","filter","line","PAFAdapter","getMismatches","MismatchParser","getWeightedMeans","ret","scoreMap","entry","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","weightedMean","zip","meanScore","min","b","tuples","reduce","valueSum","weightSum","value","weight","SyntenyFeature","arg","get","flip","mismatches","startReadjuster","m","type","base","start","getOrientedMismatches","SimpleFeature","setupP","setupPre","catch","e","undefined","pm","pafLocation","fields","rest","field","r","indexOf","slice","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","end","qref","refName","complete","mateName","mateStart","mateEnd","doesIntersect2","next","uniqueId","revCigar","flipInsDel","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}