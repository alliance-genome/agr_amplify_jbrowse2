{"version":3,"file":"static/js/1025.cbc9c7c7.chunk.js","mappings":"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","sources":["../../../plugins/gff3/src/Gff3TabixAdapter/Gff3TabixAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport gff, { GFF3Feature, GFF3FeatureLineWithRefs } from '@gmod/gff'\nimport { Observer } from 'rxjs'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\ninterface LineFeature {\n  start: number\n  end: number\n  lineHash: number\n  fields: string[]\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gff: TabixIndexedFile\n\n  protected dontRedispatch: string[]\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const gffGzLocation = readConfObject(config, 'gffGzLocation')\n    const indexType = readConfObject(config, ['index', 'indexType'])\n    const location = readConfObject(config, ['index', 'location'])\n    const dontRedispatch = readConfObject(config, 'dontRedispatch')\n\n    this.dontRedispatch = dontRedispatch || ['chromosome', 'contig', 'region']\n    this.gff = new TabixIndexedFile({\n      filehandle: openLocation(gffGzLocation, this.pluginManager),\n      csiFilehandle:\n        indexType === 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      tbiFilehandle:\n        indexType !== 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n      renameRefSeqs: (n: string) => n,\n    })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.gff.getReferenceSequenceNames(opts)\n  }\n\n  public async getHeader() {\n    return this.gff.getHeader()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const metadata = await this.gff.getMetadata()\n      this.getFeaturesHelper(query, opts, metadata, observer, true)\n    }, opts.signal)\n  }\n\n  private async getFeaturesHelper(\n    query: Region,\n    opts: BaseOptions = {},\n    metadata: { columnNumbers: { start: number; end: number } },\n    observer: Observer<Feature>,\n    allowRedispatch: boolean,\n    originalQuery = query,\n  ) {\n    try {\n      const lines: LineFeature[] = []\n\n      await this.gff.getLines(\n        query.refName,\n        query.start,\n        query.end,\n        (line: string, fileOffset: number) => {\n          lines.push(this.parseLine(metadata.columnNumbers, line, fileOffset))\n        },\n      )\n      if (allowRedispatch && lines.length) {\n        let minStart = Infinity\n        let maxEnd = -Infinity\n        lines.forEach(line => {\n          const featureType = line.fields[2]\n          // only expand redispatch range if feature is not a \"dontRedispatch\" type\n          // skips large regions like chromosome,region\n          if (!this.dontRedispatch.includes(featureType)) {\n            const start = line.start - 1 // gff is 1-based\n            if (start < minStart) {\n              minStart = start\n            }\n            if (line.end > maxEnd) {\n              maxEnd = line.end\n            }\n          }\n        })\n        if (maxEnd > query.end || minStart < query.start) {\n          // make a new feature callback to only return top-level features\n          // in the original query range\n          this.getFeaturesHelper(\n            { ...query, start: minStart, end: maxEnd },\n            opts,\n            metadata,\n            observer,\n            false,\n            query,\n          )\n          return\n        }\n      }\n\n      const gff3 = lines\n        .map((lineRecord: LineFeature) => {\n          if (lineRecord.fields[8] && lineRecord.fields[8] !== '.') {\n            if (!lineRecord.fields[8].includes('_lineHash')) {\n              lineRecord.fields[8] += `;_lineHash=${lineRecord.lineHash}`\n            }\n          } else {\n            lineRecord.fields[8] = `_lineHash=${lineRecord.lineHash}`\n          }\n          return lineRecord.fields.join('\\t')\n        })\n        .join('\\n')\n\n      const features = gff.parseStringSync(gff3, {\n        parseFeatures: true,\n        parseComments: false,\n        parseDirectives: false,\n        parseSequences: false,\n      })\n\n      features.forEach(featureLocs =>\n        this.formatFeatures(featureLocs).forEach(f => {\n          if (\n            doesIntersect2(\n              f.get('start'),\n              f.get('end'),\n              originalQuery.start,\n              originalQuery.end,\n            )\n          ) {\n            observer.next(f)\n          }\n        }),\n      )\n      observer.complete()\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n\n  private parseLine(\n    columnNumbers: { start: number; end: number },\n    line: string,\n    fileOffset: number,\n  ) {\n    const fields = line.split('\\t')\n\n    // note: index column numbers are 1-based\n    return {\n      start: +fields[columnNumbers.start - 1],\n      end: +fields[columnNumbers.end - 1],\n      lineHash: fileOffset,\n      fields,\n    }\n  }\n\n  private formatFeatures(featureLocs: GFF3Feature) {\n    return featureLocs.map(\n      featureLoc =>\n        new SimpleFeature({\n          data: this.featureData(featureLoc),\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: `${this.id}-offset-${featureLoc.attributes!._lineHash![0]}`,\n        }),\n    )\n  }\n\n  private featureData(data: GFF3FeatureLineWithRefs) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    if (data.strand === '+') {\n      f.strand = 1\n    } else if (data.strand === '-') {\n      f.strand = -1\n    } else if (data.strand === '.') {\n      f.strand = 0\n    } else {\n      f.strand = undefined\n    }\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = [\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ]\n    const dataAttributes = data.attributes || {}\n    Object.keys(dataAttributes).forEach(a => {\n      let b = a.toLowerCase()\n      if (defaultFields.includes(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (dataAttributes[a] !== null) {\n        let attr: string | string[] | undefined = dataAttributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    })\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length) {\n      f.subfeatures = data.child_features\n        .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))\n        .flat()\n    }\n\n    delete f.child_features\n    delete f.data\n    delete f.derived_features\n    delete f._linehash\n    delete f.attributes\n    delete f.seq_id\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"names":["config","getSubAdapter","pluginManager","gff","dontRedispatch","gffGzLocation","readConfObject","indexType","location","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","renameRefSeqs","n","opts","this","getReferenceSequenceNames","getHeader","query","ObservableCreate","observer","getMetadata","metadata","getFeaturesHelper","signal","allowRedispatch","originalQuery","lines","getLines","refName","start","end","line","fileOffset","push","parseLine","columnNumbers","length","minStart","Infinity","maxEnd","forEach","featureType","fields","includes","gff3","map","lineRecord","lineHash","join","parseFeatures","parseComments","parseDirectives","parseSequences","featureLocs","formatFeatures","f","doesIntersect2","get","next","complete","error","split","featureLoc","SimpleFeature","data","featureData","id","attributes","_lineHash","strand","phase","Number","seq_id","score","defaultFields","dataAttributes","Object","keys","a","b","toLowerCase","attr","Array","isArray","child_features","subfeatures","childLocs","childLoc","flat","derived_features","_linehash","BaseFeatureDataAdapter"],"sourceRoot":""}