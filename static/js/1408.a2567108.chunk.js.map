{"version":3,"file":"static/js/1408.a2567108.chunk.js","mappings":"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","sources":["../../../packages/core/ui/ResizeBar.tsx","../../../packages/core/ui/useResizeBar.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/BookmarkGrid.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/AssemblySelector.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/GridBookmarkWidget.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/utils.ts"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport ResizeHandle from './ResizeHandle'\n\nconst useStyles = makeStyles()(theme => ({\n  resizeBar: {\n    background: theme.palette.action.disabledBackground,\n    height: 12,\n    position: 'relative',\n    overflow: 'hidden',\n  },\n  tick: {\n    position: 'absolute',\n    height: '100%',\n    pointerEvents: 'none',\n    background: theme.palette.action.disabled,\n    width: 1,\n  },\n  hiddenTick: {\n    position: 'absolute',\n    height: '100%',\n    width: 5,\n  },\n}))\n\nfunction Tick({\n  left,\n  scrollLeft,\n  idx,\n  onDrag,\n  onMouseDown,\n}: {\n  idx: number\n  left: number\n  scrollLeft: number\n  onMouseDown: (event: React.MouseEvent) => void\n  onDrag: (\n    lastFrameDistance: number,\n    totalDistance: number,\n    idx: number,\n  ) => void\n}) {\n  const { classes } = useStyles()\n  const onDragCallback = useCallback(\n    (lastFrameDistance: number, totalDistance: number) =>\n      onDrag(lastFrameDistance, totalDistance, idx),\n    [idx, onDrag],\n  )\n\n  // has an invisible wider than tick mark (1px) clickable area (5px)\n  return (\n    <>\n      <ResizeHandle\n        onDrag={onDragCallback}\n        onMouseDown={onMouseDown}\n        vertical\n        className={classes.hiddenTick}\n        style={{ left: left - scrollLeft - 2.5 }}\n      />\n      <div style={{ left: left - scrollLeft }} className={classes.tick} />\n    </>\n  )\n}\n\nexport default function ResizeBar({\n  widths,\n  setWidths,\n  checkbox,\n  scrollLeft = 0,\n}: {\n  widths: number[]\n  setWidths: (arg: number[]) => void\n  checkbox?: boolean\n  scrollLeft?: number\n}) {\n  const { classes } = useStyles()\n  const offsets = [] as number[]\n  const [initial, setInitial] = useState<number[]>()\n  let init = checkbox ? 52 : 0\n  for (let i = 0; i < widths.length; i++) {\n    const width = widths[i]\n    offsets[i] = width + init\n    init += width\n  }\n\n  return (\n    <div className={classes.resizeBar}>\n      {offsets.map((left, i) => (\n        <Tick\n          key={i}\n          onMouseDown={() => {\n            setInitial([...widths])\n          }}\n          left={i === offsets.length - 1 ? left - 3 : left}\n          onDrag={(_: number, totalDistance: number, idx: number) => {\n            const newWidths = [...widths]\n            // mui doesn't allow columns smaller than 50\n            newWidths[idx] = Math.max(initial![idx] - totalDistance, 50)\n            setWidths(newWidths)\n          }}\n          idx={i}\n          scrollLeft={scrollLeft}\n        />\n      ))}\n    </div>\n  )\n}\n","import { useEffect, useRef, useState } from 'react'\n\nexport function useResizeBar() {\n  const ref = useRef<HTMLDivElement>(null)\n  const [scrollLeft, setScrollLeft] = useState(0)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const elt = ref.current?.querySelector('.MuiDataGrid-virtualScroller')\n      if (elt) {\n        setScrollLeft(elt.scrollLeft)\n      }\n    }, 100)\n    return () => {\n      clearInterval(timer)\n    }\n  }, [])\n  return { ref, scrollLeft }\n}\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Link } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { DataGrid, GRID_CHECKBOX_SELECTION_COL_DEF } from '@mui/x-data-grid'\nimport {\n  getSession,\n  assembleLocString,\n  measureGridWidth,\n  measureText,\n} from '@jbrowse/core/util'\nimport { useResizeBar } from '@jbrowse/core/ui/useResizeBar'\nimport ResizeBar from '@jbrowse/core/ui/ResizeBar'\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\n\n// locals\nimport { navToBookmark } from '../utils'\nimport { GridBookmarkModel } from '../model'\n\nconst EditBookmarkLabelDialog = lazy(\n  () => import('./dialogs/EditBookmarkLabelDialog'),\n)\n\nconst useStyles = makeStyles()(() => ({\n  link: {\n    cursor: 'pointer',\n  },\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\nconst BookmarkGrid = observer(function ({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { classes, cx } = useStyles()\n  const { ref, scrollLeft } = useResizeBar()\n  const {\n    bookmarks,\n    bookmarksWithValidAssemblies,\n    selectedAssemblies,\n    selectedBookmarks,\n  } = model\n\n  const session = getSession(model)\n  const selectedSet = new Set(selectedAssemblies)\n  const rows = bookmarks\n    .filter(r => selectedSet.has(r.assemblyName))\n    .map((region, index) => {\n      const { assemblyName, ...rest } = region\n      return {\n        ...region,\n        id: index,\n        assemblyName,\n        locString: assembleLocString(rest),\n        correspondingObj: region,\n      }\n    })\n\n  const [widths, setWidths] = useState([\n    50,\n    Math.max(\n      measureText('Bookmark link', 12) + 30,\n      measureGridWidth(rows.map(row => row.locString)),\n    ),\n    Math.max(\n      measureText('Label', 12) + 30,\n      measureGridWidth(rows.map(row => row.label)),\n    ),\n    Math.max(\n      measureText('Assembly', 12) + 30,\n      measureGridWidth(rows.map(row => row.assemblyName)),\n    ),\n    100,\n  ])\n\n  return (\n    <div ref={ref}>\n      <ResizeBar\n        widths={widths}\n        setWidths={setWidths}\n        scrollLeft={scrollLeft}\n      />\n      <DataGrid\n        autoHeight\n        density=\"compact\"\n        rows={rows}\n        columns={[\n          {\n            ...GRID_CHECKBOX_SELECTION_COL_DEF,\n            width: widths[0],\n          },\n          {\n            field: 'locString',\n            headerName: 'Bookmark link',\n            width: widths[1],\n            renderCell: ({ value, row }) => (\n              <Link\n                className={cx(classes.link, classes.cell)}\n                href=\"#\"\n                onClick={async event => {\n                  event.preventDefault()\n                  const { views } = session\n                  await navToBookmark(value, row.assemblyName, views, model)\n                }}\n              >\n                {value}\n              </Link>\n            ),\n          },\n          {\n            field: 'label',\n            headerName: 'Label',\n            width: widths[2],\n            editable: true,\n          },\n          {\n            field: 'assemblyName',\n            headerName: 'Assembly',\n            width: widths[3],\n          },\n          {\n            field: 'highlight',\n            headerName: 'Highlight',\n            width: widths[4],\n            renderCell: ({ value, row }) => (\n              <ColorPicker\n                color={value || 'black'}\n                onChange={event => {\n                  model.updateBookmarkHighlight(row, event)\n                }}\n              />\n            ),\n          },\n        ]}\n        onCellDoubleClick={({ row }) => {\n          getSession(model).queueDialog(onClose => [\n            EditBookmarkLabelDialog,\n            { onClose, model, dialogRow: row },\n          ])\n        }}\n        processRowUpdate={row => {\n          const target = rows[row.id]\n          model.updateBookmarkLabel(target, row.label)\n          return row\n        }}\n        onProcessRowUpdateError={e => session.notify(e.message, 'error')}\n        checkboxSelection\n        onRowSelectionModelChange={newRowSelectionModel => {\n          if (bookmarksWithValidAssemblies.length > 0) {\n            model.setSelectedBookmarks(\n              newRowSelectionModel.map(value => ({\n                ...rows[value as number],\n              })),\n            )\n          }\n        }}\n        rowSelectionModel={selectedBookmarks.map(r => r.id)}\n        disableRowSelectionOnClick\n      />\n    </div>\n  )\n})\n\nexport default BookmarkGrid\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Select,\n} from '@mui/material'\n\n// locals\nimport { GridBookmarkModel } from '../model'\n\nconst AssemblySelector = observer(function ({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { validAssemblies, selectedAssemblies } = model\n  const noAssemblies = validAssemblies.size === 0 ? true : false\n  const label = 'Select assemblies'\n  const id = 'select-assemblies-label'\n  const selectedSet = new Set(selectedAssemblies)\n  const isAllSelected = [...validAssemblies].every(e => selectedSet.has(e))\n\n  return (\n    <FormControl disabled={noAssemblies} fullWidth>\n      <InputLabel id={id}>{label}</InputLabel>\n      <Select\n        labelId={id}\n        multiple\n        value={selectedAssemblies}\n        onChange={event => model.setSelectedAssemblies([...event.target.value])}\n        input={<OutlinedInput label={label} />}\n        renderValue={selected => selected.join(', ')}\n      >\n        <MenuItem\n          onClickCapture={event => {\n            // onClickCapture allows us to avoid the parent Select onChange from triggering\n            if (isAllSelected) {\n              model.setSelectedAssemblies([])\n            } else {\n              model.setSelectedAssemblies(undefined)\n            }\n            event.preventDefault()\n          }}\n        >\n          <Checkbox\n            checked={isAllSelected}\n            indeterminate={!isAllSelected && selectedAssemblies.length > 0}\n          />\n          <ListItemText primary=\"Select all\" />\n        </MenuItem>\n        {[...validAssemblies].map(name => (\n          <MenuItem key={name} value={name}>\n            <Checkbox checked={selectedAssemblies.includes(name)} />\n            <ListItemText primary={name} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n})\n\nexport default AssemblySelector\n","import React, { lazy } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\nimport { getSession } from '@jbrowse/core/util'\nimport { Alert } from '@mui/material'\nimport CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton'\n\n// locals\nimport BookmarkGrid from './BookmarkGrid'\nimport AssemblySelector from './AssemblySelector'\nimport { GridBookmarkModel } from '../model'\n\n// icons\nimport Menu from '@mui/icons-material/Menu'\nimport GetApp from '@mui/icons-material/GetApp'\nimport Publish from '@mui/icons-material/Publish'\nimport Settings from '@mui/icons-material/Settings'\nimport Palette from '@mui/icons-material/Palette'\nimport Share from '@mui/icons-material/Share'\nimport Delete from '@mui/icons-material/Delete'\n\n// lazies\nconst ExportBookmarksDialog = lazy(\n  () => import('./dialogs/ExportBookmarksDialog'),\n)\nconst ImportBookmarksDialog = lazy(\n  () => import('./dialogs/ImportBookmarksDialog'),\n)\nconst ShareBookmarksDialog = lazy(\n  () => import('./dialogs/ShareBookmarksDialog'),\n)\nconst HighlightSettingsDialog = lazy(\n  () => import('./dialogs/HighlightSettingsDialog'),\n)\nconst EditHighlightColorDialog = lazy(\n  () => import('./dialogs/EditHighlightColorDialog'),\n)\nconst DeleteBookmarksDialog = lazy(\n  () => import('./dialogs/DeleteBookmarksDialog'),\n)\n\nconst useStyles = makeStyles()({\n  flex: {\n    display: 'flex',\n  },\n})\n\nconst GridBookmarkWidget = observer(function GridBookmarkWidget({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { classes } = useStyles()\n\n  if (!model) {\n    return null\n  }\n\n  return (\n    <div>\n      <Alert severity=\"info\">\n        Click and type within the <strong>label</strong> field to annotate your\n        bookmark. Double click the <strong>label</strong> field to do so within\n        a dialog.\n      </Alert>\n      <div className={classes.flex}>\n        <CascadingMenuButton\n          data-testid=\"grid_bookmark_menu\"\n          menuItems={[\n            {\n              label: 'Export',\n              icon: GetApp,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ExportBookmarksDialog,\n                  { onClose, model },\n                ])\n              },\n            },\n            {\n              label: 'Import',\n              icon: Publish,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ImportBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Delete',\n              icon: Delete,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  DeleteBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Share',\n              icon: Share,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ShareBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Edit colors',\n              icon: Palette,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  EditHighlightColorDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Settings',\n              icon: Settings,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  HighlightSettingsDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n          ]}\n        >\n          <Menu />\n        </CascadingMenuButton>\n\n        <AssemblySelector model={model} />\n      </div>\n      <BookmarkGrid model={model} />\n    </div>\n  )\n})\n\nexport default GridBookmarkWidget\n","import { saveAs } from 'file-saver'\nimport { getSession, assembleLocString } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { AbstractViewModel } from '@jbrowse/core/util/types'\n\n// locals\nimport { GridBookmarkModel } from './model'\n\ntype LGV = LinearGenomeViewModel\n\ntype MaybeLGV = LGV | undefined\n\nexport async function navToBookmark(\n  locString: string,\n  assembly: string,\n  views: AbstractViewModel[],\n  model: GridBookmarkModel,\n) {\n  const session = getSession(model)\n  try {\n    // get the focused view\n    let view = views.find(view => view.id === session.focusedViewId) as MaybeLGV\n\n    // check if the focused view is the appropriate assembly, if not proceed\n    if (view?.assemblyNames[0] !== assembly) {\n      view = views.find(\n        elt =>\n          // @ts-expect-error\n          elt.type === 'LinearGenomeView' && elt.assemblyNames[0] === assembly,\n      ) as MaybeLGV\n    }\n\n    // if no view is opened of the selectedAssembly, open a new\n    // view with that assembly\n    if (!view) {\n      const newViewId = `${model.id}_${assembly}`\n      view = session.addView('LinearGenomeView', {\n        id: newViewId,\n      }) as LGV\n    }\n    await view.navToLocString(locString, assembly)\n  } catch (e) {\n    console.error(e)\n    session.notify(`${e}`, 'error')\n  }\n}\n\nexport function downloadBookmarkFile(\n  fileFormat: string,\n  model: GridBookmarkModel,\n) {\n  const { selectedBookmarks, bookmarksWithValidAssemblies } = model\n  const bookmarksToDownload =\n    selectedBookmarks.length === 0\n      ? bookmarksWithValidAssemblies\n      : selectedBookmarks\n\n  if (fileFormat === 'BED') {\n    const fileHeader = ''\n    const fileContents: Record<string, string[]> = {}\n    bookmarksToDownload.forEach(bookmark => {\n      const { label } = bookmark\n      const labelVal = label === '' ? '.' : label\n      const line = `${bookmark.refName}\\t${bookmark.start}\\t${bookmark.end}\\t${labelVal}\\n`\n\n      fileContents[bookmark.assemblyName]\n        ? fileContents[bookmark.assemblyName].push(line)\n        : (fileContents[bookmark.assemblyName] = [line])\n    })\n\n    for (const assembly in fileContents) {\n      const fileContent = fileContents[assembly].reduce(\n        (a, b) => a + b,\n        fileHeader,\n      )\n      const blob = new Blob([fileContent || ''], {\n        type: 'text/x-bed;charset=utf-8',\n      })\n      const fileName = `jbrowse_bookmarks_${assembly}.bed`\n      saveAs(blob, fileName)\n    }\n  } else {\n    // TSV\n    const fileHeader = 'chrom\\tstart\\tend\\tlabel\\tassembly_name\\tcoord_range\\n'\n\n    const fileContents = bookmarksToDownload\n      .map(bookmark => {\n        const { label } = bookmark\n        const labelVal = label === '' ? '.' : label\n        const locString = assembleLocString(bookmark)\n        return `${bookmark.refName}\\t${bookmark.start + 1}\\t${\n          bookmark.end\n        }\\t${labelVal}\\t${bookmark.assemblyName}\\t${locString}\\n`\n      })\n      .reduce((a, b) => a + b, fileHeader)\n\n    const blob = new Blob([fileContents || ''], {\n      type: 'text/tab-separated-values;charset=utf-8',\n    })\n    const fileName = 'jbrowse_bookmarks.tsv'\n    saveAs(blob, fileName)\n  }\n}\n\n/**\n * Pad the end of a base64 string with \"=\" to make it valid\n * @param b64 - unpadded b64 string\n */\nexport function b64PadSuffix(b64: string): string {\n  let num = 0\n  const mo = b64.length % 4\n  switch (mo) {\n    case 3:\n      num = 1\n      break\n    case 2:\n      num = 2\n      break\n    case 0:\n      num = 0\n      break\n    default:\n      throw new Error('base64 not a valid length')\n  }\n  return b64 + '='.repeat(num)\n}\n\n/**\n * Decode and inflate a url-safe base64 to a string\n * See {@link https://en.wikipedia.org/wiki/Base64#URL_applications}\n * @param b64 - a base64 string to decode and inflate\n */\nexport async function fromUrlSafeB64(b64: string) {\n  const originalB64 = b64PadSuffix(\n    b64.replaceAll('-', '+').replaceAll('_', '/'),\n  )\n  const { toByteArray } = await import('base64-js')\n  const { inflate } = await import('pako')\n  const bytes = toByteArray(originalB64)\n  const inflated = inflate(bytes)\n  return new TextDecoder().decode(inflated)\n}\n\n/**\n * Compress and encode a string as url-safe base64\n * See {@link https://en.wikipedia.org/wiki/Base64#URL_applications}\n * @param str-  a string to compress and encode\n */\nexport async function toUrlSafeB64(str: string) {\n  const bytes = new TextEncoder().encode(str)\n  const { deflate } = await import('pako')\n  const { fromByteArray } = await import('base64-js')\n  const deflated = deflate(bytes)\n  const encoded = fromByteArray(deflated)\n  const pos = encoded.indexOf('=')\n  return pos > 0\n    ? encoded.slice(0, pos).replaceAll('+', '-').replaceAll('/', '_')\n    : encoded.replaceAll('+', '-').replaceAll('/', '_')\n}\n"],"names":["useStyles","makeStyles","theme","resizeBar","background","palette","action","disabledBackground","height","position","overflow","tick","pointerEvents","disabled","width","hiddenTick","Tick","left","scrollLeft","idx","onDrag","onMouseDown","classes","onDragCallback","useCallback","lastFrameDistance","totalDistance","React","ResizeHandle","vertical","className","style","ResizeBar","widths","setWidths","checkbox","offsets","initial","setInitial","useState","init","i","length","map","key","_","newWidths","Math","max","useResizeBar","ref","useRef","setScrollLeft","useEffect","timer","setInterval","elt","current","querySelector","clearInterval","EditBookmarkLabelDialog","lazy","link","cursor","cell","whiteSpace","textOverflow","observer","model","cx","bookmarks","bookmarksWithValidAssemblies","selectedAssemblies","selectedBookmarks","session","getSession","selectedSet","Set","rows","filter","r","has","assemblyName","region","index","rest","id","locString","assembleLocString","correspondingObj","measureText","measureGridWidth","row","label","DataGrid","autoHeight","density","columns","GRID_CHECKBOX_SELECTION_COL_DEF","field","headerName","renderCell","value","Link","href","onClick","async","event","preventDefault","views","navToBookmark","editable","ColorPicker","color","onChange","updateBookmarkHighlight","onCellDoubleClick","queueDialog","onClose","dialogRow","processRowUpdate","target","updateBookmarkLabel","onProcessRowUpdateError","e","notify","message","checkboxSelection","onRowSelectionModelChange","newRowSelectionModel","setSelectedBookmarks","rowSelectionModel","disableRowSelectionOnClick","validAssemblies","noAssemblies","size","isAllSelected","every","FormControl","fullWidth","InputLabel","Select","labelId","multiple","setSelectedAssemblies","input","OutlinedInput","renderValue","selected","join","MenuItem","onClickCapture","undefined","Checkbox","checked","indeterminate","ListItemText","primary","name","includes","ExportBookmarksDialog","ImportBookmarksDialog","ShareBookmarksDialog","HighlightSettingsDialog","EditHighlightColorDialog","DeleteBookmarksDialog","flex","display","Alert","severity","CascadingMenuButton","menuItems","icon","GetApp","Publish","Delete","Share","Palette","Settings","Menu","AssemblySelector","BookmarkGrid","assembly","view","find","focusedViewId","assemblyNames","type","newViewId","addView","navToLocString","console","error","downloadBookmarkFile","fileFormat","bookmarksToDownload","fileHeader","fileContents","forEach","bookmark","labelVal","line","refName","start","end","push","fileContent","reduce","a","b","blob","Blob","fileName","saveAs","fromUrlSafeB64","b64","originalB64","num","Error","repeat","b64PadSuffix","replaceAll","toByteArray","inflate","inflated","TextDecoder","decode","toUrlSafeB64","str","bytes","TextEncoder","encode","deflate","fromByteArray","encoded","pos","indexOf","slice"],"sourceRoot":""}