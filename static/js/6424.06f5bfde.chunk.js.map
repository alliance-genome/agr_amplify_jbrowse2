{"version":3,"file":"static/js/6424.06f5bfde.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedAdapter/BedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature } from '@jbrowse/core/util'\nimport { featureData } from '../util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class BedAdapter extends BaseFeatureDataAdapter {\n  protected bedFeatures?: Promise<{\n    header: string\n    features: Record<string, string[]>\n    parser: BED\n    columnNames: string[]\n    scoreColumn: string\n    colRef: number\n    colStart: number\n    colEnd: number\n  }>\n\n  protected intervalTrees: Record<\n    string,\n    Promise<IntervalTree | undefined> | undefined\n  > = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const features = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const tab = line.indexOf('\\t')\n      const refName = line.slice(0, tab)\n      if (!features[refName]) {\n        features[refName] = []\n      }\n      features[refName].push(line)\n    }\n\n    const autoSql = this.getConf('autoSql') as string\n    const parser = new BED({ autoSql })\n    const columnNames = this.getConf('columnNames')\n    const scoreColumn = this.getConf('scoreColumn')\n    const colRef = this.getConf('colRef')\n    const colStart = this.getConf('colStart')\n    const colEnd = this.getConf('colEnd')\n\n    return {\n      header,\n      features,\n      parser,\n      columnNames,\n      scoreColumn,\n      colRef,\n      colStart,\n      colEnd,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedFeatures) {\n      this.bedFeatures = this.loadDataP(opts).catch(e => {\n        this.bedFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { features } = await this.loadData(opts)\n    return Object.keys(features)\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureIntervalTreeHelper(refName: string) {\n    const { colRef, colStart, colEnd, features, parser, scoreColumn } =\n      await this.loadData()\n    const lines = features[refName]\n    if (!lines) {\n      return undefined\n    }\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret = lines.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(\n        f,\n        colRef,\n        colStart,\n        colEnd,\n        scoreColumn,\n        parser,\n        uniqueId,\n        names,\n      )\n    })\n\n    for (const obj of ret) {\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n    return intervalTree\n  }\n\n  private async loadFeatureIntervalTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(\n        refName,\n      ).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureIntervalTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\ninterface MinimalFeature {\n  type: string\n  start: number\n  end: number\n  refName: string\n}\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n  const refName = feature.get('refName')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  const newChildren: MinimalFeature[] = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        refName,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["BedAdapter","BaseFeatureDataAdapter","intervalTrees","loadDataP","opts","pm","this","pluginManager","bedLoc","getConf","buf","openLocation","readFile","buffer","isGzip","unzip","length","Error","lines","TextDecoder","fatal","decode","split","filter","f","headerLines","i","startsWith","push","header","join","features","line","tab","indexOf","refName","slice","autoSql","parser","BED","columnNames","scoreColumn","colRef","colStart","colEnd","loadData","bedFeatures","catch","e","undefined","getRefNames","Object","keys","getHeader","getNames","defline","at","includes","map","field","trim","loadFeatureIntervalTreeHelper","names","intervalTree","IntervalTree","ret","uniqueId","id","featureData","obj","insert","get","loadFeatureIntervalTree","getFeatures","query","ObservableCreate","async","start","end","search","forEach","observer","next","complete","signal","freeResources","ucscProcessedTranscript","feature","children","thickStart","thickEnd","blocks","child","sort","a","b","newChildren","block","prime","type","leftPrime","rightPrime","newData","fromEntries","tags","tag","subfeatures","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","data","l","colSame","fields","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score"],"sourceRoot":""}