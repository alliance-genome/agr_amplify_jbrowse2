{"version":3,"file":"static/js/2386.501cdeb1.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(lines: string[]) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n  for (let i = 0; i < lines.length; i++) {\n    const l = lines[i]\n    const l_tab = l.replace(/ /g, '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return paf_chain2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","paf_chain2paf","lines","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","i","length","l_vec","replace","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","isGzip","buf","ChainAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","loc","buffer","text","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","Error","TextDecoder","fatal","decode","abrupt","filter","line","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","entry","quals","len","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","meanScore","min","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAF","_line$split","_line$split2","_toArray","fields","slice","rest","field","r","indexOf","_objectSpread","flipCigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_this2","setupPre","catch","e","undefined","_callee2","pm","pafLocation","_context2","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","from","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","_readFile","file","t1","t2","a"],"sourceRoot":""}