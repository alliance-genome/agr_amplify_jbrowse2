{"version":3,"file":"static/js/8550.31dc705b.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/LinearReadCloudDisplay/util.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawPairChains.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawFeats.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawLongReadChains.ts","../../../plugins/alignments/src/shared/util.ts"],"sourcesContent":["// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  fillColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (fillColor) {\n    ctx.fillStyle = fillColor\n  }\n\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function strokeRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  strokeColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (strokeColor) {\n    ctx.strokeStyle = strokeColor\n  }\n  ctx.strokeRect(x, y, width, height)\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\n\nimport { ChainData, ChainStats, ReducedFeature } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillRectCtx, strokeRectCtx } from './util'\nimport {\n  getPairedInsertSizeAndOrientationColor,\n  getPairedInsertSizeColor,\n  getPairedOrientationColor,\n} from '../shared/color'\n\ninterface ChainCoord {\n  distance: number\n  r1s: number\n  r1e: number\n  r2s: number\n  r2e: number\n  v0: ReducedFeature\n  v1: ReducedFeature\n}\n\nexport function drawPairChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const coords: ChainCoord[] = []\n  const featureHeight = getConf(self, 'featureHeight')\n  const type = self.colorBy?.type || 'insertSizeAndOrientation'\n  const { chains, stats } = chainData\n\n  for (const chain of chains) {\n    // if we're looking at a paired read (flag 1) then assume it is just\n    // two reads (some small cases may defy this assumption such as\n    // secondary alignments but this may be uncommon)\n    if (chain.length > 1) {\n      const v0 = chain[0]\n      const v1 = chain[1]\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const ra2 = asm.getCanonicalRefName(v1.refName) || v1.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      const r2s = view.bpToPx({ refName: ra2, coord: v1.start })?.offsetPx\n      const r2e = view.bpToPx({ refName: ra2, coord: v1.end })?.offsetPx\n\n      let distance = 0\n\n      if (\n        r1s !== undefined &&\n        r1e !== undefined &&\n        r2s !== undefined &&\n        r2e !== undefined\n      ) {\n        if (v0.refName === v1.refName) {\n          const s = Math.min(v0.start, v1.start)\n          const e = Math.max(v0.end, v1.end)\n          distance = Math.abs(e - s)\n        }\n        coords.push({\n          r1s,\n          r1e,\n          r2s,\n          r2e,\n          v0,\n          v1,\n          distance,\n        })\n      }\n    } else if (self.drawSingletons) {\n      const v0 = chain[0]\n\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      if (r1s !== undefined && r1e !== undefined) {\n        const w1 = Math.max(r1e - r1s, 2)\n        fillRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#f00')\n        strokeRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#a00')\n      }\n    }\n  }\n\n  const maxD = Math.log(max(coords.map(c => c.distance)))\n  const minD = Math.max(Math.log(min(coords.map(c => c.distance))) - 1, 0)\n  const scaler = (self.height - 20) / (maxD - minD)\n  for (const { r1e, r1s, r2e, r2s, distance, v0, v1 } of coords) {\n    const w1 = Math.max(r1e - r1s, 2)\n    const w2 = Math.max(r2e - r2s, 2)\n    const [fill, stroke] = getPairedColor({ type, v0, v1, stats }) || []\n    const top = (Math.log(distance) - minD) * scaler\n    const halfHeight = featureHeight / 2 - 0.5\n    const w = r2s - r1e\n    fillRectCtx(r1e - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    strokeRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, stroke)\n    strokeRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, stroke)\n    fillRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, fill)\n    fillRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, fill)\n  }\n}\n\nexport function getPairedColor({\n  type,\n  v0,\n  v1,\n  stats,\n}: {\n  type: string\n  v0: ReducedFeature\n  v1: ReducedFeature\n  stats?: ChainStats\n}): readonly [string, string] | undefined {\n  if (type === 'insertSizeAndOrientation') {\n    return getPairedInsertSizeAndOrientationColor(v0, v1, stats)\n  } else if (type === 'orientation') {\n    return getPairedOrientationColor(v0)\n  } else if (type === 'insertSize') {\n    return getPairedInsertSizeColor(v0, v1, stats)\n  } else if (type === 'gradient') {\n    const s = Math.min(v0.start, v1.start)\n    const e = Math.max(v0.end, v1.end)\n    return [\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,50%)`,\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,30%)`,\n    ] as const\n  }\n  return undefined\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { LinearReadCloudDisplayModel } from './model'\nimport { hasPairedReads } from '../shared/util'\nimport { drawPairChains } from './drawPairChains'\nimport { drawLongReadChains } from './drawLongReadChains'\n\ntype LGV = LinearGenomeViewModel\n\nexport function drawFeats(\n  self: LinearReadCloudDisplayModel,\n  ctx: CanvasRenderingContext2D,\n) {\n  const { chainData } = self\n  if (!chainData) {\n    return\n  }\n  const { assemblyManager } = getSession(self)\n  const view = getContainingView(self) as LGV\n  const assemblyName = view.assemblyNames[0]\n  const asm = assemblyManager.get(assemblyName)\n  if (!asm) {\n    return\n  }\n\n  const hasPaired = hasPairedReads(chainData)\n\n  if (hasPaired) {\n    drawPairChains({ self, view, asm, ctx, chainData })\n  } else {\n    drawLongReadChains({ self, view, asm, ctx, chainData })\n  }\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { ChainData } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillColor, strokeColor } from '../shared/color'\nimport { fillRectCtx, strokeRectCtx } from './util'\n\nexport function drawLongReadChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const distances: number[] = []\n  const minXs: number[] = []\n  const { chains } = chainData\n  const { height } = self\n  const featureHeight = getConf(self, 'featureHeight')\n\n  // get bounds on the 'distances' (pixel span that a particular split long\n  // read 'chain' would have in view)\n  for (const chain of chains) {\n    let minX = Number.MAX_VALUE\n    let maxX = Number.MIN_VALUE\n    for (const elt of chain) {\n      const refName = asm.getCanonicalRefName(elt.refName) || elt.refName\n      const rs = view.bpToPx({ refName, coord: elt.start })?.offsetPx\n      const re = view.bpToPx({ refName, coord: elt.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        minX = Math.min(minX, rs)\n        maxX = Math.max(maxX, re)\n      }\n    }\n    const distance = Math.abs(maxX - minX)\n    distances.push(distance)\n    minXs.push(minX)\n  }\n\n  const maxD = Math.log(max(distances))\n  const minD = Math.max(Math.log(min(distances)) - 1, 0)\n  const scaler = (height - 20) / (maxD - minD)\n  const halfHeight = featureHeight / 2 - 0.5\n\n  // draw split long read 'chains' as connected entities\n  for (let i = 0; i < chains.length; i++) {\n    const chain = chains[i]\n    const w = distances[i]\n    const top = (Math.log(w) - minD) * scaler\n    const min = minXs[i]\n    fillRectCtx(min - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    const c1 = chain[0]\n    let primaryStrand: undefined | number\n    if (!(c1.flags & 2048)) {\n      primaryStrand = c1.strand\n    } else {\n      const res = c1.SA?.split(';')[0].split(',')[2]\n      primaryStrand = res === '-' ? -1 : 1\n    }\n    for (const v0 of chain) {\n      const ra = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const rs = view.bpToPx({ refName: ra, coord: v0.start })?.offsetPx\n      const re = view.bpToPx({ refName: ra, coord: v0.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        const w = Math.max(re - rs, 2)\n        const l = rs - view.offsetPx\n        const effectiveStrand = v0.strand * primaryStrand\n        const c =\n          effectiveStrand === -1 ? 'color_rev_strand' : 'color_fwd_strand'\n        strokeRectCtx(l, top, w, featureHeight, ctx, strokeColor[c])\n        fillRectCtx(l, top, w, featureHeight, ctx, fillColor[c])\n      }\n    }\n  }\n}\n","import { ChainData } from './fetchChains'\n\nexport function hasPairedReads(features: ChainData) {\n  for (const f of features.chains.values()) {\n    if (f[0].flags & 1) {\n      return true\n    }\n  }\n  return false\n}\n"],"names":["fillRectCtx","x","y","width","height","ctx","fillColor","fillStyle","fillRect","strokeRectCtx","strokeColor","strokeStyle","strokeRect","getPairedColor","_ref4","type","v0","v1","stats","getPairedInsertSizeAndOrientationColor","getPairedOrientationColor","getPairedInsertSizeColor","s","Math","min","start","e","max","end","concat","log10","abs","drawFeats","self","chainData","assemblyManager","getSession","view","getContainingView","assemblyName","assemblyNames","asm","get","hasPairedReads","_ref","_self$colorBy","_step","coords","featureHeight","getConf","colorBy","chains","_iterator","_createForOfIteratorHelper","n","done","chain","value","length","_view$bpToPx","_view$bpToPx2","_view$bpToPx3","_view$bpToPx4","ra1","getCanonicalRefName","refName","ra2","r1s","bpToPx","coord","offsetPx","r1e","r2s","r2e","distance","undefined","push","drawSingletons","_view$bpToPx5","_view$bpToPx6","w1","err","f","maxD","log","map","c","minD","scaler","_i","_coords","_coords$_i","w2","_ref2","_ref3","_slicedToArray","fill","stroke","top","halfHeight","w","drawPairChains","distances","minXs","_step3","minX","Number","MAX_VALUE","maxX","MIN_VALUE","_iterator3","elt","rs","re","i","_c1$SA","c1","primaryStrand","flags","SA","split","strand","_step2","_iterator2","ra","l","drawLongReadChains","features","values"],"sourceRoot":""}