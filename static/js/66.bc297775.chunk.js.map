{"version":3,"file":"static/js/66.bc297775.chunk.js","mappings":"uVAuBMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,YAAa,CACXC,SAAU,WACVC,MAAOH,EAAMI,QAAQ,GACrBC,IAAKL,EAAMI,QAAQ,GACnBE,MAAON,EAAMO,QAAQC,KAAK,MAE5BC,cAAe,CACbC,MAAO,QARyB,IA0IpC,WAAeC,EAAAA,EAAAA,WA9Hf,YAMI,IAOEC,EAZJC,EAKC,EALDA,MACAC,EAIC,EAJDA,YAKQC,EAAYjB,IAAZiB,QACR,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA0CJ,EAAAA,EAAAA,WAAS,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,KACA,GAA8CN,EAAAA,EAAAA,WAAS,GAAvD,eAAOO,EAAP,KAAwBC,EAAxB,KAIA,IACE,IAAIC,OAAOR,EAGZ,CAFC,MAAOS,GACPd,EAAQc,CACT,CAED,OACE,UAAC,IAAD,CAAQC,SAAS,KAAKC,MAAI,EAACC,QAASf,EAApC,WACE,UAAC,IAAD,6BAEGA,GACC,SAAC,IAAD,CACEgB,UAAWf,EAAQd,YACnB8B,QAAS,kBAAMjB,GAAN,EACTkB,KAAK,QAHP,UAKE,SAAC,IAAD,MAEA,SAEN,SAAC,IAAD,KAEA,UAAC,IAAD,CAAeF,UAAWf,EAAQN,cAAlC,WACE,SAAC,IAAD,+KAKA,SAAC,IAAD,CACEQ,MAAOA,EACPgB,SAAU,SAAAP,GAAC,OAAIR,EAASQ,EAAEQ,OAAOjB,MAAtB,EACXkB,WAAW,6BAEb,UAAC,IAAD,YACE,SAAC,IAAD,CACEC,SACE,SAAC,IAAD,CACEC,QAASlB,EACTc,SAAU,SAAAK,GAAK,OAAIlB,EAAiBkB,EAAMJ,OAAOG,QAAlC,IAGnBE,MAAM,2BAER,SAAC,IAAD,CACEH,SACE,SAAC,IAAD,CACEC,QAAShB,EACTY,SAAU,SAAAK,GAAK,OAAIhB,EAAiBgB,EAAMJ,OAAOG,QAAlC,IAGnBE,MAAM,2BAER,SAAC,IAAD,CACEH,SACE,SAAC,IAAD,CACEC,QAASd,EACTU,SAAU,SAAAK,GAAK,OAAId,EAAmBc,EAAMJ,OAAOG,QAApC,IAGnBE,MAAM,wBAGT3B,GAAQ,SAAC,IAAD,CAAYN,MAAM,QAAlB,mBAA8BM,KAAwB,SAEjE,UAAC,IAAD,YACE,SAAC,IAAD,CACEmB,QAAS,WACP,GAAId,EAAO,CAAC,IAAD,EACHuB,EAAO,2BAAuBC,KAAKC,OACnCC,GAAUC,EAAAA,EAAAA,YAAW/B,GACnBgC,EAAoBF,EAApBE,gBACFC,EAAejC,EAAMkC,cAAc,GACzCJ,EAAQK,aAAa,CACnBR,QAAAA,EACAS,KAAK,mBAAD,OAAqBhC,GACzB8B,cAAe,CAACD,GAChBI,KAAM,eACNC,QAAS,CACPD,KAAM,wBACNE,OAAQnC,EACRE,cAAAA,EACAE,cAAAA,EACAE,gBAAAA,EACA8B,iBAAiBC,EAAAA,EAAAA,aAAW,UAC1BT,EAAgBU,IAAIT,UADM,aAC1B,EAAmCU,cAAcC,SAC9CN,YAITtC,EAAM6C,YAAYlB,EACnB,CACD1B,GACD,EACD6C,QAAQ,YACRrD,MAAM,UA7BR,qBAkCA,SAAC,IAAD,CACEyB,QAAS,kBAAMjB,GAAN,EACT6C,QAAQ,YACRrD,MAAM,YAHR,wBAUP,G","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/SequenceSearchDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  FormGroup,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\n\n// icons\nimport CloseIcon from '@mui/icons-material/Close'\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  dialogContent: {\n    width: '40em',\n  },\n}))\n\nfunction SequenceDialog({\n  model,\n  handleClose,\n}: {\n  model: { assemblyNames: string[]; toggleTrack(trackId: string): void }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  const [searchForward, setSearchForward] = useState(true)\n  const [searchReverse, setSearchReverse] = useState(true)\n  const [caseInsensitive, setCaseInsensitive] = useState(true)\n\n  let error\n\n  try {\n    new RegExp(value)\n  } catch (e) {\n    error = e\n  }\n\n  return (\n    <Dialog maxWidth=\"xl\" open onClose={handleClose}>\n      <DialogTitle>\n        Sequence search\n        {handleClose ? (\n          <IconButton\n            className={classes.closeButton}\n            onClick={() => handleClose()}\n            size=\"large\"\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </DialogTitle>\n      <Divider />\n\n      <DialogContent className={classes.dialogContent}>\n        <Typography>\n          Supply a sequence to search for. A track will be created with the\n          resulting matches once submitted. You can also supply regex style\n          expressions e.g. AACT(C|T).\n        </Typography>\n        <TextField\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          helperText=\"Sequence search pattern\"\n        />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={searchForward}\n                onChange={event => setSearchForward(event.target.checked)}\n              />\n            }\n            label=\"Search forward strand\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={searchReverse}\n                onChange={event => setSearchReverse(event.target.checked)}\n              />\n            }\n            label=\"Search reverse strand\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={caseInsensitive}\n                onChange={event => setCaseInsensitive(event.target.checked)}\n              />\n            }\n            label=\"Case insensitive\"\n          />\n        </FormGroup>\n        {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            if (value) {\n              const trackId = `sequence_search_${+Date.now()}`\n              const session = getSession(model)\n              const { assemblyManager } = session\n              const assemblyName = model.assemblyNames[0]\n              session.addTrackConf({\n                trackId,\n                name: `Sequence search ${value}`,\n                assemblyNames: [assemblyName],\n                type: 'FeatureTrack',\n                adapter: {\n                  type: 'SequenceSearchAdapter',\n                  search: value,\n                  searchForward,\n                  searchReverse,\n                  caseInsensitive,\n                  sequenceAdapter: getSnapshot(\n                    assemblyManager.get(assemblyName)?.configuration.sequence\n                      .adapter,\n                  ),\n                },\n              })\n              model.toggleTrack(trackId)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Submit\n        </Button>\n\n        <Button\n          onClick={() => handleClose()}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default observer(SequenceDialog)\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","dialogContent","width","observer","error","model","handleClose","classes","useState","value","setValue","searchForward","setSearchForward","searchReverse","setSearchReverse","caseInsensitive","setCaseInsensitive","RegExp","e","maxWidth","open","onClose","className","onClick","size","onChange","target","helperText","control","checked","event","label","trackId","Date","now","session","getSession","assemblyManager","assemblyName","assemblyNames","addTrackConf","name","type","adapter","search","sequenceAdapter","getSnapshot","get","configuration","sequence","toggleTrack","variant"],"sourceRoot":""}