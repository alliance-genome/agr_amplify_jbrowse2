{"version":3,"file":"static/js/6952.4f7eeb86.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport { zip, isGzip } from '../util'\nconst { getMismatches } = MismatchParser\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n\n// based on \"weighted mean\" method from dotPlotly\n// https://github.com/tpoorten/dotPlotly\n// License for dotPlotly reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction getWeightedMeans(ret: PAFRecord[]) {\n  // in the weighted mean longer alignments factor in more\n  // heavily of all the fragments of a query vs the reference that it mapped\n  // to\n  //\n  // this uses a combined key query+'-'+ref to iteratively map all the\n  // alignments that match a particular ref from a particular query (so 1d\n  // array of what could be a 2d map)\n  //\n  // the result is a single number that says e.g. chr5 from human mapped to\n  // chr5 on mouse with 0.8 quality, and that0.8 is then attached to all the\n  // pieces of chr5 on human that mapped to chr5 on mouse. if chr5 on human\n  // also more weakly mapped to chr6 on mouse, then it would have another\n  // value e.g. 0.6. this can show strong and weak levels of synteny,\n  // especially in polyploidy situations\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nfunction getOrientedMismatches(flip: boolean, cigar: string) {\n  const mismatches = getMismatches(cigar)\n  if (flip) {\n    let startReadjuster = 0\n    return mismatches.map(m => {\n      if (m.type === 'insertion') {\n        m.type = 'deletion'\n        m.length = +m.base\n        m.start += startReadjuster\n        startReadjuster += m.length\n      } else if (m.type === 'deletion') {\n        const len = m.length\n        m.type = 'insertion'\n        m.base = `${len}`\n        m.length = 0\n        m.start += startReadjuster\n        startReadjuster -= len\n      }\n      return m\n    })\n  }\n  return mismatches\n}\n\nclass SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      const cg = this.get('cg')\n      const flip = this.get('flipInsDel')\n\n      return cg ? getOrientedMismatches(flip, cg) : []\n    }\n    return super.get(arg)\n  }\n}\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const [\n          qname,\n          ,\n          qstart,\n          qend,\n          strand,\n          tname,\n          ,\n          tstart,\n          tend,\n          numMatches,\n          blockLen,\n          mappingQual,\n          ...fields\n        ] = line.split('\\t')\n\n        const rest = Object.fromEntries(\n          fields.map(field => {\n            const r = field.indexOf(':')\n            const fieldName = field.slice(0, r)\n            const fieldValue = field.slice(r + 3)\n            return [fieldName, fieldValue]\n          }),\n        )\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            numMatches: +numMatches,\n            blockLen: +blockLen,\n            mappingQual: +mappingQual,\n            ...rest,\n          },\n        } as PAFRecord\n      })\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1 } = extra\n          const flip = index === 0\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: `${i}`,\n              assemblyName: assemblyNames[+!flip],\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand, // : !flip ? strand * -1 : strand,\n\n              // this is a special property of how to interpret CIGAR on PAF,\n              // intrinsic to the data format. the CIGAR is read backwards\n              // for features aligning to the negative strand of the target,\n              // which is actually different than how it works in e.g.\n              // BAM/SAM (which is visible during alignments track read vs ref)\n              revCigar: true,\n\n              // depending on whether the query or target is queried, the\n              // \"rev\" flag\n              flipInsDel: flip,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n              ...extra,\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["getMismatches","MismatchParser","getWeightedMeans","ret","scoreMap","i","length","entry","key","qname","tname","quals","len","push","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","reduce","valueSum","weightSum","value","weight","SyntenyFeature","arg","cg","this","get","flip","cigar","mismatches","startReadjuster","m","type","base","start","getOrientedMismatches","SimpleFeature","PAFAdapter","setupP","opts","setupPre","catch","e","undefined","pm","pluginManager","pafLocation","openLocation","getConf","readFile","buffer","isGzip","unzip","buf","Error","text","TextDecoder","fatal","decode","split","filter","line","qstart","qend","strand","tstart","tend","numMatches","fields","rest","field","r","indexOf","slice","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","end","qref","refName","complete","mateName","mateStart","mateEnd","doesIntersect2","next","uniqueId","revCigar","flipInsDel","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}