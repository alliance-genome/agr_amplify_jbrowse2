{"version":3,"file":"static/js/9662.702351a1.chunk.js","mappings":"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","sources":["../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/AssemblySelector.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/DeleteBookmark.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/utils.ts","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/DownloadBookmarks.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/ImportBookmarks.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/ClearBookmarks.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/GridBookmarkWidget.tsx","../../../node_modules/@mui/icons-material/Publish.js","../../../node_modules/@mui/material/esm/Link/getTextDecoration.js","../../../node_modules/@mui/material/esm/Link/Link.js","../../../node_modules/@mui/material/esm/Link/linkClasses.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { Typography, Select, MenuItem, FormControl } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { GridBookmarkModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    margin: 5,\n  },\n  selectText: {\n    marginRight: 8,\n    marginTop: 10,\n  },\n  flexItem: {\n    marginRight: 8,\n  },\n}))\n\nfunction AssemblySelector({ model }: { model: GridBookmarkModel }) {\n  const { classes } = useStyles()\n  const { assemblies, selectedAssembly, setSelectedAssembly } = model\n  const noAssemblies = assemblies.length === 0 ? true : false\n\n  const determineCurrentValue = (selectedAssembly: string) => {\n    if (selectedAssembly === 'all') {\n      return 'all'\n    } else if (assemblies.includes(selectedAssembly)) {\n      return selectedAssembly\n    }\n\n    return 'none'\n  }\n\n  return (\n    <div className={classes.container}>\n      <Typography className={classes.selectText}>Select assembly:</Typography>\n      <FormControl className={classes.flexItem} disabled={noAssemblies}>\n        <Select\n          value={determineCurrentValue(selectedAssembly)}\n          onChange={event => setSelectedAssembly(event.target.value)}\n        >\n          <MenuItem value=\"none\">none</MenuItem>\n          <MenuItem value=\"all\">all</MenuItem>\n          {assemblies.map(assembly => (\n            <MenuItem value={assembly} key={assembly}>\n              {assembly}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default observer(AssemblySelector)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { assembleLocString } from '@jbrowse/core/util'\n\nimport {\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport CloseIcon from '@mui/icons-material/Close'\n\nimport { GridBookmarkModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  closeDialog: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  dialogContainer: {\n    margin: 15,\n  },\n}))\n\nfunction DeleteBookmarkDialog({\n  rowNumber,\n  model,\n  onClose,\n}: {\n  rowNumber: number | undefined\n  model: GridBookmarkModel\n  onClose: () => void\n}) {\n  const { classes } = useStyles()\n\n  const { removeBookmark } = model\n\n  return (\n    <Dialog open={rowNumber !== undefined} onClose={onClose}>\n      <DialogTitle>\n        Delete bookmark\n        <IconButton\n          className={classes.closeDialog}\n          aria-label=\"close-dialog\"\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Typography>\n          Remove{' '}\n          <code>\n            {rowNumber !== undefined\n              ? assembleLocString(model.bookmarkedRegions[rowNumber])\n              : ''}\n          </code>{' '}\n          ?\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            if (rowNumber !== undefined) {\n              removeBookmark(rowNumber)\n              onClose()\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default observer(DeleteBookmarkDialog)\n","import { saveAs } from 'file-saver'\n\nimport {\n  getSession,\n  parseLocString,\n  when,\n  assembleLocString,\n} from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { AbstractViewModel } from '@jbrowse/core/util/types'\n\nimport { GridBookmarkModel } from './model'\nimport { NavigableViewModel, LabeledRegion } from './types'\n\nexport async function navToBookmark(\n  locString: string,\n  views: AbstractViewModel[],\n  model: GridBookmarkModel,\n) {\n  const { selectedAssembly } = model\n  const lgv = views.find(\n    view =>\n      view.type === 'LinearGenomeView' &&\n      // @ts-ignore\n      view.assemblyNames[0] === selectedAssembly,\n  ) as NavigableViewModel\n\n  if (lgv) {\n    lgv.navToLocString(locString)\n  } else {\n    const session = getSession(model)\n    const { assemblyManager } = session\n    const assembly = await assemblyManager.waitForAssembly(selectedAssembly)\n    if (assembly) {\n      try {\n        const loc = parseLocString(locString, refName =>\n          session.assemblyManager.isValidRefName(refName, selectedAssembly),\n        )\n        const { refName } = loc\n        const { regions } = assembly\n        const canonicalRefName = assembly.getCanonicalRefName(refName)\n\n        let newDisplayedRegion\n        if (regions) {\n          newDisplayedRegion = regions.find(\n            region => region.refName === canonicalRefName,\n          )\n        }\n\n        const view = session.addView('LinearGenomeView', {\n          displayName: selectedAssembly,\n        }) as LinearGenomeViewModel\n        await when(() => view.initialized)\n\n        view.setDisplayedRegions([\n          JSON.parse(JSON.stringify(newDisplayedRegion)),\n        ])\n        view.navToLocString(locString)\n      } catch (e) {\n        session.notify(`${e}`, 'error')\n      }\n    }\n  }\n}\n\nexport function downloadBookmarkFile(\n  bookmarkedRegions: LabeledRegion[],\n  fileFormat: string,\n  model: GridBookmarkModel,\n) {\n  const { selectedAssembly } = model\n  const fileHeader =\n    fileFormat === 'TSV'\n      ? 'chrom\\tstart\\tend\\tlabel\\tassembly_name\\tcoord_range\\n'\n      : ''\n\n  const fileContents = bookmarkedRegions\n    .map(b => {\n      const { label } = b\n      const labelVal = label === '' ? '.' : label\n      const locString = assembleLocString(b)\n\n      if (fileFormat === 'BED') {\n        if (b.assemblyName === selectedAssembly || selectedAssembly === 'all') {\n          // the \"name\" column (column 4) in a BED has a max of 255 characters\n          // according to the new spec: https://github.com/samtools/hts-specs/pull/570\n          return `${b.refName}\\t${b.start}\\t${b.end}\\t${labelVal.slice(\n            0,\n            255,\n          )}\\n`\n        }\n        return ''\n      } else {\n        return `${b.refName}\\t${b.start + 1}\\t${b.end}\\t${labelVal}\\t${\n          b.assemblyName\n        }\\t${locString}\\n`\n      }\n    })\n    .reduce((a, b) => a + b, fileHeader)\n\n  const blob = new Blob([fileContents || ''], {\n    type:\n      fileFormat === 'BED'\n        ? 'text/x-bed;charset=utf-8'\n        : 'text/tab-separated-values;charset=utf-8',\n  })\n\n  let fileName\n  if (fileFormat === 'BED') {\n    fileName = `jbrowse_bookmarks_${selectedAssembly}.bed`\n  } else {\n    fileName = 'jbrowse_bookmarks.tsv'\n  }\n\n  saveAs(blob, fileName)\n}\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  MenuItem,\n  Select,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport CloseIcon from '@mui/icons-material/Close'\nimport GetAppIcon from '@mui/icons-material/GetApp'\n\nimport { GridBookmarkModel } from '../model'\nimport { downloadBookmarkFile } from '../utils'\n\nconst useStyles = makeStyles()(() => ({\n  closeDialog: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  dialogContainer: {\n    margin: 15,\n  },\n  flexItem: {\n    margin: 5,\n  },\n  flexContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    width: 200,\n  },\n}))\n\nfunction DownloadBookmarks({ model }: { model: GridBookmarkModel }) {\n  const { classes } = useStyles()\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [fileType, setFileType] = useState('BED')\n  const { bookmarkedRegions } = model\n\n  return (\n    <>\n      <Button startIcon={<GetAppIcon />} onClick={() => setDialogOpen(true)}>\n        Download\n      </Button>\n      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\n        <DialogTitle>\n          <IconButton\n            className={classes.closeDialog}\n            aria-label=\"close-dialog\"\n            onClick={() => setDialogOpen(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Typography>Format to download</Typography>\n          <Select\n            className={classes.flexItem}\n            data-testid=\"selectFileType\"\n            value={fileType}\n            onChange={event => setFileType(event.target.value as string)}\n          >\n            <MenuItem value=\"BED\">BED</MenuItem>\n            <MenuItem value=\"TSV\">TSV</MenuItem>\n          </Select>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => setDialogOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button\n            className={classes.flexItem}\n            data-testid=\"dialogDownload\"\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<GetAppIcon />}\n            onClick={() => {\n              downloadBookmarkFile(bookmarkedRegions, fileType, model)\n              setDialogOpen(false)\n            }}\n          >\n            Download\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default observer(DownloadBookmarks)\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport AssemblySelector from '@jbrowse/core/ui/AssemblySelector'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport CloseIcon from '@mui/icons-material/Close'\nimport ImportIcon from '@mui/icons-material/Publish'\nimport { GridBookmarkModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  closeDialog: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  dialogContainer: {\n    margin: 15,\n  },\n  flexItem: {\n    margin: 5,\n  },\n}))\n\nfunction ImportBookmarks({\n  model,\n  assemblyName,\n}: {\n  model: GridBookmarkModel\n  assemblyName: string\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [location, setLocation] = useState<FileLocation>()\n  const [error, setError] = useState<unknown>()\n  const [selectedAsm, setSelectedAsm] = useState(\n    assemblyName || assemblyNames[0],\n  )\n\n  return (\n    <>\n      <Button startIcon={<ImportIcon />} onClick={() => setDialogOpen(true)}>\n        Import\n      </Button>\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth=\"xl\"\n      >\n        <DialogTitle>\n          Import bookmarks\n          <IconButton\n            className={classes.closeDialog}\n            aria-label=\"close-dialog\"\n            onClick={() => setDialogOpen(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Choose a BED format file to import. The first 4 columns will be used\n          </Typography>\n\n          <FileSelector\n            location={location}\n            setLocation={setLocation}\n            name=\"File\"\n          />\n          <Typography>Select assembly that your data belongs to</Typography>\n          <AssemblySelector\n            onChange={val => setSelectedAsm(val)}\n            session={session}\n            selected={selectedAsm}\n          />\n          {error ? (\n            <Typography color=\"error\" variant=\"h6\">{`${error}`}</Typography>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => setDialogOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button\n            className={classes.flexItem}\n            data-testid=\"dialogImport\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!location}\n            startIcon={<ImportIcon />}\n            onClick={async () => {\n              try {\n                if (!location) {\n                  return\n                }\n                const data = await openLocation(location).readFile('utf8')\n                const regions = data\n                  .split(/\\n|\\r\\n|\\r/)\n                  .filter(f => !!f.trim())\n                  .filter(\n                    f =>\n                      !f.startsWith('#') &&\n                      !f.startsWith('track') &&\n                      !f.startsWith('browser'),\n                  )\n                  .map(line => {\n                    const [refName, start, end, name] = line.split('\\t')\n                    return {\n                      assemblyName: selectedAsm,\n                      refName,\n                      start: +start,\n                      end: +end,\n                      label: name === '.' ? undefined : name,\n                    }\n                  })\n                model.importBookmarks(regions)\n                setDialogOpen(false)\n              } catch (e) {\n                console.error(e)\n                setError(e)\n              }\n            }}\n          >\n            Import\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default observer(ImportBookmarks)\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport ClearAllIcon from '@mui/icons-material/ClearAll'\nimport CloseIcon from '@mui/icons-material/Close'\n\nimport { GridBookmarkModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  closeDialog: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  dialogContainer: {\n    margin: 15,\n  },\n}))\n\nfunction ClearBookmarks({ model }: { model: GridBookmarkModel }) {\n  const { classes } = useStyles()\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  const { clearAllBookmarks } = model\n\n  return (\n    <>\n      <Button\n        startIcon={<ClearAllIcon />}\n        aria-label=\"clear bookmarks\"\n        onClick={() => setDialogOpen(true)}\n      >\n        Clear\n      </Button>\n      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\n        <DialogTitle>\n          Clear bookmarks\n          <IconButton\n            className={classes.closeDialog}\n            aria-label=\"close-dialog\"\n            onClick={() => setDialogOpen(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Clear all bookmarks? Note this will clear bookmarks for all\n            assemblies\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              setDialogOpen(false)\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              clearAllBookmarks()\n              setDialogOpen(false)\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default observer(ClearBookmarks)\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Link, IconButton, Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { DataGrid, GridCellParams } from '@mui/x-data-grid'\nimport { getSession, assembleLocString, measureText } from '@jbrowse/core/util'\nimport DeleteIcon from '@mui/icons-material/Delete'\n\n// locals\nimport AssemblySelector from './AssemblySelector'\nimport DeleteBookmarkDialog from './DeleteBookmark'\nimport DownloadBookmarks from './DownloadBookmarks'\nimport ImportBookmarks from './ImportBookmarks'\nimport ClearBookmarks from './ClearBookmarks'\nimport { GridBookmarkModel } from '../model'\nimport { navToBookmark } from '../utils'\n\nconst useStyles = makeStyles()(() => ({\n  link: {\n    cursor: 'pointer',\n  },\n}))\n\n// creates a coarse measurement of column width, similar to code in\n// BaseFeatureDetails\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst measure = (row: any, col: string) =>\n  Math.min(Math.max(measureText(String(row[col]), 14) + 20, 80), 1000)\n\nconst BookmarkGrid = observer(({ model }: { model: GridBookmarkModel }) => {\n  const { classes } = useStyles()\n  const [dialogRowNumber, setDialogRowNumber] = useState<number>()\n  const { bookmarkedRegions, selectedAssembly } = model\n  const { views } = getSession(model)\n\n  const bookmarkRows = bookmarkedRegions\n    .filter(\n      r => selectedAssembly === 'all' || r.assemblyName === selectedAssembly,\n    )\n    .map((region, index) => {\n      const { assemblyName, ...rest } = region\n      return {\n        ...region,\n        id: index,\n        delete: index,\n        locString: assembleLocString(\n          selectedAssembly === 'all' ? region : rest,\n        ),\n      }\n    })\n\n  const columns = [\n    {\n      field: 'locString',\n      headerName: 'bookmark link',\n      width: Math.max(...bookmarkRows.map(row => measure(row, 'locString'))),\n      renderCell: (params: GridCellParams) => {\n        const { value } = params\n        return (\n          <Link\n            className={classes.link}\n            onClick={(event: React.MouseEvent) => {\n              navToBookmark(value as string, views, model)\n              event.preventDefault()\n            }}\n          >\n            {value}\n          </Link>\n        )\n      },\n    },\n    {\n      field: 'label',\n      width: Math.max(\n        100,\n        Math.max(...bookmarkRows.map(row => measure(row, 'label'))),\n      ),\n      editable: true,\n    },\n    {\n      field: 'delete',\n      width: 30,\n      renderCell: (params: GridCellParams) => {\n        const { value } = params\n        return (\n          <IconButton\n            data-testid=\"deleteBookmark\"\n            aria-label=\"delete\"\n            onClick={() => {\n              if (value !== null && value !== undefined) {\n                setDialogRowNumber(+value)\n              }\n            }}\n          >\n            <DeleteIcon />\n          </IconButton>\n        )\n      },\n    },\n  ]\n\n  return (\n    <>\n      <DataGrid\n        density=\"compact\"\n        rows={bookmarkRows}\n        columns={columns}\n        onCellEditCommit={args => {\n          const { value, id } = args\n          model.updateBookmarkLabel(id as number, value as string)\n        }}\n        disableSelectionOnClick\n      />\n\n      <DeleteBookmarkDialog\n        rowNumber={dialogRowNumber}\n        model={model}\n        onClose={() => setDialogRowNumber(undefined)}\n      />\n    </>\n  )\n})\n\nfunction GridBookmarkWidget({ model }: { model: GridBookmarkModel }) {\n  const { selectedAssembly } = model\n\n  return (\n    <>\n      <AssemblySelector model={model} />\n      <DownloadBookmarks model={model} />\n      <ImportBookmarks model={model} assemblyName={selectedAssembly} />\n      <ClearBookmarks model={model} />\n\n      <div style={{ margin: 12 }}>\n        <Typography>\n          Note: you can double click the <code>label</code> field to add your\n          own custom notes\n        </Typography>\n      </div>\n      <div style={{ height: 750, width: '100%' }}>\n        <BookmarkGrid model={model} />\n      </div>\n    </>\n  )\n}\n\nexport default observer(GridBookmarkWidget)\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5 4v2h14V4H5zm0 10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Publish');\n\nexports.default = _default;","import { alpha, getPath } from '@mui/system';\nexport const colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = transformDeprecatedColors(ownerState.color);\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\", \"sx\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport getTextDecoration, { colorTransformations } from './getTextDecoration';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && _extends({\n    textDecoration: 'underline'\n  }, ownerState.color !== 'inherit' && {\n    textDecorationColor: getTextDecoration({\n      theme,\n      ownerState\n    })\n  }, {\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }), ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n    },\n\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const {\n      className,\n      color = 'primary',\n      component = 'a',\n      onBlur,\n      onFocus,\n      TypographyClasses,\n      underline = 'always',\n      variant = 'inherit',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = event => {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant,\n    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])]\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;"],"names":["useStyles","makeStyles","container","display","flexDirection","margin","selectText","marginRight","marginTop","flexItem","observer","model","classes","assemblies","selectedAssembly","setSelectedAssembly","noAssemblies","length","className","Typography","FormControl","disabled","Select","value","includes","determineCurrentValue","onChange","event","target","MenuItem","map","assembly","closeDialog","position","right","top","dialogContainer","rowNumber","onClose","removeBookmark","Dialog","open","undefined","DialogTitle","IconButton","onClick","Close","DialogContent","assembleLocString","bookmarkedRegions","DialogActions","Button","variant","color","locString","views","lgv","find","view","type","assemblyNames","navToLocString","session","getSession","assemblyManager","waitForAssembly","loc","parseLocString","refName","isValidRefName","regions","canonicalRefName","getCanonicalRefName","newDisplayedRegion","region","addView","displayName","when","initialized","setDisplayedRegions","JSON","parse","stringify","notify","flexContainer","justifyContent","width","useState","dialogOpen","setDialogOpen","fileType","setFileType","startIcon","GetApp","fileFormat","fileName","fileHeader","fileContents","b","label","labelVal","assemblyName","start","end","slice","reduce","a","blob","Blob","saveAs","downloadBookmarkFile","location","setLocation","error","setError","selectedAsm","setSelectedAsm","maxWidth","FileSelector","name","val","selected","openLocation","readFile","data","split","filter","f","trim","startsWith","line","importBookmarks","console","clearAllBookmarks","ClearAll","link","cursor","measure","row","col","Math","min","max","measureText","String","BookmarkGrid","dialogRowNumber","setDialogRowNumber","bookmarkRows","r","index","rest","id","delete","columns","field","headerName","renderCell","params","Link","navToBookmark","preventDefault","editable","Delete","DataGrid","density","rows","onCellEditCommit","args","updateBookmarkLabel","disableSelectionOnClick","DeleteBookmark","style","height","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","colorTransformations","primary","textPrimary","secondary","textSecondary","theme","ownerState","transformedColor","transformDeprecatedColors","getPath","channelColor","alpha","_excluded","LinkRoot","styled","slot","overridesResolver","props","styles","root","capitalize","underline","component","button","_extends","textDecoration","textDecorationColor","getTextDecoration","WebkitTapHighlightColor","backgroundColor","outline","border","borderRadius","padding","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","linkClasses","React","inProps","ref","useThemeProps","onBlur","onFocus","TypographyClasses","sx","other","_objectWithoutPropertiesLoose","useIsFocusVisible","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","focusVisible","setFocusVisible","handlerRef","useForkRef","slots","composeClasses","getLinkUtilityClass","useUtilityClasses","_jsx","clsx","current","Object","keys","Array","isArray","generateUtilityClass","generateUtilityClasses"],"sourceRoot":""}