{"version":3,"file":"static/js/477.c45db4ce.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","options","then","module","default","csv","noheader","output","fromString","guessColumnType","rowSet","columnNumber","isValidRefName","parsedLoc","text","rows","cells","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","maxCols","isLoaded","map","row","rowNumber","id","length","String","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter"],"sourceRoot":""}