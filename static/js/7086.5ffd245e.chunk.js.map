{"version":3,"file":"static/js/7086.5ffd245e.chunk.js","mappings":"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","sources":["components/ShareDialog.tsx","../../../node_modules/@mui/icons-material/BookmarkAdd.js"],"sourcesContent":["import React, { useState, useEffect, lazy } from 'react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { StringParam, useQueryParam } from 'use-query-params'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\n// icons\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons'\nimport BookmarkAddIcon from '@mui/icons-material/BookmarkAdd'\n\n// locals\nimport { toUrlSafeB64 } from '../util'\nimport { shareSessionToDynamo } from '../sessionSharing'\n\nconst SettingsDialog = lazy(() => import('./ShareSettingsDialog'))\n\nconst SHARE_URL_LOCALSTORAGE_KEY = 'jbrowse-shareURL'\n\nfunction LinkField({ url }: { url: string }) {\n  return (\n    <TextField\n      label=\"URL\"\n      value={url}\n      InputProps={{ readOnly: true }}\n      variant=\"filled\"\n      fullWidth\n      onClick={event => {\n        const target = event.target as HTMLTextAreaElement\n        target.select()\n      }}\n    />\n  )\n}\n\nexport default observer(function ({\n  handleClose,\n  session,\n}: {\n  handleClose: () => void\n  session: AbstractSessionModel & { shareURL: string }\n}) {\n  const [sessionParam, setSessionParam] = useState('')\n  const [passwordParam, setPasswordParam] = useState('')\n  const [shortUrl, setShortUrl] = useState('')\n  const [longUrl, setLongUrl] = useState('')\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<unknown>()\n  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false)\n  const [, setPassword] = useQueryParam('password', StringParam)\n  const [, setSession] = useQueryParam('session', StringParam)\n\n  const url = session.shareURL\n  const currentSetting =\n    localStorage.getItem(SHARE_URL_LOCALSTORAGE_KEY) || 'short'\n  const snap = getSnapshot(session)\n\n  useEffect(() => {\n    let cancelled = false\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        if (currentSetting === 'short') {\n          setLoading(true)\n          const locationUrl = new URL(window.location.href)\n          const result = await shareSessionToDynamo(snap, url, locationUrl.href)\n          if (!cancelled) {\n            const params = new URLSearchParams(locationUrl.search)\n            params.set('session', `share-${result.json.sessionId}`)\n            params.set('password', result.password)\n            locationUrl.search = params.toString()\n            setShortUrl(locationUrl.href)\n\n            setSessionParam(`share-${result.json.sessionId}`)\n            setPasswordParam(result.password)\n          }\n        } else {\n          const sess = await toUrlSafeB64(JSON.stringify(getSnapshot(session)))\n          const longUrl = new URL(window.location.href)\n          const longParams = new URLSearchParams(longUrl.search)\n          longParams.set('session', `encoded-${sess}`)\n          setSessionParam(`encoded-${sess}`)\n          longUrl.search = longParams.toString()\n          if (!cancelled) {\n            setLongUrl(longUrl.toString())\n          }\n        }\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [currentSetting, session, url, snap])\n\n  return (\n    <>\n      <Dialog\n        maxWidth=\"xl\"\n        open\n        onClose={handleClose}\n        title=\"JBrowse Shareable Link\"\n      >\n        <DialogContent>\n          <DialogContentText>\n            Copy the URL below to share your current JBrowse session.\n            <IconButton onClick={() => setSettingsDialogOpen(true)}>\n              <SettingsIcon />\n            </IconButton>\n          </DialogContentText>\n\n          {currentSetting === 'short' ? (\n            error ? (\n              <ErrorMessage error={error} />\n            ) : loading ? (\n              <Typography>Generating short URL...</Typography>\n            ) : (\n              <LinkField url={shortUrl} />\n            )\n          ) : (\n            <LinkField url={longUrl} />\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            startIcon={<BookmarkAddIcon />}\n            disabled={currentSetting === 'short' && loading}\n            onClick={event => {\n              event.preventDefault()\n              setPassword(passwordParam)\n              setSession(sessionParam)\n              alert('Now press Ctrl+D (PC) or Cmd+D (Mac)')\n            }}\n          >\n            Bookmark\n          </Button>\n\n          <Button\n            onClick={() => {\n              copy(shortUrl || longUrl)\n              session.notify('Copied to clipboard', 'success')\n            }}\n            startIcon={<ContentCopyIcon />}\n            disabled={currentSetting === 'short' && loading}\n          >\n            Copy to Clipboard\n          </Button>\n\n          <Button onClick={handleClose} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <SettingsDialog\n        open={settingsDialogOpen}\n        onClose={() => setSettingsDialogOpen(false)}\n        currentSetting={currentSetting}\n      />\n    </>\n  )\n})\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 7h-2v2h-2V7h-2V5h2V3h2v2h2v2zm-2 14-7-3-7 3V5c0-1.1.9-2 2-2h7c-.63.84-1 1.87-1 3 0 2.76 2.24 5 5 5 .34 0 .68-.03 1-.1V21z\"\n}), 'BookmarkAdd');\nexports.default = _default;"],"names":["SettingsDialog","lazy","LinkField","_ref","url","_jsx","TextField","label","value","InputProps","readOnly","variant","fullWidth","onClick","event","target","select","observer","_ref2","handleClose","session","_useState","useState","_useState2","_slicedToArray","sessionParam","setSessionParam","_useState3","_useState4","passwordParam","setPasswordParam","_useState5","_useState6","shortUrl","setShortUrl","_useState7","_useState8","longUrl","setLongUrl","_useState9","_useState10","loading","setLoading","_useState11","_useState12","error","setError","_useState13","_useState14","settingsDialogOpen","setSettingsDialogOpen","_useQueryParam","useQueryParam","StringParam","setPassword","_useQueryParam3","setSession","shareURL","currentSetting","localStorage","getItem","snap","getSnapshot","useEffect","cancelled","_asyncToGenerator","_regeneratorRuntime","mark","_callee","locationUrl","result","params","sess","_longUrl","longParams","wrap","_context","prev","next","URL","window","location","href","shareSessionToDynamo","sent","URLSearchParams","search","set","concat","json","sessionId","password","toString","toUrlSafeB64","JSON","stringify","t0","finish","stop","_jsxs","_Fragment","children","Dialog","maxWidth","open","onClose","title","DialogContent","DialogContentText","IconButton","SettingsIcon","ErrorMessage","Typography","DialogActions","Button","startIcon","BookmarkAddIcon","disabled","preventDefault","alert","copy","notify","ContentCopyIcon","autoFocus","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}