{"version":3,"file":"static/js/2093.110e68e4.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGBackground.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGDotplotView.tsx"],"sourcesContent":["import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getTickDisplayStr } from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { getBlockLabelKeysToHide } from './util'\nimport { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n}))\nexport const HorizontalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderY } = model\n  const { classes } = useStyles()\n  return (\n    <svg width={viewWidth} height={borderY} className={classes.htext}>\n      <HorizontalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const HorizontalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n  const theme = useTheme()\n  const hviewSnap = {\n    ...getSnapshot(hview),\n    width,\n    staticBlocks: hview.staticBlocks,\n  }\n\n  const ticks = hticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: hviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const x = region.offsetPx\n          const y = 0\n          const xoff = Math.floor(x - hview.offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${htextRotation},${xoff},${y})`}\n              key={JSON.stringify(region)}\n              x={xoff}\n              y={y + 1}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"hanging\"\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, x]) =>\n        x > 0 && x < width ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            x1={x}\n            x2={x}\n            y1={0}\n            y2={tick.type === 'major' ? 6 : 4}\n            strokeWidth={1}\n            stroke={theme.palette.grey[400]}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, x]) =>\n          x > 10 && x < width ? (\n            <text\n              x={x - 7}\n              y={0}\n              transform={`rotate(${htextRotation},${x},${0})`}\n              key={`text-${JSON.stringify(tick)}`}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"middle\"\n              textAnchor=\"end\"\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={borderY - 12}\n        x={(viewWidth - borderX) / 2}\n        fill={theme.palette.text.primary}\n        textAnchor=\"middle\"\n        fontSize={11}\n        dominantBaseline=\"hanging\"\n      >\n        {hview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\nexport const VerticalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { borderX, viewHeight } = model\n  const { classes } = useStyles()\n  return (\n    <svg className={classes.vtext} width={borderX} height={viewHeight}>\n      <VerticalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const VerticalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewHeight, borderX, borderY, vview, vtextRotation, vticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n  const theme = useTheme()\n  const vviewSnap = {\n    ...getSnapshot(vview),\n    width,\n    staticBlocks: vview.staticBlocks,\n  }\n  const ticks = vticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: vviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const y = region.offsetPx\n          const x = borderX\n          const yoff = Math.floor(viewHeight - y + offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${vtextRotation},${x},${y})`}\n              key={JSON.stringify(region)}\n              x={x}\n              y={yoff}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, y]) =>\n        y > 0 ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            y1={viewHeight - y}\n            y2={viewHeight - y}\n            x1={borderX}\n            x2={borderX - (tick.type === 'major' ? 6 : 4)}\n            strokeWidth={1}\n            stroke={theme.palette.grey[400]}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, y]) =>\n          y > 10 && y < viewHeight ? (\n            <text\n              y={viewHeight - y - 3}\n              x={borderX - 7}\n              key={`text-${JSON.stringify(tick)}`}\n              textAnchor=\"end\"\n              fill={theme.palette.text.primary}\n              dominantBaseline=\"hanging\"\n              fontSize={11}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={(viewHeight - borderY) / 2}\n        x={12}\n        fill={theme.palette.text.primary}\n        transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n        textAnchor=\"middle\"\n        fontSize={11}\n      >\n        {vview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { DotplotViewModel } from '../model'\n\nexport const GridRaw = observer(function ({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  if (!hblocks.length || !vblocks.length) {\n    return null\n  }\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0].offsetPx - hview.offsetPx\n  const vbottom = vblocks[0].offsetPx - vview.offsetPx\n  const theme = useTheme()\n  const stroke = theme.palette.divider\n\n  // Uses math.max/min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n\n  let lastx = Infinity\n  let lasty = Infinity\n  return (\n    <>\n      <rect\n        x={rx}\n        y={ry}\n        width={w}\n        height={h}\n        fill={theme.palette.background.default}\n      />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          const render = Math.floor(x) !== Math.floor(lastx)\n          if (render) {\n            lastx = x\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          const render = Math.floor(y) !== Math.floor(lasty)\n          if (render) {\n            lasty = y\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        <line x1={htop} y1={0} x2={htop} y2={viewHeight} stroke={stroke} />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          stroke={stroke}\n        />\n      </g>\n      {children}\n    </>\n  )\n})\n\nexport default function Grid({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight } = model\n  return (\n    <svg\n      width={viewWidth}\n      height={viewHeight}\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n    >\n      <GridRaw model={model}>{children}</GridRaw>\n    </svg>\n  )\n}\n","import React from 'react'\nimport { useTheme } from '@mui/material'\nimport { stripAlpha } from '@jbrowse/core/util'\n\nexport default function SVGBackground({\n  width,\n  height,\n}: {\n  width: number\n  height: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import React from 'react'\nimport { when } from 'mobx'\nimport { getSession, renderToStaticMarkup } from '@jbrowse/core/util'\nimport { ThemeProvider } from '@mui/material'\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\nimport { getRoot } from 'mobx-state-tree'\n\n// locals\nimport { DotplotViewModel, ExportSvgOptions } from '../model'\nimport { GridRaw } from '../components/Grid'\nimport { HorizontalAxisRaw, VerticalAxisRaw } from '../components/Axes'\nimport SVGBackground from './SVGBackground'\n\n// render LGV to SVG\nexport async function renderToSvg(\n  model: DotplotViewModel,\n  opts: ExportSvgOptions,\n) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => <>{children}</> } =\n    opts\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { createRootFn } = getRoot<any>(model)\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, borderX, viewWidth, viewHeight, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n  const w = width + shift * 2\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w, height].toString()}\n        >\n          <SVGBackground width={w} height={height} />\n          <VerticalAxisRaw model={model} />\n          <g transform={`translate(${borderX} 0)`}>\n            <GridRaw model={model} />\n            <defs>\n              <clipPath id=\"clip-ruler\">\n                <rect x={0} y={0} width={viewWidth} height={viewHeight} />\n              </clipPath>\n            </defs>\n            <g clipPath=\"url(#clip-ruler)\">\n              {displayResults.map(({ result }, i) => (\n                <g key={i}>{result}</g>\n              ))}\n            </g>\n          </g>\n          <g transform={`translate(${borderX} ${viewHeight})`}>\n            <HorizontalAxisRaw model={model} />\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n    createRootFn,\n  )\n}\n"],"names":["useStyles","makeStyles","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","HorizontalAxis","observer","model","viewWidth","borderY","classes","React","width","height","className","HorizontalAxisRaw","borderX","hview","htextRotation","hticks","offsetPx","dynamicBlocks","bpPerPx","dblocks","contentBlocks","hide","getBlockLabelKeysToHide","theme","useTheme","hviewSnap","getSnapshot","staticBlocks","ticks","map","tick","bpToPx","refName","coord","base","self","filter","f","undefined","region","has","key","x","xoff","Math","floor","transform","JSON","stringify","y","fill","palette","text","primary","fontSize","dominantBaseline","textAnchor","x1","x2","y1","y2","type","strokeWidth","stroke","grey","t","getTickDisplayStr","assemblyNames","join","VerticalAxis","viewHeight","VerticalAxisRaw","vview","vtextRotation","vticks","vviewSnap","yoff","GridRaw","children","hblocks","vblocks","length","htop","displayedRegionsTotalPx","vtop","hbottom","vbottom","divider","rx","max","ry","w","min","h","lastx","Infinity","lasty","background","default","render","Grid","style","SVGBackground","stripAlpha","async","renderToSvg","opts","when","initialized","themeName","Wrapper","createRootFn","getRoot","session","getSession","allThemes","tracks","displayResults","Promise","all","display","track","displays","ready","result","renderSvg","shift","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","xmlns","xmlnsXlink","viewBox","toString","id","clipPath","i"],"sourceRoot":""}