{"version":3,"file":"static/js/7246.2da00022.chunk.js","mappings":"yZAeA,SAASA,EAAOC,GACd,OAAOA,EAAEC,IAAI,eAAiBD,EAAEC,IAAI,eAAqC,IAApBD,EAAEC,IAAI,SAC7D,CAAC,IAEoBC,EAAa,qJAClB,OADkB,oCACxBC,YAAM,IA4GiB,OA5GjB,6EAEd,WAA0BC,GAAkB,gFAMxC,OALIC,EAAS,IAAIC,EAAAA,EAAO,CACxBC,YAAYC,EAAAA,EAAAA,eACVC,EAAAA,EAAAA,gBAAeC,KAAKC,OAAQ,kBAC5BD,KAAKE,iBAEP,SACmBP,EAAOQ,UAAUT,GAAK,OACQ,OAD7CU,EAAM,OACNC,EAAS,IAAIC,EAAAA,EAAI,CAAEC,QAASH,EAAOG,UAAU,kBAC5C,CAAEZ,OAAAA,EAAQS,OAAAA,EAAQC,OAAAA,IAAQ,gDAClC,mDAZa,IAYb,gEAED,WAAuBX,GAAkB,iFAMtC,OALIM,KAAKP,SACRO,KAAKP,OAASO,KAAKQ,aAAad,GAAMe,OAAM,SAAAC,GAE1C,MADA,EAAKjB,YAASkB,EACRD,CACR,KACD,kBACMV,KAAKP,QAAM,gDACnB,mDAVA,IAUA,kEAED,WAAyBC,GAAkB,8FAChBM,KAAKY,UAAUlB,GAAK,OAA/B,OAA+B,SAArCU,EAAM,EAANA,OAAM,kBACPS,OAAOC,KAAKV,EAAOW,aAAW,gDACtC,mDALA,IAKA,gEAED,WAAgBrB,GAAkB,0GACCM,KAAKY,UAAUlB,GAAK,OAE9B,OAF8B,SAA7CW,EAAM,EAANA,OAAQD,EAAM,EAANA,OACRY,EAAsBZ,EAAtBY,QAASC,EAAab,EAAba,SAAQ,EACGZ,EAAOE,QAA3BW,EAAM,EAANA,OAAWC,GAAI,8BAChB,CACLH,QAAAA,EACAC,SAAAA,EACAV,SAAQ,UAAMY,GACdD,OAAQL,OAAOO,YACbF,EAAOG,KAAI,YAAgB,MAAO,CAAhB,EAAJC,KAAa,EAAPC,QAA6B,OAEpD,gDACF,mDAdA,IAcA,yBAED,SAAmBC,GAAyC,IAAD,OAAxB9B,EAAiB,uDAAG,CAAC,EAC9C+B,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IAChBC,EAAWlC,EAAXkC,OACR,OAAOC,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,yGAEV,EAAKlB,UAAUlB,GAAK,OAA/B,OAA+B,SAA7CW,EAAM,EAANA,OAAQV,EAAM,EAANA,OAAM,SACLA,EAAOoC,iBAAiBN,EAASC,EAAOC,EAAK,CAC5DC,OAAAA,EACAI,aAAcL,EAAMD,IACpB,OAHM,OAILO,MACDC,EAAAA,EAAAA,MACAb,EAAAA,EAAAA,IAAI,SAAAc,GACF,IAAMC,EAAO/B,EAAOgC,UAAU,GAAD,OACxBZ,EAAO,aAAKU,EAAET,MAAK,aAAKS,EAAER,IAAG,aAAKQ,EAAEhB,MACvC,CACEmB,SAAUH,EAAEG,WAIRC,EAAqDH,EAArDG,WAAYC,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,YAAaC,EAAgBN,EAAhBM,YAC7C,GAAIH,EAAY,CACd,IAAMI,EAASD,GAAeD,GAAe,GACvCG,EAAQJ,EACRK,EAAeV,EAAET,MACvBU,EAAKU,YAAc,GAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAYQ,GAAK,EAAG,CACtC,IAAMC,GAAQL,EAAOI,IAAM,GAAKF,EAC1BI,EAAOD,GAAQJ,EAAMG,IAAM,GACjCX,EAAKU,YAAYI,KAAK,CACpBZ,SAAS,GAAD,OAAKH,EAAEG,SAAQ,YAAIS,GAC3BrB,MAAOsB,EACPrB,IAAKsB,EACLE,KAAM,SAEV,CACF,CACA,QAAmBxC,IAAfwB,EAAEG,SACJ,MAAM,IAAIc,MAAM,uBAE+BhB,EAAzCiB,WAAyCjB,EAA7BkB,SAA6BlB,EAAnBmB,MAA9B,IAAwCpC,GAAI,OAAKiB,EAAI,GAE/C9C,EAAI,IAAIkE,EAAAA,EAAc,CAC1BC,GAAG,GAAD,OAAK,EAAKA,GAAE,YAAItB,EAAEG,UACpBF,MAAK,kBACAjB,GAAI,IACPO,MAAOS,EAAET,MACTC,IAAKQ,EAAER,IACPF,QAAAA,MAOJ,OAAOpC,EAAOC,IAAKoE,EAAAA,EAAAA,GAAwBpE,GAAKA,CAClD,KACAqE,UAAU7B,GAAS,kDAErBA,EAAS8B,MAAM,EAAD,IAAG,0DAEpB,mDA3DsB,GA2DpBlE,EAAKkC,OACV,GAAC,2BAED,WAA8B,KAAC,EA7GC,CAASiC,EAAAA,uB,yGChBpC,SAASH,EAAwBI,GACtC,IAAMC,EAAWD,EAAQC,WAEnBC,EAAaF,EAAQvE,IAAI,cACzB0E,EAAWH,EAAQvE,IAAI,YAE7B,IAAKyE,IAAeC,EAClB,OAAOH,EAGT,IAAMI,EAAoBH,EACtBA,EACGI,QAAO,SAAAC,GAAK,MAA0B,UAAtBA,EAAM7E,IAAI,OAAmB,IAC7C8E,MAAK,SAACC,EAAGvB,GAAC,OAAKuB,EAAE/E,IAAI,SAAWwD,EAAExD,IAAI,QAAQ,IACjD,GAGEgF,EAAmC,GACzCL,EAAOM,SAAQ,SAAAC,GACb,IAAM/C,EAAQ+C,EAAMlF,IAAI,SAClBoC,EAAM8C,EAAMlF,IAAI,OACtB,GAAIyE,GAAcrC,EAAK,CAErB,IAAM+C,EAAQZ,EAAQvE,IAAI,UAAY,EAAI,OAAS,QACnDgF,EAAYrB,KAAK,CACfC,KAAK,GAAD,OAAKuB,EAAK,cACdhD,MAAAA,EACAC,IAAAA,GAEJ,MAAO,GAAIqC,EAAatC,GAASsC,EAAarC,GAAOsC,GAAYtC,EAAK,CAEpE,IAAM+C,EAAQZ,EAAQvE,IAAI,UAAY,EAAI,OAAS,QACnDgF,EAAYrB,KACV,CACEC,KAAK,GAAD,OAAKuB,EAAK,cACdhD,MAAAA,EACAC,IAAKqC,GAEP,CACEb,KAAM,MACNzB,MAAOsC,EACPrC,IAAAA,GAGN,MAAO,GAAIqC,GAActC,GAASuC,GAAYtC,EAE5C4C,EAAYrB,KAAK,CACfC,KAAM,MACNzB,MAAAA,EACAC,IAAAA,SAEG,GAAIqC,EAAatC,GAASsC,EAAarC,GAAOsC,EAAWtC,EAAK,CAEnE,IAAMgD,EAAYb,EAAQvE,IAAI,UAAY,EAAI,OAAS,QACjDqF,EAAad,EAAQvE,IAAI,UAAY,EAAI,QAAU,OACzDgF,EAAYrB,KACV,CACEC,KAAK,GAAD,OAAKwB,EAAS,cAClBjD,MAAAA,EACAC,IAAKqC,GAEP,CACEb,KAAK,MACLzB,MAAOsC,EACPrC,IAAKsC,GAEP,CACEd,KAAK,GAAD,OAAKyB,EAAU,cACnBlD,MAAOuC,EACPtC,IAAAA,GAGN,MAAO,GAAIqC,GAActC,GAASuC,EAAWvC,GAASuC,EAAWtC,EAAK,CAEpE,IAAM+C,EAAQZ,EAAQvE,IAAI,UAAY,EAAI,QAAU,OACpDgF,EAAYrB,KACV,CACEC,KAAK,MACLzB,MAAAA,EACAC,IAAKsC,GAEP,CACEd,KAAK,GAAD,OAAKuB,EAAK,cACdhD,MAAOuC,EACPtC,IAAAA,GAGN,MAAO,GAAIsC,GAAYvC,EAAO,CAE5B,IAAMgD,EAAQZ,EAAQvE,IAAI,UAAY,EAAI,QAAU,OACpDgF,EAAYrB,KAAK,CACfC,KAAK,GAAD,OAAKuB,EAAK,cACdhD,MAAAA,EACAC,IAAAA,GAEJ,CACF,IACA,IAAMkD,EAAUhE,OAAOO,YACrB0C,EAAQgB,OAAOzD,KAAI,SAAA0D,GAAG,MAAI,CAACA,EAAKjB,EAAQvE,IAAIwF,GAAK,KAkBnD,OAhBAF,EAAQ/B,YAAcyB,EACtBM,EAAQ1B,KAAO,OACf0B,EAAQvC,SAAWwB,EAAQL,YACpBoB,EAAQnC,mBACRmC,EAAQxB,kBACRwB,EAAQvB,gBACRuB,EAAQtB,aACRsB,EAAQpC,mBACRoC,EAAQrC,kBACRqC,EAAQtC,kBACRsC,EAAQb,kBACRa,EAAQZ,SACI,IAAIT,EAAAA,cAAc,CACnCpB,KAAMyC,EACNpB,GAAIK,EAAQL,MAGhB,CAMO,SAASuB,EACdC,EACAC,EACAC,EACAC,EACAC,EACAhF,EACAiC,EACAgD,GAEA,IAAMC,EAAIN,EAAKO,MAAM,MACf/D,EAAU8D,EAAEL,GACZxD,GAAS6D,EAAEJ,GACXM,EAAUN,IAAaC,EAAS,EAAI,EAEpCzD,GAAO4D,EAAEH,GAAUK,EACnBrD,EAAOkD,EApBf,SAAuBpE,EAAkB+D,GACvC,OAAOpE,OAAOO,YAAY6D,EAAKO,MAAM,MAAMnE,KAAI,SAAC/B,EAAGoG,GAAC,MAAK,CAACxE,EAAOwE,GAAIpG,EAAE,IACzE,CAmBMqG,CAAcL,EAAOL,GACrB5E,EAAOgC,UAAU4C,EAAM,CAAE3C,SAAAA,IAErBC,EAAqDH,EAArDG,WAAYC,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,YAAaC,EAAgBN,EAAhBM,YAE7C,GAAIH,EAAY,CACd,IAAMI,EAASD,GAAeD,GAAe,GACvCG,EAAQJ,EACRK,EAAenB,EACrBU,EAAKU,YAAc,GAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAYQ,GAAK,EAAG,CACtC,IAAMC,GAAQL,EAAOI,IAAM,GAAKF,EAC1BI,EAAOD,GAAQJ,EAAMG,IAAM,GACjCX,EAAKU,YAAYI,KAAK,CACpBZ,SAAS,GAAD,OAAKA,EAAQ,YAAIS,GACzBrB,MAAOsB,EACPrB,IAAKsB,EACLE,KAAM,SAEV,CACF,CAEIkC,IACFjD,EAAKwD,OAASxD,EAAKiD,WAEdjD,EAAKmB,aACLnB,EAAKiB,kBACLjB,EAAKkB,SACZ,IAAMhE,EAAI,IAAIkE,EAAAA,eAAc,kBACvBpB,GAAI,IACPV,MAAAA,EACAC,IAAAA,EACAF,QAAAA,EACAa,SAAAA,KAEF,OAAOhD,EAAEC,IAAI,cAAgBmE,EAAwBpE,GAAKA,CAC5D,C","sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ucscProcessedTranscript } from '../util'\n\nfunction isUCSC(f: Feature) {\n  return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0\n}\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cached?: Promise<{ bigbed: BigBed; header: any; parser: BED }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const bigbed = new BigBed({\n      filehandle: openLocation(\n        readConfObject(this.config, 'bigBedLocation'),\n        this.pluginManager,\n      ),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({ autoSql: header.autoSql })\n    return { bigbed, header, parser }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cached) {\n      this.cached = this.configurePre(opts).catch(e => {\n        this.cached = undefined\n        throw e\n      })\n    }\n    return this.cached\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...rest } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql: { ...rest },\n      fields: Object.fromEntries(\n        fields.map(({ name, comment }) => [name, comment]),\n      ),\n    }\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    const { refName, start, end } = region\n    const { signal } = opts\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { parser, bigbed } = await this.configure(opts)\n        const ob = await bigbed.getFeatureStream(refName, start, end, {\n          signal,\n          basesPerSpan: end - start,\n        })\n        ob.pipe(\n          mergeAll(),\n          map(r => {\n            const data = parser.parseLine(\n              `${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`,\n              {\n                uniqueId: r.uniqueId as string,\n              },\n            )\n\n            const { blockCount, blockSizes, blockStarts, chromStarts } = data\n            if (blockCount) {\n              const starts = chromStarts || blockStarts || []\n              const sizes = blockSizes\n              const blocksOffset = r.start\n              data.subfeatures = []\n\n              for (let b = 0; b < blockCount; b += 1) {\n                const bmin = (starts[b] || 0) + blocksOffset\n                const bmax = bmin + (sizes[b] || 0)\n                data.subfeatures.push({\n                  uniqueId: `${r.uniqueId}-${b}`,\n                  start: bmin,\n                  end: bmax,\n                  type: 'block',\n                })\n              }\n            }\n            if (r.uniqueId === undefined) {\n              throw new Error('invalid bbi feature')\n            }\n            const { chromStart, chromEnd, chrom, ...rest } = data\n\n            const f = new SimpleFeature({\n              id: `${this.id}-${r.uniqueId}`,\n              data: {\n                ...rest,\n                start: r.start,\n                end: r.end,\n                refName,\n              },\n            })\n\n            // collection of heuristics for suggesting that this feature\n            // should be converted to a gene, CNV bigbed has many gene like\n            // features including thickStart and blockCount but no strand\n            return isUCSC(f) ? ucscProcessedTranscript(f) : f\n          }),\n        ).subscribe(observer)\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  const newFeature = new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n  return newFeature\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["isUCSC","f","get","BigBedAdapter","cached","opts","bigbed","BigBed","filehandle","openLocation","readConfObject","this","config","pluginManager","getHeader","header","parser","BED","autoSql","configurePre","catch","e","undefined","configure","Object","keys","refsByName","version","fileType","fields","rest","fromEntries","map","name","comment","region","refName","start","end","signal","ObservableCreate","observer","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","Error","chromStart","chromEnd","chrom","SimpleFeature","id","ucscProcessedTranscript","subscribe","error","BaseFeatureDataAdapter","feature","children","thickStart","thickEnd","blocks","filter","child","sort","a","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag","featureData","line","colRef","colStart","colEnd","scoreColumn","names","l","split","colSame","i","defaultParser","score"],"sourceRoot":""}