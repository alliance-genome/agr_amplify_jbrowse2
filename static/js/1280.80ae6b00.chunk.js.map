{"version":3,"file":"static/js/1280.80ae6b00.chunk.js","mappings":"2OA4DA,WAAeA,EAAAA,EAAAA,WAjDf,SAAuBC,GAIrB,IAAQC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACfC,GAAsBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GACZI,EAAWF,EAAIG,MAAM,yBAE3B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASZ,EAAaa,MAAM,eAAcC,UACrDC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAACC,MAAO,CAAEC,UAAW,UAAWJ,SAAA,EAC5CL,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAAAL,SAAC,6BACZL,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,MAAM,gBAAeN,SAAC,8IAKlCL,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRC,MAAOjB,EACPkB,SAAU,SAAAC,GAAK,OAAIlB,EAAOkB,EAAMC,OAAOH,MAAM,EAC7CI,YAAY,iBACZC,WAAY,CACVC,UAAW,GAEbC,MAAsB,IAAfxB,EAAIyB,SAAiBvB,EAC5BwB,WAA2B,IAAf1B,EAAIyB,QAAiBvB,EAA+B,GAApB,kBAC5CyB,aAAa,SAEfjB,EAAAA,EAAAA,MAACkB,EAAAA,EAAa,CAAAnB,SAAA,EACZL,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CACLC,QAAQ,YACRf,MAAM,UACNgB,QAAS,WACPrC,EAAMsC,eAAe,CAAEC,KAAM,MAAOjC,IAAAA,IACpCL,GACF,EACAuC,UAAWhC,EAASO,SACrB,YAGDL,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAACC,QAAQ,YAAYf,MAAM,YAAYgB,QAASpC,EAAYc,SAAC,kBAO9E,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByTag.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\n\nfunction ColorByTagDlg(props: {\n  model: { setColorScheme: Function }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Color by tag\">\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <Typography>Enter tag to color by: </Typography>\n        <Typography color=\"textSecondary\">\n          Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case)\n          for minimap2 read strand, HP for haplotype, RG for read group, etc.\n        </Typography>\n\n        <TextField\n          value={tag}\n          onChange={event => setTag(event.target.value)}\n          placeholder=\"Enter tag name\"\n          inputProps={{\n            maxLength: 2,\n          }}\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              model.setColorScheme({ type: 'tag', tag })\n              handleClose()\n            }}\n            disabled={!validTag}\n          >\n            Submit\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(ColorByTagDlg)\n"],"names":["observer","props","model","handleClose","_useState","useState","_useState2","_slicedToArray","tag","setTag","validTag","match","_jsx","Dialog","open","onClose","title","children","_jsxs","DialogContent","style","overflowX","Typography","color","TextField","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","DialogActions","Button","variant","onClick","setColorScheme","type","disabled"],"sourceRoot":""}