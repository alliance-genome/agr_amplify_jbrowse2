{"version":3,"file":"static/js/8170.5e7dc8a7.chunk.js","mappings":"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","sources":["../../../packages/core/ui/AboutDialog.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport copy from 'copy-to-clipboard'\nimport { Button, DialogContent, Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport {\n  getConf,\n  readConfObject,\n  AnyConfigurationModel,\n} from '../configuration'\nimport Dialog from './Dialog'\nimport LoadingEllipses from './LoadingEllipses'\nimport { getSession, getEnv } from '../util'\nimport { getTrackName } from '../util/tracks'\nimport { BaseCard, Attributes } from '../BaseFeatureWidget/BaseFeatureDetail'\n\ntype FileInfo = Record<string, unknown> | string\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n})\n\nexport function FileInfoPanel({ config }: { config: AnyConfigurationModel }) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    const aborter = new AbortController()\n    const { signal } = aborter\n    let cancelled = false\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n          signal,\n        })\n        if (!cancelled) {\n          setInfo(result as FileInfo)\n        }\n      } catch (e) {\n        if (!cancelled) {\n          console.error(e)\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      aborter.abort()\n      cancelled = true\n    }\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return info !== null ? (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <Typography color=\"error\">{`${error}`}</Typography>\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  ) : null\n}\n\nexport function AboutContents({ config }: { config: AnyConfigurationModel }) {\n  const [copied, setCopied] = useState(false)\n  const conf = readConfObject(config)\n  const session = getSession(config)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as Record<string, unknown>\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) as { name: string; Component: React.FC<any> }\n\n  return (\n    <>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <Button\n            variant=\"contained\"\n            style={{ float: 'right' }}\n            onClick={() => {\n              copy(JSON.stringify(conf, null, 2))\n              setCopied(true)\n              setTimeout(() => setCopied(false), 1000)\n            }}\n          >\n            {copied ? 'Copied to clipboard!' : 'Copy config'}\n          </Button>\n        ) : null}\n        <Attributes\n          attributes={confPostExt}\n          omit={['displays', 'baseUri', 'refNames', 'formatAbout']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n    </>\n  )\n}\n\nexport default function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <DialogContent className={classes.content}>\n        <AboutComponent config={config} />\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","content","minWidth","FileInfoPanel","_ref","config","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","info","setInfo","rpcManager","getSession","useEffect","aborter","AbortController","signal","cancelled","_asyncToGenerator","_regeneratorRuntime","mark","_callee","adapterConfig","result","wrap","_context","prev","next","readConfObject","call","trackId","sent","t0","console","stop","abort","details","header","concat","replace","_jsx","BaseCard","title","children","Typography","color","undefined","LoadingEllipses","message","Attributes","attributes","AboutContents","_ref3","_useState5","_useState6","copied","setCopied","conf","session","hideUris","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","_objectSpread","ExtraPanel","_jsxs","_Fragment","Button","variant","style","float","onClick","copy","JSON","stringify","setTimeout","omit","name","Component","AboutDialog","_ref4","handleClose","classes","trackName","getTrackName","AboutComponent","Dialog","open","onClose","maxWidth","DialogContent","className"],"sourceRoot":""}