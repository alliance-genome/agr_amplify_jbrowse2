{"version":3,"file":"static/js/3499.3b944430.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MCScanAnchorsAdapter/MCScanAnchorsAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  doesIntersect2,\n  SimpleFeature,\n  Feature,\n  Region,\n} from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { readFile, parseBed } from '../util'\n\ninterface BareFeature {\n  strand: number\n  refName: string\n  start: number\n  end: number\n  score: number\n  name: string\n}\n\ntype Row = [BareFeature, BareFeature, number, number]\n\nexport default class MCScanAnchorsAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    assemblyNames: string[]\n    feats: Row[]\n  }>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n  async setupPre(opts: BaseOptions) {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n\n    const pm = this.pluginManager\n    const bed1 = openLocation(this.getConf('bed1Location'), pm)\n    const bed2 = openLocation(this.getConf('bed2Location'), pm)\n    const mcscan = openLocation(this.getConf('mcscanAnchorsLocation'), pm)\n    const [bed1text, bed2text, mcscantext] = await Promise.all(\n      [bed1, bed2, mcscan].map(r => readFile(r, opts)),\n    )\n\n    const bed1Map = parseBed(bed1text)\n    const bed2Map = parseBed(bed2text)\n    const feats = mcscantext\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && f !== '###')\n      .map((line, index) => {\n        const [name1, name2, score] = line.split('\\t')\n        const r1 = bed1Map.get(name1)\n        const r2 = bed2Map.get(name2)\n        if (!r1 || !r2) {\n          throw new Error(`feature not found, ${name1} ${name2} ${r1} ${r2}`)\n        }\n        return [r1, r2, +score, index] as Row\n      })\n\n    return {\n      assemblyNames,\n      feats,\n    }\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseFeatureDataAdapter filters it out)\n    return true\n  }\n\n  async getRefNames() {\n    // we cannot determine this accurately\n    return []\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyNames, feats } = await this.setup(opts)\n\n      // The index of the assembly name in the region list corresponds to\n      // the adapter in the subadapters list\n      const index = assemblyNames.indexOf(region.assemblyName)\n      if (index !== -1) {\n        const flip = index === 0\n        feats.forEach(f => {\n          const [r1, r2, score, rowNum] = f\n          const [f1, f2] = !flip ? [r2, r1] : [r1, r2]\n          if (\n            f1.refName === region.refName &&\n            doesIntersect2(region.start, region.end, f1.start, f1.end)\n          ) {\n            observer.next(\n              new SimpleFeature({\n                ...f1,\n                uniqueId: `${index}-${rowNum}`,\n                syntenyId: rowNum,\n\n                // note: strand would be -1 if the two features are on opposite\n                // strands, indicating inverted alignment\n                strand: f1.strand * f2.strand,\n                assemblyName: assemblyNames[+!flip],\n                score,\n                mate: {\n                  ...f2,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          }\n        })\n      }\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["MCScanAnchorsAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","setupP","_createClass","key","value","_setup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_this2","wrap","_context","prev","next","this","setupPre","catch","e","undefined","abrupt","stop","_x","_setupPre","_callee2","assemblyNames","pm","bed1","bed2","mcscan","_yield$Promise$all","_yield$Promise$all2","bed1text","bed2text","mcscantext","bed1Map","bed2Map","feats","_context2","getConf","pluginManager","openLocation","Promise","all","map","r","readFile","sent","_slicedToArray","parseBed","split","filter","f","line","index","_line$split","_line$split2","name1","name2","score","r1","get","r2","Error","_x2","_hasDataForRefName","_callee3","_context3","_getRefNames","_callee4","_context4","region","_this3","ObservableCreate","_ref","_callee5","observer","_yield$_this3$setup","flip","_context5","setup","indexOf","assemblyName","forEach","_f","rowNum","_ref2","_ref3","f1","f2","refName","doesIntersect2","start","end","SimpleFeature","_objectSpread","uniqueId","syntenyId","strand","mate","complete","_x3","BaseFeatureDataAdapter","capabilities","isGzip","buf","text","Map","startsWith","name","_readFile","file","buffer","t0","TextDecoder","fatal","unzip","t1","t2","decode","zip","a","b","i","decoder","parseLineByLine","cb","blockStart","entries","n","slice","toString","trim","push"],"sourceRoot":""}