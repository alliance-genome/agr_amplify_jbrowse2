{"version":3,"file":"static/js/9735.56bd95cf.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/STARFusionImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import { parseTsvBuffer, ParseOptions } from './ImportUtils'\n\nfunction parseSTARFusionBreakpointString(str: string) {\n  const fields = str.split(':')\n  const refName = fields[0]\n  const pos = parseInt(fields[1], 10)\n  const strand = fields[2] === '-' ? -1 : 1\n  return { refName, pos, strand }\n}\n\nconst numericColumns: Record<string, boolean> = {\n  SpanningFragCount: true,\n  FFPM: true,\n  LeftBreakEntropy: true,\n  RightBreakEntropy: true,\n  JunctionReadCount: true,\n}\n\nexport async function parseSTARFusionBuffer(\n  buffer: Buffer,\n  options: ParseOptions,\n) {\n  const data = await parseTsvBuffer(buffer, {\n    hasColumnNameLine: true,\n    columnNameLineNumber: 1,\n    selectedAssemblyName: options.selectedAssemblyName,\n    isValidRefName: () => false,\n  })\n\n  // remove the # in #FusionName\n  data.columns[0].name = data.columns[0].name.replace('#', '')\n  // set some columns to be numeric\n  data.columns.forEach(col => {\n    if (numericColumns[col.name]) {\n      col.dataType = { type: 'Number' }\n    }\n  })\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const column = data.columns[columnNumber]\n      if (column.name === 'LeftBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.refName = refName\n        featureData.start = pos\n        featureData.end = pos\n        featureData.strand = strand\n      } else if (column.name === 'RightBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.mate = {\n          refName,\n          start: pos,\n          end: pos,\n          strand,\n        }\n      } else if (text && numericColumns[column.name]) {\n        // some other column, numeric\n        featureData[column.name] = parseFloat(text)\n      } else {\n        // some other column, text\n        featureData[column.name] = text\n      }\n    })\n    featureData.uniqueId = `sf-${rowNumber + 1}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  return data\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","options","then","module","default","csv","noheader","output","fromString","dataToSpreadsheetSnapshot","rows","hasColumnNameLine","columnNameLineNumber","isValidRefName","maxCols","rowSet","isLoaded","map","row","rowNumber","id","length","String","cells","text","columnNumber","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","guessedType","parsedLoc","parseLocString","error","refName","start","test","guessColumnType","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","parseSTARFusionBreakpointString","str","fields","split","pos","parseInt","strand","numericColumns","SpanningFragCount","FFPM","LeftBreakEntropy","RightBreakEntropy","JunctionReadCount","parseSTARFusionBuffer","data","replace","col","featureData","column","end","mate","parseFloat","uniqueId","feature"],"sourceRoot":""}