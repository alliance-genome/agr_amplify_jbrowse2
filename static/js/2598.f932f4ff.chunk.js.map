{"version":3,"file":"static/js/2598.f932f4ff.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/gff/src/util.ts","../../../node_modules/@gmod/gff/src/parse.ts","../../../node_modules/@gmod/gff/src/api.ts","../../../node_modules/@gmod/gff/src/index.ts"],"sourcesContent":["// Fast, low-level functions for parsing and formatting GFF3.\n// JavaScript port of Robert Buels's Bio::GFF3::LowLevel Perl module.\n\n/**\n * Unescape a string value used in a GFF3 attribute.\n *\n * @param stringVal - Escaped GFF3 string value\n * @returns An unescaped string value\n */\nexport function unescape(stringVal: string): string {\n  return stringVal.replace(/%([0-9A-Fa-f]{2})/g, (_match, seq) =>\n    String.fromCharCode(parseInt(seq, 16)),\n  )\n}\n\nfunction _escape(regex: RegExp, s: string | number) {\n  return String(s).replace(regex, (ch) => {\n    const hex = ch.charCodeAt(0).toString(16).toUpperCase().padStart(2, '0')\n    return `%${hex}`\n  })\n}\n\n/**\n * Escape a value for use in a GFF3 attribute value.\n *\n * @param rawVal - Raw GFF3 attribute value\n * @returns An escaped string value\n */\nexport function escape(rawVal: string | number): string {\n  return _escape(/[\\n;\\r\\t=%&,\\x00-\\x1f\\x7f-\\xff]/g, rawVal)\n}\n\n/**\n * Escape a value for use in a GFF3 column value.\n *\n * @param rawVal - Raw GFF3 column value\n * @returns An escaped column value\n */\nexport function escapeColumn(rawVal: string | number): string {\n  return _escape(/[\\n\\r\\t%\\x00-\\x1f\\x7f-\\xff]/g, rawVal)\n}\n\n/**\n * Parse the 9th column (attributes) of a GFF3 feature line.\n *\n * @param attrString - String of GFF3 9th column\n * @returns Parsed attributes\n */\nexport function parseAttributes(attrString: string): GFF3Attributes {\n  if (!(attrString && attrString.length) || attrString === '.') return {}\n\n  const attrs: GFF3Attributes = {}\n\n  attrString\n    .replace(/\\r?\\n$/, '')\n    .split(';')\n    .forEach((a) => {\n      const nv = a.split('=', 2)\n      if (!(nv[1] && nv[1].length)) return\n\n      nv[0] = nv[0].trim()\n      let arec = attrs[nv[0].trim()]\n      if (!arec) {\n        arec = []\n        attrs[nv[0]] = arec\n      }\n\n      arec.push(\n        ...nv[1]\n          .split(',')\n          .map((s) => s.trim())\n          .map(unescape),\n      )\n    })\n  return attrs\n}\n\n/**\n * Parse a GFF3 feature line\n *\n * @param line - GFF3 feature line\n * @returns The parsed feature\n */\nexport function parseFeature(line: string): GFF3FeatureLine {\n  // split the line into columns and replace '.' with null in each column\n  const f = line.split('\\t').map((a) => (a === '.' || a === '' ? null : a))\n\n  // unescape only the ref, source, and type columns\n  const parsed: GFF3FeatureLine = {\n    seq_id: f[0] && unescape(f[0]),\n    source: f[1] && unescape(f[1]),\n    type: f[2] && unescape(f[2]),\n    start: f[3] === null ? null : parseInt(f[3], 10),\n    end: f[4] === null ? null : parseInt(f[4], 10),\n    score: f[5] === null ? null : parseFloat(f[5]),\n    strand: f[6],\n    phase: f[7],\n    attributes: f[8] === null ? null : parseAttributes(f[8]),\n  }\n  return parsed\n}\n\n/**\n * Parse a GFF3 directive line.\n *\n * @param line - GFF3 directive line\n * @returns The parsed directive\n */\nexport function parseDirective(\n  line: string,\n):\n  | GFF3Directive\n  | GFF3SequenceRegionDirective\n  | GFF3GenomeBuildDirective\n  | null {\n  const match = /^\\s*##\\s*(\\S+)\\s*(.*)/.exec(line)\n  if (!match) return null\n\n  const [, name] = match\n  let [, , contents] = match\n\n  const parsed: GFF3Directive = { directive: name }\n  if (contents.length) {\n    contents = contents.replace(/\\r?\\n$/, '')\n    parsed.value = contents\n  }\n\n  // do a little additional parsing for sequence-region and genome-build directives\n  if (name === 'sequence-region') {\n    const c = contents.split(/\\s+/, 3)\n    return {\n      ...parsed,\n      seq_id: c[0],\n      start: c[1] && c[1].replace(/\\D/g, ''),\n      end: c[2] && c[2].replace(/\\D/g, ''),\n    } as GFF3SequenceRegionDirective\n  } else if (name === 'genome-build') {\n    const [source, buildName] = contents.split(/\\s+/, 2)\n    return {\n      ...parsed,\n      source,\n      buildName,\n    } as GFF3GenomeBuildDirective\n  }\n\n  return parsed\n}\n\n/**\n * Format an attributes object into a string suitable for the 9th column of GFF3.\n *\n * @param attrs - Attributes\n * @returns GFF3 9th column string\n */\nexport function formatAttributes(attrs: GFF3Attributes): string {\n  const attrOrder: string[] = []\n  Object.entries(attrs).forEach(([tag, val]) => {\n    if (!val) return\n    let valstring\n    if (val.hasOwnProperty('toString')) {\n      valstring = escape(val.toString())\n      // } else if (Array.isArray(val.values)) {\n      //   valstring = val.values.map(escape).join(',')\n    } else if (Array.isArray(val)) {\n      valstring = val.map(escape).join(',')\n    } else {\n      valstring = escape(val)\n    }\n    attrOrder.push(`${escape(tag)}=${valstring}`)\n  })\n  return attrOrder.length ? attrOrder.join(';') : '.'\n}\n\nfunction _formatSingleFeature(\n  f: GFF3FeatureLine | GFF3FeatureLineWithRefs,\n  seenFeature: Record<string, boolean | undefined>,\n) {\n  const attrString =\n    f.attributes === null || f.attributes === undefined\n      ? '.'\n      : formatAttributes(f.attributes)\n\n  const fields = [\n    f.seq_id === null ? '.' : escapeColumn(f.seq_id),\n    f.source === null ? '.' : escapeColumn(f.source),\n    f.type === null ? '.' : escapeColumn(f.type),\n    f.start === null ? '.' : escapeColumn(f.start),\n    f.end === null ? '.' : escapeColumn(f.end),\n    f.score === null ? '.' : escapeColumn(f.score),\n    f.strand === null ? '.' : escapeColumn(f.strand),\n    f.phase === null ? '.' : escapeColumn(f.phase),\n    attrString,\n  ]\n\n  const formattedString = `${fields.join('\\t')}\\n`\n\n  // if we have already output this exact feature, skip it\n  if (seenFeature[formattedString]) {\n    return ''\n  }\n\n  seenFeature[formattedString] = true\n  return formattedString\n}\n\nfunction _formatFeature(\n  feature:\n    | GFF3FeatureLine\n    | GFF3FeatureLineWithRefs\n    | (GFF3FeatureLine | GFF3FeatureLineWithRefs)[],\n  seenFeature: Record<string, boolean | undefined>,\n): string {\n  if (Array.isArray(feature)) {\n    return feature.map((f) => _formatFeature(f, seenFeature)).join('')\n  }\n\n  const strings = [_formatSingleFeature(feature, seenFeature)]\n  if (_isFeatureLineWithRefs(feature)) {\n    strings.push(\n      ...feature.child_features.map((f) => _formatFeature(f, seenFeature)),\n      ...feature.derived_features.map((f) => _formatFeature(f, seenFeature)),\n    )\n  }\n  return strings.join('')\n}\n\n/**\n * Format a feature object or array of feature objects into one or more lines of\n * GFF3.\n *\n * @param featureOrFeatures - A feature object or array of feature objects\n * @returns A string of one or more GFF3 lines\n */\nexport function formatFeature(\n  featureOrFeatures:\n    | GFF3FeatureLine\n    | GFF3FeatureLineWithRefs\n    | (GFF3FeatureLine | GFF3FeatureLineWithRefs)[],\n): string {\n  const seen = {}\n  return _formatFeature(featureOrFeatures, seen)\n}\n\n/**\n * Format a directive into a line of GFF3.\n *\n * @param directive - A directive object\n * @returns A directive line string\n */\nexport function formatDirective(directive: GFF3Directive): string {\n  let str = `##${directive.directive}`\n  if (directive.value) str += ` ${directive.value}`\n  str += '\\n'\n  return str\n}\n\n/**\n * Format a comment into a GFF3 comment.\n * Yes I know this is just adding a # and a newline.\n *\n * @param comment - A comment object\n * @returns A comment line string\n */\nexport function formatComment(comment: GFF3Comment): string {\n  return `# ${comment.comment}\\n`\n}\n\n/**\n * Format a sequence object as FASTA\n *\n * @param seq - A sequence object\n * @returns Formatted single FASTA sequence string\n */\nexport function formatSequence(seq: GFF3Sequence): string {\n  return `>${seq.id}${seq.description ? ` ${seq.description}` : ''}\\n${\n    seq.sequence\n  }\\n`\n}\n\n/**\n * Format a directive, comment, sequence, or feature, or array of such items,\n * into one or more lines of GFF3.\n *\n * @param itemOrItems - A comment, sequence, or feature, or array of such items\n * @returns A formatted string or array of strings\n */\nexport function formatItem(\n  itemOrItems:\n    | GFF3FeatureLineWithRefs\n    | GFF3Directive\n    | GFF3Comment\n    | GFF3Sequence\n    | (GFF3FeatureLineWithRefs | GFF3Directive | GFF3Comment | GFF3Sequence)[],\n): string | string[] {\n  function formatSingleItem(\n    item: GFF3FeatureLineWithRefs | GFF3Directive | GFF3Comment | GFF3Sequence,\n  ) {\n    if ('attributes' in item) return formatFeature(item)\n    if ('directive' in item) return formatDirective(item)\n    if ('sequence' in item) return formatSequence(item)\n    if ('comment' in item) return formatComment(item)\n    return '# (invalid item found during format)\\n'\n  }\n\n  if (Array.isArray(itemOrItems)) {\n    return itemOrItems.map(formatSingleItem)\n  }\n  return formatSingleItem(itemOrItems)\n}\n\n/** A record of GFF3 attribute identifiers and the values of those identifiers */\nexport type GFF3Attributes = Record<string, string[] | undefined>\n\n/** A representation of a single line of a GFF3 file */\nexport interface GFF3FeatureLine {\n  /** The ID of the landmark used to establish the coordinate system for the current feature */\n  seq_id: string | null\n  /** A free text qualifier intended to describe the algorithm or operating procedure that generated this feature */\n  source: string | null\n  /** The type of the feature */\n  type: string | null\n  /** The start coordinates of the feature */\n  start: number | null\n  /** The end coordinates of the feature */\n  end: number | null\n  /** The score of the feature */\n  score: number | null\n  /** The strand of the feature */\n  strand: string | null\n  /** For features of type \"CDS\", the phase indicates where the next codon begins relative to the 5' end of the current CDS feature */\n  phase: string | null\n  /** Feature attributes */\n  attributes: GFF3Attributes | null\n}\n\n/**\n * A GFF3 Feature line that includes references to other features defined in\n * their \"Parent\" or \"Derives_from\" attributes\n */\nexport interface GFF3FeatureLineWithRefs extends GFF3FeatureLine {\n  /** An array of child features */\n  child_features: GFF3Feature[]\n  /** An array of features derived from this feature */\n  derived_features: GFF3Feature[]\n}\n\nfunction _isFeatureLineWithRefs(\n  featureLine: GFF3FeatureLine | GFF3FeatureLineWithRefs,\n): featureLine is GFF3FeatureLineWithRefs {\n  return (\n    (featureLine as GFF3FeatureLineWithRefs).child_features !== undefined &&\n    (featureLine as GFF3FeatureLineWithRefs).derived_features !== undefined\n  )\n}\n\n/**\n * A GFF3 feature, which may include multiple individual feature lines\n */\nexport type GFF3Feature = GFF3FeatureLineWithRefs[]\n\n/** A GFF3 directive */\nexport interface GFF3Directive {\n  /** The name of the directive */\n  directive: string\n  /** The string value of the directive */\n  value?: string\n}\n\n/** A GFF3 sequence-region directive */\nexport interface GFF3SequenceRegionDirective extends GFF3Directive {\n  /** The string value of the directive */\n  value: string\n  /** The sequence ID parsed from the directive */\n  seq_id: string\n  /** The sequence start parsed from the directive */\n  start: string\n  /** The sequence end parsed from the directive */\n  end: string\n}\n\n/** A GFF3 genome-build directive */\nexport interface GFF3GenomeBuildDirective extends GFF3Directive {\n  /** The string value of the directive */\n  value: string\n  /** The genome build source parsed from the directive */\n  source: string\n  /** The genome build name parsed from the directive */\n  buildName: string\n}\n\n/** A GFF3 comment */\nexport interface GFF3Comment {\n  /** The text of the comment */\n  comment: string\n}\n\n/** A GFF3 FASTA single sequence */\nexport interface GFF3Sequence {\n  /** The ID of the sequence */\n  id: string\n  /** The description of the sequence */\n  description?: string\n  /** The sequence */\n  sequence: string\n}\n\nexport type GFF3Item = GFF3Feature | GFF3Directive | GFF3Comment | GFF3Sequence\n","import * as GFF3 from './util'\n\nconst containerAttributes = {\n  Parent: 'child_features' as const,\n  Derives_from: 'derived_features' as const,\n}\n\nexport class FASTAParser {\n  seqCallback: (sequence: GFF3.GFF3Sequence) => void\n  currentSequence:\n    | { id: string; sequence: string; description?: string }\n    | undefined\n\n  constructor(seqCallback: (sequence: GFF3.GFF3Sequence) => void) {\n    this.seqCallback = seqCallback\n    this.currentSequence = undefined\n  }\n\n  addLine(line: string): void {\n    const defMatch = /^>\\s*(\\S+)\\s*(.*)/.exec(line)\n    if (defMatch) {\n      this._flush()\n      this.currentSequence = { id: defMatch[1], sequence: '' }\n      if (defMatch[2]) this.currentSequence.description = defMatch[2].trim()\n    } else if (this.currentSequence && /\\S/.test(line)) {\n      this.currentSequence.sequence += line.replace(/\\s/g, '')\n    }\n  }\n\n  private _flush() {\n    if (this.currentSequence) this.seqCallback(this.currentSequence)\n  }\n\n  finish(): void {\n    this._flush()\n  }\n}\n\ninterface ParserArgs {\n  featureCallback?(feature: GFF3.GFF3Feature): void\n  endCallback?(): void\n  commentCallback?(comment: GFF3.GFF3Comment): void\n  errorCallback?(error: string): void\n  directiveCallback?(directive: GFF3.GFF3Directive): void\n  sequenceCallback?(sequence: GFF3.GFF3Sequence): void\n  bufferSize?: number\n  disableDerivesFromReferences?: boolean\n}\n\ninterface References {\n  Parent: GFF3.GFF3Feature[]\n  Derives_from: GFF3.GFF3Feature[]\n}\n\nexport default class Parser {\n  featureCallback: (feature: GFF3.GFF3Feature) => void\n  endCallback: () => void\n  commentCallback: (comment: GFF3.GFF3Comment) => void\n  errorCallback: (error: string) => void\n  disableDerivesFromReferences: boolean\n  directiveCallback: (directive: GFF3.GFF3Directive) => void\n  sequenceCallback: (sequence: GFF3.GFF3Sequence) => void\n  bufferSize: number\n  fastaParser: FASTAParser | undefined = undefined\n  // if this is true, the parser ignores the\n  // rest of the lines in the file.  currently\n  // set when the file switches over to FASTA\n  eof = false\n  lineNumber = 0\n  // features that we have to keep on hand for now because they\n  // might be referenced by something else\n  private _underConstructionTopLevel: GFF3.GFF3Feature[] = []\n  // index of the above by ID\n  private _underConstructionById: Record<string, GFF3.GFF3Feature | undefined> =\n    {}\n  private _completedReferences: Record<\n    string,\n    Record<string, boolean | undefined> | undefined\n  > = {}\n  // features that reference something we have not seen yet\n  // structured as:\n  // {  'some_id' : {\n  //     'Parent' : [ orphans that have a Parent attr referencing it ],\n  //     'Derives_from' : [ orphans that have a Derives_from attr referencing it ],\n  //    }\n  // }\n  private _underConstructionOrphans: Record<string, References | undefined> = {}\n\n  constructor(args: ParserArgs) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const nullFunc = () => {}\n\n    this.featureCallback = args.featureCallback || nullFunc\n    this.endCallback = args.endCallback || nullFunc\n    this.commentCallback = args.commentCallback || nullFunc\n    this.errorCallback = args.errorCallback || nullFunc\n    this.directiveCallback = args.directiveCallback || nullFunc\n    this.sequenceCallback = args.sequenceCallback || nullFunc\n    this.disableDerivesFromReferences =\n      args.disableDerivesFromReferences || false\n\n    // number of lines to buffer\n    this.bufferSize = args.bufferSize === undefined ? 1000 : args.bufferSize\n  }\n\n  addLine(line: string): void {\n    // if we have transitioned to a fasta section, just delegate to that parser\n    if (this.fastaParser) {\n      this.fastaParser.addLine(line)\n      return\n    }\n    if (this.eof) {\n      // otherwise, if we are done, ignore this line\n      return\n    }\n\n    this.lineNumber += 1\n\n    if (/^\\s*[^#\\s>]/.test(line)) {\n      // feature line, most common case\n      this._bufferLine(line)\n      return\n    }\n\n    const match = /^\\s*(#+)(.*)/.exec(line)\n    if (match) {\n      // directive or comment\n      const [, hashsigns] = match\n      let [, , contents] = match\n\n      if (hashsigns.length === 3) {\n        // sync directive, all forward-references are resolved.\n        this._emitAllUnderConstructionFeatures()\n      } else if (hashsigns.length === 2) {\n        const directive = GFF3.parseDirective(line)\n        if (directive) {\n          if (directive.directive === 'FASTA') {\n            this._emitAllUnderConstructionFeatures()\n            this.eof = true\n            this.fastaParser = new FASTAParser(this.sequenceCallback)\n          } else {\n            this._emitItem(directive)\n          }\n        }\n      } else {\n        contents = contents.replace(/\\s*/, '')\n        this._emitItem({ comment: contents })\n      }\n    } else if (/^\\s*$/.test(line)) {\n      // blank line, do nothing\n    } else if (/^\\s*>/.test(line)) {\n      // implicit beginning of a FASTA section\n      this._emitAllUnderConstructionFeatures()\n      this.eof = true\n      this.fastaParser = new FASTAParser(this.sequenceCallback)\n      this.fastaParser.addLine(line)\n    } else {\n      // it's a parse error\n      const errLine = line.replace(/\\r?\\n?$/g, '')\n      throw new Error(`GFF3 parse error.  Cannot parse '${errLine}'.`)\n    }\n  }\n\n  finish(): void {\n    this._emitAllUnderConstructionFeatures()\n    if (this.fastaParser) this.fastaParser.finish()\n    this.endCallback()\n  }\n\n  private _emitItem(\n    i: GFF3.GFF3Feature | GFF3.GFF3Directive | GFF3.GFF3Comment,\n  ) {\n    if (Array.isArray(i)) this.featureCallback(i)\n    else if ('directive' in i) this.directiveCallback(i)\n    else if ('comment' in i) this.commentCallback(i)\n  }\n\n  private _enforceBufferSizeLimit(additionalItemCount = 0) {\n    const _unbufferItem = (item?: GFF3.GFF3Feature) => {\n      if (\n        item &&\n        Array.isArray(item) &&\n        item[0].attributes &&\n        item[0].attributes.ID &&\n        item[0].attributes.ID[0]\n      ) {\n        const ids = item[0].attributes.ID\n        ids.forEach((id) => {\n          delete this._underConstructionById[id]\n          delete this._completedReferences[id]\n        })\n        item.forEach((i) => {\n          if (i.child_features)\n            i.child_features.forEach((c) => _unbufferItem(c))\n          if (i.derived_features)\n            i.derived_features.forEach((d) => _unbufferItem(d))\n        })\n      }\n    }\n\n    while (\n      this._underConstructionTopLevel.length + additionalItemCount >\n      this.bufferSize\n    ) {\n      const item = this._underConstructionTopLevel.shift()\n      if (item) {\n        this._emitItem(item)\n        _unbufferItem(item)\n      }\n    }\n  }\n\n  /**\n   * return all under-construction features, called when we know\n   * there will be no additional data to attach to them\n   */\n  private _emitAllUnderConstructionFeatures() {\n    this._underConstructionTopLevel.forEach(this._emitItem.bind(this))\n\n    this._underConstructionTopLevel = []\n    this._underConstructionById = {}\n    this._completedReferences = {}\n\n    // if we have any orphans hanging around still, this is a\n    // problem. die with a parse error\n    if (Array.from(Object.values(this._underConstructionOrphans)).length) {\n      throw new Error(\n        `some features reference other features that do not exist in the file (or in the same '###' scope). ${Object.keys(\n          this._underConstructionOrphans,\n        )}`,\n      )\n    }\n  }\n\n  // do the right thing with a newly-parsed feature line\n  private _bufferLine(line: string) {\n    const rawFeatureLine = GFF3.parseFeature(line)\n    const featureLine: GFF3.GFF3FeatureLineWithRefs = {\n      ...rawFeatureLine,\n      child_features: [],\n      derived_features: [],\n    }\n    // featureLine._lineNumber = this.lineNumber //< debugging aid\n\n    // NOTE: a feature is an arrayref of one or more feature lines.\n    const ids = featureLine.attributes?.ID || []\n    const parents = featureLine.attributes?.Parent || []\n    const derives = this.disableDerivesFromReferences\n      ? []\n      : featureLine.attributes?.Derives_from || []\n\n    if (!ids.length && !parents.length && !derives.length) {\n      // if it has no IDs and does not refer to anything, we can just\n      // output it\n      this._emitItem([featureLine])\n      return\n    }\n\n    let feature: GFF3.GFF3Feature | undefined = undefined\n    ids.forEach((id) => {\n      const existing = this._underConstructionById[id]\n      if (existing) {\n        // another location of the same feature\n        if (existing[existing.length - 1].type !== featureLine.type) {\n          this._parseError(\n            `multi-line feature \"${id}\" has inconsistent types: \"${\n              featureLine.type\n            }\", \"${existing[existing.length - 1].type}\"`,\n          )\n        }\n        existing.push(featureLine)\n        feature = existing\n      } else {\n        // haven't seen it yet, so buffer it so we can attach\n        // child features to it\n        feature = [featureLine]\n\n        this._enforceBufferSizeLimit(1)\n        if (!parents.length && !derives.length) {\n          this._underConstructionTopLevel.push(feature)\n        }\n        this._underConstructionById[id] = feature\n\n        // see if we have anything buffered that refers to it\n        this._resolveReferencesTo(feature, id)\n      }\n    })\n\n    // try to resolve all its references\n    this._resolveReferencesFrom(\n      feature || [featureLine],\n      { Parent: parents, Derives_from: derives },\n      ids,\n    )\n  }\n\n  private _resolveReferencesTo(feature: GFF3.GFF3Feature, id: string) {\n    const references = this._underConstructionOrphans[id]\n    //   references is of the form\n    //   {\n    //     'Parent' : [ orphans that have a Parent attr referencing this feature ],\n    //     'Derives_from' : [ orphans that have a Derives_from attr referencing this feature ],\n    //    }\n    if (!references) return\n    feature.forEach((loc) => {\n      loc.child_features.push(...references.Parent)\n    })\n    feature.forEach((loc) => {\n      loc.derived_features.push(...references.Derives_from)\n    })\n    delete this._underConstructionOrphans[id]\n  }\n\n  private _parseError(message: string) {\n    this.eof = true\n    this.errorCallback(`${this.lineNumber}: ${message}`)\n  }\n\n  private _resolveReferencesFrom(\n    feature: GFF3.GFF3Feature,\n    references: { Parent: string[]; Derives_from: string[] },\n    ids: string[],\n  ) {\n    // this is all a bit more awkward in javascript than it was in perl\n    function postSet(\n      obj: Record<string, Record<string, boolean | undefined> | undefined>,\n      slot1: string,\n      slot2: string,\n    ) {\n      let subObj = obj[slot1]\n      if (!subObj) {\n        subObj = {}\n        obj[slot1] = subObj\n      }\n      const returnVal = subObj[slot2] || false\n      subObj[slot2] = true\n      return returnVal\n    }\n\n    references.Parent.forEach((toId) => {\n      const otherFeature = this._underConstructionById[toId]\n      if (otherFeature) {\n        const pname = containerAttributes.Parent\n        if (\n          !ids.filter((id) =>\n            postSet(this._completedReferences, id, `Parent,${toId}`),\n          ).length\n        ) {\n          otherFeature.forEach((location) => {\n            location[pname].push(feature)\n          })\n        }\n      } else {\n        let ref = this._underConstructionOrphans[toId]\n        if (!ref) {\n          ref = {\n            Parent: [],\n            Derives_from: [],\n          }\n          this._underConstructionOrphans[toId] = ref\n        }\n        ref.Parent.push(feature)\n      }\n    })\n\n    references.Derives_from.forEach((toId) => {\n      const otherFeature = this._underConstructionById[toId]\n      if (otherFeature) {\n        const pname = containerAttributes.Derives_from\n        if (\n          !ids.filter((id) =>\n            postSet(this._completedReferences, id, `Derives_from,${toId}`),\n          ).length\n        ) {\n          otherFeature.forEach((location) => {\n            location[pname].push(feature)\n          })\n        }\n      } else {\n        let ref = this._underConstructionOrphans[toId]\n        if (!ref) {\n          ref = {\n            Parent: [],\n            Derives_from: [],\n          }\n          this._underConstructionOrphans[toId] = ref\n        }\n        ref.Derives_from.push(feature)\n      }\n    })\n  }\n}\n","import { Transform, TransformCallback, Readable, Writable } from 'stream'\nimport { StringDecoder as Decoder } from 'string_decoder'\n\nimport Parser from './parse'\nimport {\n  formatItem,\n  formatSequence,\n  GFF3Comment,\n  GFF3Directive,\n  GFF3Feature,\n  GFF3FeatureLine,\n  GFF3FeatureLineWithRefs,\n  GFF3Sequence,\n  GFF3Item,\n} from './util'\n\nexport type {\n  GFF3Comment,\n  GFF3Directive,\n  GFF3Feature,\n  GFF3FeatureLine,\n  GFF3FeatureLineWithRefs,\n  GFF3Sequence,\n  GFF3Item,\n}\n\n/** Parser options */\nexport interface ParseOptions {\n  /** Whether to resolve references to derives from features */\n  disableDerivesFromReferences?: boolean\n  /** Text encoding of the input GFF3. default 'utf8' */\n  encoding?: BufferEncoding\n  /** Whether to parse features, default true */\n  parseFeatures?: boolean\n  /** Whether to parse directives, default false */\n  parseDirectives?: boolean\n  /** Whether to parse comments, default false */\n  parseComments?: boolean\n  /** Whether to parse sequences, default true */\n  parseSequences?: boolean\n  /**\n   * Parse all features, directives, comments, and sequences. Overrides other\n   * parsing options. Default false.\n   */\n  parseAll?: boolean\n  /** Maximum number of GFF3 lines to buffer, default 1000 */\n  bufferSize?: number\n}\n\ntype ParseOptionsProcessed = Required<Omit<ParseOptions, 'parseAll'>>\n\n// call a callback on the next process tick if running in\n// an environment that supports it\nfunction _callback(callback: TransformCallback) {\n  if (process && process.nextTick) process.nextTick(callback)\n  else callback()\n}\n\n// shared arg processing for the parse routines\nfunction _processParseOptions(options: ParseOptions): ParseOptionsProcessed {\n  const out = {\n    encoding: 'utf8' as const,\n    parseFeatures: true,\n    parseDirectives: false,\n    parseSequences: true,\n    parseComments: false,\n    bufferSize: 1000,\n    disableDerivesFromReferences: false,\n    ...options,\n  }\n\n  if (options.parseAll) {\n    out.parseFeatures = true\n    out.parseDirectives = true\n    out.parseComments = true\n    out.parseSequences = true\n  }\n\n  return out\n}\n\nclass GFFTransform extends Transform {\n  encoding: BufferEncoding\n  decoder: Decoder\n  textBuffer = ''\n  parser: Parser\n\n  constructor(inputOptions: ParseOptions = {}) {\n    super({ objectMode: true })\n    const options = _processParseOptions(inputOptions)\n\n    this.encoding = inputOptions.encoding || 'utf8'\n\n    this.decoder = new Decoder()\n\n    const push = this.push.bind(this)\n    this.parser = new Parser({\n      featureCallback: options.parseFeatures ? push : undefined,\n      directiveCallback: options.parseDirectives ? push : undefined,\n      commentCallback: options.parseComments ? push : undefined,\n      sequenceCallback: options.parseSequences ? push : undefined,\n      errorCallback: (err) => this.emit('error', err),\n      bufferSize: options.bufferSize,\n      disableDerivesFromReferences: options.disableDerivesFromReferences,\n    })\n  }\n\n  private _addLine(data: string | undefined) {\n    if (data) {\n      this.parser.addLine(data)\n    }\n  }\n\n  private _nextText(buffer: string) {\n    const pieces = (this.textBuffer + buffer).split(/\\r?\\n/)\n    this.textBuffer = pieces.pop() || ''\n\n    pieces.forEach((piece) => this._addLine(piece))\n  }\n\n  _transform(\n    chunk: Buffer,\n    _encoding: BufferEncoding,\n    callback: TransformCallback,\n  ) {\n    this._nextText(this.decoder.write(chunk))\n    _callback(callback)\n  }\n\n  _flush(callback: TransformCallback) {\n    if (this.decoder.end) this._nextText(this.decoder.end())\n    if (this.textBuffer != null) this._addLine(this.textBuffer)\n    this.parser.finish()\n    _callback(callback)\n  }\n}\n\n/**\n * Parse a stream of text data into a stream of feature, directive, comment,\n * an sequence objects.\n *\n * @param options - Parsing options\n * @returns stream (in objectMode) of parsed items\n */\nexport function parseStream(options: ParseOptions = {}): GFFTransform {\n  return new GFFTransform(options)\n}\n\n/**\n * Synchronously parse a string containing GFF3 and return an array of the\n * parsed items.\n *\n * @param str - GFF3 string\n * @param inputOptions - Parsing options\n * @returns array of parsed features, directives, comments and/or sequences\n */\nexport function parseStringSync(\n  str: string,\n  inputOptions?:\n    | {\n        disableDerivesFromReferences?: boolean\n        encoding?: BufferEncoding\n        bufferSize?: number\n      }\n    | undefined,\n): (GFF3Feature | GFF3Sequence)[]\nexport function parseStringSync<T extends boolean>(\n  str: string,\n  inputOptions: {\n    parseAll?: T\n    disableDerivesFromReferences?: boolean\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): T extends true ? GFF3Item[] : never\nexport function parseStringSync<F extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true ? (GFF3Feature | GFF3Sequence)[] : GFF3Sequence[]\nexport function parseStringSync<D extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseDirectives: D\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): D extends true\n  ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n  : (GFF3Feature | GFF3Sequence)[]\nexport function parseStringSync<C extends boolean>(\n  str: string,\n  inputOptions: {\n    parseComments: C\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): C extends true\n  ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n  : (GFF3Feature | GFF3Sequence)[]\nexport function parseStringSync<S extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): S extends true ? (GFF3Feature | GFF3Sequence)[] : GFF3Feature[]\nexport function parseStringSync<F extends boolean, D extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseDirectives: D\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? D extends true\n    ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Sequence)[]\n  : D extends true\n  ? (GFF3Directive | GFF3Sequence)[]\n  : GFF3Sequence[]\nexport function parseStringSync<F extends boolean, C extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseComments: C\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? C extends true\n    ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Sequence)[]\n  : C extends true\n  ? (GFF3Comment | GFF3Sequence)[]\n  : GFF3Sequence[]\nexport function parseStringSync<F extends boolean, S extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? S extends true\n    ? (GFF3Feature | GFF3Sequence)[]\n    : GFF3Feature[]\n  : S extends true\n  ? GFF3Sequence[]\n  : []\nexport function parseStringSync<D extends boolean, C extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseDirectives: D\n    parseComments: C\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): D extends true\n  ? C extends true\n    ? (GFF3Feature | GFF3Directive | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n  : C extends true\n  ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n  : (GFF3Feature | GFF3Sequence)[]\nexport function parseStringSync<D extends boolean, S extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseDirectives: D\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): D extends true\n  ? S extends true\n    ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Directive)[]\n  : S extends true\n  ? (GFF3Feature | GFF3Sequence)[]\n  : GFF3Feature[]\nexport function parseStringSync<C extends boolean, S extends boolean>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseComments: C\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): C extends true\n  ? S extends true\n    ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Comment)[]\n  : S extends true\n  ? (GFF3Feature | GFF3Sequence)[]\n  : GFF3Feature[]\nexport function parseStringSync<\n  F extends boolean,\n  D extends boolean,\n  C extends boolean,\n>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseDirectives: D\n    parseComments: C\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? D extends true\n    ? C extends true\n      ? GFF3Item[]\n      : (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n    : C extends true\n    ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Sequence)[]\n  : D extends true\n  ? C extends true\n    ? (GFF3Directive | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Directive | GFF3Sequence)[]\n  : C extends true\n  ? (GFF3Comment | GFF3Sequence)[]\n  : GFF3Sequence[]\nexport function parseStringSync<\n  F extends boolean,\n  D extends boolean,\n  S extends boolean,\n>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseDirectives: D\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? D extends true\n    ? S extends true\n      ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n      : (GFF3Feature | GFF3Directive)[]\n    : S extends true\n    ? (GFF3Feature | GFF3Sequence)[]\n    : GFF3Feature[]\n  : D extends true\n  ? S extends true\n    ? (GFF3Directive | GFF3Sequence)[]\n    : GFF3Directive[]\n  : S extends true\n  ? GFF3Sequence[]\n  : []\nexport function parseStringSync<\n  F extends boolean,\n  C extends boolean,\n  S extends boolean,\n>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseComments: C\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? C extends true\n    ? S extends true\n      ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n      : (GFF3Feature | GFF3Comment)[]\n    : S extends true\n    ? (GFF3Feature | GFF3Sequence)[]\n    : GFF3Feature[]\n  : C extends true\n  ? S extends true\n    ? (GFF3Comment | GFF3Sequence)[]\n    : GFF3Comment[]\n  : S extends true\n  ? GFF3Sequence[]\n  : []\nexport function parseStringSync<\n  D extends boolean,\n  C extends boolean,\n  S extends boolean,\n>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: D\n    parseComments: C\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): D extends true\n  ? C extends true\n    ? S extends true\n      ? GFF3Item[]\n      : (GFF3Feature | GFF3Directive | GFF3Comment)[]\n    : S extends true\n    ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Directive)[]\n  : C extends true\n  ? S extends true\n    ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n    : (GFF3Feature | GFF3Comment)[]\n  : S extends true\n  ? (GFF3Feature | GFF3Sequence)[]\n  : GFF3Feature[]\nexport function parseStringSync<\n  F extends boolean,\n  D extends boolean,\n  C extends boolean,\n  S extends boolean,\n>(\n  str: string,\n  inputOptions: {\n    disableDerivesFromReferences?: boolean\n    parseFeatures: F\n    parseDirectives: D\n    parseComments: C\n    parseSequences: S\n    encoding?: BufferEncoding\n    bufferSize?: number\n  },\n): F extends true\n  ? D extends true\n    ? C extends true\n      ? S extends true\n        ? GFF3Item[]\n        : (GFF3Feature | GFF3Directive | GFF3Comment)[]\n      : S extends true\n      ? (GFF3Feature | GFF3Directive | GFF3Sequence)[]\n      : (GFF3Feature | GFF3Directive)[]\n    : C extends true\n    ? S extends true\n      ? (GFF3Feature | GFF3Comment | GFF3Sequence)[]\n      : (GFF3Feature | GFF3Comment)[]\n    : S extends true\n    ? (GFF3Feature | GFF3Sequence)[]\n    : GFF3Feature[]\n  : D extends true\n  ? C extends true\n    ? S extends true\n      ? (GFF3Directive | GFF3Comment | GFF3Sequence)[]\n      : (GFF3Directive | GFF3Comment)[]\n    : S extends true\n    ? (GFF3Directive | GFF3Sequence)[]\n    : GFF3Directive[]\n  : C extends true\n  ? S extends true\n    ? (GFF3Comment | GFF3Sequence)[]\n    : GFF3Comment[]\n  : S extends true\n  ? GFF3Sequence[]\n  : []\nexport function parseStringSync(\n  str: string,\n  inputOptions: ParseOptions = {},\n): GFF3Item[] {\n  if (!str) return []\n\n  const options = _processParseOptions(inputOptions)\n\n  const items: GFF3Item[] = []\n  const push = items.push.bind(items)\n\n  const parser = new Parser({\n    featureCallback: options.parseFeatures ? push : undefined,\n    directiveCallback: options.parseDirectives ? push : undefined,\n    commentCallback: options.parseComments ? push : undefined,\n    sequenceCallback: options.parseSequences ? push : undefined,\n    disableDerivesFromReferences: options.disableDerivesFromReferences || false,\n    bufferSize: Infinity,\n    errorCallback: (err) => {\n      throw err\n    },\n  })\n\n  str.split(/\\r?\\n/).forEach(parser.addLine.bind(parser))\n  parser.finish()\n\n  return items\n}\n\n/**\n * Format an array of GFF3 items (features,directives,comments) into string of\n * GFF3. Does not insert synchronization (###) marks.\n *\n * @param items - Array of features, directives, comments and/or sequences\n * @returns the formatted GFF3\n */\nexport function formatSync(items: GFF3Item[]): string {\n  // sort items into seq and other\n  const other: (GFF3Feature | GFF3Directive | GFF3Comment)[] = []\n  const sequences: GFF3Sequence[] = []\n  items.forEach((i) => {\n    if ('sequence' in i) sequences.push(i)\n    else other.push(i)\n  })\n  let str = other.map(formatItem).join('')\n  if (sequences.length) {\n    str += '##FASTA\\n'\n    str += sequences.map(formatSequence).join('')\n  }\n  return str\n}\n\ninterface FormatOptions {\n  minSyncLines?: number\n  insertVersionDirective?: boolean\n  encoding?: BufferEncoding\n}\n\nclass FormattingTransform extends Transform {\n  linesSinceLastSyncMark = 0\n  haveWeEmittedData = false\n  fastaMode = false\n  minLinesBetweenSyncMarks: number\n  insertVersionDirective: boolean\n  constructor(options: FormatOptions = {}) {\n    super(Object.assign(options, { objectMode: true }))\n    this.minLinesBetweenSyncMarks = options.minSyncLines || 100\n    this.insertVersionDirective = options.insertVersionDirective || false\n  }\n\n  _transform(\n    chunk: GFF3Item[],\n    _encoding: BufferEncoding,\n    callback: TransformCallback,\n  ) {\n    // if we have not emitted anything yet, and this first\n    // chunk is not a gff-version directive, emit one\n    let str\n    if (!this.haveWeEmittedData && this.insertVersionDirective) {\n      const thisChunk = Array.isArray(chunk) ? chunk[0] : chunk\n      if ('directive' in thisChunk) {\n        if (thisChunk.directive !== 'gff-version') {\n          this.push('##gff-version 3\\n')\n        }\n      }\n    }\n\n    // if it's a sequence chunk coming down, emit a FASTA directive and\n    // change to FASTA mode\n    if ('sequence' in chunk && !this.fastaMode) {\n      this.push('##FASTA\\n')\n      this.fastaMode = true\n    }\n\n    if (Array.isArray(chunk)) str = chunk.map(formatItem).join('')\n    else str = formatItem(chunk)\n\n    this.push(str)\n\n    if (this.linesSinceLastSyncMark >= this.minLinesBetweenSyncMarks) {\n      this.push('###\\n')\n      this.linesSinceLastSyncMark = 0\n    } else {\n      // count the number of newlines in this chunk\n      let count = 0\n      for (let i = 0; i < str.length; i += 1) {\n        if (str[i] === '\\n') count += 1\n      }\n      this.linesSinceLastSyncMark += count\n    }\n\n    this.haveWeEmittedData = true\n    _callback(callback)\n  }\n}\n\n/**\n * Format a stream of features, directives, comments and/or sequences into a\n * stream of GFF3 text.\n *\n * Inserts synchronization (###) marks automatically.\n *\n * @param options - parser options\n */\nexport function formatStream(options: FormatOptions = {}): FormattingTransform {\n  return new FormattingTransform(options)\n}\n\n/**\n * Format a stream of features, directives, comments and/or sequences into a\n * GFF3 file and write it to the filesystem.\n\n * Inserts synchronization (###) marks and a ##gff-version\n * directive automatically (if one is not already present).\n *\n * @param stream - the stream to write to the file\n * @param filename - the file path to write to\n * @param options - parser options\n * @returns promise for null that resolves when the stream has been written\n */\nexport function formatFile(\n  stream: Readable,\n  writeStream: Writable,\n  options: FormatOptions = {},\n): Promise<null> {\n  const newOptions = {\n    insertVersionDirective: true,\n    ...options,\n  }\n\n  return new Promise((resolve, reject) => {\n    stream\n      .pipe(new FormattingTransform(newOptions))\n      .on('end', () => resolve(null))\n      .on('error', reject)\n      .pipe(writeStream)\n  })\n}\n","import {\n  parseStream,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n  GFF3Comment,\n  GFF3Directive,\n  GFF3Feature,\n  GFF3FeatureLine,\n  GFF3FeatureLineWithRefs,\n  GFF3Sequence,\n  GFF3Item,\n} from './api'\n\nimport * as util from './util'\n\nexport default {\n  parseStream,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n  util,\n}\n\nexport type {\n  GFF3Comment,\n  GFF3Directive,\n  GFF3Feature,\n  GFF3FeatureLine,\n  GFF3FeatureLineWithRefs,\n  GFF3Sequence,\n  GFF3Item,\n}\n"],"names":["unescape","stringVal","replace","_match","seq","String","fromCharCode","parseInt","_escape","regex","s","ch","hex","charCodeAt","toString","toUpperCase","padStart","escape","rawVal","escapeColumn","parseAttributes","attrString","length","attrs","split","forEach","a","nv","trim","arec","push","map","parseFeature","line","f","seq_id","source","type","start","end","score","parseFloat","strand","phase","attributes","parseDirective","match","exec","name","contents","parsed","directive","value","c","buildName","formatAttributes","attrOrder","Object","entries","valstring","tag","val","hasOwnProperty","Array","isArray","join","_formatSingleFeature","seenFeature","undefined","fields","formattedString","_formatFeature","feature","featureLine","strings","child_features","derived_features","formatFeature","featureOrFeatures","formatDirective","str","formatComment","comment","formatSequence","id","description","sequence","formatItem","itemOrItems","formatSingleItem","item","containerAttributes","FASTAParser","seqCallback","this","currentSequence","defMatch","_flush","test","Parser","args","fastaParser","eof","lineNumber","_underConstructionTopLevel","_underConstructionById","_completedReferences","_underConstructionOrphans","nullFunc","featureCallback","endCallback","commentCallback","errorCallback","directiveCallback","sequenceCallback","disableDerivesFromReferences","bufferSize","addLine","_bufferLine","hashsigns","_emitAllUnderConstructionFeatures","GFF3","_emitItem","errLine","Error","finish","i","additionalItemCount","_unbufferItem","ID","d","shift","bind","from","values","keys","rawFeatureLine","ids","parents","Parent","derives","Derives_from","existing","_parseError","_enforceBufferSizeLimit","_resolveReferencesTo","_resolveReferencesFrom","references","loc","message","postSet","obj","slot1","slot2","subObj","returnVal","toId","otherFeature","pname","filter","location","ref","_callback","callback","process","nextTick","_processParseOptions","options","out","encoding","parseFeatures","parseDirectives","parseSequences","parseComments","parseAll","GFFTransform","inputOptions","objectMode","textBuffer","decoder","Decoder","parser","err","emit","data","buffer","pieces","pop","piece","_addLine","chunk","_encoding","_nextText","write","Transform","FormattingTransform","assign","linesSinceLastSyncMark","haveWeEmittedData","fastaMode","minLinesBetweenSyncMarks","minSyncLines","insertVersionDirective","thisChunk","count","parseStream","parseStringSync","items","Infinity","formatSync","other","sequences","formatStream","formatFile","stream","writeStream","newOptions","Promise","resolve","reject","pipe","on","util"],"sourceRoot":""}