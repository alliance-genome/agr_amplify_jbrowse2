{"version":3,"file":"static/js/8856.2e2a100f.chunk.js","mappings":"kSAoBMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,iBAAO,CACpCC,SAAU,CACRC,OAAQ,GAEX,IAEKC,GAAwBC,EAAAA,EAAAA,WAAS,SAA8BC,GAMjE,IALFC,EAAKD,EAALC,MACAC,EAAOF,EAAPE,QAKQC,EAAYT,IAAZS,QACRC,GAAgCC,EAAAA,EAAAA,UAAS,OAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAEtBI,EAAyC,IADjBT,EAAtBU,kBAC4BC,OACpC,OACEC,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CAACC,MAAI,EAACb,QAASA,EAASc,MAAM,mBAAkBC,SAAA,EACrDJ,EAAAA,EAAAA,MAACK,EAAAA,EAAa,CACZC,MAAO,CAAEC,QAAS,OAAQC,SAAU,SAAUC,IAAK,OAAQL,SAAA,EAE3DM,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,SAAS,OAAMR,SACnBP,GACCG,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAT,SAAA,EACEM,EAAAA,EAAAA,KAAA,QAAAN,SAAM,qCACNM,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAAN,SAAM,oEAKR,+CAGJJ,EAAAA,EAAAA,MAAA,OAAKM,MAAO,CAAEC,QAAS,OAAQO,WAAY,UAAWV,SAAA,EACpDM,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CAAAX,SAAC,yBACZJ,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CACLC,KAAK,QACLC,UAAW5B,EAAQP,SACnB,cAAY,iBACZoC,MAAOxB,EACPyB,SAAU,SAAAC,GAAK,OAAIzB,EAAYyB,EAAMC,OAAOH,MAAM,EAACf,SAAA,EAEnDM,EAAAA,EAAAA,KAACa,EAAAA,EAAQ,CAACJ,MAAM,MAAKf,SAAC,SACtBM,EAAAA,EAAAA,KAACa,EAAAA,EAAQ,CAACJ,MAAM,MAAKf,SAAC,kBAI5BM,EAAAA,EAAAA,KAACc,EAAAA,EAAa,CAAApB,UACZM,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLP,UAAW5B,EAAQP,SACnB,cAAY,iBACZ2C,QAAQ,YACRC,MAAM,UACNC,WAAWlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAU,IACtBC,QAAS,YACPC,EAAAA,EAAAA,IAAqBpC,EAAUP,GAC/BC,GAAQ,EACV,EAAEe,SACH,iBAMT,IACA,W","sources":["../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/ExportBookmarksDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  DialogContent,\n  DialogActions,\n  MenuItem,\n  Select,\n  Typography,\n  Alert,\n} from '@mui/material'\nimport GetAppIcon from '@mui/icons-material/GetApp'\nimport { makeStyles } from 'tss-react/mui'\nimport { Dialog } from '@jbrowse/core/ui'\n\n// locals\nimport { GridBookmarkModel } from '../model'\nimport { downloadBookmarkFile } from '../utils'\n\nconst useStyles = makeStyles()(() => ({\n  flexItem: {\n    margin: 5,\n  },\n}))\n\nconst ExportBookmarksDialog = observer(function ExportBookmarksDialog({\n  model,\n  onClose,\n}: {\n  model: GridBookmarkModel\n  onClose: (arg: boolean) => void\n}) {\n  const { classes } = useStyles()\n  const [fileType, setFileType] = useState('BED')\n  const { selectedBookmarks } = model\n  const exportAll = selectedBookmarks.length === 0\n  return (\n    <Dialog open onClose={onClose} title=\"Export bookmarks\">\n      <DialogContent\n        style={{ display: 'flex', flexFlow: 'column', gap: '5px' }}\n      >\n        <Alert severity=\"info\">\n          {exportAll ? (\n            <>\n              <span>All bookmarks will be exported.</span>\n              <br />\n              <span>\n                Use the checkboxes to select individual bookmarks to export.\n              </span>\n            </>\n          ) : (\n            'Only selected bookmarks will be exported.'\n          )}\n        </Alert>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Typography>Format to download:</Typography>\n          <Select\n            size=\"small\"\n            className={classes.flexItem}\n            data-testid=\"selectFileType\"\n            value={fileType}\n            onChange={event => setFileType(event.target.value)}\n          >\n            <MenuItem value=\"BED\">BED</MenuItem>\n            <MenuItem value=\"TSV\">TSV</MenuItem>\n          </Select>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          className={classes.flexItem}\n          data-testid=\"dialogDownload\"\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<GetAppIcon />}\n          onClick={() => {\n            downloadBookmarkFile(fileType, model)\n            onClose(false)\n          }}\n        >\n          Download\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\nexport default ExportBookmarksDialog\n"],"names":["useStyles","makeStyles","flexItem","margin","ExportBookmarksDialog","observer","_ref","model","onClose","classes","_useState","useState","_useState2","_slicedToArray","fileType","setFileType","exportAll","selectedBookmarks","length","_jsxs","Dialog","open","title","children","DialogContent","style","display","flexFlow","gap","_jsx","Alert","severity","_Fragment","alignItems","Typography","Select","size","className","value","onChange","event","target","MenuItem","DialogActions","Button","variant","color","startIcon","GetAppIcon","onClick","downloadBookmarkFile"],"sourceRoot":""}