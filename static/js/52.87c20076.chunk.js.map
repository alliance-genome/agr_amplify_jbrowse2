{"version":3,"sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByModifications.tsx"],"names":["useStyles","makeStyles","theme","root","closeButton","position","right","spacing","top","color","palette","grey","table","border","margin","padding","ModificationTable","modifications","classes","className","map","key","value","style","width","background","observer","props","model","handleClose","colorBy","modificationTagMap","entries","open","onClose","onClick","type","length","size","display","variant","setColorScheme"],"mappings":"uQAeMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,GACNC,YAAa,CACXC,SAAU,WACVC,MAAOJ,EAAMK,QAAQ,GACrBC,IAAKN,EAAMK,QAAQ,GACnBE,MAAOP,EAAMQ,QAAQC,KAAK,MAG5BC,MAAO,CACLC,OAAQ,iBACRC,OAAQZ,EAAMK,QAAQ,GACtB,OAAQ,CACNQ,QAASb,EAAMK,QAAQ,SAK7B,SAASS,EAAT,GAIG,IAHDC,EAGC,EAHDA,cAIMC,EAAUlB,IAChB,OACE,2BAAOmB,UAAWD,EAAQN,OACxB,+BACGK,EAAcG,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YACjB,wBAAID,IAAKA,GACP,4BAAKA,GACL,4BAAKC,GACL,wBACEC,MAAO,CACLC,MAAO,MACPC,WAAYH,WAyHbI,8BA/Gf,SAAuBC,GAQrB,IAAMT,EAAUlB,IACR4B,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACPC,EAAgCF,EAAhCE,QAASC,EAAuBH,EAAvBG,mBAEXd,EAAgB,YAAIc,EAAmBC,WAE7C,OACE,kBAAC,IAAD,CAAQC,MAAI,EAACC,QAASL,GACpB,kBAAC,IAAD,8BAEE,kBAAC,IAAD,CACE,aAAW,QACXV,UAAWD,EAAQd,YACnB+B,QAASN,GAET,kBAAC,IAAD,QAGJ,kBAAC,IAAD,KACE,yBAAKV,UAAWD,EAAQf,MACtB,kBAAC,IAAD,kRAOA,kBAAC,IAAD,uIAIA,yBAAKoB,MAAO,CAAET,OAAQ,KACD,mBAAX,OAAPgB,QAAO,IAAPA,OAAA,EAAAA,EAASM,MACR,6BACGnB,EAAcoB,OACb,iFAEE,kBAACrB,EAAD,CACEC,cAAa,YAAMc,EAAmBC,cAI1C,6BACE,kBAAC,IAAD,0FAIA,kBAAC,IAAD,CAAkBM,KAAM,OAI5B,KACe,iBAAX,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASM,MACR,kBAACpB,EAAD,CACEC,cAAe,CACb,CAAC,aAAc,OACf,CAAC,eAAgB,WAGnB,MAEN,yBAAKM,MAAO,CAAEgB,QAAS,SACrB,kBAAC,IAAD,CACEC,QAAQ,YACR/B,MAAM,UACNc,MAAO,CAAET,OAAQ,GACjBqB,QAAS,WACPP,EAAMa,eAAe,CACnBL,KAAM,kBAERP,MARJ,iBAaA,kBAAC,IAAD,CACEW,QAAQ,YACR/B,MAAM,UACNc,MAAO,CAAET,OAAQ,GACjBqB,QAAS,WACPP,EAAMa,eAAe,CACnBL,KAAM,gBAERP,MARJ,eAaA,kBAAC,IAAD,CACEW,QAAQ,YACR/B,MAAM,YACNc,MAAO,CAAET,OAAQ,GACjBqB,QAAS,kBAAMN,MAJjB","file":"static/js/52.87c20076.chunk.js","sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ObservableMap } from 'mobx'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Typography,\n  CircularProgress,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n\n  table: {\n    border: '1px solid #888',\n    margin: theme.spacing(4),\n    '& td': {\n      padding: theme.spacing(1),\n    },\n  },\n}))\n\nfunction ModificationTable({\n  modifications,\n}: {\n  modifications: [string, string][]\n}) {\n  const classes = useStyles()\n  return (\n    <table className={classes.table}>\n      <tbody>\n        {modifications.map(([key, value]) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{value}</td>\n            <td\n              style={{\n                width: '1em',\n                background: value,\n              }}\n            />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nfunction ColorByTagDlg(props: {\n  model: {\n    setColorScheme: Function\n    modificationTagMap: ObservableMap<string, string>\n    colorBy?: { type: string }\n  }\n  handleClose: () => void\n}) {\n  const classes = useStyles()\n  const { model, handleClose } = props\n  const { colorBy, modificationTagMap } = model\n\n  const modifications = [...modificationTagMap.entries()]\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Color by modifications\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <div className={classes.root}>\n          <Typography>\n            You can choose to color the modifications in the BAM/CRAM MM/ML\n            specification using this dialog. Choosing modifications colors the\n            modified positions and can color multiple modification types.\n            Choosing the methylation setting colors methylated and unmethylated\n            CpG.\n          </Typography>\n          <Typography>\n            Note: you can revisit this dialog to see the current mapping of\n            colors to modification type for the modification coloring mode\n          </Typography>\n          <div style={{ margin: 20 }}>\n            {colorBy?.type === 'modifications' ? (\n              <div>\n                {modifications.length ? (\n                  <>\n                    Current modification-type-to-color mapping\n                    <ModificationTable\n                      modifications={[...modificationTagMap.entries()]}\n                    />\n                  </>\n                ) : (\n                  <div>\n                    <Typography>\n                      Note: color by modifications is already enabled. Loading\n                      current modifications...\n                    </Typography>\n                    <CircularProgress size={15} />\n                  </div>\n                )}\n              </div>\n            ) : null}\n            {colorBy?.type === 'methylation' ? (\n              <ModificationTable\n                modifications={[\n                  ['methylated', 'red'],\n                  ['unmethylated', 'blue'],\n                ]}\n              />\n            ) : null}\n          </div>\n          <div style={{ display: 'flex' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ margin: 5 }}\n              onClick={() => {\n                model.setColorScheme({\n                  type: 'modifications',\n                })\n                handleClose()\n              }}\n            >\n              Modifications\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ margin: 5 }}\n              onClick={() => {\n                model.setColorScheme({\n                  type: 'methylation',\n                })\n                handleClose()\n              }}\n            >\n              Methylation\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              style={{ margin: 5 }}\n              onClick={() => handleClose()}\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(ColorByTagDlg)\n"],"sourceRoot":""}