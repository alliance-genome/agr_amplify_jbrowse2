{"version":3,"file":"static/js/5781.c169b185.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/hooks.ts","../../../node_modules/@mui/icons-material/Settings.js"],"sourcesContent":["import React, { lazy, useRef, useState, Suspense } from 'react'\nimport {\n  Button,\n  FormControl,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport copy from 'copy-to-clipboard'\n\n// locals\nimport { useFeatureSequence } from './hooks'\nimport { ErrorMessage, LoadingEllipses } from '../../ui'\nimport { SimpleFeatureSerialized, getSession } from '../../util'\nimport { BaseFeatureWidgetModel } from '../stateModelFactory'\n\n// icons\nimport Settings from '@mui/icons-material/Settings'\n\n// lazies\nconst SequencePanel = lazy(() => import('./SequencePanel'))\nconst SettingsDialog = lazy(() => import('./dialogs/SettingsDialog'))\n\nconst useStyles = makeStyles()({\n  formControl: {\n    margin: 0,\n    marginLeft: 4,\n  },\n})\n\n// set the key on this component to feature.id to clear state after new feature\n// is selected\nconst SequenceFeatureDetails = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { sequenceFeatureDetails } = model\n  const { intronBp, upDownBp } = sequenceFeatureDetails\n  const { classes } = useStyles()\n  const seqPanelRef = useRef<HTMLDivElement>(null)\n\n  const [force, setForce] = useState(false)\n  const hasCDS = feature.subfeatures?.some(sub => sub.type === 'CDS')\n  const hasExon = feature.subfeatures?.some(sub => sub.type === 'exon')\n  const hasExonOrCDS = hasExon || hasCDS\n  const { sequence, error } = useFeatureSequence(\n    model,\n    feature,\n    upDownBp,\n    force,\n  )\n\n  const [mode, setMode] = useState(\n    hasCDS ? 'cds' : hasExon ? 'cdna' : 'genomic',\n  )\n\n  return (\n    <>\n      <div>\n        <FormControl className={classes.formControl}>\n          <Select\n            size=\"small\"\n            value={mode}\n            onChange={event => setMode(event.target.value)}\n          >\n            {Object.entries({\n              ...(hasCDS\n                ? {\n                    cds: 'CDS',\n                  }\n                : {}),\n              ...(hasCDS\n                ? {\n                    protein: 'Protein',\n                  }\n                : {}),\n              ...(hasExonOrCDS\n                ? {\n                    cdna: 'cDNA',\n                  }\n                : {}),\n              ...(hasExonOrCDS\n                ? {\n                    gene: `Genomic w/ full introns`,\n                  }\n                : {}),\n              ...(hasExonOrCDS\n                ? {\n                    gene_updownstream: `Genomic w/ full introns +/- ${upDownBp}bp up+down stream`,\n                  }\n                : {}),\n              ...(hasExonOrCDS\n                ? {\n                    gene_collapsed_intron: `Genomic w/ ${intronBp}bp intron`,\n                  }\n                : {}),\n              ...(hasExonOrCDS\n                ? {\n                    gene_updownstream_collapsed_intron: `Genomic w/ ${intronBp}bp intron +/- ${upDownBp}bp up+down stream `,\n                  }\n                : {}),\n\n              ...(!hasExonOrCDS\n                ? {\n                    genomic: 'Genomic',\n                  }\n                : {}),\n              ...(!hasExonOrCDS\n                ? {\n                    genomic_sequence_updownstream: `Genomic +/- ${upDownBp}bp up+down stream`,\n                  }\n                : {}),\n            }).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {val}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Button\n          className={classes.formControl}\n          variant=\"contained\"\n          onClick={() => {\n            const ref = seqPanelRef.current\n            if (ref) {\n              copy(ref.textContent || '', { format: 'text/plain' })\n            }\n          }}\n        >\n          Copy plaintext\n        </Button>\n        <Button\n          className={classes.formControl}\n          variant=\"contained\"\n          onClick={() => {\n            const ref = seqPanelRef.current\n            if (ref) {\n              copy(ref.innerHTML, { format: 'text/html' })\n            }\n          }}\n        >\n          Copy HTML\n        </Button>\n\n        <IconButton\n          className={classes.formControl}\n          onClick={() =>\n            getSession(model).queueDialog(handleClose => [\n              SettingsDialog,\n              { model: sequenceFeatureDetails, handleClose },\n            ])\n          }\n        >\n          <Settings />\n        </IconButton>\n      </div>\n      <div>\n        {feature.type === 'gene' ? (\n          <Typography>\n            Note: inspect subfeature sequences for protein/CDS computations\n          </Typography>\n        ) : null}\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : !sequence ? (\n          <LoadingEllipses />\n        ) : sequence ? (\n          'error' in sequence ? (\n            <>\n              <Typography color=\"error\">{sequence.error}</Typography>\n              <Button\n                variant=\"contained\"\n                color=\"inherit\"\n                onClick={() => setForce(true)}\n              >\n                Force load\n              </Button>\n            </>\n          ) : (\n            <Suspense fallback={<LoadingEllipses />}>\n              <SequencePanel\n                ref={seqPanelRef}\n                feature={feature}\n                mode={mode}\n                sequence={sequence}\n                model={sequenceFeatureDetails}\n              />\n            </Suspense>\n          )\n        ) : (\n          <Typography>No sequence found</Typography>\n        )}\n      </div>\n    </>\n  )\n})\n\nexport default SequenceFeatureDetails\n","import { useEffect, useState } from 'react'\n\nimport { SeqState, ErrorState } from '../util'\nimport { Feature, SimpleFeatureSerialized, getSession } from '../../util'\nimport { getConf } from '../../configuration'\n\nconst BPLIMIT = 500_000\n\ninterface CoordFeat extends SimpleFeatureSerialized {\n  refName: string\n  start: number\n  end: number\n}\n\nexport function useFeatureSequence(\n  model: { view?: { assemblyNames?: string[] } } | undefined,\n  feature: SimpleFeatureSerialized,\n  upDownBp: number,\n  forceLoad: boolean,\n) {\n  const [sequence, setSequence] = useState<SeqState | ErrorState>()\n  const [error, setError] = useState<unknown>()\n  useEffect(() => {\n    if (!model) {\n      return\n    }\n    const { assemblyManager, rpcManager } = getSession(model)\n    const [assemblyName] = model.view?.assemblyNames || []\n    async function fetchSeq(start: number, end: number, refName: string) {\n      const assembly = await assemblyManager.waitForAssembly(assemblyName)\n      if (!assembly) {\n        throw new Error('assembly not found')\n      }\n      const sessionId = 'getSequence'\n      const feats = await rpcManager.call(sessionId, 'CoreGetFeatures', {\n        adapterConfig: getConf(assembly, ['sequence', 'adapter']),\n        sessionId,\n        regions: [\n          {\n            start,\n            end,\n            refName: assembly.getCanonicalRefName(refName),\n            assemblyName,\n          },\n        ],\n      })\n\n      const [feat] = feats as Feature[]\n      return (feat?.get('seq') as string | undefined) || ''\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        const { start, end, refName } = feature as CoordFeat\n\n        if (!forceLoad && end - start > BPLIMIT) {\n          setSequence({\n            error: `Genomic sequence larger than ${BPLIMIT}bp, use \"force load\" button to display`,\n          })\n        } else {\n          const b = start - upDownBp\n          const e = end + upDownBp\n          const seq = await fetchSeq(start, end, refName)\n          const up = await fetchSeq(Math.max(0, b), start, refName)\n          const down = await fetchSeq(end, e, refName)\n          setSequence({ seq, upstream: up, downstream: down })\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [feature, model, upDownBp, forceLoad])\n  return { sequence, error }\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6\"\n}), 'Settings');"],"names":["SequencePanel","lazy","SettingsDialog","useStyles","makeStyles","formControl","margin","marginLeft","observer","model","feature","sequenceFeatureDetails","intronBp","upDownBp","classes","seqPanelRef","useRef","force","setForce","useState","hasCDS","subfeatures","some","sub","type","hasExon","hasExonOrCDS","sequence","error","forceLoad","setSequence","setError","useEffect","assemblyManager","rpcManager","getSession","assemblyName","view","assemblyNames","async","fetchSeq","start","end","refName","assembly","waitForAssembly","Error","sessionId","feats","call","adapterConfig","getConf","regions","getCanonicalRefName","feat","get","undefined","b","e","seq","up","Math","max","down","upstream","downstream","console","useFeatureSequence","mode","setMode","React","FormControl","className","Select","size","value","onChange","event","target","Object","entries","cds","protein","cdna","gene","gene_updownstream","gene_collapsed_intron","gene_updownstream_collapsed_intron","genomic","genomic_sequence_updownstream","map","key","val","MenuItem","Button","variant","onClick","ref","current","copy","textContent","format","innerHTML","IconButton","queueDialog","handleClose","Settings","Typography","ErrorMessage","color","Suspense","fallback","LoadingEllipses","_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}