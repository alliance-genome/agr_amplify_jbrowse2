{"version":3,"file":"static/js/6809.629140ad.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedAdapter/BedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature } from '@jbrowse/core/util'\nimport { featureData } from '../util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class BedAdapter extends BaseFeatureDataAdapter {\n  protected bedFeatures?: Promise<{\n    header: string\n    features: Record<string, string[]>\n    parser: BED\n    columnNames: string[]\n    scoreColumn: string\n    colRef: number\n    colStart: number\n    colEnd: number\n  }>\n\n  protected intervalTrees: {\n    [key: string]: Promise<IntervalTree | undefined> | undefined\n  } = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const features = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const tab = line.indexOf('\\t')\n      const refName = line.slice(0, tab)\n      if (!features[refName]) {\n        features[refName] = []\n      }\n      features[refName].push(line)\n    }\n\n    const autoSql = this.getConf('autoSql') as string\n    const parser = new BED({ autoSql })\n    const columnNames = this.getConf('columnNames')\n    const scoreColumn = this.getConf('scoreColumn')\n    const colRef = this.getConf('colRef')\n    const colStart = this.getConf('colStart')\n    const colEnd = this.getConf('colEnd')\n\n    return {\n      header,\n      features,\n      parser,\n      columnNames,\n      scoreColumn,\n      colRef,\n      colStart,\n      colEnd,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedFeatures) {\n      this.bedFeatures = this.loadDataP(opts).catch(e => {\n        this.bedFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { features } = await this.loadData(opts)\n    return Object.keys(features)\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureIntervalTreeHelper(refName: string) {\n    const { colRef, colStart, colEnd, features, parser, scoreColumn } =\n      await this.loadData()\n    const lines = features[refName]\n    if (!lines) {\n      return undefined\n    }\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret = lines.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(\n        f,\n        colRef,\n        colStart,\n        colEnd,\n        scoreColumn,\n        parser,\n        uniqueId,\n        names,\n      )\n    })\n\n    for (const obj of ret) {\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n    return intervalTree\n  }\n\n  private async loadFeatureIntervalTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(\n        refName,\n      ).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureIntervalTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["isGzip","buf","BedAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","bedFeatures","intervalTrees","_createClass","key","value","_loadDataP","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","pm","bedLoc","buffer","data","lines","headerLines","i","header","features","line","tab","refName","autoSql","parser","columnNames","scoreColumn","colRef","colStart","colEnd","_args","wrap","_context","prev","next","undefined","this","pluginManager","getConf","openLocation","readFile","sent","unzip","t0","Error","TextDecoder","fatal","decode","split","filter","f","startsWith","push","join","indexOf","slice","BED","abrupt","stop","_loadData","_callee2","_this2","_args2","_context2","loadDataP","catch","e","_getRefNames","_callee3","_yield$this$loadData","_args3","_context3","loadData","Object","keys","_getHeader","_callee4","_yield$this$loadData2","_args4","_context4","_getNames","_callee5","_yield$this$loadData3","defs","defline","_context5","at","includes","map","field","trim","_loadFeatureIntervalTreeHelper","_callee6","_yield$this$loadData4","names","intervalTree","ret","_iterator","_step","obj","_this3","_context6","getNames","IntervalTree","uniqueId","id","featureData","_createForOfIteratorHelper","s","n","done","insert","get","err","_x","_loadFeatureIntervalTree","_callee7","_this4","_context7","loadFeatureIntervalTreeHelper","_x2","query","_this5","ObservableCreate","_ref","_callee8","observer","start","end","_context8","loadFeatureIntervalTree","search","forEach","complete","_x3","signal","BaseFeatureDataAdapter","capabilities","ucscProcessedTranscript","feature","children","thickStart","thickEnd","blocks","child","sort","a","b","newChildren","block","prime","type","leftPrime","rightPrime","newData","fromEntries","tags","tag","subfeatures","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","l","colSame","fields","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score","_objectSpread"],"sourceRoot":""}