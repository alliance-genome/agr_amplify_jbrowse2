{"version":3,"file":"static/js/2311.5d66b8ed.chunk.js","mappings":"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","sources":["../../../plugins/menus/src/ImportSessionWidget/components/ImportSessionWidget.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button, Paper, Typography, alpha } from '@mui/material'\nimport { getSession } from '@jbrowse/core/util'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { useDropzone } from 'react-dropzone'\n\n// icons\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload'\nimport ErrorIcon from '@mui/icons-material/Error'\n\nconst MAX_FILE_SIZE = 512 * 1024 ** 2 // 512 MiB\n\nfunction styledBy(property: string, mapping: { [key: string]: string }) {\n  return (props: { [key: string]: string }) => mapping[props[property]]\n}\n\n// @ts-ignore\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  dropZone: {\n    textAlign: 'center',\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: styledBy('isDragActive', {\n      true: theme.palette.secondary.light,\n      false: theme.palette.divider,\n    }),\n    borderStyle: 'dashed',\n    backgroundColor: styledBy('isDragActive', {\n      true: alpha(\n        theme.palette.text.primary,\n        theme.palette.action.hoverOpacity,\n      ),\n      false: theme.palette.background.default,\n    }),\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n    '&:focus': {\n      borderColor: theme.palette.secondary.light,\n    },\n  },\n  uploadIcon: {\n    color: theme.palette.text.secondary,\n  },\n  rejectedFiles: {\n    marginTop: theme.spacing(4),\n  },\n  listItem: {\n    padding: theme.spacing(0, 4),\n  },\n  expandIcon: {\n    color: theme.palette.tertiary.contrastText,\n  },\n  error: {\n    margin: theme.spacing(2),\n  },\n  errorHeader: {\n    background: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n  },\n  errorMessage: {\n    padding: theme.spacing(2),\n  },\n}))\n\nexport function readBlobAsText(blob: Blob): Promise<string> {\n  const a = new FileReader()\n  return new Promise((resolve, reject) => {\n    a.onload = e => {\n      if (e.target) {\n        resolve(e.target.result as string)\n      } else {\n        reject(new Error('unknown result reading blob from canvas'))\n      }\n    }\n    a.readAsText(blob)\n  })\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction ImportSession({ model }: { model: any }) {\n  const [error, setError] = useState<unknown>()\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    // @ts-ignore\n    accept: 'application/json',\n    maxSize: MAX_FILE_SIZE,\n    multiple: false,\n    onDrop: async (acceptedFiles, rejectedFiles) => {\n      try {\n        if (rejectedFiles.length) {\n          throw new Error(\n            `${rejectedFiles[0].errors.map(e => `${e}`).join(', ')}`,\n          )\n        } else {\n          const sessionText = await readBlobAsText(acceptedFiles[0])\n          getSession(model).setSession(JSON.parse(sessionText).session)\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    },\n  })\n\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { classes } = useStyles({ isDragActive }) as any\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <div {...getRootProps({ className: classes.dropZone })}>\n          <input {...getInputProps()} />\n          <CloudUploadIcon className={classes.uploadIcon} fontSize=\"large\" />\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body1\">\n            Drag and drop files here\n          </Typography>\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body2\">\n            or\n          </Typography>\n          <Button color=\"primary\" variant=\"contained\">\n            Browse Files\n          </Button>\n        </div>\n      </Paper>\n      {error ? (\n        <Paper className={classes.error}>\n          <div className={classes.errorHeader}>\n            <ErrorIcon color=\"inherit\" fontSize=\"large\" />\n            <div>\n              <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\n                Import error\n              </Typography>\n            </div>\n          </div>\n          <Typography className={classes.errorMessage}>{`${error}`}</Typography>\n        </Paper>\n      ) : null}\n    </div>\n  )\n}\n\nexport default observer(ImportSession)\n"],"names":["MAX_FILE_SIZE","Math","pow","styledBy","property","mapping","props","useStyles","makeStyles","theme","root","margin","spacing","paper","display","flexDirection","dropZone","textAlign","padding","borderWidth","borderRadius","borderColor","true","palette","secondary","light","false","divider","borderStyle","backgroundColor","alpha","text","primary","action","hoverOpacity","background","default","outline","transition","uploadIcon","color","rejectedFiles","marginTop","listItem","expandIcon","tertiary","contrastText","error","errorHeader","errorMessage","readBlobAsText","blob","a","FileReader","Promise","resolve","reject","onload","e","target","result","Error","readAsText","observer","_ref","model","_useState","useState","_useState2","_slicedToArray","setError","_useDropzone","useDropzone","accept","maxSize","multiple","onDrop","_onDrop","_asyncToGenerator","_regeneratorRuntime","mark","_callee","acceptedFiles","sessionText","wrap","_context","prev","next","length","concat","errors","map","join","sent","getSession","setSession","JSON","parse","session","t0","console","stop","_x","_x2","apply","arguments","getRootProps","getInputProps","isDragActive","classes","_jsxs","className","children","_jsx","Paper","_objectSpread","CloudUploadIcon","fontSize","Typography","align","variant","Button","ErrorIcon"],"sourceRoot":""}