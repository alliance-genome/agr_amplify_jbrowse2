{"version":3,"file":"static/js/9481.353dd885.chunk.js","mappings":"2OA+DA,WAAeA,EAAAA,EAAAA,WApDf,SAAsBC,GAIpB,IAAQC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACfC,GAAsBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GACZI,EAAWF,EAAIG,MAAM,yBAC3B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASZ,EAAaa,MAAM,cAAaC,UACpDC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAAAF,SAAA,EACZL,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAAH,SAAC,4BACZL,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,MAAM,gBAAeJ,SAAC,yDAGlCL,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,MAAOf,EACPgB,SAAU,SAAAC,GAAK,OAAIhB,EAAOgB,EAAMC,OAAOH,MAAM,EAC7CI,YAAY,iBACZC,WAAY,CACVC,UAAW,EACX,cAAe,uBAEjBC,MAAsB,IAAftB,EAAIuB,SAAiBrB,EAC5BsB,WAA2B,IAAfxB,EAAIuB,QAAiBrB,EAA+B,GAApB,kBAC5CuB,aAAa,MACb,cAAY,mBAEdf,EAAAA,EAAAA,MAACgB,EAAAA,EAAa,CAAAjB,SAAA,EACZL,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CACLC,QAAQ,YACRf,MAAM,UACNgB,KAAK,SACLC,WAAS,EACTC,QAAS,WACPrC,EAAMsC,YAAY,MAAOhC,GACzBL,GACF,EAAEc,SACH,YAGDL,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CACLC,QAAQ,YACRf,MAAM,YACNkB,QAAS,kBAAMpC,GAAa,EAACc,SAC9B,kBAOX,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/SortByTag.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\n\nfunction SortByTagDlg(props: {\n  model: { setSortedBy: Function }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n  return (\n    <Dialog open onClose={handleClose} title=\"Sort by tag\">\n      <DialogContent>\n        <Typography>Set the tag to sort by</Typography>\n        <Typography color=\"textSecondary\">\n          Examples: HP for haplotype, RG for read group, etc.\n        </Typography>\n        <TextField\n          value={tag}\n          onChange={event => setTag(event.target.value)}\n          placeholder=\"Enter tag name\"\n          inputProps={{\n            maxLength: 2,\n            'data-testid': 'sort-tag-name-input',\n          }}\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          data-testid=\"sort-tag-name\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            autoFocus\n            onClick={() => {\n              model.setSortedBy('tag', tag)\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\nexport default observer(SortByTagDlg)\n"],"names":["observer","props","model","handleClose","_useState","useState","_useState2","_slicedToArray","tag","setTag","validTag","match","_jsx","Dialog","open","onClose","title","children","_jsxs","DialogContent","Typography","color","TextField","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","DialogActions","Button","variant","type","autoFocus","onClick","setSortedBy"],"sourceRoot":""}