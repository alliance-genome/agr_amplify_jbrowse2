{"version":3,"file":"static/js/1658.0bcefeba.chunk.js","mappings":"uSAOwC,uJAOZ,OAPY,oCAG9BA,WAAa,IAAI,EAEjBC,YAAc,IAAI,EAElBC,OAAS,UAAS,EAoFe,OApFf,0EAI1B,2GAC0C,QAD1C,EACwBC,KAAKC,qBAAa,aAAlB,OAAAD,KAAqBA,KAAKE,QAAQ,oBAAmB,OAA9D,GAAPC,EAAO,OACA,CAAD,qBACJ,IAAIC,MAAM,4BAA2B,gCAEtCD,EAAQE,aAAW,gDAC3B,kDAVyB,IAUzB,kEAED,yGACwBL,KAAKM,YAAW,OAAzB,OAAPH,EAAO,yBACNA,EAAQI,eAAa,gDAC7B,kDALA,IAKA,yBAED,SAAmBC,EAAeC,GAAoB,IAAD,OACnD,OAAOC,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,4HACf,EAAKL,YAAW,OAMhC,GANRM,EAAe,OACfC,EAAyB,IAApB,EAAKhB,WAAmB,EAAI,EAAKA,WAAa,EACnDiB,EAAwB,IAApB,EAAKjB,WAEFkB,EAA8BP,EAArCQ,MAAwBC,EAAaT,EAAlBU,IACzBH,EAAaI,KAAKC,IAAI,EAAGL,EAAaF,MACtCI,GAAYJ,GAEG,GAAKE,EAAaE,GAAQ,iBACpB,OAAnBN,EAASU,WAAU,2BAWpB,OAPKC,EAAMV,EAAgBW,aAAY,kBAEjCf,GAAK,IACRQ,MAAOD,EACPG,IAAKD,IAEPR,GACD,WACmBe,EAAAA,EAAAA,GAAeF,EAAIG,MAAKC,EAAAA,EAAAA,OAAW,QAGvD,IAHMC,EAAK,OACLC,GAAmB,QAAR,EAAAD,EAAM,UAAE,aAAR,EAAUE,IAAI,SAAU,GAEhCC,EAAIjB,EAAIiB,EAAIF,EAASG,OAASlB,EAAIiB,GAAK,EAAKhC,YAAa,CAKhE,IAJMkC,EAAIlB,EAAIc,EAASE,GAAKF,EAASK,MAAMH,EAAIjB,EAAIiB,EAAIjB,GACnDqB,EAAK,EACLC,EAAK,EACLC,EAAM,EACDC,EAAI,EAAGA,EAAIL,EAAED,OAAQM,IACf,MAATL,EAAEK,IAAuB,MAATL,EAAEK,GACpBH,IACkB,MAATF,EAAEK,IAAuB,MAATL,EAAEK,IAC3BF,IAEW,MAATH,EAAEK,IACJD,IAGEE,EAAMvB,EACRwB,OAAK,EACW,YAAhB,EAAKxC,OACPwC,GAASJ,EAAKD,IAAOE,GAAO,GACH,SAAhB,EAAKrC,SACdwC,GAASJ,EAAKD,IAAOC,EAAKD,GAAM,IAGlCvB,EAAS6B,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAS,GAAD,OAAK,EAAKC,GAAE,YAAIL,EAAMR,GAC9Bd,MAAOsB,EAAMR,EACbZ,IAAKoB,EAAMR,EAAI,EAAKhC,YACpByC,MAAAA,IAGN,CACA5B,EAASU,WAAU,4CACpB,mDA1DsB,GA2DzB,GAEA,2BAKA,WAAwC,KAAC,EA3FH,CAEXuB,EAAAA,wBAAsB,EAOnCC,aAAe,CAAC,gB","sources":["../../../plugins/gccontent/src/GCContentAdapter/GCContentAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { firstValueFrom } from 'rxjs'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature, Region } from '@jbrowse/core/util'\nimport { toArray } from 'rxjs/operators'\n\nexport default class extends BaseFeatureDataAdapter {\n  private windowSize = 1000\n\n  private windowDelta = 1000\n\n  private gcMode = 'content'\n\n  public static capabilities = ['hasLocalStats']\n\n  public async configure() {\n    const adapter = await this.getSubAdapter?.(this.getConf('sequenceAdapter'))\n    if (!adapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return adapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames() {\n    const adapter = await this.configure()\n    return adapter.getRefNames()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions) {\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const hw = this.windowSize === 1 ? 1 : this.windowSize / 2 // Half the window size\n      const f = this.windowSize === 1\n\n      let { start: queryStart, end: queryEnd } = query\n      queryStart = Math.max(0, queryStart - hw)\n      queryEnd += hw\n\n      if (queryEnd < 0 || queryStart > queryEnd) {\n        observer.complete()\n        return\n      }\n\n      const ret = sequenceAdapter.getFeatures(\n        {\n          ...query,\n          start: queryStart,\n          end: queryEnd,\n        },\n        opts,\n      )\n      const feats = await firstValueFrom(ret.pipe(toArray()))\n      const residues = feats[0]?.get('seq') || ''\n\n      for (let i = hw; i < residues.length - hw; i += this.windowDelta) {\n        const r = f ? residues[i] : residues.slice(i - hw, i + hw)\n        let nc = 0\n        let ng = 0\n        let len = 0\n        for (let j = 0; j < r.length; j++) {\n          if (r[j] === 'c' || r[j] === 'C') {\n            nc++\n          } else if (r[j] === 'g' || r[j] === 'G') {\n            ng++\n          }\n          if (r[j] !== 'N') {\n            len++\n          }\n        }\n        const pos = queryStart\n        let score\n        if (this.gcMode === 'content') {\n          score = (ng + nc) / (len || 1)\n        } else if (this.gcMode === 'skew') {\n          score = (ng - nc) / (ng + nc || 1)\n        }\n\n        observer.next(\n          new SimpleFeature({\n            uniqueId: `${this.id}_${pos + i}`,\n            start: pos + i,\n            end: pos + i + this.windowDelta,\n            score,\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */) {}\n}\n"],"names":["windowSize","windowDelta","gcMode","this","getSubAdapter","getConf","adapter","Error","dataAdapter","configure","getRefNames","query","opts","ObservableCreate","observer","sequenceAdapter","hw","f","queryStart","start","queryEnd","end","Math","max","complete","ret","getFeatures","firstValueFrom","pipe","toArray","feats","residues","get","i","length","r","slice","nc","ng","len","j","pos","score","next","SimpleFeature","uniqueId","id","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}