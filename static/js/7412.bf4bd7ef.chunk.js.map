{"version":3,"file":"static/js/7412.bf4bd7ef.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.js","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.js"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { observer } from 'mobx-react'\n\nconst ConfigureConnection = observer(props => {\n  const { connectionType, model, setModelReady } = props\n  const ConfigEditorComponent =\n    connectionType.configEditorComponent || ConfigurationEditor\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <ConfigEditorComponent\n        model={{ target: model }}\n        setModelReady={setModelReady}\n      />\n    </Suspense>\n  )\n})\n\nexport default ConfigureConnection\n","import IconButton from '@material-ui/core/IconButton'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport React, { useEffect } from 'react'\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew'\n\nimport ConnectionType from '@jbrowse/core/pluggableElementTypes/ConnectionType'\n\nfunction ConnectionTypeSelect(props: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType: ConnectionType\n  setConnectionType: Function\n}) {\n  const { connectionTypeChoices, connectionType, setConnectionType } = props\n\n  useEffect(() => {\n    if (!connectionType.name) {\n      setConnectionType(connectionTypeChoices[0])\n    }\n  })\n\n  function handleChange(\n    event: React.ChangeEvent<{ name?: string; value: unknown }>,\n  ): void {\n    setConnectionType(\n      connectionTypeChoices.find(\n        (connectionTypeChoice: ConnectionType) =>\n          connectionTypeChoice.name === event.target.value,\n      ),\n    )\n  }\n  if (!connectionType.name) {\n    return null\n  }\n  return (\n    <form autoComplete=\"off\">\n      <TextField\n        value={connectionType.name}\n        label=\"connectionType\"\n        helperText={\n          connectionType.description ? (\n            <>\n              {connectionType.description}\n              {connectionType.url ? (\n                <IconButton\n                  href={connectionType.url}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  color=\"secondary\"\n                >\n                  <OpenInNewIcon />\n                </IconButton>\n              ) : null}\n            </>\n          ) : null\n        }\n        select\n        fullWidth\n        onChange={handleChange}\n        variant=\"outlined\"\n      >\n        {connectionTypeChoices.map((connectionTypeChoice: ConnectionType) => (\n          <MenuItem\n            key={connectionTypeChoice.name}\n            value={connectionTypeChoice.name}\n          >\n            {connectionTypeChoice.displayName || connectionTypeChoice.name}\n          </MenuItem>\n        ))}\n      </TextField>\n    </form>\n  )\n}\n\nexport default ConnectionTypeSelect\n","import { getSession } from '@jbrowse/core/util'\nimport Button from '@material-ui/core/Button'\nimport Step from '@material-ui/core/Step'\nimport StepContent from '@material-ui/core/StepContent'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Stepper from '@material-ui/core/Stepper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport React, { useState } from 'react'\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nfunction AddConnectionWidget({ model }) {\n  const [connectionType, setConnectionType] = useState({})\n  const [configModel, setConfigModel] = useState({})\n  const [configModelReady, setConfigModelReady] = useState(true)\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n\n  const session = getSession(model)\n\n  const { pluginManager } = getEnv(session)\n\n  function handleSetConnectionType(newConnectionType) {\n    setConnectionType(newConnectionType)\n    setConfigModel(\n      newConnectionType.configSchema.create(\n        {\n          connectionId: `${newConnectionType.name}-${Date.now()}`,\n        },\n        getEnv(model),\n      ),\n    )\n  }\n\n  function stepContent() {\n    switch (activeStep) {\n      case 0:\n        return (\n          <ConnectionTypeSelect\n            connectionTypeChoices={pluginManager.getElementTypesInGroup(\n              'connection',\n            )}\n            connectionType={connectionType}\n            setConnectionType={handleSetConnectionType}\n          />\n        )\n      case 1:\n        return (\n          <ConfigureConnection\n            connectionType={connectionType}\n            model={configModel}\n            setModelReady={setConfigModelReady}\n          />\n        )\n\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep === steps.length - 1) {\n      handleFinish()\n    } else {\n      setActiveStep(activeStep + 1)\n    }\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function handleFinish() {\n    const connectionConf = session.addConnectionConf(configModel)\n    session.makeConnection(connectionConf)\n    session.hideWidget(model)\n  }\n\n  function checkNextEnabled() {\n    if (\n      (activeStep === 0 && connectionType.name) ||\n      (activeStep === 1 && configModel && configModelReady)\n    ) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {stepContent()}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={!checkNextEnabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nAddConnectionWidget.propTypes = {\n  model: MobxPropTypes.observableObject.isRequired,\n}\n\nexport default observer(AddConnectionWidget)\n"],"names":["observer","props","connectionType","model","setModelReady","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","Suspense","fallback","target","connectionTypeChoices","setConnectionType","useEffect","name","autoComplete","TextField","value","label","helperText","description","url","IconButton","href","rel","color","OpenInNew","select","fullWidth","onChange","event","find","connectionTypeChoice","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","configModel","setConfigModel","configModelReady","setConfigModelReady","activeStep","setActiveStep","classes","session","getSession","pluginManager","getEnv","handleSetConnectionType","newConnectionType","configSchema","create","connectionId","Date","now","stepContent","getElementTypesInGroup","Typography","handleNext","length","connectionConf","addConnectionConf","makeConnection","hideWidget","handleFinish","handleBack","className","Stepper","orientation","Step","StepLabel","StepContent","Button","disabled","onClick"],"sourceRoot":""}