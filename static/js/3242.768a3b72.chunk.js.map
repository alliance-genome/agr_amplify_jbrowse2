{"version":3,"file":"static/js/3242.768a3b72.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VariantFeatureWidget/BreakendOptionDialog.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  FormControlLabel,\n  Checkbox,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getSession } from '@jbrowse/core/util'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  block: {\n    display: 'block',\n  },\n}))\n\nfunction BreakendOptionDialog({\n  model,\n  handleClose,\n  feature,\n  viewType,\n}: {\n  model: any\n  handleClose: () => void\n  feature: Feature\n  viewType: any\n}) {\n  const classes = useStyles()\n  const [copyTracks, setCopyTracks] = useState(true)\n  const [mirrorTracks, setMirrorTracks] = useState(true)\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Breakpoint split view options\n        {handleClose ? (\n          <IconButton\n            className={classes.closeButton}\n            onClick={() => handleClose()}\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </DialogTitle>\n      <Divider />\n\n      <DialogContent>\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={copyTracks}\n              onChange={() => setCopyTracks(val => !val)}\n            />\n          }\n          label=\"Copy tracks into the new view\"\n        />\n\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={mirrorTracks}\n              onChange={() => setMirrorTracks(val => !val)}\n            />\n          }\n          label=\"Mirror tracks vertically in vertically stacked view\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const { view } = model\n            const session = getSession(model)\n            try {\n              const viewSnapshot = viewType.snapshotFromBreakendFeature(\n                feature,\n                view,\n              )\n              viewSnapshot.views[0].offsetPx -= view.width / 2 + 100\n              viewSnapshot.views[1].offsetPx -= view.width / 2 + 100\n              viewSnapshot.featureData = feature\n              const viewTracks: any = getSnapshot(view.tracks)\n              viewSnapshot.views[0].tracks = viewTracks\n              viewSnapshot.views[1].tracks = mirrorTracks\n                ? viewTracks.slice().reverse()\n                : viewTracks\n\n              session.addView('BreakpointSplitView', viewSnapshot)\n            } catch (e) {\n              console.error(e)\n              session.notify(`${e}`)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n        <Button\n          onClick={() => handleClose()}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default observer(BreakendOptionDialog)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport {\n  Divider,\n  Link,\n  Paper,\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport SimpleFeature, {\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport { getEnv } from 'mobx-state-tree'\nimport {\n  FeatureDetails,\n  BaseCard,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport BreakendOptionDialog from './BreakendOptionDialog'\nimport { parseBreakend } from '@gmod/vcf'\n\nfunction VariantSamples(props: any) {\n  const [filter, setFilter] = useState<any>({})\n  const [showFilters, setShowFilters] = useState(false)\n  const { feature } = props\n\n  const { samples = {} } = feature\n  const preFilteredRows: any = Object.entries(samples)\n  if (!preFilteredRows.length) {\n    return null\n  }\n  const infoFields = ['sample', ...Object.keys(preFilteredRows[0][1])].map(\n    field => ({\n      field,\n    }),\n  )\n  let error\n  let rows = []\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map((row: any) => ({\n        ...Object.fromEntries(\n          Object.entries(row[1]).map(entry => [entry[0], String(entry[1])]),\n        ),\n        sample: row[0],\n        id: row[0],\n      }))\n      .filter((row: any) => {\n        return filters.length\n          ? filters.every(key => {\n              const val = row[key]\n              const currFilter = filter[key]\n              return currFilter ? val.match(new RegExp(currFilter, 'i')) : true\n            })\n          : true\n      })\n  } catch (e) {\n    error = e\n  }\n  // disableSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={showFilters}\n            onChange={() => setShowFilters(f => !f)}\n          />\n        }\n        label=\"Show sample filters\"\n      />\n      {showFilters ? (\n        <>\n          <Typography>\n            These filters can use a plain text search or regex style query, e.g.\n            in the genotype field, entering 1 will query for all genotypes that\n            include the first alternate allele e.g. 0|1 or 1|1, entering\n            [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33\n          </Typography>\n          {infoFields.map(({ field }) => {\n            return (\n              <TextField\n                key={`filter-${field}`}\n                placeholder={`Filter ${field}`}\n                value={filter[field] || ''}\n                onChange={event =>\n                  setFilter({ ...filter, [field]: event.target.value })\n                }\n              />\n            )\n          })}\n        </>\n      ) : null}\n      <div style={{ height: 600, width: '100%', overflow: 'auto' }}>\n        <DataGrid\n          rows={rows}\n          columns={infoFields}\n          rowHeight={20}\n          headerHeight={25}\n          disableSelectionOnClick\n          disableColumnMenu\n        />\n      </div>\n    </BaseCard>\n  )\n}\n\nfunction BreakendPanel(props: {\n  locStrings: string[]\n  model: any\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  const [breakpointDialog, setBreakpointDialog] = useState(false)\n  let viewType\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  const simpleFeature = new SimpleFeature(feature)\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <Typography>Link to linear view of breakend endpoints</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={`${JSON.stringify(locString)}`}>\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              {`LGV - ${locString}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {viewType ? (\n        <div>\n          <Typography>\n            Launch split views with breakend source and target\n          </Typography>\n          <ul>\n            {locStrings.map(locString => (\n              <li key={`${JSON.stringify(locString)}`}>\n                <Link\n                  href=\"#\"\n                  onClick={event => {\n                    event.preventDefault()\n                    setBreakpointDialog(true)\n                  }}\n                >\n                  {`${feature.refName}:${feature.start} // ${locString} (split view)`}\n                </Link>\n              </li>\n            ))}\n          </ul>\n          {breakpointDialog ? (\n            <BreakendOptionDialog\n              model={model}\n              feature={simpleFeature}\n              viewType={viewType}\n              handleClose={() => {\n                setBreakpointDialog(false)\n              }}\n            />\n          ) : null}\n        </div>\n      ) : null}\n    </BaseCard>\n  )\n}\n\nfunction VariantFeatureDetails(props: any) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ...rest } = feat\n  const basicDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER:\n      'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n  }\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...basicDescriptions, ...descriptions }}\n        {...props}\n      />\n      <Divider />\n      {feat.type === 'breakend' ? (\n        <BreakendPanel\n          feature={feat}\n          locStrings={feat.ALT.map(\n            (alt: string) => parseBreakend(alt)?.MatePosition || '',\n          )}\n          model={model}\n        />\n      ) : null}\n      {feat.type === 'translocation' ? (\n        <BreakendPanel\n          feature={feat}\n          model={model}\n          locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n        />\n      ) : null}\n      <VariantSamples feature={feat} {...props} />\n    </Paper>\n  )\n}\n\nexport default observer(VariantFeatureDetails)\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","block","display","observer","model","handleClose","feature","viewType","classes","useState","copyTracks","setCopyTracks","mirrorTracks","setMirrorTracks","Dialog","open","onClose","DialogTitle","IconButton","className","onClick","Close","Divider","DialogContent","FormControlLabel","control","Checkbox","checked","onChange","val","label","DialogActions","Button","view","session","getSession","viewSnapshot","snapshotFromBreakendFeature","views","offsetPx","width","featureData","viewTracks","getSnapshot","tracks","slice","reverse","addView","e","console","error","notify","variant","autoFocus","VariantSamples","props","filter","setFilter","showFilters","setShowFilters","samples","preFilteredRows","Object","entries","length","infoFields","keys","map","field","rows","filters","row","fromEntries","entry","String","sample","id","every","key","currFilter","match","RegExp","BaseCard","title","Typography","f","TextField","placeholder","value","event","target","style","height","overflow","DataGrid","columns","rowHeight","headerHeight","disableSelectionOnClick","disableColumnMenu","BreakendPanel","locStrings","pluginManager","getEnv","breakpointDialog","setBreakpointDialog","getViewType","simpleFeature","SimpleFeature","locString","Link","href","preventDefault","Error","navToLocString","JSON","stringify","refName","start","descriptions","feat","parse","rest","Paper","FeatureDetails","CHROM","POS","ID","REF","ALT","QUAL","FILTER","type","alt","parseBreakend","MatePosition","INFO","CHR2","END"],"sourceRoot":""}