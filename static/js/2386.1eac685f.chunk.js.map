{"version":3,"file":"static/js/2386.1eac685f.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(lines: string[]) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n  for (let i = 0; i < lines.length; i++) {\n    const l = lines[i]\n    const l_tab = l.replace(/ /g, '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return paf_chain2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","paf_chain2paf","lines","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","i","length","l_vec","replace","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","isGzip","buf","ChainAdapter","opts","loc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","Error","text","TextDecoder","fatal","decode","filter","line","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","arg","get","SimpleFeature","getWeightedMeans","ret","scoreMap","entry","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","weightedMean","zip","meanScore","min","b","tuples","reduce","valueSum","weightSum","value","weight","parsePAF","fields","rest","field","r","indexOf","slice","flipCigar","arr","op","swapIndelCigar","replaceAll","parseCigar","setupP","setupPre","catch","e","undefined","pm","pafLocation","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","start","end","qref","refName","complete","mateName","mateStart","mateEnd","flip","doesIntersect2","CIGAR","join","next","uniqueId","type","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}