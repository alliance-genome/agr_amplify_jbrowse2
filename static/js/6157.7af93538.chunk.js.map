{"version":3,"file":"static/js/6157.7af93538.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/VcfImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import VCF from '@gmod/vcf'\nimport { VcfFeature } from '@jbrowse/plugin-variants'\nimport {\n  bufferToString,\n  Row,\n  RowSet,\n  Column,\n  ParseOptions,\n} from './ImportUtils'\n\nconst vcfCoreColumns: { name: string; type: string }[] = [\n  { name: 'CHROM', type: 'Text' }, // 0\n  { name: 'POS', type: 'Number' }, // 1\n  { name: 'ID', type: 'Text' }, // 2\n  { name: 'REF', type: 'Text' }, // 3\n  { name: 'ALT', type: 'Text' }, // 4\n  { name: 'QUAL', type: 'Number' }, // 5\n  { name: 'FILTER', type: 'Text' }, // 6\n  { name: 'INFO', type: 'Text' }, // 7\n  { name: 'FORMAT', type: 'Text' }, // 8\n]\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction vcfRecordToRow(vcfParser: any, line: string, lineNumber: number): Row {\n  const vcfVariant = vcfParser.parseLine(line)\n  const vcfFeature = new VcfFeature({\n    variant: vcfVariant,\n    parser: vcfParser,\n    id: `vcf-${lineNumber}`,\n  })\n\n  const data = line.split('\\t').map(d => (d === '.' ? '' : d))\n  // no format column, add blank\n  if (data.length === 8) {\n    data.push('')\n  }\n  const row: Row = {\n    id: String(lineNumber + 1),\n    extendedData: { vcfFeature: vcfFeature.toJSON() },\n    cells: data.map((text, columnNumber) => {\n      return {\n        columnNumber,\n        text,\n      }\n    }),\n  }\n  return row\n}\n\nexport function parseVcfBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 0,\n    isValidRefName: () => false,\n  },\n) {\n  let { header, body } = splitVcfFileHeaderAndBody(bufferToString(buffer))\n  const rows: Row[] = []\n  const vcfParser = new VCF({ header })\n  header = '' // garbage collect\n  body.split(/\\n|\\r\\n|\\r/).forEach((line: string, lineNumber) => {\n    if (/\\S/.test(line)) {\n      rows.push(vcfRecordToRow(vcfParser, line, lineNumber))\n    }\n  })\n  body = '' // garbage collect\n\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows,\n  }\n\n  const columnDisplayOrder: number[] = []\n  const columns: Column[] = []\n  for (let i = 0; i < vcfCoreColumns.length; i += 1) {\n    columnDisplayOrder.push(i)\n    columns[i] = {\n      name: vcfCoreColumns[i].name,\n      dataType: { type: vcfCoreColumns[i].type },\n    }\n  }\n  for (let i = 0; i < vcfParser.samples.length; i += 1) {\n    const oi = vcfCoreColumns.length + i\n    columnDisplayOrder.push(oi)\n    columns[oi] = { name: vcfParser.samples[i], dataType: { type: 'Text' } }\n  }\n\n  columnDisplayOrder.push(columnDisplayOrder.length)\n  columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.extendedData.vcfFeature.refName+':'\\n\n    +row.extendedData.vcfFeature.start+'..'+row.extendedData.vcfFeature.end, extendedData:\\n\n    {refName:row.extendedData.vcfFeature.refName,start:row.extendedData.vcfFeature.start,end:row.extendedData.vcfFeature.end}}`,\n  })\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: true,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport function splitVcfFileHeaderAndBody(wholeFile: string) {\n  // split into header and the rest of the file\n  let headerEndIndex = 0\n  let prevChar\n  for (; headerEndIndex < wholeFile.length; headerEndIndex += 1) {\n    const c = wholeFile[headerEndIndex]\n    if (prevChar === '\\n' && c !== '#') {\n      break\n    }\n    prevChar = c\n  }\n\n  return {\n    header: wholeFile.substr(0, headerEndIndex),\n    body: wholeFile.substr(headerEndIndex),\n  }\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","options","then","module","default","csv","noheader","output","fromString","dataToSpreadsheetSnapshot","rows","hasColumnNameLine","columnNameLineNumber","isValidRefName","maxCols","rowSet","isLoaded","map","row","rowNumber","id","length","String","cells","text","columnNumber","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","guessedType","parsedLoc","parseLocString","error","refName","start","test","guessColumnType","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","vcfCoreColumns","parseVcfBuffer","splitVcfFileHeaderAndBody","header","body","vcfParser","VCF","split","line","lineNumber","vcfVariant","parseLine","vcfFeature","VcfFeature","variant","parser","data","d","toJSON","vcfRecordToRow","i","samples","oi","unshift","isDerived","derivationFunctionText","wholeFile","prevChar","headerEndIndex","c","substr"],"sourceRoot":""}