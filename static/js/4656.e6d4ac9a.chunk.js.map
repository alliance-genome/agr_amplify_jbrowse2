{"version":3,"file":"static/js/4656.e6d4ac9a.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/util.ts","../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport function paf_delta2paf(lines: string[]) {\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]\n    const m = regex.exec(line)\n    if (m !== null) {\n      rname = m[1]\n      qname = m[2]\n      seen_gt = true\n      continue\n    }\n    if (!seen_gt) {\n      continue\n    }\n    const t = line.split(' ')\n    if (t.length === 7) {\n      const t0 = +t[0]\n      const t1 = +t[1]\n      const t2 = +t[2]\n      const t3 = +t[3]\n      const t4 = +t[4]\n      strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n      rs = +(t0 < t1 ? t0 : t1) - 1\n      re = +(t1 > t0 ? t1 : t0)\n      qs = +(t2 < t3 ? t2 : t3) - 1\n      qe = +(t3 > t2 ? t3 : t2)\n      x = y = 0\n      NM = t4\n      cigar = []\n    } else if (t.length === 1) {\n      const d = +t[0]\n      if (d === 0) {\n        let blen = 0\n        const cigar_str = []\n\n        if (re - rs - x !== qe - qs - y) {\n          throw new Error(`inconsistent alignment on line ${i}`)\n        }\n        cigar.push((re - rs - x) << 4)\n        for (let i = 0; i < cigar.length; ++i) {\n          const rlen = cigar[i] >> 4\n          blen += rlen\n          cigar_str.push(rlen + 'MID'.charAt(cigar[i] & 0xf))\n        }\n\n        records.push({\n          qname,\n          qstart: qs,\n          qend: qe,\n          tname: rname,\n          tstart: rs,\n          tend: re,\n          strand,\n          extra: {\n            numMatches: blen - NM,\n            blockLen: blen,\n            mappingQual: 0,\n            NM,\n            cg: cigar_str.join(''),\n          },\n        })\n      } else if (d > 0) {\n        const l = d - 1\n        x += l + 1\n        y += l\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 2) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 2)\n        } // deletion\n      } else {\n        const l = -d - 1\n        x += l\n        y += l + 1\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 1) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 1)\n        } // insertion\n      }\n    }\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_delta2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return paf_delta2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["paf_delta2paf","lines","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","i","length","line","m","exec","t","split","t0","t1","t2","t3","d","blen","cigar_str","Error","concat","push","rlen","charAt","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","isGzip","buf","DeltaAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","loc","buffer","text","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","TextDecoder","fatal","decode","abrupt","filter","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","entry","quals","len","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAF","_line$split","_line$split2","_toArray","fields","slice","rest","field","r","indexOf","_objectSpread","flipCigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","setupP","_setup","_this2","setupPre","catch","e","undefined","_callee2","pm","pafLocation","_context2","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","from","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","_objectWithoutProperties","_excluded","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","_readFile","file","a"],"sourceRoot":""}