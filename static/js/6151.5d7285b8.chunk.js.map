{"version":3,"file":"static/js/6151.5d7285b8.chunk.js","mappings":"kPAGA,MAAMA,GAAYC,E,SAAAA,KAAAA,EAAaC,IAAS,CACtCC,MAAO,CACLC,OAAQ,iBACRC,OAAQH,EAAMI,QAAQ,GACtB,OAAQ,CACNC,QAASL,EAAMI,QAAQ,SAKd,SAASE,GAAkB,cACxCC,IAIA,MAAM,QAAEC,GAAYV,IACpB,OACEW,EAAAA,cAAA,SAAOC,UAAWF,EAAQP,OACxBQ,EAAAA,cAAA,aACGF,EAAcI,KAAI,EAAEC,EAAKC,KACxBJ,EAAAA,cAAA,MAAIG,IAAKA,GACPH,EAAAA,cAAA,UAAKG,GACLH,EAAAA,cAAA,UAAKI,GACLJ,EAAAA,cAAA,MACEK,MAAO,CACLC,MAAO,MACPC,WAAYH,SAQ5B,CCxBA,MA0FA,GA1FmCI,EAAAA,EAAAA,WAAS,UAAU,MACpDC,EAAK,YACLC,IASA,MAAM,QAAEC,EAAO,mBAAEC,GAAuBH,EAElCX,EAAgB,IAAIc,EAAmBC,WAE7C,OACEb,EAAAA,cAACc,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASN,EAAaO,MAAM,0BACvCjB,EAAAA,cAACkB,EAAAA,EAAa,KACZlB,EAAAA,cAACmB,EAAAA,EAAU,KAAC,6QAMZnB,EAAAA,cAACmB,EAAAA,EAAU,KAAC,kIAIZnB,EAAAA,cAAA,OAAKK,MAAO,CAAEX,OAAQ,KACD,kBAAlBiB,GAASS,KACRpB,EAAAA,cAAA,WACGF,EAAcuB,OACbrB,EAAAA,cAAAA,EAAAA,SAAA,KAAE,6CAEAA,EAAAA,cAACH,EAAiB,CAChBC,cAAe,IAAIc,EAAmBC,cAI1Cb,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACmB,EAAAA,EAAU,KAAC,qFAIZnB,EAAAA,cAACsB,EAAAA,EAAgB,CAACC,KAAM,OAI5B,KACe,gBAAlBZ,GAASS,KACRpB,EAAAA,cAACH,EAAiB,CAChBC,cAAe,CACb,CAAC,aAAc,OACf,CAAC,eAAgB,WAGnB,MAENE,EAAAA,cAACwB,EAAAA,EAAa,KACZxB,EAAAA,cAACyB,EAAAA,EAAM,CACLC,QAAQ,YACRC,QAASA,KACPlB,EAAMmB,eAAe,CAAER,KAAM,kBAC7BV,GAAa,GAEhB,iBAGDV,EAAAA,cAACyB,EAAAA,EAAM,CACLC,QAAQ,YACRC,QAASA,KACPlB,EAAMmB,eAAe,CAAER,KAAM,gBAC7BV,GAAa,GAEhB,eAGDV,EAAAA,cAACyB,EAAAA,EAAM,CACLC,QAAQ,YACRG,MAAM,YACNF,QAASA,IAAMjB,KAChB,YAOX,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ModificationsTable.tsx","../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByModifications.tsx"],"sourcesContent":["import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  table: {\n    border: '1px solid #888',\n    margin: theme.spacing(4),\n    '& td': {\n      padding: theme.spacing(1),\n    },\n  },\n}))\n\nexport default function ModificationTable({\n  modifications,\n}: {\n  modifications: [string, string | undefined][]\n}) {\n  const { classes } = useStyles()\n  return (\n    <table className={classes.table}>\n      <tbody>\n        {modifications.map(([key, value]) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{value}</td>\n            <td\n              style={{\n                width: '1em',\n                background: value,\n              }}\n            />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ObservableMap } from 'mobx'\nimport {\n  Button,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport ModificationTable from './ModificationsTable'\n\nconst ColorByModificationsDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: {\n    setColorScheme: (arg: { type: string }) => void\n    modificationTagMap: ObservableMap<string, string>\n    colorBy?: { type: string }\n  }\n  handleClose: () => void\n}) {\n  const { colorBy, modificationTagMap } = model\n\n  const modifications = [...modificationTagMap.entries()]\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Color by modifications\">\n      <DialogContent>\n        <Typography>\n          You can choose to color the modifications in the BAM/CRAM MM/ML\n          specification using this dialog. Choosing modifications colors the\n          modified positions and can color multiple modification types. Choosing\n          the methylation setting colors methylated and unmethylated CpG.\n        </Typography>\n        <Typography>\n          Note: you can revisit this dialog to see the current mapping of colors\n          to modification type for the modification coloring mode\n        </Typography>\n        <div style={{ margin: 20 }}>\n          {colorBy?.type === 'modifications' ? (\n            <div>\n              {modifications.length ? (\n                <>\n                  Current modification-type-to-color mapping\n                  <ModificationTable\n                    modifications={[...modificationTagMap.entries()]}\n                  />\n                </>\n              ) : (\n                <>\n                  <Typography>\n                    Note: color by modifications is already enabled. Loading\n                    current modifications...\n                  </Typography>\n                  <CircularProgress size={15} />\n                </>\n              )}\n            </div>\n          ) : null}\n          {colorBy?.type === 'methylation' ? (\n            <ModificationTable\n              modifications={[\n                ['methylated', 'red'],\n                ['unmethylated', 'blue'],\n              ]}\n            />\n          ) : null}\n        </div>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              model.setColorScheme({ type: 'modifications' })\n              handleClose()\n            }}\n          >\n            Modifications\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              model.setColorScheme({ type: 'methylation' })\n              handleClose()\n            }}\n          >\n            Methylation\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default ColorByModificationsDialog\n"],"names":["useStyles","makeStyles","theme","table","border","margin","spacing","padding","ModificationTable","modifications","classes","React","className","map","key","value","style","width","background","observer","model","handleClose","colorBy","modificationTagMap","entries","Dialog","open","onClose","title","DialogContent","Typography","type","length","CircularProgress","size","DialogActions","Button","variant","onClick","setColorScheme","color"],"sourceRoot":""}