{"version":3,"file":"static/js/1732.06ede869.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { observer } from 'mobx-react'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst ConfigureConnection = observer(\n  (props: {\n    connectionType: ConnectionType\n    model: AnyConfigurationModel\n    session: AbstractSessionModel\n  }) => {\n    const { connectionType, model, session } = props\n    const ConfigEditorComponent =\n      connectionType.configEditorComponent || ConfigurationEditor\n\n    return (\n      <Suspense fallback={<div>Loading...</div>}>\n        <ConfigEditorComponent model={{ target: model }} session={session} />\n      </Suspense>\n    )\n  },\n)\n\nexport default ConfigureConnection\n","import React, { useEffect } from 'react'\nimport { IconButton, MenuItem, TextField } from '@mui/material'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\n// icons\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'\n\nfunction ConnectionTypeSelect(props: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType?: ConnectionType\n  setConnectionType: (c?: ConnectionType) => void\n}) {\n  const { connectionTypeChoices, connectionType, setConnectionType } = props\n\n  useEffect(() => {\n    if (!connectionType) {\n      setConnectionType(connectionTypeChoices[0])\n    }\n  })\n\n  return (\n    <form autoComplete=\"off\">\n      {connectionType ? (\n        <TextField\n          value={connectionType.name}\n          label=\"connectionType\"\n          helperText={\n            connectionType.description ? (\n              <>\n                {connectionType.description}\n                {connectionType.url ? (\n                  <IconButton\n                    href={connectionType.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    color=\"secondary\"\n                  >\n                    <OpenInNewIcon />\n                  </IconButton>\n                ) : null}\n              </>\n            ) : null\n          }\n          select\n          fullWidth\n          onChange={event =>\n            setConnectionType(\n              connectionTypeChoices.find(c => c.name === event.target.value),\n            )\n          }\n          variant=\"outlined\"\n        >\n          {connectionTypeChoices.map(c => (\n            <MenuItem key={c.name} value={c.name}>\n              {c.displayName || c.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : null}\n    </form>\n  )\n}\n\nexport default ConnectionTypeSelect\n","import React, { useState } from 'react'\nimport { getSession, getEnv } from '@jbrowse/core/util'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\n// locals\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nfunction AddConnectionWidget({ model }: { model: unknown }) {\n  const [connectionType, setConnectionType] = useState<ConnectionType>()\n  const [configModel, setConfigModel] = useState<AnyConfigurationModel>()\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n\n  const session = getSession(model)\n\n  const { pluginManager } = getEnv(session)\n\n  function stepContent() {\n    switch (activeStep) {\n      case 0:\n        return (\n          <ConnectionTypeSelect\n            connectionTypeChoices={\n              pluginManager.getElementTypesInGroup(\n                'connection',\n              ) as ConnectionType[]\n            }\n            connectionType={connectionType}\n            setConnectionType={c => {\n              setConnectionType(c)\n              if (c) {\n                setConfigModel(\n                  c.configSchema.create(\n                    {\n                      connectionId: `${c.name}-${Date.now()}`,\n                    },\n                    getEnv(model),\n                  ),\n                )\n              }\n            }}\n          />\n        )\n      case 1:\n        return connectionType && configModel ? (\n          <ConfigureConnection\n            connectionType={connectionType}\n            model={configModel}\n            session={session}\n          />\n        ) : null\n\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep === steps.length - 1) {\n      handleFinish()\n    } else {\n      setActiveStep(activeStep + 1)\n    }\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function handleFinish() {\n    const connectionConf = session.addConnectionConf(configModel)\n    if (session.makeConnection) {\n      session.makeConnection(connectionConf)\n    }\n    session.hideWidget(model)\n  }\n\n  function checkNextEnabled() {\n    return (\n      (activeStep === 0 && connectionType) || (activeStep === 1 && configModel)\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {stepContent()}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={!checkNextEnabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddConnectionWidget)\n"],"names":["observer","props","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","Suspense","fallback","target","connectionTypeChoices","setConnectionType","useEffect","autoComplete","TextField","value","name","label","helperText","description","url","IconButton","href","rel","color","OpenInNew","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","configModel","setConfigModel","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","stepContent","getElementTypesInGroup","configSchema","create","connectionId","Date","now","Typography","handleNext","length","connectionConf","addConnectionConf","makeConnection","hideWidget","handleFinish","handleBack","className","Stepper","orientation","Step","StepLabel","StepContent","Button","disabled","onClick"],"sourceRoot":""}