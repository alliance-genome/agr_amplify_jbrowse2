{"version":3,"file":"static/js/9589.cdf3deac.chunk.js","mappings":"iTAQA,GAAeA,EAAAA,EAAAA,WAAS,SAAAC,GAQpB,IAPFC,EAAcD,EAAdC,eACAC,EAAKF,EAALE,MACAC,EAAOH,EAAPG,QAMMC,EACJH,EAAeI,uBAAyBC,EAAAA,GAE1C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,gBAAe,IAAIC,UACtCJ,EAAAA,EAAAA,KAACH,EAAqB,CAACF,MAAO,CAAEU,OAAQV,GAASC,QAASA,KAGhE,I,4CCjBA,GAAeJ,EAAAA,EAAAA,WAAS,SAA6BC,GAQjD,IAPFa,EAAqBb,EAArBa,sBACAZ,EAAcD,EAAdC,eACAa,EAAiBd,EAAjBc,kBAYA,OANAC,EAAAA,EAAAA,YAAU,WACHd,GACHa,EAAkBD,EAAsB,GAE5C,KAGEN,EAAAA,EAAAA,KAAA,QAAMS,aAAa,MAAKL,SACrBV,GACCM,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,MAAOjB,EAAekB,KACtBC,MAAM,iBACNC,WACEpB,EAAeqB,aACbC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAb,SAAA,CACGV,EAAeqB,YACfrB,EAAewB,KACdlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAU,CACTC,KAAM1B,EAAewB,IACrBG,IAAI,sBACJhB,OAAO,SAAQD,UAEfJ,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,MAEd,QAEJ,KAENC,QAAM,EACNC,WAAS,EACTC,SAAU,SAAAC,GAAK,OACbnB,EACED,EAAsBqB,MAAK,SAAAC,GAAC,OAAIA,EAAEhB,OAASc,EAAMrB,OAAOM,KAAK,IAC9D,EAEHkB,QAAQ,WAAUzB,SAEjBE,EAAsBwB,KAAI,SAAAF,GAAC,OAC1B5B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAQ,CAAcpB,MAAOiB,EAAEhB,KAAKR,SAClCwB,EAAEI,aAAeJ,EAAEhB,MADPgB,EAAEhB,KAEN,MAGb,MAGV,ICnDMqB,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,KAAM,CACJC,UAAWF,EAAMG,QAAQ,IAE3BC,QAAS,CACPC,gBAAiBL,EAAMM,QAAQC,WAAWC,SAE5CC,OAAQ,CACNP,UAAWF,EAAMG,QAAQ,GACzBO,YAAaV,EAAMG,QAAQ,IAE7BQ,iBAAkB,CAChBC,aAAcZ,EAAMG,QAAQ,IAE/B,IAEKU,EAAQ,CAAC,2BAA4B,wBAE3C,GAAexD,EAAAA,EAAAA,WAAS,SAA4BC,GAIhD,IAHFE,EAAKF,EAALE,MAIAsD,GAA4CC,EAAAA,EAAAA,YAA0BC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/DvD,EAAcyD,EAAA,GAAE5C,EAAiB4C,EAAA,GACxCE,GAAsCH,EAAAA,EAAAA,YAAiCI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAhEE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAoCP,EAAAA,EAAAA,UAAS,GAAEQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GACxBG,EAAY5B,IAAZ4B,QACFjE,GAAUkE,EAAAA,EAAAA,YAAWnE,GACnBoE,GAAkBC,EAAAA,EAAAA,QAAOpE,GAAzBmE,cAER,OACE/D,EAAAA,EAAAA,KAAA,OAAKiE,UAAWJ,EAAQzB,KAAKhC,UAC3BJ,EAAAA,EAAAA,KAACkE,EAAAA,EAAO,CACND,UAAWJ,EAAQtB,QACnBoB,WAAYA,EACZQ,YAAY,WAAU/D,SAErB4C,EAAMlB,KAAI,SAAAjB,GAAK,OACdG,EAAAA,EAAAA,MAACoD,EAAAA,EAAI,CAAAhE,SAAA,EACHJ,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAAjE,SAAES,KACZG,EAAAA,EAAAA,MAACsD,EAAAA,EAAW,CAAAlE,SAAA,CACM,IAAfuD,GACC3D,EAAAA,EAAAA,KAACuE,EAAoB,CACnBjE,sBAAuByD,EAAcS,wBACrC9E,eAAgBA,EAChBa,kBAAmB,SAAAqB,GAEjB,GADArB,EAAkBqB,GACbA,EAAL,CAGA,IAAM6C,EAAY,GAAAC,OAAM9C,EAAEhB,KAAI,KAAA8D,OAAIC,KAAKC,OACvCpB,EACE5B,EAAEiD,aAAaC,OAAO,CAAEL,aAAAA,IAAgBT,EAAAA,EAAAA,QAAOrE,IAHjD,CAKF,IAEAD,GAAkB6D,GACpBvD,EAAAA,EAAAA,KAAC+E,EAAmB,CAClBrF,eAAgBA,EAChBC,MAAO4D,EACP3D,QAASA,IAET,MACJoB,EAAAA,EAAAA,MAAA,OAAKiD,UAAWJ,EAAQf,iBAAiB1C,SAAA,EACvCJ,EAAAA,EAAAA,KAACgF,EAAAA,EAAM,CACLC,SAAyB,IAAftB,EACVuB,QAAS,kBAAMtB,EAAcD,EAAa,EAAE,EAC5CM,UAAWJ,EAAQjB,OAAOxC,SAC3B,UAGDJ,EAAAA,EAAAA,KAACgF,EAAAA,EAAM,CACLC,WAEoB,IAAftB,GAAoBjE,GACL,IAAfiE,GAAoBJ,GAGzB1B,QAAQ,YACRsD,MAAM,UACND,QAAS,WACP,GAAIvB,IAAeX,EAAMoC,OAAS,EAAG,CAAC,IAADC,EAC7BC,EAAO1F,EAAQ2F,kBAAkBhC,GACjB,QAAtB8B,EAAAzF,EAAQ4F,sBAAc,IAAAH,GAAtBA,EAAAI,KAAA7F,EAAyB0F,GACzB1F,EAAQ8F,WAAW/F,EACrB,MACEiE,EAAcD,EAAa,EAE/B,EACAM,UAAWJ,EAAQjB,OACnB,cAAY,oBAAmBxC,SAE9BuD,IAAeX,EAAMoC,OAAS,EAAI,UAAY,iBAtD5CvE,EA0DJ,OAKjB,G","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\nimport { LoadingEllipses } from '@jbrowse/core/ui'\n\nexport default observer(function ({\n  connectionType,\n  model,\n  session,\n}: {\n  connectionType: ConnectionType\n  model: AnyConfigurationModel\n  session: AbstractSessionModel\n}) {\n  const ConfigEditorComponent =\n    connectionType.configEditorComponent || ConfigurationEditor\n\n  return (\n    <Suspense fallback={<LoadingEllipses />}>\n      <ConfigEditorComponent model={{ target: model }} session={session} />\n    </Suspense>\n  )\n})\n","import React, { useEffect } from 'react'\nimport { IconButton, MenuItem, TextField } from '@mui/material'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport { observer } from 'mobx-react'\n\n// icons\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'\n\nexport default observer(function ConnectionTypeSelect({\n  connectionTypeChoices,\n  connectionType,\n  setConnectionType,\n}: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType?: ConnectionType\n  setConnectionType: (c?: ConnectionType) => void\n}) {\n  useEffect(() => {\n    if (!connectionType) {\n      setConnectionType(connectionTypeChoices[0])\n    }\n  })\n\n  return (\n    <form autoComplete=\"off\">\n      {connectionType ? (\n        <TextField\n          value={connectionType.name}\n          label=\"connectionType\"\n          helperText={\n            connectionType.description ? (\n              <>\n                {connectionType.description}\n                {connectionType.url ? (\n                  <IconButton\n                    href={connectionType.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <OpenInNewIcon />\n                  </IconButton>\n                ) : null}\n              </>\n            ) : null\n          }\n          select\n          fullWidth\n          onChange={event =>\n            setConnectionType(\n              connectionTypeChoices.find(c => c.name === event.target.value),\n            )\n          }\n          variant=\"outlined\"\n        >\n          {connectionTypeChoices.map(c => (\n            <MenuItem key={c.name} value={c.name}>\n              {c.displayName || c.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : null}\n    </form>\n  )\n})\n","import React, { useState } from 'react'\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material'\nimport { getSession, getEnv } from '@jbrowse/core/util'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\n// locals\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nexport default observer(function AddConnectionWidget({\n  model,\n}: {\n  model: unknown\n}) {\n  const [connectionType, setConnectionType] = useState<ConnectionType>()\n  const [configModel, setConfigModel] = useState<AnyConfigurationModel>()\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {activeStep === 0 ? (\n                <ConnectionTypeSelect\n                  connectionTypeChoices={pluginManager.getConnectionElements()}\n                  connectionType={connectionType}\n                  setConnectionType={c => {\n                    setConnectionType(c)\n                    if (!c) {\n                      return\n                    }\n                    const connectionId = `${c.name}-${Date.now()}`\n                    setConfigModel(\n                      c.configSchema.create({ connectionId }, getEnv(model)),\n                    )\n                  }}\n                />\n              ) : connectionType && configModel ? (\n                <ConfigureConnection\n                  connectionType={connectionType}\n                  model={configModel}\n                  session={session}\n                />\n              ) : null}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={\n                    !(\n                      (activeStep === 0 && connectionType) ||\n                      (activeStep === 1 && configModel)\n                    )\n                  }\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (activeStep === steps.length - 1) {\n                      const conf = session.addConnectionConf(configModel)\n                      session.makeConnection?.(conf)\n                      session.hideWidget(model)\n                    } else {\n                      setActiveStep(activeStep + 1)\n                    }\n                  }}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n})\n"],"names":["observer","_ref","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","_jsx","Suspense","fallback","LoadingEllipses","children","target","connectionTypeChoices","setConnectionType","useEffect","autoComplete","TextField","value","name","label","helperText","description","_jsxs","_Fragment","url","IconButton","href","rel","OpenInNewIcon","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","configModel","setConfigModel","_useState5","_useState6","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","className","Stepper","orientation","Step","StepLabel","StepContent","ConnectionTypeSelect","getConnectionElements","connectionId","concat","Date","now","configSchema","create","ConfigureConnection","Button","disabled","onClick","color","length","_session$makeConnecti","conf","addConnectionConf","makeConnection","call","hideWidget"],"sourceRoot":""}