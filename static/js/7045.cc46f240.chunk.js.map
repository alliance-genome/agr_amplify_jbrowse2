{"version":3,"file":"static/js/7045.cc46f240.chunk.js","mappings":"2OAWMA,GAA4BC,EAAAA,EAAAA,WAAS,SAAAC,GAUvC,IATFC,EAAKD,EAALC,MACAC,EAAWF,EAAXE,YASAC,GAAoCC,EAAAA,EAAAA,UAAS,GAADC,OAAIJ,EAAMK,oBAAoBC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAAnEM,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAAsCP,EAAAA,EAAAA,UAAS,GAADC,OAAIJ,EAAMW,qBAAqBC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAtEG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElC,OACEG,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASjB,EAAakB,MAAM,yBAAwBC,UAC/DC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAAAF,SAAA,EACZL,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAAH,SAAC,gVAOXP,EAAcL,GACbO,EAAAA,EAAAA,KAACS,EAAAA,aAAY,CAACC,MAAM,4EAClB,MACJV,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,MAAM,8BACNC,MAAK,GAAAxB,OAAKI,GACVqB,SAAU,SAAAC,GAAK,OAAIrB,EAAcqB,EAAMC,OAAOH,MAAM,KAEtDb,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,MAAM,mCACNC,MAAK,GAAAxB,OAAKS,GACVgB,SAAU,SAAAC,GAAK,OAAIhB,EAAegB,EAAMC,OAAOH,MAAM,KAGvDP,EAAAA,EAAAA,MAACW,EAAAA,EAAa,CAAAZ,SAAA,EACZL,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLC,QAAQ,YACRC,QAAS,WACPnC,EAAMoC,mBAAmB,CACvB5B,YAAaA,EACbK,aAAcA,IAEhBZ,GACF,EAAEmB,SACH,YAGDL,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLC,QAAQ,YACRG,MAAM,YACNF,QAAS,kBAAMlC,GAAa,EAACmB,SAC9B,kBAOX,IAEA,W","sources":["../../../plugins/gccontent/src/LinearGCContentDisplay/components/EditGCContentParams.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\n\nconst EditGCContentParamsDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: {\n    windowSizeSetting: number\n    windowDeltaSetting: number\n    setGCContentParams: (a: { windowSize: number; windowDelta: number }) => void\n  }\n  handleClose: () => void\n}) {\n  const [windowSize, setWindowSize] = useState(`${model.windowSizeSetting}`)\n  const [windowDelta, setWindowDelta] = useState(`${model.windowDeltaSetting}`)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Edit GC content params\">\n      <DialogContent>\n        <Typography>\n          GC content is calculated in a particular sliding window of size N, and\n          then the sliding window moves (steps) some number of bases M forward.\n          Note that small step sizes can result in high CPU over large areas,\n          and it is not recommended to make the step size larger than the window\n          size as then the sliding window will miss contents.\n        </Typography>\n        {windowDelta > windowSize ? (\n          <ErrorMessage error=\"It is not recommended to make the step size larger than the window size\" />\n        ) : null}\n        <TextField\n          label=\"Size of sliding window (bp)\"\n          value={`${windowSize}`}\n          onChange={event => setWindowSize(event.target.value)}\n        />\n        <TextField\n          label=\"Step size of sliding window (bp)\"\n          value={`${windowDelta}`}\n          onChange={event => setWindowDelta(event.target.value)}\n        />\n\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              model.setGCContentParams({\n                windowSize: +windowSize,\n                windowDelta: +windowDelta,\n              })\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default EditGCContentParamsDialog\n"],"names":["EditGCContentParamsDialog","observer","_ref","model","handleClose","_useState","useState","concat","windowSizeSetting","_useState2","_slicedToArray","windowSize","setWindowSize","_useState3","windowDeltaSetting","_useState4","windowDelta","setWindowDelta","_jsx","Dialog","open","onClose","title","children","_jsxs","DialogContent","Typography","ErrorMessage","error","TextField","label","value","onChange","event","target","DialogActions","Button","variant","onClick","setGCContentParams","color"],"sourceRoot":""}