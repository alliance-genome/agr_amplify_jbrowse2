{"version":3,"file":"static/js/6082.3de867c9.chunk.js","mappings":"yUAgBMA,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,SAAU,WACVC,MAAOH,EAAMI,QAAQ,GACrBC,IAAKL,EAAMI,QAAQ,GACnBE,MAAON,EAAMO,QAAQC,KAAK,UAM9B,SAASC,EAAUH,GACjB,GAAIA,aAAiBI,OAAQ,CAC3B,MAAoBJ,EAAZK,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,EACd,MAAM,OAAN,OAAcF,EAAd,YAAmBC,EAAnB,YAAwBC,EAAxB,KAEF,OAAOP,EAGM,SAASQ,EAAT,GAWX,IAVFC,EAUC,EAVDA,MACAC,EASC,EATDA,YAUMC,EAAUnB,IAChB,GAA4BoB,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KAEA,OACE,UAAC,IAAD,CAAQC,MAAI,EAACC,QAASN,EAAtB,WACE,UAAC,IAAD,4JAGE,SAAC,IAAD,CACE,aAAW,QACXO,UAAWN,EAAQhB,YACnBuB,QAASR,EAHX,UAKE,SAAC,IAAD,UAGJ,UAAC,IAAD,YACE,SAAC,IAAD,CACES,SAAUN,EACVK,QAAS,kBAAMJ,GAAU,IACzBM,SAAS,SAAC,IAAD,IACTC,MAAO,mBAET,SAAC,IAAD,CACEF,QAASN,EACTK,QAAS,kBAAMJ,GAAU,IACzBM,SAAS,SAAC,IAAD,IACTC,MAAO,4BAGRR,GACC,iCACE,SAAC,IAAD,8BACA,SAAC,KAAD,CACES,SAAU,SAAAC,GACRd,EAAMe,YAAYrB,EAAUoB,EAAME,MAClChB,EAAMiB,cAASC,OAGnB,SAAC,IAAD,8BACA,SAAC,KAAD,CACEL,SAAU,SAAAC,GACRd,EAAMmB,YAAYzB,EAAUoB,EAAME,MAClChB,EAAMiB,cAASC,UAKrB,iCACE,SAAC,IAAD,6BACA,SAAC,KAAD,CACEL,SAAU,SAAAC,GACRd,EAAMiB,SAASvB,EAAUoB,EAAME,gBAMzC,UAAC,IAAD,YACE,SAAC,IAAD,CACEP,QAAS,WACPT,EAAMe,iBAAYG,GAClBlB,EAAMmB,iBAAYD,GAClBlB,EAAMiB,cAASC,IAEjB3B,MAAM,YACN6B,QAAQ,YAPV,8BAYA,SAAC,IAAD,CACEA,QAAQ,YACR7B,MAAM,UACN8B,KAAK,SACLZ,QAAS,WACPR,KALJ","sources":["../../../plugins/wiggle/src/LinearWiggleDisplay/components/SetColorDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogActions,\n  DialogTitle,\n  IconButton,\n  Typography,\n  FormControlLabel,\n  Radio,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { CompactPicker, Color, RGBColor } from 'react-color'\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\n// this is needed because passing a entire color object into the react-color\n// for alpha, can't pass in an rgba string for example\nfunction serialize(color: Color) {\n  if (color instanceof Object) {\n    const { r, g, b } = color as RGBColor\n    return `rgb(${r},${g},${b})`\n  }\n  return color\n}\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    color: number\n    setColor: (arg?: string) => void\n    setPosColor: (arg?: string) => void\n    setNegColor: (arg?: string) => void\n  }\n  handleClose: () => void\n}) {\n  const classes = useStyles()\n  const [posneg, setPosNeg] = useState(false)\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Select either an overall color, or the positive/negative colors. Note\n        that density renderers only work properly with positive/negative colors\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <FormControlLabel\n          checked={!posneg}\n          onClick={() => setPosNeg(false)}\n          control={<Radio />}\n          label={'Overall color'}\n        />\n        <FormControlLabel\n          checked={posneg}\n          onClick={() => setPosNeg(true)}\n          control={<Radio />}\n          label={'Positive/negative color'}\n        />\n\n        {posneg ? (\n          <>\n            <Typography>Positive color</Typography>\n            <CompactPicker\n              onChange={event => {\n                model.setPosColor(serialize(event.rgb))\n                model.setColor(undefined)\n              }}\n            />\n            <Typography>Negative color</Typography>\n            <CompactPicker\n              onChange={event => {\n                model.setNegColor(serialize(event.rgb))\n                model.setColor(undefined)\n              }}\n            />\n          </>\n        ) : (\n          <>\n            <Typography>Overall color</Typography>\n            <CompactPicker\n              onChange={event => {\n                model.setColor(serialize(event.rgb))\n              }}\n            />\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            model.setPosColor(undefined)\n            model.setNegColor(undefined)\n            model.setColor(undefined)\n          }}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Restore default\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","serialize","Object","r","g","b","SetColorDialog","model","handleClose","classes","useState","posneg","setPosNeg","open","onClose","className","onClick","checked","control","label","onChange","event","setPosColor","rgb","setColor","undefined","setNegColor","variant","type"],"sourceRoot":""}