{"version":3,"file":"static/js/8538.0f607a38.chunk.js","mappings":"6KAkBMA,EAAQ,WAOV,SAAAA,EAAYC,EAAKC,IAAMC,EAAAA,EAAAA,GAAA,KAAAH,GACnBI,KAAKH,IAAMA,EACXG,KAAKF,KAAOA,CAChB,CA4FC,OA1FDG,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,QAAAC,MAIA,WACI,OAAO,IAAIP,EAASI,KAAKH,IAAKG,KAAKF,KACvC,GAEA,CAAAI,IAAA,MAAAE,IAIA,WACI,OAAOJ,KAAKK,OAChB,GAEA,CAAAH,IAAA,YAAAC,MAKA,SAAUG,GACN,OAAON,KAAKH,IAAMS,EAAeT,KAC7BG,KAAKH,KAAOS,EAAeT,KAAOG,KAAKF,KAAOQ,EAAeR,IACrE,GAEA,CAAAI,IAAA,WAAAC,MAKA,SAASG,GACL,OAAON,KAAKH,KAAOS,EAAeT,KAAOG,KAAKF,MAAQQ,EAAeR,IACzE,GAEA,CAAAI,IAAA,YAAAC,MAKA,SAAUG,GACN,OAAQN,KAAKO,cAAcD,EAC/B,GAEA,CAAAJ,IAAA,gBAAAC,MAKA,SAAcG,GACV,OAAQN,KAAKF,KAAOQ,EAAeT,KAAOS,EAAeR,KAAOE,KAAKH,GACzE,GAEA,CAAAK,IAAA,QAAAC,MAKA,SAAMG,GACF,OAAO,IAAIV,OACMY,IAAbR,KAAKH,IAAoBS,EAAeT,IAAMY,KAAKC,IAAIV,KAAKH,IAAKS,EAAeT,UAClEW,IAAdR,KAAKF,KAAqBQ,EAAeR,KAAOW,KAAKE,IAAIX,KAAKF,KAAMQ,EAAeR,MAE3F,GAEA,CAAAI,IAAA,SAAAC,MAGA,WACI,MAAO,CAACH,KAAKH,IAAKG,KAAKF,KAC3B,IAEA,EAAAI,IAAA,iBAAAC,MAMA,SAAsBS,EAAWC,GAC7B,OAAOD,EAAUE,MAAMD,EAC3B,GAEA,CAAAX,IAAA,uBAAAC,MAMA,SAA4BY,EAAMC,GAC9B,OAAOD,EAAOC,CAClB,KAACpB,CAAA,CAtGS,GA2HRqB,EAAI,WACN,SAAAA,IACmF,IADvEf,EAAGgB,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,QAAGV,EAAWL,EAAKe,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,QAAGV,EACzBY,EAAIF,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAKH,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAMJ,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAG,KAAMK,EAAKL,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GATnC,GASyDnB,EAAAA,EAAAA,GAAA,KAAAkB,GAC7EjB,KAAKoB,KAAOA,EACZpB,KAAKqB,MAAQA,EACbrB,KAAKsB,OAASA,EACdtB,KAAKuB,MAAQA,EAEbvB,KAAKwB,KAAO,CAACtB,IAAKA,EAAKC,MAAOA,GAG1BD,GAAOA,aAAeuB,OAAuB,GAAdvB,EAAIiB,SAC9BO,OAAOC,MAAMzB,EAAI,KAAQwB,OAAOC,MAAMzB,EAAI,MAC3CF,KAAKwB,KAAKtB,IAAM,IAAIN,EAASa,KAAKC,IAAIR,EAAI,GAAIA,EAAI,IAAKO,KAAKE,IAAIT,EAAI,GAAIA,EAAI,OAIpFF,KAAKW,IAAMX,KAAKwB,KAAKtB,IAAMF,KAAKwB,KAAKtB,IAAIS,SAAMH,CACnD,CAyEC,OAzEAP,EAAAA,EAAAA,GAAAgB,EAAA,EAAAf,IAAA,QAAAC,MAED,WACI,YAA0BK,IAAlBR,KAAKwB,KAAKtB,UAAyCM,IAApBR,KAAKwB,KAAKrB,OAC/B,OAAdH,KAAKoB,MAAgC,OAAfpB,KAAKqB,OA7BX,IA6B6BrB,KAAKuB,KAC1D,GAAC,CAAArB,IAAA,mBAAAC,MAED,SAAiByB,GACb,OAAO5B,KAAKwB,KAAKrB,OAASyB,EAAWJ,KAAKrB,OAASH,KAAKwB,KAAKrB,MAAM0B,UAC/D7B,KAAKwB,KAAKrB,MAAM0B,UAAUD,EAAWJ,KAAKrB,OAC1CH,KAAKwB,KAAKrB,MAAQyB,EAAWJ,KAAKrB,KAC1C,GAAC,CAAAD,IAAA,YAAAC,MAED,SAAUyB,GAEN,OAAI5B,KAAKwB,KAAKrB,QAAUH,KAAKwB,KAAKtB,KAAO0B,EAAWJ,KAAKrB,QAAUyB,EAAWJ,KAAKtB,IACxEF,KAAKwB,KAAKtB,IAAI2B,UAAUD,EAAWJ,KAAKtB,KAGxCF,KAAKwB,KAAKtB,IAAI2B,UAAUD,EAAWJ,KAAKtB,MAC3CF,KAAKwB,KAAKtB,IAAI4B,SAAUF,EAAWJ,KAAKtB,MAASF,KAAK+B,iBAAiBH,EAEnF,GAAC,CAAA1B,IAAA,eAAAC,MAED,SAAayB,GACT,OAAO5B,KAAKwB,KAAKrB,OAASyB,EAAWJ,KAAKrB,OAASH,KAAKwB,KAAKrB,MAAM2B,SAC/D9B,KAAKwB,KAAKrB,MAAM2B,SAASF,EAAWJ,KAAKrB,OACzCH,KAAKwB,KAAKrB,OAASyB,EAAWJ,KAAKrB,KAC3C,GAAC,CAAAD,IAAA,WAAAC,MACD,SAASyB,GAEL,OAAI5B,KAAKwB,KAAKrB,QAAUH,KAAKwB,KAAKtB,KAAO0B,EAAWJ,KAAKrB,QAAUyB,EAAWJ,KAAKtB,IACxEF,KAAKwB,KAAKtB,IAAI4B,SAASF,EAAWJ,KAAKtB,KAGvCF,KAAKwB,KAAKtB,IAAI4B,SAASF,EAAWJ,KAAKtB,MAAQF,KAAKgC,aAAaJ,EAEhF,GAAC,CAAA1B,IAAA,YAAAC,MAED,SAAUyB,GACN,OAAO5B,KAAKwB,KAAKtB,IAAI+B,UAAUL,EAAWJ,KAAKtB,IACnD,GAAC,CAAAA,IAAA,YAAAC,MAED,SAAUyB,GACN5B,KAAKwB,KAAKtB,IAAM0B,EAAWJ,KAAKtB,IAChCF,KAAKwB,KAAKrB,MAAQyB,EAAWJ,KAAKrB,KACtC,GAAC,CAAAD,IAAA,aAAAC,MAED,WAGI,GADAH,KAAKW,IAAMX,KAAKwB,KAAKtB,IAAMF,KAAKwB,KAAKtB,IAAIS,SAAMH,EAC3CR,KAAKqB,OAASrB,KAAKqB,MAAMV,IAAK,CAC9B,IAAMuB,EAAiBlC,KAAKwB,KAAKtB,IAAIiC,YAAYD,eACjDlC,KAAKW,IAAMuB,EAAelC,KAAKW,IAAKX,KAAKqB,MAAMV,IACnD,CACA,GAAIX,KAAKoB,MAAQpB,KAAKoB,KAAKT,IAAK,CAC5B,IAAMuB,EAAiBlC,KAAKwB,KAAKtB,IAAIiC,YAAYD,eACjDlC,KAAKW,IAAMuB,EAAelC,KAAKW,IAAKX,KAAKoB,KAAKT,IAClD,CACJ,GAEA,CAAAT,IAAA,6BAAAC,MACA,SAA2BiC,GAGvB,OAAOC,EAFsBrC,KAAKwB,KAAKtB,IAAIiC,YAAYE,2BACrB7B,IAAvBR,KAAKoB,KAAKT,IAAIb,KAAqBE,KAAKoB,KAAKT,IAAIb,KAAOE,KAAKoB,KAAKT,IAC3CyB,EAAYZ,KAAKtB,IAAIL,IAC3D,GAEA,CAAAK,IAAA,8BAAAC,MACA,SAA4BiC,GACxB,IAAMC,EAAuBrC,KAAKwB,KAAKtB,IAAIiC,YAAYE,qBACnDxC,OAA6BW,IAAvBR,KAAKqB,MAAMV,IAAId,IAAoBG,KAAKqB,MAAMV,IAAId,IAAMG,KAAKqB,MAAMG,KAAKtB,IAAIL,IACtF,OAAOwC,EAAqBD,EAAYZ,KAAKtB,IAAIJ,KAAMD,EAC3D,KAACoB,CAAA,CA3FK,GA0GJqB,EAAY,WAId,SAAAA,KAAcvC,EAAAA,EAAAA,GAAA,KAAAuC,GACVtC,KAAKuC,KAAO,KACZvC,KAAKwC,SAAW,IAAIvB,CACxB,CA8jBC,OA5jBDhB,EAAAA,EAAAA,GAAAqC,EAAA,EAAApC,IAAA,OAAAE,IAIA,WACI,IAAIqC,EAAQ,EAEZ,OADAzC,KAAK0C,UAAU1C,KAAKuC,MAAM,kBAAME,GAAO,IAChCA,CACX,GAEA,CAAAvC,IAAA,OAAAE,IAIA,WACI,IAAIuC,EAAM,GAIV,OAHA3C,KAAK0C,UAAU1C,KAAKuC,MAAM,SAACK,GAAI,OAAKD,EAAIE,KACpCD,EAAKpB,KAAKtB,IAAI4C,OAASF,EAAKpB,KAAKtB,IAAI4C,SAAWF,EAAKpB,KAAKtB,IAC7D,IACMyC,CACX,GAEA,CAAAzC,IAAA,SAAAE,IAIA,WACI,IAAIuC,EAAM,GAEV,OADA3C,KAAK0C,UAAU1C,KAAKuC,MAAM,SAACK,GAAI,OAAKD,EAAIE,KAAKD,EAAKpB,KAAKrB,MAAM,IACtDwC,CACX,GAEA,CAAAzC,IAAA,QAAAE,IAIA,WACI,IAAIuC,EAAM,GAKV,OAJA3C,KAAK0C,UAAU1C,KAAKuC,MAAM,SAACK,GAAI,OAAKD,EAAIE,KAAK,CACzC3C,IAAK0C,EAAKpB,KAAKtB,IAAI4C,OAASF,EAAKpB,KAAKtB,IAAI4C,SAAWF,EAAKpB,KAAKtB,IAC/DC,MAAOyC,EAAKpB,KAAKrB,OACnB,IACKwC,CACX,GAEA,CAAAzC,IAAA,UAAAC,MAIA,WACI,OAAqB,MAAbH,KAAKuC,MAAgBvC,KAAKuC,MAAQvC,KAAKwC,QACnD,GAEA,CAAAtC,IAAA,QAAAC,MAGA,WACIH,KAAKuC,KAAO,IAChB,GAEA,CAAArC,IAAA,SAAAC,MAMA,SAAOD,GACH,QAAYM,IAARN,EAAJ,CACA,IAAI6C,EAAc,IAAI9B,EAAKf,EAFdgB,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAGhB,EAEuBF,KAAKwC,SAAUxC,KAAKwC,SAAU,KA/LnD,GAkMlB,OAFAxC,KAAKgD,YAAYD,GACjB/C,KAAKiD,WAAWF,GACTA,CAJsB,CAKjC,GAEA,CAAA7C,IAAA,QAAAC,MAMA,SAAMD,GAAkB,IAChBkC,EAAc,IAAInB,EAAKf,EADfgB,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAGhB,GAEf,QAAOF,KAAKkD,YAAYlD,KAAKuC,KAAMH,EACvC,GAEA,CAAAlC,IAAA,SAAAC,MAMA,SAAOD,GAAkB,IACjBkC,EAAc,IAAInB,EAAKf,EADdgB,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAGhB,GAEZiD,EAAcnD,KAAKkD,YAAYlD,KAAKuC,KAAMH,GAI9C,OAHIe,GACAnD,KAAKoD,YAAYD,GAEdA,CACX,GAEA,CAAAjD,IAAA,SAAAC,MAOA,SAAOkD,GAAiF,IAAvEC,EAAcpC,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAG,SAACf,EAAOD,GAAG,OAAKC,IAAUD,EAAMA,EAAI4C,SAAW3C,CAAK,EAC9EiC,EAAc,IAAInB,EAAKoC,GACvBE,EAAa,GAEjB,OADAvD,KAAKwD,qBAAqBxD,KAAKuC,KAAMH,EAAamB,GAC3CA,EAAWE,KAAI,SAAAb,GAAI,OAAIU,EAAeV,EAAKpB,KAAKrB,MAAOyC,EAAKpB,KAAKtB,IAAI,GAChF,GAEA,CAAAA,IAAA,gBAAAC,MAKA,SAAckD,GACV,IAAIjB,EAAc,IAAInB,EAAKoC,GAE3B,OADYrD,KAAK0D,uBAAuB1D,KAAKuC,KAAMH,EAEvD,GAEA,CAAAlC,IAAA,UAAAC,MAKA,SAAQwD,GACJ3D,KAAK0C,UAAU1C,KAAKuC,MAAM,SAACK,GAAI,OAAKe,EAAQf,EAAKpB,KAAKtB,IAAK0C,EAAKpB,KAAKrB,MAAM,GAC/E,GAEA,CAAAD,IAAA,MAAAC,MAGA,SAAIyD,GACA,IAAMC,EAAO,IAAIvB,EAEjB,OADAtC,KAAK0C,UAAU1C,KAAKuC,MAAM,SAACK,GAAI,OAAKiB,EAAKC,OAAOlB,EAAKpB,KAAKtB,IAAK0D,EAAShB,EAAKpB,KAAKrB,MAAOyC,EAAKpB,KAAKtB,KAAK,IACjG2D,CACX,GAAC,CAAA3D,IAAA,aAAAC,MAED,SAAWyC,GAEP,IADA,IAAImB,EAAenB,EACW,MAAvBmB,EAAazC,QAChByC,EAAazC,OAAO0C,aACpBD,EAAeA,EAAazC,MAEpC,GAAC,CAAApB,IAAA,cAAAC,MAED,SAAY4C,GACR,IAAIkB,EAAejE,KAAKuC,KACpB2B,EAAc,KAElB,GAAiB,MAAblE,KAAKuC,MAAgBvC,KAAKuC,MAAQvC,KAAKwC,SACvCxC,KAAKuC,KAAOQ,MAEX,CACD,KAAOkB,GAAgBjE,KAAKwC,UACxB0B,EAAcD,EAEVA,EADAlB,EAAYlB,UAAUoC,GACPA,EAAa7C,KAGb6C,EAAa5C,MAIpC0B,EAAYzB,OAAS4C,EAEjBnB,EAAYlB,UAAUqC,GACtBA,EAAY9C,KAAO2B,EAGnBmB,EAAY7C,MAAQ0B,CAE5B,CAEA/C,KAAKmE,aAAapB,EACtB,GAGJ,CAAA7C,IAAA,eAAAC,MACI,SAAa4C,GACT,IAAIkB,EACAG,EAGJ,IADAH,EAAelB,EACRkB,GAAgBjE,KAAKuC,MAxTV,GAwTkB0B,EAAa3C,OAAOC,OAChD0C,EAAa3C,QAAU2C,EAAa3C,OAAOA,OAAOF,KAzTxC,IA0TVgD,EAAaH,EAAa3C,OAAOA,OAAOD,OACzBE,OAEX0C,EAAa3C,OAAOC,MA5TZ,EA6TR6C,EAAW7C,MA7TH,EA8TR0C,EAAa3C,OAAOA,OAAOC,MA/TrB,EAgUN0C,EAAeA,EAAa3C,OAAOA,SAG/B2C,GAAgBA,EAAa3C,OAAOD,QAEpC4C,EAAeA,EAAa3C,OAC5BtB,KAAKqE,YAAYJ,IAErBA,EAAa3C,OAAOC,MAvUZ,EAyUR0C,EAAa3C,OAAOA,OAAOC,MA1UrB,EA2UNvB,KAAKsE,aAAaL,EAAa3C,OAAOA,SA3UhC,IA+UV8C,EAAaH,EAAa3C,OAAOA,OAAOF,MACzBG,OAEX0C,EAAa3C,OAAOC,MAjVZ,EAkVR6C,EAAW7C,MAlVH,EAmVR0C,EAAa3C,OAAOA,OAAOC,MApVrB,EAqVN0C,EAAeA,EAAa3C,OAAOA,SAG/B2C,GAAgBA,EAAa3C,OAAOF,OAEpC6C,EAAeA,EAAa3C,OAC5BtB,KAAKsE,aAAaL,IAEtBA,EAAa3C,OAAOC,MA5VZ,EA8VR0C,EAAa3C,OAAOA,OAAOC,MA/VrB,EAgWNvB,KAAKqE,YAAYJ,EAAa3C,OAAOA,SAKjDtB,KAAKuC,KAAKhB,MApWU,CAqWxB,GAAC,CAAArB,IAAA,cAAAC,MAED,SAAYgD,GACR,IAAIoB,EACAC,GAWAA,GARAD,EADApB,EAAY/B,MAAQpB,KAAKwC,UAAYW,EAAY9B,OAASrB,KAAKwC,SACpDW,EAGAnD,KAAKyE,eAAetB,IAItB/B,MAAQpB,KAAKwC,SACX+B,EAASnD,KAGTmD,EAASlD,OAKXC,OAASiD,EAASjD,OAG3BiD,GAAYvE,KAAKuC,KACjBvC,KAAKuC,KAAOiC,GAGRD,GAAYA,EAASjD,OAAOF,KAC5BmD,EAASjD,OAAOF,KAAOoD,EAGvBD,EAASjD,OAAOD,MAAQmD,EAE5BD,EAASjD,OAAO0C,cAGpBhE,KAAKiD,WAAWuB,GAKZD,GAAYpB,IACZA,EAAYuB,UAAUH,GACtBpB,EAAYa,aACZhE,KAAKiD,WAAWE,IApZA,GAuZiBoB,EAAShD,OAC1CvB,KAAK2E,aAAaH,EAE1B,GAAC,CAAAtE,IAAA,eAAAC,MAED,SAAaqE,GAIT,IAHA,IACII,EADAX,EAAeO,EAGZP,GAAgBjE,KAAKuC,MAA+B,MAAvB0B,EAAa3C,QAha7B,GAga+C2C,EAAa1C,OACxE0C,GAAgBA,EAAa3C,OAAOF,MAla1B,IAmaVwD,EAAeX,EAAa3C,OAAOD,OAClBE,QACbqD,EAAarD,MApaL,EAqaR0C,EAAa3C,OAAOC,MAtad,EAuaNvB,KAAKqE,YAAYJ,EAAa3C,QAC9BsD,EAAeX,EAAa3C,OAAOD,OAva3B,GA0aRuD,EAAaxD,KAAKG,OA1aV,GA2aRqD,EAAavD,MAAME,OACnBqD,EAAarD,MA7aP,EA8aN0C,EAAeA,EAAa3C,SA7apB,GAgbJsD,EAAavD,MAAME,QACnBqD,EAAarD,MAlbX,EAmbFqD,EAAaxD,KAAKG,MAlbd,EAmbJvB,KAAKsE,aAAaM,GAClBA,EAAeX,EAAa3C,OAAOD,OAIvCuD,EAAarD,MAAQ0C,EAAa3C,OAAOC,MACzC0C,EAAa3C,OAAOC,MAzbZ,EA0bRqD,EAAavD,MAAME,MA1bX,EA2bRvB,KAAKqE,YAAYJ,EAAa3C,QAC9B2C,EAAejE,KAAKuC,QA7bd,IAicVqC,EAAeX,EAAa3C,OAAOF,MAClBG,QACbqD,EAAarD,MAlcL,EAmcR0C,EAAa3C,OAAOC,MApcd,EAqcNvB,KAAKsE,aAAaL,EAAa3C,QAC/BsD,EAAeX,EAAa3C,OAAOF,MArc3B,GAwcRwD,EAAaxD,KAAKG,OAxcV,GAycRqD,EAAavD,MAAME,OACnBqD,EAAarD,MA3cP,EA4cN0C,EAAeA,EAAa3C,SA3cpB,GA8cJsD,EAAaxD,KAAKG,QAClBqD,EAAarD,MAhdX,EAidFqD,EAAavD,MAAME,MAhdf,EAidJvB,KAAKqE,YAAYO,GACjBA,EAAeX,EAAa3C,OAAOF,MAIvCwD,EAAarD,MAAQ0C,EAAa3C,OAAOC,MACzC0C,EAAa3C,OAAOC,MAvdZ,EAwdRqD,EAAaxD,KAAKG,MAxdV,EAydRvB,KAAKsE,aAAaL,EAAa3C,QAC/B2C,EAAejE,KAAKuC,OAKhC0B,EAAa1C,MA/dO,CAgexB,GAAC,CAAArB,IAAA,cAAAC,MAED,SAAYyC,EAAMR,GACd,GAAY,MAARQ,GAAgBA,GAAQ5C,KAAKwC,SAGjC,OAAIJ,EAAYN,SAASc,GACdA,EAEPR,EAAYP,UAAUe,GACf5C,KAAKkD,YAAYN,EAAKxB,KAAMgB,GAG5BpC,KAAKkD,YAAYN,EAAKvB,MAAOe,EAE5C,GAGA,CAAAlC,IAAA,uBAAAC,MACA,SAAqByC,EAAMR,EAAaO,GACxB,MAARC,GAAgBA,GAAQ5C,KAAKwC,WAEzBI,EAAKxB,MAAQpB,KAAKwC,UAAaI,EAAKiC,2BAA2BzC,IAC/DpC,KAAKwD,qBAAqBZ,EAAKxB,KAAMgB,EAAaO,GAGlDC,EAAKX,UAAUG,IACfO,EAAIE,KAAKD,GAGTA,EAAKvB,OAASrB,KAAKwC,UAAaI,EAAKkC,4BAA4B1C,IACjEpC,KAAKwD,qBAAqBZ,EAAKvB,MAAOe,EAAaO,GAG/D,GAAC,CAAAzC,IAAA,yBAAAC,MAED,SAAuByC,EAAMR,GACzB,IAAI2C,GAAQ,EAeZ,OAdY,MAARnC,GAAgBA,GAAQ5C,KAAKwC,WAEzBI,EAAKxB,MAAQpB,KAAKwC,UAAaI,EAAKiC,2BAA2BzC,KAC/D2C,EAAQ/E,KAAK0D,uBAAuBd,EAAKxB,KAAMgB,IAG9C2C,IACDA,EAAQnC,EAAKX,UAAUG,IAGtB2C,GAASnC,EAAKvB,OAASrB,KAAKwC,UAAaI,EAAKkC,4BAA4B1C,KAC3E2C,EAAQ/E,KAAK0D,uBAAuBd,EAAKvB,MAAOe,KAGjD2C,CACX,GAAC,CAAA7E,IAAA,gBAAAC,MAED,SAAcyC,GAEV,IADA,IAAIoC,EAAWpC,EACS,MAAjBoC,EAAS5D,MAAgB4D,EAAS5D,MAAQpB,KAAKwC,UAClDwC,EAAWA,EAAS5D,KAExB,OAAO4D,CACX,GAEA,CAAA9E,IAAA,gBAAAC,MACA,SAAcyC,GAEV,IADA,IAAIqC,EAAWrC,EACU,MAAlBqC,EAAS5D,OAAiB4D,EAAS5D,OAASrB,KAAKwC,UACpDyC,EAAWA,EAAS5D,MAExB,OAAO4D,CACX,GAAC,CAAA/E,IAAA,iBAAAC,MAED,SAAeyC,GACX,IAAIsC,EACAjB,EACAC,EAEJ,GAAItB,EAAKvB,OAASrB,KAAKwC,SACnB0C,EAAiBlF,KAAKmF,cAAcvC,EAAKvB,WAExC,CAGD,IAFA4C,EAAerB,EACfsB,EAActB,EAAKtB,OACG,MAAf4C,GAAuBA,EAAY7C,OAAS4C,GAC/CA,EAAeC,EACfA,EAAcA,EAAY5C,OAE9B4D,EAAiBhB,CACrB,CACA,OAAOgB,CACX,GAOA,CAAAhF,IAAA,cAAAC,MAEA,SAAYiF,GACR,IAAIC,EAAID,EAAE/D,MAEV+D,EAAE/D,MAAQgE,EAAEjE,KAERiE,EAAEjE,MAAQpB,KAAKwC,WACf6C,EAAEjE,KAAKE,OAAS8D,GAEpBC,EAAE/D,OAAS8D,EAAE9D,OAET8D,GAAKpF,KAAKuC,KACVvC,KAAKuC,KAAO8C,EAGRD,GAAKA,EAAE9D,OAAOF,KACdgE,EAAE9D,OAAOF,KAAOiE,EAGhBD,EAAE9D,OAAOD,MAAQgE,EAGzBA,EAAEjE,KAAOgE,EACTA,EAAE9D,OAAS+D,EAEF,MAALD,GAAaA,GAAKpF,KAAKwC,UACvB4C,EAAEpB,aAIG,OADTqB,EAAID,EAAE9D,SACW+D,GAAKrF,KAAKwC,UACvB6C,EAAErB,YAEV,GAAC,CAAA9D,IAAA,eAAAC,MAED,SAAakF,GACT,IAAID,EAAIC,EAAEjE,KAEViE,EAAEjE,KAAOgE,EAAE/D,MAEP+D,EAAE/D,OAASrB,KAAKwC,WAChB4C,EAAE/D,MAAMC,OAAS+D,GAErBD,EAAE9D,OAAS+D,EAAE/D,OAET+D,GAAKrF,KAAKuC,KACVvC,KAAKuC,KAAO6C,EAGRC,GAAKA,EAAE/D,OAAOF,KACdiE,EAAE/D,OAAOF,KAAOgE,EAGhBC,EAAE/D,OAAOD,MAAQ+D,EAGzBA,EAAE/D,MAAQgE,EACVA,EAAE/D,OAAS8D,EAEF,MAALC,GAAaA,GAAKrF,KAAKwC,UACvB6C,EAAErB,aAIG,OADToB,EAAIC,EAAE/D,SACW8D,GAAKpF,KAAKwC,UACvB4C,EAAEpB,YAEV,GAAC,CAAA9D,IAAA,YAAAC,MAED,SAAUyC,EAAM0C,GACA,MAAR1C,GAAgBA,GAAQ5C,KAAKwC,WAC7BxC,KAAK0C,UAAUE,EAAKxB,KAAMkE,GAE1BA,EAAO1C,GACP5C,KAAK0C,UAAUE,EAAKvB,MAAOiE,GAEnC,GAEA,CAAApF,IAAA,uBAAAC,MACA,WACI,IAAIwC,GAAM,EAQV,OAPA3C,KAAK0C,UAAU1C,KAAKuC,MAAM,SAAUK,GAppBlB,GAqpBVA,EAAKrB,QAppBO,GAqpBNqB,EAAKxB,KAAKG,OArpBJ,GAqpBoCqB,EAAKvB,MAAME,QACvDoB,GAAM,GAGlB,IACOA,CACX,GAEA,CAAAzC,IAAA,0BAAAC,MACA,SAAwByC,GACpB,IAAI2C,EAAS,EACTC,EAAa,EAiBjB,GAjrBoB,GAkqBhB5C,EAAKrB,OACLgE,KAGAC,EADA5C,EAAKxB,MAAQpB,KAAKwC,SACLxC,KAAKyF,wBAAwB7C,EAAKxB,MAGlC,KAEbwB,EAAKvB,OAASrB,KAAKwC,SACLxC,KAAKyF,wBAAwB7C,EAAKvB,OAGlC,GAGd,MAAM,IAAIqE,MAAM,sCAGpB,OADAH,GAAUC,CAEd,KAAClD,CAAA,CArkBa,E","sources":["../../../node_modules/@flatten-js/interval-tree/dist/main.esm.js"],"sourcesContent":["/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n/**\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\n * This interface is described in typescript definition file *index.d.ts*\n *\n * Axis aligned rectangle is an example of such interval.\n * We may look at rectangle as an interval between its low left and top right corners.\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\n * of Interval interface implementation\n * @type {Interval}\n */\nconst Interval = class Interval {\n    /**\n     * Accept two comparable values and creates new instance of interval\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\n     * @param low\n     * @param high\n     */\n    constructor(low, high) {\n        this.low = low;\n        this.high = high;\n    }\n\n    /**\n     * Clone interval\n     * @returns {Interval}\n     */\n    clone() {\n        return new Interval(this.low, this.high);\n    }\n\n    /**\n     * Propery max returns clone of this interval\n     * @returns {Interval}\n     */\n    get max() {\n        return this.clone();   // this.high;\n    }\n\n    /**\n     * Predicate returns true is this interval less than other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    less_than(other_interval) {\n        return this.low < other_interval.low ||\n            this.low == other_interval.low && this.high < other_interval.high;\n    }\n\n    /**\n     * Predicate returns true is this interval equals to other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    equal_to(other_interval) {\n        return this.low == other_interval.low && this.high == other_interval.high;\n    }\n\n    /**\n     * Predicate returns true if this interval intersects other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    intersect(other_interval) {\n        return !this.not_intersect(other_interval);\n    }\n\n    /**\n     * Predicate returns true if this interval does not intersect other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    not_intersect(other_interval) {\n        return (this.high < other_interval.low || other_interval.high < this.low);\n    }\n\n    /**\n     * Returns new interval merged with other interval\n     * @param {Interval} interval - Other interval to merge with\n     * @returns {Interval}\n     */\n    merge(other_interval) {\n        return new Interval(\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\n        );\n    }\n\n    /**\n     * Returns how key should return\n     */\n    output() {\n        return [this.low, this.high];\n    }\n\n    /**\n     * Function returns maximum between two comparable values\n     * @param interval1\n     * @param interval2\n     * @returns {Interval}\n     */\n    static comparable_max(interval1, interval2) {\n        return interval1.merge(interval2);\n    }\n\n    /**\n     * Predicate returns true if first value less than second value\n     * @param val1\n     * @param val2\n     * @returns {boolean}\n     */\n    static comparable_less_than(val1, val2 ) {\n        return val1 < val2;\n    }\n};\n\n/**\n * Created by Alex Bol on 3/28/2017.\n */\n\n\n// module.exports = {\n//     RB_TREE_COLOR_RED: 0,\n//     RB_TREE_COLOR_BLACK: 1\n// };\n\nconst RB_TREE_COLOR_RED = 0;\nconst RB_TREE_COLOR_BLACK = 1;\n\n/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n\nclass Node {\n    constructor(key = undefined, value = undefined,\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\n        this.left = left;                     // reference to left child node\n        this.right = right;                   // reference to right child node\n        this.parent = parent;                 // reference to parent node\n        this.color = color;\n\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\n\n        /* If not, this should by an array of two numbers */\n        if (key && key instanceof Array && key.length == 2) {\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\n            }\n        }\n\n        this.max = this.item.key ? this.item.key.max : undefined;\n    }\n\n    isNil() {\n        return (this.item.key === undefined && this.item.value === undefined &&\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\n    }\n\n    _value_less_than(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.less_than ?\n            this.item.value.less_than(other_node.item.value) :\n            this.item.value < other_node.item.value;\n    }\n\n    less_than(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.less_than(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.less_than(other_node.item.key) ||\n                this.item.key.equal_to((other_node.item.key)) && this._value_less_than(other_node)\n        }\n    }\n\n    _value_equal(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.equal_to ?\n            this.item.value.equal_to(other_node.item.value) :\n            this.item.value == other_node.item.value;\n    }\n    equal_to(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.equal_to(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.equal_to(other_node.item.key) && this._value_equal(other_node);\n        }\n    }\n\n    intersect(other_node) {\n        return this.item.key.intersect(other_node.item.key);\n    }\n\n    copy_data(other_node) {\n        this.item.key = other_node.item.key;\n        this.item.value = other_node.item.value;\n    }\n\n    update_max() {\n        // use key (Interval) max property instead of key.high\n        this.max = this.item.key ? this.item.key.max : undefined;\n        if (this.right && this.right.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.right.max);\n        }\n        if (this.left && this.left.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.left.max);\n        }\n    }\n\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\n    not_intersect_left_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\n        return comparable_less_than(high, search_node.item.key.low);\n    }\n\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\n    not_intersect_right_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\n        return comparable_less_than(search_node.item.key.high, low);\n    }\n}\n\n/**\n * Created by Alex Bol on 3/31/2017.\n */\n\n// const nil_node = new Node();\n\n/**\n * Implementation of interval binary search tree <br/>\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\n * @type {IntervalTree}\n */\nclass IntervalTree {\n    /**\n     * Construct new empty instance of IntervalTree\n     */\n    constructor() {\n        this.root = null;\n        this.nil_node = new Node();\n    }\n\n    /**\n     * Returns number of items stored in the interval tree\n     * @returns {number}\n     */\n    get size() {\n        let count = 0;\n        this.tree_walk(this.root, () => count++);\n        return count;\n    }\n\n    /**\n     * Returns array of sorted keys in the ascending order\n     * @returns {Array}\n     */\n    get keys() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(\n            node.item.key.output ? node.item.key.output() : node.item.key\n        ));\n        return res;\n    }\n\n    /**\n     * Return array of values in the ascending keys order\n     * @returns {Array}\n     */\n    get values() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\n        return res;\n    }\n\n    /**\n     * Returns array of items (<key,value> pairs) in the ascended keys order\n     * @returns {Array}\n     */\n    get items() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push({\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\n            value: node.item.value\n        }));\n        return res;\n    }\n\n    /**\n     * Returns true if tree is empty\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return (this.root == null || this.root == this.nil_node);\n    }\n\n    /**\n     * Clear tree\n     */\n    clear() {\n        this.root = null;\n    }\n\n    /**\n     * Insert new item into interval tree\n     * @param {Interval} key - interval object or array of two numbers [low, high]\n     * @param {any} value - value representing any object (optional)\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\n     */\n    insert(key, value = key) {\n        if (key === undefined) return;\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\n        this.tree_insert(insert_node);\n        this.recalc_max(insert_node);\n        return insert_node;\n    }\n\n    /**\n     * Returns true if item {key,value} exist in the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object to be checked\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\n     */\n    exist(key, value = key) {\n        let search_node = new Node(key, value);\n        return this.tree_search(this.root, search_node) ? true : false;\n    }\n\n    /**\n     * Remove entry {key, value} from the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object\n     * @returns {boolean} true if item {key, value} deleted, false if not found\n     */\n    remove(key, value = key) {\n        let search_node = new Node(key, value);\n        let delete_node = this.tree_search(this.root, search_node);\n        if (delete_node) {\n            this.tree_delete(delete_node);\n        }\n        return delete_node;\n    }\n\n    /**\n     * Returns array of entry values which keys intersect with given interval <br/>\n     * If no values stored in the tree, returns array of keys which intersect given interval\n     * @param {Interval} interval - search interval, or tuple [low, high]\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\n     * @returns {Array}\n     */\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\n        let search_node = new Node(interval);\n        let resp_nodes = [];\n        this.tree_search_interval(this.root, search_node, resp_nodes);\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\n    }\n\n    /**\n     * Returns true if intersection between given and any interval stored in the tree found\n     * @param {Interval} interval - search interval or tuple [low, high]\n     * @returns {boolean}\n     */\n    intersect_any(interval) {\n        let search_node = new Node(interval);\n        let found = this.tree_find_any_interval(this.root, search_node);\n        return found;\n    }\n\n    /**\n     * Tree visitor. For each node implement a callback function. <br/>\n     * Method calls a callback function with two parameters (key, value)\n     * @param visitor(key,value) - function to be called for each tree item\n     */\n    forEach(visitor) {\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\n    }\n\n    /** Value Mapper. Walk through every node and map node value to another value\n    * @param callback(value,key) - function to be called for each tree item\n    */\n    map(callback) {\n        const tree = new IntervalTree();\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\n        return tree;\n    }\n\n    recalc_max(node) {\n        let node_current = node;\n        while (node_current.parent != null) {\n            node_current.parent.update_max();\n            node_current = node_current.parent;\n        }\n    }\n\n    tree_insert(insert_node) {\n        let current_node = this.root;\n        let parent_node = null;\n\n        if (this.root == null || this.root == this.nil_node) {\n            this.root = insert_node;\n        }\n        else {\n            while (current_node != this.nil_node) {\n                parent_node = current_node;\n                if (insert_node.less_than(current_node)) {\n                    current_node = current_node.left;\n                }\n                else {\n                    current_node = current_node.right;\n                }\n            }\n\n            insert_node.parent = parent_node;\n\n            if (insert_node.less_than(parent_node)) {\n                parent_node.left = insert_node;\n            }\n            else {\n                parent_node.right = insert_node;\n            }\n        }\n\n        this.insert_fixup(insert_node);\n    }\n\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\n// Go upwords to the root and re-color until violation will be resolved\n    insert_fixup(insert_node) {\n        let current_node;\n        let uncle_node;\n\n        current_node = insert_node;\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {                                                    // Case 2 & 3. Uncle is black\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\n                        // This case is transformed into Case 3.\n                        current_node = current_node.parent;\n                        this.rotate_left(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\n                    // Re-color father and grandfather, rotate grandfather right\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_right(current_node.parent.parent);\n                }\n            }\n            else {                                                         // parent is right child of grandfather\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\n                        // Transform into case 6\n                        current_node = current_node.parent;\n                        this.rotate_right(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\n                    // Re-color father and grandfather, rotate grandfather left\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_left(current_node.parent.parent);\n                }\n            }\n        }\n\n        this.root.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_delete(delete_node) {\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\n\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\n            cut_node = delete_node;\n        }\n        else {                                                    // delete_node has 2 children\n            cut_node = this.tree_successor(delete_node);\n        }\n\n        // fix_node if single child of cut_node\n        if (cut_node.left != this.nil_node) {\n            fix_node = cut_node.left;\n        }\n        else {\n            fix_node = cut_node.right;\n        }\n\n        // remove cut_node from parent\n        /*if (fix_node != this.nil_node) {*/\n            fix_node.parent = cut_node.parent;\n        /*}*/\n\n        if (cut_node == this.root) {\n            this.root = fix_node;\n        }\n        else {\n            if (cut_node == cut_node.parent.left) {\n                cut_node.parent.left = fix_node;\n            }\n            else {\n                cut_node.parent.right = fix_node;\n            }\n            cut_node.parent.update_max();        // update max property of the parent\n        }\n\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\n\n        // COPY DATA !!!\n        // Delete_node becomes cut_node, it means that we cannot hold reference\n        // to node in outer structure and we will have to delete by key, additional search need\n        if (cut_node != delete_node) {\n            delete_node.copy_data(cut_node);\n            delete_node.update_max();           // update max property of the cut node at the new place\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\n        }\n\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\n            this.delete_fixup(fix_node);\n        }\n    }\n\n    delete_fixup(fix_node) {\n        let current_node = fix_node;\n        let brother_node;\n\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\n            if (current_node == current_node.parent.left) {          // fix node is left child\n                brother_node = current_node.parent.right;\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_left(current_node.parent);\n                    brother_node = current_node.parent.right;                      // update brother\n                }\n                // Derive to cases 2..4: brother is black\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\n                    current_node = current_node.parent;                  // continue iteration\n                }\n                else {\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\n                        this.rotate_right(brother_node);\n                        brother_node = current_node.parent.right;                     // update brother\n                        // Derive to case 4: left nephew black, right nephew red\n                    }\n                    // case 4: left nephew black, right nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_left(current_node.parent);\n                    current_node = this.root;                         // exit from loop\n                }\n            }\n            else {                                             // fix node is right child\n                brother_node = current_node.parent.left;\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_right(current_node.parent);\n                    brother_node = current_node.parent.left;                        // update brother\n                }\n                // Go to cases 2..4\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\n                    current_node = current_node.parent;                              // continue iteration\n                }\n                else {\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\n                        this.rotate_left(brother_node);\n                        brother_node = current_node.parent.left;                        // update brother\n                        // Derive to case 4: right nephew black, left nephew red\n                    }\n                    // case 4: right nephew black, left nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_right(current_node.parent);\n                    current_node = this.root;                               // force exit from loop\n                }\n            }\n        }\n\n        current_node.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_search(node, search_node) {\n        if (node == null || node == this.nil_node)\n            return undefined;\n\n        if (search_node.equal_to(node)) {\n            return node;\n        }\n        if (search_node.less_than(node)) {\n            return this.tree_search(node.left, search_node);\n        }\n        else {\n            return this.tree_search(node.right, search_node);\n        }\n    }\n\n    // Original search_interval method; container res support push() insertion\n    // Search all intervals intersecting given one\n    tree_search_interval(node, search_node, res) {\n        if (node != null && node != this.nil_node) {\n            // if (node->left != this.nil_node && node->left->max >= low) {\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                this.tree_search_interval(node.left, search_node, res);\n            }\n            // if (low <= node->high && node->low <= high) {\n            if (node.intersect(search_node)) {\n                res.push(node);\n            }\n            // if (node->right != this.nil_node && node->low <= high) {\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                this.tree_search_interval(node.right, search_node, res);\n            }\n        }\n    }\n\n    tree_find_any_interval(node, search_node) {\n        let found = false;\n        if (node != null && node != this.nil_node) {\n            // if (node->left != this.nil_node && node->left->max >= low) {\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.left, search_node);\n            }\n            // if (low <= node->high && node->low <= high) {\n            if (!found) {\n                found = node.intersect(search_node);\n            }\n            // if (node->right != this.nil_node && node->low <= high) {\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.right, search_node);\n            }\n        }\n        return found;\n    }\n\n    local_minimum(node) {\n        let node_min = node;\n        while (node_min.left != null && node_min.left != this.nil_node) {\n            node_min = node_min.left;\n        }\n        return node_min;\n    }\n\n    // not in use\n    local_maximum(node) {\n        let node_max = node;\n        while (node_max.right != null && node_max.right != this.nil_node) {\n            node_max = node_max.right;\n        }\n        return node_max;\n    }\n\n    tree_successor(node) {\n        let node_successor;\n        let current_node;\n        let parent_node;\n\n        if (node.right != this.nil_node) {\n            node_successor = this.local_minimum(node.right);\n        }\n        else {\n            current_node = node;\n            parent_node = node.parent;\n            while (parent_node != null && parent_node.right == current_node) {\n                current_node = parent_node;\n                parent_node = parent_node.parent;\n            }\n            node_successor = parent_node;\n        }\n        return node_successor;\n    }\n\n    //           |            right-rotate(T,y)       |\n    //           y            ---------------.       x\n    //          / \\                                  / \\\n    //         x   c          left-rotate(T,x)      a   y\n    //        / \\             <---------------         / \\\n    //       a   b                                    b   c\n\n    rotate_left(x) {\n        let y = x.right;\n\n        x.right = y.left;           // b goes to x.right\n\n        if (y.left != this.nil_node) {\n            y.left.parent = x;     // x becomes parent of b\n        }\n        y.parent = x.parent;       // move parent\n\n        if (x == this.root) {\n            this.root = y;           // y becomes root\n        }\n        else {                        // y becomes child of x.parent\n            if (x == x.parent.left) {\n                x.parent.left = y;\n            }\n            else {\n                x.parent.right = y;\n            }\n        }\n        y.left = x;                 // x becomes left child of y\n        x.parent = y;               // and y becomes parent of x\n\n        if (x != null && x != this.nil_node) {\n            x.update_max();\n        }\n\n        y = x.parent;\n        if (y != null && y != this.nil_node) {\n            y.update_max();\n        }\n    }\n\n    rotate_right(y) {\n        let x = y.left;\n\n        y.left = x.right;           // b goes to y.left\n\n        if (x.right != this.nil_node) {\n            x.right.parent = y;        // y becomes parent of b\n        }\n        x.parent = y.parent;          // move parent\n\n        if (y == this.root) {        // x becomes root\n            this.root = x;\n        }\n        else {                        // y becomes child of x.parent\n            if (y == y.parent.left) {\n                y.parent.left = x;\n            }\n            else {\n                y.parent.right = x;\n            }\n        }\n        x.right = y;                 // y becomes right child of x\n        y.parent = x;               // and x becomes parent of y\n\n        if (y != null && y != this.nil_node) {\n            y.update_max();\n        }\n\n        x = y.parent;\n        if (x != null && x != this.nil_node) {\n            x.update_max();\n        }\n    }\n\n    tree_walk(node, action) {\n        if (node != null && node != this.nil_node) {\n            this.tree_walk(node.left, action);\n            // arr.push(node.toArray());\n            action(node);\n            this.tree_walk(node.right, action);\n        }\n    }\n\n    /* Return true if all red nodes have exactly two black child nodes */\n    testRedBlackProperty() {\n        let res = true;\n        this.tree_walk(this.root, function (node) {\n            if (node.color == RB_TREE_COLOR_RED) {\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\n                    res = false;\n                }\n            }\n        });\n        return res;\n    }\n\n    /* Throw error if not every path from root to bottom has same black height */\n    testBlackHeightProperty(node) {\n        let height = 0;\n        let heightLeft = 0;\n        let heightRight = 0;\n        if (node.color == RB_TREE_COLOR_BLACK) {\n            height++;\n        }\n        if (node.left != this.nil_node) {\n            heightLeft = this.testBlackHeightProperty(node.left);\n        }\n        else {\n            heightLeft = 1;\n        }\n        if (node.right != this.nil_node) {\n            heightRight = this.testBlackHeightProperty(node.right);\n        }\n        else {\n            heightRight = 1;\n        }\n        if (heightLeft != heightRight) {\n            throw new Error('Red-black height property violated');\n        }\n        height += heightLeft;\n        return height;\n    };\n}\n\nexport { Interval, Node, IntervalTree as default };\n"],"names":["Interval","low","high","_classCallCheck","this","_createClass","key","value","get","clone","other_interval","not_intersect","undefined","Math","min","max","interval1","interval2","merge","val1","val2","Node","arguments","length","left","right","parent","color","item","Array","Number","isNaN","other_node","less_than","equal_to","_value_less_than","_value_equal","intersect","comparable_max","constructor","search_node","comparable_less_than","IntervalTree","root","nil_node","count","tree_walk","res","node","push","output","insert_node","tree_insert","recalc_max","tree_search","delete_node","tree_delete","interval","outputMapperFn","resp_nodes","tree_search_interval","map","tree_find_any_interval","visitor","callback","tree","insert","node_current","update_max","current_node","parent_node","insert_fixup","uncle_node","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","not_intersect_left_subtree","not_intersect_right_subtree","found","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","testBlackHeightProperty","Error"],"sourceRoot":""}