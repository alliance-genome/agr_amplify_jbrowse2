{"version":3,"file":"static/js/7194.c06d0e14.chunk.js","mappings":"qPAYMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,KAAM,CACJC,MAAO,KAGTC,MAAO,CACLC,OAAQJ,EAAMK,QAAQ,IAEzB,IAwDD,WAAeC,EAAAA,EAAAA,WAtDf,SAAyB,GASrB,IARFC,EAAK,EAALA,MACAC,EAAW,EAAXA,YAQQC,EAAYX,IAAZW,QACR,EAA2BF,EAAnBG,UAAAA,OAAS,MAAG,GAAE,EACtB,GAAsBC,EAAAA,EAAAA,UAAS,GAAD,OAAID,IAAY,eAAvCE,EAAG,KAAEC,EAAM,KAElB,OACE,SAAC,EAAAC,OAAM,CAACC,MAAI,EAACC,QAASR,EAAaS,MAAM,iBAAgB,UACvD,UAAC,IAAa,CAACC,UAAWT,EAAQR,KAAK,WACrC,SAAC,IAAU,UAAC,8GAIZ,SAAC,IAAS,CACRkB,MAAOP,EACPQ,SAAU,SAAAC,GAAK,OAAIR,EAAOQ,EAAMC,OAAOH,MAAM,EAC7CI,YAAY,qBAEd,UAAC,IAAa,YACZ,SAAC,IAAM,CACLC,QAAQ,YACRC,MAAM,UACNC,KAAK,SACLC,WAAS,EACTC,QAAS,WACPrB,EAAMsB,aACI,KAARjB,GAAekB,OAAOC,OAAOnB,QAAcoB,GAANpB,GAEvCJ,GACF,EAAE,SACH,YAGD,SAAC,IAAM,CACLgB,QAAQ,YACRC,MAAM,YACNG,QAAS,kBAAMpB,GAAa,EAAC,SAC9B,kBAOX,G","sources":["../../../plugins/linear-genome-view/src/LinearBasicDisplay/components/SetMaxHeight.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Typography,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    width: 500,\n  },\n\n  field: {\n    margin: theme.spacing(2),\n  },\n}))\n\nfunction SetMaxHeightDlg({\n  model,\n  handleClose,\n}: {\n  model: {\n    maxHeight?: number\n    setMaxHeight: Function\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { maxHeight = '' } = model\n  const [max, setMax] = useState(`${maxHeight}`)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Set max height\">\n      <DialogContent className={classes.root}>\n        <Typography>\n          Set max height for the track. For example, you can increase this if\n          the layout says &quot;Max height reached&quot;\n        </Typography>\n        <TextField\n          value={max}\n          onChange={event => setMax(event.target.value)}\n          placeholder=\"Enter max score\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            autoFocus\n            onClick={() => {\n              model.setMaxHeight(\n                max !== '' && !Number.isNaN(+max) ? +max : undefined,\n              )\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(SetMaxHeightDlg)\n"],"names":["useStyles","makeStyles","theme","root","width","field","margin","spacing","observer","model","handleClose","classes","maxHeight","useState","max","setMax","Dialog","open","onClose","title","className","value","onChange","event","target","placeholder","variant","color","type","autoFocus","onClick","setMaxHeight","Number","isNaN","undefined"],"sourceRoot":""}