{"version":3,"file":"static/js/9589.12296570.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\nimport { LoadingEllipses } from '@jbrowse/core/ui'\n\nconst ConfigureConnection = observer(\n  (props: {\n    connectionType: ConnectionType\n    model: AnyConfigurationModel\n    session: AbstractSessionModel\n  }) => {\n    const { connectionType, model, session } = props\n    const ConfigEditorComponent =\n      connectionType.configEditorComponent || ConfigurationEditor\n\n    return (\n      <Suspense fallback={<LoadingEllipses />}>\n        <ConfigEditorComponent model={{ target: model }} session={session} />\n      </Suspense>\n    )\n  },\n)\n\nexport default ConfigureConnection\n","import React, { useEffect } from 'react'\nimport { IconButton, MenuItem, TextField } from '@mui/material'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\n// icons\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'\n\nfunction ConnectionTypeSelect(props: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType?: ConnectionType\n  setConnectionType: (c?: ConnectionType) => void\n}) {\n  const { connectionTypeChoices, connectionType, setConnectionType } = props\n\n  useEffect(() => {\n    if (!connectionType) {\n      setConnectionType(connectionTypeChoices[0])\n    }\n  })\n\n  return (\n    <form autoComplete=\"off\">\n      {connectionType ? (\n        <TextField\n          value={connectionType.name}\n          label=\"connectionType\"\n          helperText={\n            connectionType.description ? (\n              <>\n                {connectionType.description}\n                {connectionType.url ? (\n                  <IconButton\n                    href={connectionType.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <OpenInNewIcon />\n                  </IconButton>\n                ) : null}\n              </>\n            ) : null\n          }\n          select\n          fullWidth\n          onChange={event =>\n            setConnectionType(\n              connectionTypeChoices.find(c => c.name === event.target.value),\n            )\n          }\n          variant=\"outlined\"\n        >\n          {connectionTypeChoices.map(c => (\n            <MenuItem key={c.name} value={c.name}>\n              {c.displayName || c.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : null}\n    </form>\n  )\n}\n\nexport default ConnectionTypeSelect\n","import React, { useState } from 'react'\nimport { getSession, getEnv } from '@jbrowse/core/util'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\n// locals\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nfunction AddConnectionWidget({ model }: { model: unknown }) {\n  const [connectionType, setConnectionType] = useState<ConnectionType>()\n  const [configModel, setConfigModel] = useState<AnyConfigurationModel>()\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n\n  const session = getSession(model)\n\n  const { pluginManager } = getEnv(session)\n\n  function stepContent() {\n    switch (activeStep) {\n      case 0:\n        return (\n          <ConnectionTypeSelect\n            connectionTypeChoices={\n              pluginManager.getElementTypesInGroup(\n                'connection',\n              ) as ConnectionType[]\n            }\n            connectionType={connectionType}\n            setConnectionType={c => {\n              setConnectionType(c)\n              if (c) {\n                setConfigModel(\n                  c.configSchema.create(\n                    {\n                      connectionId: `${c.name}-${Date.now()}`,\n                    },\n                    getEnv(model),\n                  ),\n                )\n              }\n            }}\n          />\n        )\n      case 1:\n        return connectionType && configModel ? (\n          <ConfigureConnection\n            connectionType={connectionType}\n            model={configModel}\n            session={session}\n          />\n        ) : null\n\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep === steps.length - 1) {\n      handleFinish()\n    } else {\n      setActiveStep(activeStep + 1)\n    }\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function handleFinish() {\n    const connectionConf = session.addConnectionConf(configModel)\n    if (session.makeConnection) {\n      session.makeConnection(connectionConf)\n    }\n    session.hideWidget(model)\n  }\n\n  function checkNextEnabled() {\n    return (\n      (activeStep === 0 && connectionType) || (activeStep === 1 && configModel)\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {stepContent()}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={!checkNextEnabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddConnectionWidget)\n"],"names":["observer","props","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","_jsx","Suspense","fallback","LoadingEllipses","children","target","connectionTypeChoices","setConnectionType","useEffect","autoComplete","TextField","value","name","label","helperText","description","_jsxs","_Fragment","url","IconButton","href","rel","OpenInNewIcon","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","_ref","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","configModel","setConfigModel","_useState5","_useState6","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","stepContent","ConnectionTypeSelect","getElementTypesInGroup","configSchema","create","connectionId","concat","Date","now","ConfigureConnection","Typography","handleNext","length","connectionConf","addConnectionConf","makeConnection","hideWidget","handleFinish","handleBack","className","Stepper","orientation","Step","StepLabel","StepContent","Button","disabled","onClick","color"],"sourceRoot":""}