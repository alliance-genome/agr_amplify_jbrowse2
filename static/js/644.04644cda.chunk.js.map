{"version":3,"file":"static/js/644.04644cda.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","arg","this","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","i","length","entry","qname","tname","quals","len","push","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAF","text","split","filter","line","_line$split","_line$split2","_toArray","qstart","qend","strand","tstart","tend","numMatches","fields","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","op","parseCigar","PAFAdapter","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_this2","wrap","_context","prev","next","setupPre","catch","e","undefined","abrupt","stop","_x","_setupPre","_callee2","pm","pafLocation","buffer","buf","_context2","pluginManager","openLocation","getConf","readFile","sent","isGzip","unzip","t0","Error","TextDecoder","fatal","decode","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","from","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","_readFile","file","t1","t2","a"],"sourceRoot":""}