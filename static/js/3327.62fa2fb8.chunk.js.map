{"version":3,"file":"static/js/3327.62fa2fb8.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/util.ts","../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["const decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\n/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport function paf_delta2paf(buffer: Buffer) {\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n\n  let blockStart = 0\n  let i = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    blockStart = n + 1\n    i++\n    if (line) {\n      const m = regex.exec(line)\n      if (m !== null) {\n        rname = m[1]\n        qname = m[2]\n        seen_gt = true\n        continue\n      }\n      if (!seen_gt) {\n        continue\n      }\n      const t = line.split(' ')\n      if (t.length === 7) {\n        const t0 = +t[0]\n        const t1 = +t[1]\n        const t2 = +t[2]\n        const t3 = +t[3]\n        const t4 = +t[4]\n        strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n        rs = +(t0 < t1 ? t0 : t1) - 1\n        re = +(t1 > t0 ? t1 : t0)\n        qs = +(t2 < t3 ? t2 : t3) - 1\n        qe = +(t3 > t2 ? t3 : t2)\n        x = y = 0\n        NM = t4\n        cigar = []\n      } else if (t.length === 1) {\n        const d = +t[0]\n        if (d === 0) {\n          let blen = 0\n          const cigar_str = []\n\n          if (re - rs - x !== qe - qs - y) {\n            throw new Error(`inconsistent alignment on line ${i}`)\n          }\n          cigar.push((re - rs - x) << 4)\n          for (const entry of cigar) {\n            const rlen = entry >> 4\n            blen += rlen\n            cigar_str.push(rlen + 'MID'.charAt(cigar[i] & 0xf))\n          }\n\n          records.push({\n            qname,\n            qstart: qs,\n            qend: qe,\n            tname: rname,\n            tstart: rs,\n            tend: re,\n            strand,\n            extra: {\n              numMatches: blen - NM,\n              blockLen: blen,\n              mappingQual: 0,\n              NM,\n              cg: cigar_str.join(''),\n            },\n          })\n        } else if (d > 0) {\n          const l = d - 1\n          x += l + 1\n          y += l\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n          // eslint-disable-next-line unicorn/prefer-at\n          if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 2) {\n            cigar[cigar.length - 1] += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 2)\n          } // deletion\n        } else {\n          const l = -d - 1\n          x += l\n          y += l + 1\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n          // eslint-disable-next-line unicorn/prefer-at\n          if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 1) {\n            cigar[cigar.length - 1] += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 1)\n          } // insertion\n        }\n      }\n    }\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_delta2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return paf_delta2paf(buf)\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["decoder","TextDecoder","undefined","paf_delta2paf","buffer","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","blockStart","i","length","n","indexOf","b","slice","line","decode","toString","trim","m","exec","t","split","t0","t1","t2","t3","d","blen","cigar_str","Error","concat","push","_step","_iterator","_createForOfIteratorHelper","s","done","rlen","value","charAt","err","e","f","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","isGzip","buf","DeltaAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","loc","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","abrupt","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","entry","quals","len","_step2","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","val","weightedMean","zip","_iterator2","meanScore","_step3","min","max","_iterator3","Math","_step4","_iterator4","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","_line$split","_line$split2","_toArray","fields","rest","field","r","_objectSpread","flipCigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","setupP","_setup","_this2","setupPre","catch","_callee2","pm","pafLocation","_context2","parseLineByLine","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","_objectWithoutProperties","_excluded","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","fatal","a","cb"],"sourceRoot":""}