{"version":3,"file":"static/js/6959.209a1d83.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/bgzf-filehandle/src/unzip-pako.ts","../../../node_modules/@gmod/bgzf-filehandle/node_modules/long/index.js","../../../node_modules/@gmod/bgzf-filehandle/src/gziIndex.ts","../../../node_modules/@gmod/bgzf-filehandle/src/bgzFilehandle.ts"],"sourcesContent":["//@ts-ignore\nimport { Z_SYNC_FLUSH, Inflate } from 'pako'\n\ninterface VirtualOffset {\n  blockPosition: number\n  dataPosition: number\n}\ninterface Chunk {\n  minv: VirtualOffset\n  maxv: VirtualOffset\n}\n\n// browserify-zlib, which is the zlib shim used by default in webpacked code,\n// does not properly uncompress bgzf chunks that contain more than\n// one bgzf block, so export an unzip function that uses pako directly\n// if we are running in a browser.\nasync function unzip(inputData: Buffer) {\n  try {\n    let strm\n    let pos = 0\n    let i = 0\n    const chunks = []\n    let totalSize = 0\n    let inflator\n    do {\n      const remainingInput = inputData.subarray(pos)\n      inflator = new Inflate()\n      //@ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      pos += strm.next_in\n      chunks[i] = inflator.result as Uint8Array\n      totalSize += chunks[i].length\n      i += 1\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    return Buffer.from(result)\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to pakounzip, except it does extra counting\n// to return the positions of compressed and decompressed\n// data offsets\nasync function unzipChunk(inputData: Buffer) {\n  try {\n    let strm\n    let cpos = 0\n    let dpos = 0\n    const blocks = []\n    const cpositions = []\n    const dpositions = []\n    do {\n      const remainingInput = inputData.slice(cpos)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = Buffer.from(inflator.result)\n      blocks.push(buffer)\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n\n      cpos += strm.next_in\n      dpos += buffer.length\n    } while (strm.avail_in)\n\n    const buffer = Buffer.concat(blocks)\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to unzipChunk above but slices (0,minv.dataPosition) and\n// (maxv.dataPosition,end) off\nasync function unzipChunkSlice(inputData: Buffer, chunk: Chunk) {\n  try {\n    let strm\n    const { minv, maxv } = chunk\n    let cpos = minv.blockPosition\n    let dpos = minv.dataPosition\n    const chunks = []\n    const cpositions = []\n    const dpositions = []\n\n    let totalSize = 0\n    let i = 0\n    do {\n      const remainingInput = inputData.subarray(cpos - minv.blockPosition)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = inflator.result\n      chunks.push(buffer as Uint8Array)\n      let len = buffer.length\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n      if (chunks.length === 1 && minv.dataPosition) {\n        // this is the first chunk, trim it\n        chunks[0] = chunks[0].subarray(minv.dataPosition)\n        len = chunks[0].length\n      }\n      const origCpos = cpos\n      cpos += strm.next_in\n      dpos += len\n\n      if (origCpos >= maxv.blockPosition) {\n        // this is the last chunk, trim it and stop decompressing\n        // note if it is the same block is minv it subtracts that already\n        // trimmed part of the slice length\n\n        chunks[i] = chunks[i].subarray(\n          0,\n          maxv.blockPosition === minv.blockPosition\n            ? maxv.dataPosition - minv.dataPosition + 1\n            : maxv.dataPosition + 1,\n        )\n\n        cpositions.push(cpos)\n        dpositions.push(dpos)\n        totalSize += chunks[i].length\n        break\n      }\n      totalSize += chunks[i].length\n      i++\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    const buffer = Buffer.from(result)\n\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\nfunction nodeUnzip() {\n  throw new Error('nodeUnzip not implemented.')\n}\n\nexport { unzip, unzipChunk, unzipChunkSlice, unzip as pakoUnzip, nodeUnzip }\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","import Long from 'long'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\n// const COMPRESSED_POSITION = 0\nconst UNCOMPRESSED_POSITION = 1\n\nexport default class GziIndex {\n  filehandle: GenericFilehandle\n\n  index?: any\n\n  constructor({\n    filehandle,\n    path,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n  }\n\n  _readLongWithOverflow(buf: Buffer, offset = 0, unsigned = true) {\n    //@ts-ignore\n    const long = Long.fromBytesLE(buf.slice(offset, offset + 8), unsigned)\n    if (\n      long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n      long.lessThan(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new TypeError('integer overflow')\n    }\n\n    return long.toNumber()\n  }\n\n  _getIndex() {\n    if (!this.index) {\n      this.index = this._readIndex()\n    }\n    return this.index\n  }\n\n  async _readIndex() {\n    let buf = Buffer.allocUnsafe(8)\n    await this.filehandle.read(buf, 0, 8, 0)\n    const numEntries = this._readLongWithOverflow(buf, 0, true)\n    if (!numEntries) {\n      return [[0, 0]]\n    }\n\n    const entries = new Array(numEntries + 1)\n    entries[0] = [0, 0]\n\n    // TODO rewrite this to make an index-index that stays in memory\n    const bufSize = 8 * 2 * numEntries\n    if (bufSize > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError('integer overflow')\n    }\n    buf = Buffer.allocUnsafe(bufSize)\n    await this.filehandle.read(buf, 0, bufSize, 8)\n    for (let entryNumber = 0; entryNumber < numEntries; entryNumber += 1) {\n      const compressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16,\n      )\n      const uncompressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16 + 8,\n      )\n      entries[entryNumber + 1] = [compressedPosition, uncompressedPosition]\n    }\n\n    return entries\n  }\n\n  async getLastBlock() {\n    const entries = await this._getIndex()\n    if (!entries.length) {\n      return undefined\n    }\n    return entries[entries.length - 1]\n  }\n\n  async getRelevantBlocksForRead(length: number, position: number) {\n    const endPosition = position + length\n    if (length === 0) {\n      return []\n    }\n    const entries = await this._getIndex()\n    const relevant = []\n\n    // binary search to find the block that the\n    // read starts in and extend forward from that\n    const compare = (entry: any, nextEntry: any) => {\n      const uncompressedPosition = entry[UNCOMPRESSED_POSITION]\n      const nextUncompressedPosition = nextEntry\n        ? nextEntry[UNCOMPRESSED_POSITION]\n        : Infinity\n      // block overlaps read start\n      if (\n        uncompressedPosition <= position &&\n        nextUncompressedPosition > position\n      ) {\n        return 0\n        // block is before read start\n      }\n      if (uncompressedPosition < position) {\n        return -1\n      }\n      // block is after read start\n      return 1\n    }\n\n    let lowerBound = 0\n    let upperBound = entries.length - 1\n    let searchPosition = Math.floor(entries.length / 2)\n\n    let comparison = compare(\n      entries[searchPosition],\n      entries[searchPosition + 1],\n    )\n    while (comparison !== 0) {\n      if (comparison > 0) {\n        upperBound = searchPosition - 1\n      } else if (comparison < 0) {\n        lowerBound = searchPosition + 1\n      }\n      searchPosition = Math.ceil((upperBound - lowerBound) / 2) + lowerBound\n      comparison = compare(entries[searchPosition], entries[searchPosition + 1])\n    }\n\n    // here's where we read forward\n    relevant.push(entries[searchPosition])\n    let i = searchPosition + 1\n    for (; i < entries.length; i += 1) {\n      relevant.push(entries[i])\n      if (entries[i][UNCOMPRESSED_POSITION] >= endPosition) {\n        break\n      }\n    }\n    if (relevant[relevant.length - 1][UNCOMPRESSED_POSITION] < endPosition) {\n      relevant.push([])\n    }\n    return relevant\n  }\n}\n","import { unzip } from './unzip'\nimport GziIndex from './gziIndex'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\nexport default class BgzFilehandle {\n  filehandle: GenericFilehandle\n  gzi: GziIndex\n\n  constructor({\n    filehandle,\n    path,\n    gziFilehandle,\n    gziPath,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n    gziFilehandle?: GenericFilehandle\n    gziPath?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n\n    if (!gziFilehandle && !gziPath && !path) {\n      throw new TypeError('either gziFilehandle or gziPath must be defined')\n    }\n\n    this.gzi = new GziIndex({\n      filehandle: gziFilehandle,\n      path: !gziFilehandle && !gziPath && path ? gziPath : `${path}.gzi`,\n    })\n  }\n\n  async stat() {\n    const compressedStat = await this.filehandle.stat()\n    return Object.assign(compressedStat, {\n      size: await this.getUncompressedFileSize(),\n      blocks: undefined,\n      blksize: undefined,\n    })\n  }\n\n  async getUncompressedFileSize() {\n    // read the last block's ISIZE (see gzip RFC),\n    // and add it to its uncompressedPosition\n    const [, uncompressedPosition] = await this.gzi.getLastBlock()\n\n    const { size } = await this.filehandle.stat()\n\n    const buf = Buffer.allocUnsafe(4)\n    // note: there should be a 28-byte EOF marker (an empty block) at\n    // the end of the file, so we skip backward past that\n    const { bytesRead } = await this.filehandle.read(buf, 0, 4, size - 28 - 4)\n    if (bytesRead !== 4) {\n      throw new Error('read error')\n    }\n    const lastBlockUncompressedSize = buf.readUInt32LE(0)\n    return uncompressedPosition + lastBlockUncompressedSize\n  }\n\n  async _readAndUncompressBlock(\n    blockBuffer: Buffer,\n    [compressedPosition]: [number],\n    [nextCompressedPosition]: [number],\n  ) {\n    let next = nextCompressedPosition\n    if (!next) {\n      next = (await this.filehandle.stat()).size\n    }\n\n    // read the compressed data into the block buffer\n    const blockCompressedLength = next - compressedPosition\n\n    await this.filehandle.read(\n      blockBuffer,\n      0,\n      blockCompressedLength,\n      compressedPosition,\n    )\n\n    // uncompress it\n    const unzippedBuffer = await unzip(\n      blockBuffer.slice(0, blockCompressedLength),\n    )\n\n    return unzippedBuffer as Buffer\n  }\n\n  async read(buf: Buffer, offset: number, length: number, position: number) {\n    // get the block positions for this read\n    const blockPositions = await this.gzi.getRelevantBlocksForRead(\n      length,\n      position,\n    )\n    const blockBuffer = Buffer.allocUnsafe(32768 * 2)\n    // uncompress the blocks and read from them one at a time to keep memory usage down\n    let destinationOffset = offset\n    let bytesRead = 0\n    for (\n      let blockNum = 0;\n      blockNum < blockPositions.length - 1;\n      blockNum += 1\n    ) {\n      // eslint-disable-next-line no-await-in-loop\n      const uncompressedBuffer = await this._readAndUncompressBlock(\n        blockBuffer,\n        blockPositions[blockNum],\n        blockPositions[blockNum + 1],\n      )\n      const [, uncompressedPosition] = blockPositions[blockNum]\n      const sourceOffset =\n        uncompressedPosition >= position ? 0 : position - uncompressedPosition\n      const sourceEnd =\n        Math.min(\n          position + length,\n          uncompressedPosition + uncompressedBuffer.length,\n        ) - uncompressedPosition\n      if (sourceOffset >= 0 && sourceOffset < uncompressedBuffer.length) {\n        uncompressedBuffer.copy(buf, destinationOffset, sourceOffset, sourceEnd)\n        destinationOffset += sourceEnd - sourceOffset\n        bytesRead += sourceEnd - sourceOffset\n      }\n    }\n\n    return { bytesRead, buffer: buf }\n  }\n}\n"],"names":["unzip","inputData","pos","i","chunks","totalSize","remainingInput","subarray","inflator","Inflate","strm","push","Z_SYNC_FLUSH","err","Error","msg","next_in","result","length","avail_in","Uint8Array","offset","set","Buffer","from","match","unzipChunk","cpos","dpos","blocks","cpositions","dpositions","slice","buffer","concat","unzipChunkSlice","chunk","minv","maxv","blockPosition","dataPosition","len","origCpos","wasm","WebAssembly","Instance","Module","exports","e","Long","low","high","unsigned","this","isLong","obj","ctz32","value","c","Math","clz32","prototype","__isLong__","Object","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","RangeError","p","indexOf","substring","radixToPower","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","res","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","GziIndex","filehandle","path","TypeError","LocalFile","buf","long","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","index","_readIndex","allocUnsafe","read","numEntries","_readLongWithOverflow","entries","Array","bufSize","entryNumber","compressedPosition","uncompressedPosition","_getIndex","undefined","position","endPosition","relevant","entry","nextEntry","nextUncompressedPosition","Infinity","lowerBound","upperBound","searchPosition","comparison","BgzFilehandle","gziFilehandle","gziPath","gzi","stat","compressedStat","getUncompressedFileSize","blksize","assign","getLastBlock","bytesRead","lastBlockUncompressedSize","readUInt32LE","blockBuffer","nextCompressedPosition","next","blockCompressedLength","unzippedBuffer","getRelevantBlocksForRead","blockPositions","destinationOffset","blockNum","_readAndUncompressBlock","uncompressedBuffer","sourceOffset","sourceEnd","copy"],"sourceRoot":""}