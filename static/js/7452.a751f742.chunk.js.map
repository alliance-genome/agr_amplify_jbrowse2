{"version":3,"file":"static/js/7452.a751f742.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VcfAdapter/VcfAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region, Feature } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport VCF from '@gmod/vcf'\n\n// local\nimport VcfFeature from '../VcfFeature'\n\nconst readVcf = (f: string) => {\n  const header: string[] = []\n  const rest: string[] = []\n  f.split(/\\n|\\r\\n|\\r/)\n    .map(f => f.trim())\n    .filter(f => !!f)\n    .forEach(line => {\n      if (line.startsWith('#')) {\n        header.push(line)\n      } else if (line) {\n        rest.push(line)\n      }\n    })\n  return { header: header.join('\\n'), lines: rest }\n}\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class VcfAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  protected vcfFeatures?: Promise<{\n    header: string\n    intervalTree: Record<string, IntervalTree>\n  }>\n\n  public async getHeader() {\n    const { header } = await this.setup()\n    return header\n  }\n\n  async getMetadata() {\n    const { header } = await this.setup()\n    const parser = new VCF({ header: header })\n    return parser.getMetadata()\n  }\n\n  // converts lines into an interval tree\n  public async setupP() {\n    const pm = this.pluginManager\n    const buf = await openLocation(this.getConf('vcfLocation'), pm).readFile()\n\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n\n    const str = new TextDecoder().decode(buffer)\n    const { header, lines } = readVcf(str)\n    const intervalTree = {} as Record<string, IntervalTree>\n\n    for (const obj of lines.map((line, id) => {\n      const [refName, startP, , ref, , , , info] = line.split('\\t')\n      const start = +startP - 1\n      const def = start + ref.length\n      const end = +(info.match(/END=(\\d+)/)?.[1].trim() || def)\n      return { line, refName, start, end, id }\n    })) {\n      const key = obj.refName\n      if (!intervalTree[key]) {\n        intervalTree[key] = new IntervalTree()\n      }\n      intervalTree[key].insert([obj.start, obj.end], obj)\n    }\n\n    return { header, intervalTree }\n  }\n\n  public async setup() {\n    if (!this.vcfFeatures) {\n      this.vcfFeatures = this.setupP().catch(e => {\n        this.vcfFeatures = undefined\n        throw e\n      })\n    }\n    return this.vcfFeatures\n  }\n\n  public async getRefNames(_: BaseOptions = {}) {\n    const { intervalTree } = await this.setup()\n    return Object.keys(intervalTree)\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = region\n        const { header, intervalTree } = await this.setup()\n        const parser = new VCF({ header })\n        intervalTree[refName]?.search([start, end]).forEach(f =>\n          observer.next(\n            new VcfFeature({\n              variant: parser.parseLine(f.line),\n              parser,\n              id: `${this.id}-${f.id}`,\n            }),\n          ),\n        )\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["readVcf","f","header","rest","split","map","trim","filter","forEach","line","startsWith","push","join","lines","isGzip","buf","VcfAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","vcfFeatures","_createClass","key","value","_getHeader","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$this$setup","wrap","_context","prev","next","this","setup","sent","abrupt","stop","_getMetadata","_callee2","_yield$this$setup2","parser","_context2","VCF","getMetadata","_setupP","_callee3","pm","buffer","str","_readVcf","intervalTree","_iterator","_step","obj","_context3","pluginManager","openLocation","getConf","readFile","unzip","t0","Error","TextDecoder","decode","_createForOfIteratorHelper","id","_info$match","_line$split","_line$split2","_slicedToArray","refName","startP","ref","info","start","def","end","match","s","n","done","IntervalTree","insert","err","e","_setup","_callee4","_this2","_context4","setupP","catch","undefined","_getRefNames","_callee5","_yield$this$setup3","_args5","_context5","Object","keys","region","_this3","opts","ObservableCreate","_ref","_callee6","observer","_intervalTree$refName","_yield$_this3$setup","_context6","search","VcfFeature","variant","parseLine","complete","error","_x","signal","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}