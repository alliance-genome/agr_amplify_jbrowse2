{"version":3,"file":"static/js/8538.89727371.chunk.js","mappings":"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","sources":["../../../node_modules/@flatten-js/interval-tree/dist/main.esm.js"],"sourcesContent":["/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n/**\r\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\r\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\r\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\r\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\r\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\r\n * This interface is described in typescript definition file *index.d.ts*\r\n *\r\n * Axis aligned rectangle is an example of such interval.\r\n * We may look at rectangle as an interval between its low left and top right corners.\r\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\r\n * of Interval interface implementation\r\n * @type {Interval}\r\n */\r\nconst Interval = class Interval {\r\n    /**\r\n     * Accept two comparable values and creates new instance of interval\r\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\r\n     * @param low\r\n     * @param high\r\n     */\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    /**\r\n     * Clone interval\r\n     * @returns {Interval}\r\n     */\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    /**\r\n     * Propery max returns clone of this interval\r\n     * @returns {Interval}\r\n     */\r\n    get max() {\r\n        return this.clone();   // this.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval less than other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval equals to other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval intersects other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval does not intersect other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    /**\r\n     * Returns new interval merged with other interval\r\n     * @param {Interval} interval - Other interval to merge with\r\n     * @returns {Interval}\r\n     */\r\n    merge(other_interval) {\r\n        return new Interval(\r\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\r\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns how key should return\r\n     */\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    /**\r\n     * Function returns maximum between two comparable values\r\n     * @param interval1\r\n     * @param interval2\r\n     * @returns {Interval}\r\n     */\r\n    static comparable_max(interval1, interval2) {\r\n        return interval1.merge(interval2);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if first value less than second value\r\n     * @param val1\r\n     * @param val2\r\n     * @returns {boolean}\r\n     */\r\n    static comparable_less_than(val1, val2 ) {\r\n        return val1 < val2;\r\n    }\r\n};\n\n/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n// module.exports = {\r\n//     RB_TREE_COLOR_RED: 0,\r\n//     RB_TREE_COLOR_BLACK: 1\r\n// };\r\n\r\nconst RB_TREE_COLOR_RED = 0;\r\nconst RB_TREE_COLOR_BLACK = 1;\n\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nclass Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.less_than(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_less_than = this.item.value && other_node.item.value && this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n                this.item.value < other_node.item.value;\r\n            return this.item.key.less_than(other_node.item.key) ||\r\n                this.item.key.equal_to((other_node.item.key)) && value_less_than;\r\n        }\r\n\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     let item_less_than = this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n        //         this.item.value < other_node.item.value;\r\n        //     return this.item.key.less_than(other_node.item.key) ||\r\n        //         this.item.key.equal_to((other_node.item.key)) && item_less_than;\r\n        // }\r\n        // else {\r\n        //     return this.item.key.less_than(other_node.item.key);\r\n        // }\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.equal_to(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_equal = this.item.value && other_node.item.value && this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n            return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n        }\r\n\r\n        // let value_equal = true;\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n        //         this.item.value == other_node.item.value;\r\n        // }\r\n        // return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key;\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\r\n        return comparable_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\r\n        return comparable_less_than(search_node.item.key.high, low);\r\n    }\r\n}\n\n/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n\r\n// const nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\r\n * @type {IntervalTree}\r\n */\r\nclass IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n        this.nil_node = new Node();\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of sorted keys in the ascending order\r\n     * @returns {Array}\r\n     */\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(\r\n            node.item.key.output ? node.item.key.output() : node.item.key\r\n        ));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return array of values in the ascending keys order\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns array of items (<key,value> pairs) in the ascended keys order\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push({\r\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\r\n            value: node.item.value\r\n        }));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns true if tree is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return (this.root == null || this.root == this.nil_node);\r\n    }\r\n\r\n    /**\r\n     * Clear tree\r\n     */\r\n    clear() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param {Interval} key - interval object or array of two numbers [low, high]\r\n     * @param {any} value - value representing any object (optional)\r\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object to be checked\r\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object\r\n     * @returns {boolean} true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param {Interval} interval - search interval, or tuple [low, high]\r\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\r\n     * @returns {Array}\r\n     */\r\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersection between given and any interval stored in the tree found\r\n     * @param {Interval} interval - search interval or tuple [low, high]\r\n     * @returns {boolean}\r\n     */\r\n    intersect_any(interval) {\r\n        let search_node = new Node(interval);\r\n        let found = this.tree_find_any_interval(this.root, search_node);\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    }\r\n\r\n    /** Value Mapper. Walk through every node and map node value to another value\r\n    * @param callback(value,key) - function to be called for each tree item\r\n    */\r\n    map(callback) {\r\n        const tree = new IntervalTree();\r\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\r\n        return tree;\r\n    }\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == this.nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != this.nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != this.nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != this.nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == this.nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    tree_find_any_interval(node, search_node) {\r\n        let found = false;\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.left, search_node);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (!found) {\r\n                found = node.intersect(search_node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.right, search_node);\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != this.nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != this.nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != this.nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != this.nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != this.nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != this.nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != this.nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != this.nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n}\n\nexport default IntervalTree;\nexport { Node, Interval };\n"],"names":["Interval","low","high","_classCallCheck","this","_createClass","key","value","get","clone","other_interval","not_intersect","undefined","Math","min","max","interval1","interval2","merge","val1","val2","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","arguments","length","left","right","parent","color","item","Array","Number","isNaN","other_node","less_than","value_less_than","equal_to","value_equal","intersect","comparable_max","constructor","search_node","comparable_less_than","IntervalTree","root","nil_node","count","tree_walk","res","node","push","output","insert_node","tree_insert","recalc_max","tree_search","delete_node","tree_delete","interval","outputMapperFn","resp_nodes","tree_search_interval","map","tree_find_any_interval","visitor","callback","tree","insert","node_current","update_max","current_node","parent_node","insert_fixup","uncle_node","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","not_intersect_left_subtree","not_intersect_right_subtree","found","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","testBlackHeightProperty","Error"],"sourceRoot":""}