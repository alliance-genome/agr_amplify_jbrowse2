{"version":3,"file":"static/js/754.7f71e5b4.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/RectBg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ColorLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ScoreLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/YScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import React from 'react'\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport YScaleBars from './YScaleBars'\n\nexport default observer((props: { model: WiggleDisplayModel }) => {\n  const { model } = props\n\n  return (\n    <div>\n      <BaseLinearDisplayComponent {...props} />\n      <YScaleBars model={model} />\n    </div>\n  )\n})\n\nexport { default as YScaleBar } from '../../shared/YScaleBar'\n","import React from 'react'\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} fill={color} />\n}\n\nexport default RectBg\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport RectBg from './RectBg'\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  labelWidth,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  labelWidth: number\n  exportSVG?: boolean\n}) {\n  const {\n    needsCustomLegend,\n    needsScalebar,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (needsScalebar && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => {\n        const boxHeight = Math.min(20, rowHeight)\n        return (\n          <React.Fragment key={`${source.name}-${idx}`}>\n            {needsFullHeightScalebar ? null : (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={legendWidth}\n                height={boxHeight}\n              />\n            )}\n            {source.color ? (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={colorBoxWidth}\n                height={needsCustomLegend ? rowHeight : boxHeight}\n                color={source.color}\n              />\n            ) : null}\n            {canDisplayLabel ? (\n              <text\n                y={idx * rowHeight + 13}\n                x={extraOffset + colorBoxWidth + 2}\n                fontSize={svgFontSize}\n              >\n                {source.name}\n              </text>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n    </>\n  ) : null\n})\n\nexport default ColorLegend\n","import React from 'react'\nimport { measureText, getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport RectBg from './RectBg'\n\ntype LGV = LinearGenomeViewModel\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend =\n    `[${ticks?.values[0]}-${ticks?.values[1]}]` +\n    (scaleType === 'log' ? ' (log scale)' : '')\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nexport default ScoreLegend\n","import React from 'react'\nimport { measureText, getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport YScaleBar from '../../shared/YScaleBar'\nimport ColorLegend from './ColorLegend'\nimport ScoreLegend from './ScoreLegend'\nimport { getOffset } from './util'\n\ntype LGV = LinearGenomeViewModel\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  if (exportSVG) {\n    return <>{children}</>\n  } else {\n    const { height } = model\n    return (\n      <svg\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          pointerEvents: 'none',\n          height,\n          width: getContainingView(model).width,\n        }}\n      >\n        {children}\n      </svg>\n    )\n  }\n})\n\nexport const YScaleBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const {\n    stats,\n    needsCustomLegend,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    rowHeight,\n    sources,\n    ticks,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const { width: viewWidth } = getContainingView(model) as LGV\n  const minWidth = 20\n\n  const ready = stats && sources\n  if (!ready) {\n    return null\n  }\n\n  const labelWidth = Math.max(\n    ...(sources\n      .map(s => measureText(s.name, svgFontSize))\n      .map(width => (canDisplayLabel ? width : minWidth)) || [0]),\n  )\n\n  return (\n    <Wrapper {...props}>\n      {needsFullHeightScalebar ? (\n        <>\n          <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n          <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n            <ColorLegend\n              exportSVG={exportSVG}\n              model={model}\n              rowHeight={12}\n              labelWidth={labelWidth}\n            />\n          </g>\n        </>\n      ) : (\n        <>\n          <ColorLegend\n            exportSVG={exportSVG}\n            model={model}\n            rowHeight={model.rowHeight}\n            labelWidth={labelWidth}\n          />\n\n          {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n            <ScoreLegend {...props} />\n          ) : (\n            sources.map((_source, idx) => (\n              <g\n                transform={`translate(0 ${rowHeight * idx})`}\n                key={`${JSON.stringify(ticks)}-${idx}`}\n              >\n                <YScaleBar model={model} orientation={orientation} />\n              </g>\n            ))\n          )}\n        </>\n      )}\n    </Wrapper>\n  )\n})\n\nexport default YScaleBars\n","import {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\nimport { WiggleDisplayModel } from '../models/model'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (let i = 0; i < idxs.length; i++) {\n    const old = idxs[i]\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (let i = 0; i < idxs.length; i++) {\n    const old = idxs[i]\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["observer","props","model","_jsxs","children","_jsx","BaseLinearDisplayComponent","_objectSpread","YScaleBars","_props$color","color","fill","_ref","rowHeight","labelWidth","exportSVG","needsCustomLegend","needsScalebar","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","sources","svgFontSize","Math","min","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","_Fragment","RectBg","y","x","width","height","length","map","source","idx","boxHeight","React","fontSize","name","concat","ticks","scaleType","getContainingView","legend","values","len","measureText","xpos","Wrapper","style","position","top","left","pointerEvents","orientation","stats","viewWidth","max","apply","_toConsumableArray","s","transform","getOffset","YScaleBar","ColorLegend","ScoreLegend","_source","JSON","stringify","moveUp","arr","sel","by","arguments","undefined","idxs","l","findIndex","v","sort","a","b","lastIdx","i","old","splice","moveDown","trackLabelFontSize","prefersOffset","trackLabels","track","getContainingTrack","trackName","getConf"],"sourceRoot":""}