{"version":3,"file":"static/js/8238.aa12af78.chunk.js","mappings":"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","sources":["../../../plugins/arc/src/LinearPairedArcDisplay/components/Arcs.tsx","../../../plugins/arc/src/LinearPairedArcDisplay/renderSvg.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  AbstractSessionModel,\n  Feature,\n  assembleLocString,\n  getContainingView,\n  getSession,\n  measureText,\n} from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { parseBreakend } from '@gmod/vcf'\n\n// local\nimport { LinearArcDisplayModel } from '../model'\nimport { Tooltip } from 'react-svg-tooltip'\n\ntype LGV = LinearGenomeViewModel\n\nfunction f(feature: Feature, alt?: string) {\n  const bnd = alt ? parseBreakend(alt) : undefined\n  let start = feature.get('start')\n  let end = feature.get('end')\n  const strand = feature.get('strand')\n  const mate = feature.get('mate')\n  const refName = feature.get('refName')\n\n  let mateRefName: string | undefined\n  let mateEnd = 0\n  let mateStart = 0\n\n  // one sided bracket used, because there could be <INS:ME> and we just check\n  // startswith below\n  const symbolicAlleles = ['<TRA', '<DEL', '<INV', '<INS', '<DUP', '<CNV']\n  if (symbolicAlleles.some(a => alt?.startsWith(a))) {\n    // END is defined to be a single value, not an array. CHR2 not defined in\n    // VCF spec, but should be similar\n    const e = feature.get('INFO')?.END?.[0] || feature.get('end')\n    mateEnd = e\n    mateStart = e - 1\n    mateRefName = feature.get('INFO')?.CHR2?.[0] ?? refName\n    // re-adjust the arc to be from start to end of feature by re-assigning end\n    // to the 'mate'\n    start = feature.get('start')\n    end = feature.get('start') + 1\n  } else if (bnd?.MatePosition) {\n    const matePosition = bnd.MatePosition.split(':')\n    mateEnd = +matePosition[1]\n    mateStart = +matePosition[1] - 1\n    mateRefName = matePosition[0]\n  }\n\n  return {\n    k1: { refName, start, end, strand },\n    k2: mate ?? { refName: mateRefName, end: mateEnd, start: mateStart },\n  }\n}\n\nfunction makeSummary(feature: Feature, alt?: string) {\n  const { k1, k2 } = f(feature, alt)\n  return [\n    feature.get('name'),\n    feature.get('id'),\n    assembleLocString(k1),\n    assembleLocString(k2),\n    feature.get('INFO')?.SVTYPE,\n    alt,\n  ]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\n// conditionally rendered tooltip only on mouseover, speeds up\nconst SvgTooltip = React.forwardRef<\n  SVGPathElement,\n  { feature: Feature; alt?: string }\n>(function SvgTooltip2({ feature, alt }, ref) {\n  const caption = makeSummary(feature, alt)\n  const tooltipWidth = 20 + measureText(caption)\n  return ref !== null ? (\n    // @ts-expect-error\n    <Tooltip triggerRef={ref}>\n      <rect\n        x={12}\n        y={0}\n        width={tooltipWidth}\n        height={20}\n        rx={5}\n        ry={5}\n        fill=\"black\"\n        fillOpacity=\"50%\"\n      />\n      <text\n        x={22}\n        y={14}\n        fontSize={10}\n        fill=\"white\"\n        textLength={tooltipWidth - 20}\n      >\n        {caption}\n      </text>\n    </Tooltip>\n  ) : null\n})\n\nconst Arc = observer(function ({\n  model,\n  feature,\n  alt,\n  assembly,\n  view,\n}: {\n  feature: Feature\n  alt?: string\n  model: LinearArcDisplayModel\n  assembly: Assembly\n  session: AbstractSessionModel\n  view: LinearGenomeViewModel\n}) {\n  const [mouseOvered, setMouseOvered] = useState(false)\n  const { height } = model\n  const { k1, k2 } = f(feature, alt)\n  const ref = useRef<SVGPathElement>(null)\n  const c = getConf(model, 'color', { feature, alt })\n  const ra1 = assembly.getCanonicalRefName(k1.refName) || k1.refName\n  const ra2 = assembly.getCanonicalRefName(k2.refName) || k2.refName\n  const p1 = k1.start\n  const p2 = k2.start\n  const r1 = view.bpToPx({ refName: ra1, coord: p1 })?.offsetPx\n  const r2 = view.bpToPx({ refName: ra2, coord: p2 })?.offsetPx\n\n  if (r1 !== undefined && r2 !== undefined) {\n    const radius = (r2 - r1) / 2\n    const absrad = Math.abs(radius)\n    const destY = Math.min(height, absrad)\n    const p1 = r1 - view.offsetPx\n    const p2 = r2 - view.offsetPx\n    const left = p1\n    const right = p2\n\n    return absrad > 1 ? (\n      <>\n        <path\n          d={`M ${left} 0 C ${left} ${destY}, ${right} ${destY}, ${right} 0`}\n          ref={ref}\n          stroke={mouseOvered ? 'black' : c}\n          strokeWidth={3}\n          onMouseOut={() => setMouseOvered(false)}\n          onMouseOver={() => setMouseOvered(true)}\n          onClick={() => model.selectFeature(feature)}\n          fill=\"none\"\n          pointerEvents=\"stroke\"\n        />\n        {mouseOvered ? (\n          <SvgTooltip feature={feature} alt={alt} ref={ref} />\n        ) : null}\n      </>\n    ) : null\n  }\n  return null\n})\n\nconst Wrapper = observer(function ({\n  model,\n  exportSVG,\n  children,\n}: {\n  model: LinearArcDisplayModel\n  exportSVG?: boolean\n  children: React.ReactNode\n}) {\n  const { height } = model\n  const view = getContainingView(model) as LGV\n  const width = Math.round(view.dynamicBlocks.totalWidthPx)\n  return exportSVG ? (\n    <>{children}</>\n  ) : (\n    <svg width={width} height={height}>\n      {children}\n    </svg>\n  )\n})\n\nconst Arcs = observer(function ({\n  model,\n  exportSVG,\n}: {\n  model: LinearArcDisplayModel\n  exportSVG?: boolean\n}) {\n  const view = getContainingView(model) as LGV\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const { features } = model\n  const assembly = assemblyManager.get(view.assemblyNames[0])\n\n  return assembly ? (\n    <Wrapper model={model} exportSVG={exportSVG}>\n      {features?.map(f => {\n        const alts = f.get('ALT') as string[] | undefined\n        return (\n          alts?.map(a => (\n            <Arc\n              key={f.id() + '-' + a}\n              session={session}\n              feature={f}\n              alt={a}\n              view={view}\n              model={model}\n              assembly={assembly}\n            />\n          )) ?? (\n            <Arc\n              key={f.id()}\n              session={session}\n              feature={f}\n              view={view}\n              model={model}\n              assembly={assembly}\n            />\n          )\n        )\n      })}\n    </Wrapper>\n  ) : null\n})\n\nexport default Arcs\n","import React from 'react'\nimport { getContainingView, when } from '@jbrowse/core/util'\n\n// locals\nimport { LinearArcDisplayModel } from './model'\nimport Arcs from './components/Arcs'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport async function renderArcSvg(\n  model: LinearArcDisplayModel,\n  _opts: {\n    rasterizeLayers?: boolean\n  },\n) {\n  await when(() => !model.loading)\n\n  const view = getContainingView(model) as LinearGenomeViewModel\n  const width = view.dynamicBlocks.totalWidthPx\n  const height = model.height\n  const clipid = 'arc-' + model.id\n  return (\n    <>\n      <defs>\n        <clipPath id={clipid}>\n          <rect x={0} y={0} width={width} height={height} />\n        </clipPath>\n      </defs>\n      <g clipPath={`url(#${clipid})`}>\n        <Arcs model={model} exportSVG={true} />\n      </g>\n    </>\n  )\n}\n"],"names":["f","feature","alt","bnd","parseBreakend","undefined","start","get","end","strand","mate","refName","mateRefName","mateEnd","mateStart","some","a","startsWith","e","END","CHR2","MatePosition","matePosition","split","k1","k2","SvgTooltip","React","ref","caption","assembleLocString","SVTYPE","filter","join","makeSummary","tooltipWidth","measureText","Tooltip","triggerRef","x","y","width","height","rx","ry","fill","fillOpacity","fontSize","textLength","Arc","observer","model","assembly","view","mouseOvered","setMouseOvered","useState","useRef","c","getConf","ra1","getCanonicalRefName","ra2","p1","p2","r1","bpToPx","coord","offsetPx","r2","radius","absrad","Math","abs","destY","min","left","right","d","stroke","strokeWidth","onMouseOut","onMouseOver","onClick","selectFeature","pointerEvents","Wrapper","exportSVG","children","getContainingView","round","dynamicBlocks","totalWidthPx","Arcs","session","getSession","assemblyManager","features","assemblyNames","map","alts","key","id","async","renderArcSvg","_opts","when","loading","clipid","clipPath"],"sourceRoot":""}