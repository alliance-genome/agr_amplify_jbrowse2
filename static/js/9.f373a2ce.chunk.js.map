{"version":3,"sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/BedImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts"],"names":["browserBytes","split","map","c","charCodeAt","trackBytes","commentBytes","bytesAreFoundAt","position","buffer","bytes","i","length","removeBedHeaders","slice","parseBedBuffer","options","a","b","parseTsvBuffer","data","bedColumns","name","dataType","type","columns","forEach","col","colNumber","bedColumn","hasColumnNames","assemblyName","selectedAssemblyName","columnDisplayOrder","push","unshift","isDerived","derivationFunctionText","parseBedPEBuffer","featureField","rowSet","rows","row","rowNumber","featureData","cells","columnNumber","text","val","parseFloat","uniqueId","extendedData","feature","bufferToString","TextDecoder","fatal","decode","parseWith","then","module","default","csv","noheader","output","fromString","guessColumnType","isValidRefName","parsedLoc","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","maxCols","isLoaded","id","String","columnNames","undefined","splice","colNamesRow","cell","parseCsvBuffer","delimiter"],"mappings":"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","file":"static/js/9.f373a2ce.chunk.js","sourcesContent":["import { ParseOptions, parseTsvBuffer } from './ImportUtils'\n\nconst browserBytes = 'browser '.split('').map(c => c.charCodeAt(0))\nconst trackBytes = 'track '.split('').map(c => c.charCodeAt(0))\nconst commentBytes = '#'.split('').map(c => c.charCodeAt(0))\n\nfunction bytesAreFoundAt(position: number, buffer: Buffer, bytes: number[]) {\n  let i = 0\n  for (; i < bytes.length; i += 1) {\n    if (buffer[position + i] !== bytes[i]) {\n      return false\n    }\n  }\n  return true\n}\nexport function removeBedHeaders(buffer: Buffer) {\n  // slice off the first lines of the buffer if it starts with one or more\n  // header lines\n  let i = 0\n  for (; i < buffer.length; i += 1) {\n    if (\n      bytesAreFoundAt(i, buffer, browserBytes) ||\n      bytesAreFoundAt(i, buffer, trackBytes) ||\n      bytesAreFoundAt(i, buffer, commentBytes)\n    ) {\n      // consume up to the next newline\n      do {\n        i += 1\n      } while (buffer[i] !== 10)\n    } else {\n      // end of headers, return\n      break\n    }\n  }\n  if (i) {\n    return buffer.slice(i)\n  }\n  return buffer\n}\n\nexport async function parseBedBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  const bedColumns = [\n    { name: 'chrom', dataType: { type: 'LocRef' } },\n    { name: 'chromStart', dataType: { type: 'LocStart' } },\n    { name: 'chromEnd', dataType: { type: 'LocEnd' } },\n    { name: 'name', dataType: { type: 'Text' } },\n    { name: 'score', dataType: { type: 'Number' } },\n    { name: 'strand', dataType: { type: 'Text' } },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n  data.assemblyName = options.selectedAssemblyName\n\n  data.columnDisplayOrder.push(data.columnDisplayOrder.length)\n  data.columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.cells[0].text+':'+row.cells[1].text+'..'+row.cells[2].text,\\n\n    extendedData: {refName: row.cells.ref.text, start: parseInt(row.cells.start.text,10), end: parseInt(row.cells.end.text,10)}}`,\n  })\n  return data\n}\n\nexport async function parseBedPEBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  interface BedColumn {\n    name: string\n    dataType: {\n      type: string\n    }\n    featureField: string[]\n  }\n  const bedColumns: BedColumn[] = [\n    { name: 'chrom1', dataType: { type: 'Text' }, featureField: ['refName'] },\n    { name: 'start1', dataType: { type: 'Number' }, featureField: ['start'] },\n    { name: 'end1', dataType: { type: 'Number' }, featureField: ['end'] },\n    {\n      name: 'chrom2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'refName'],\n    },\n    {\n      name: 'start2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'start'],\n    },\n    {\n      name: 'end2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'end'],\n    },\n    { name: 'name', dataType: { type: 'Text' }, featureField: ['name'] },\n    { name: 'score', dataType: { type: 'Number' }, featureField: ['score'] },\n    { name: 'strand1', dataType: { type: 'Text' }, featureField: ['strand'] },\n    {\n      name: 'strand2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'strand'],\n    },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const bedColumn = bedColumns[columnNumber]\n      const val =\n        bedColumn && bedColumn.dataType.type === 'Number' && text\n          ? parseFloat(text)\n          : text\n      if (bedColumn) {\n        // a predefined column\n        if (bedColumn.featureField.length === 2) {\n          if (!featureData[bedColumn.featureField[0]]) {\n            featureData[bedColumn.featureField[0]] = {}\n          }\n          featureData[bedColumn.featureField[0]][bedColumn.featureField[1]] =\n            val\n        } else {\n          featureData[bedColumn.featureField[0]] = val\n        }\n      } else {\n        // some other column\n        featureData[`column${columnNumber + 1}`] = val\n      }\n    })\n    featureData.uniqueId = `bedpe-${rowNumber}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  data.assemblyName = options.selectedAssemblyName\n\n  return data\n}\n","import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n"],"sourceRoot":""}