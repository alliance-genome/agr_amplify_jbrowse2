{"version":3,"file":"static/js/9247.d2dd62c3.chunk.js","mappings":"2NAKA,MAAMA,GAAYC,E,SAAAA,KAAAA,EAAaC,IAAS,CACtCC,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,KAETC,cAAe,CACbD,MAAO,YAII,SAASE,GAA8B,YACpDC,EACAC,SAAUC,EACVC,SAAUC,IAMV,MAAM,QAAEC,GAAYd,KACbU,EAAUK,IAAeC,EAAAA,EAAAA,UAAU,GAAEL,MACrCC,EAAUK,IAAeD,EAAAA,EAAAA,UAAU,GAAEH,KACtCK,GAAiBC,OAAOC,OAAOV,GAC/BW,GAAiBF,OAAOC,OAAOR,GACrC,OACEU,EAAAA,cAACC,EAAAA,OAAM,CACLC,SAAS,KACTC,MAAI,EACJC,QAASA,IAAMjB,IACfkB,MAAM,6BAENL,EAAAA,cAACM,EAAAA,EAAa,CAACC,UAAWf,EAAQP,eAChCe,EAAAA,cAACQ,EAAAA,EAAS,CACRC,MAAM,yDACNF,UAAWf,EAAQX,QACnB6B,MAAOtB,EACPuB,WAAaf,EAAiC,GAAjB,eAC7BgB,OAAQhB,EACRiB,SAAUC,GAASrB,EAAYqB,EAAMC,OAAOL,SAE9CV,EAAAA,cAACQ,EAAAA,EAAS,CACRC,MAAM,uDACNF,UAAWf,EAAQX,QACnB6B,MAAOpB,EACPqB,WAAaZ,EAAiC,GAAjB,eAC7Ba,OAAQb,EACRc,SAAUC,GAASnB,EAAYmB,EAAMC,OAAOL,UAIhDV,EAAAA,cAACgB,EAAAA,EAAa,KACZhB,EAAAA,cAACiB,EAAAA,EAAM,CACLC,QAASA,IACP/B,EAAY,CACVG,UAAWA,EACXF,UAAWA,IAGf+B,UAAWvB,IAAkBG,EAC7BqB,MAAM,UACNC,QAAQ,aACT,UAGDrB,EAAAA,cAACiB,EAAAA,EAAM,CACLC,QAASA,IAAM/B,IACfiC,MAAM,YACNE,WAAS,EACTD,QAAQ,aACT,WAMT,C","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeatureSettingsDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button, DialogContent, DialogActions, TextField } from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  formElt: {\n    margin: theme.spacing(3),\n    width: 400,\n  },\n  dialogContent: {\n    width: '80em',\n  },\n}))\n\nexport default function SequenceFeatureSettingsDialog({\n  handleClose,\n  intronBp: intronBpArg,\n  upDownBp: upDownBpArg,\n}: {\n  handleClose: (arg?: { intronBp: number; upDownBp: number }) => void\n  intronBp: number\n  upDownBp: number\n}) {\n  const { classes } = useStyles()\n  const [intronBp, setIntronBp] = useState(`${intronBpArg}`)\n  const [upDownBp, setUpDownBp] = useState(`${upDownBpArg}`)\n  const intronBpValid = !Number.isNaN(+intronBp)\n  const upDownBpValid = !Number.isNaN(+upDownBp)\n  return (\n    <Dialog\n      maxWidth=\"xl\"\n      open\n      onClose={() => handleClose()}\n      title=\"Feature sequence settings\"\n    >\n      <DialogContent className={classes.dialogContent}>\n        <TextField\n          label=\"Number of intronic bases around splice site to display\"\n          className={classes.formElt}\n          value={intronBp}\n          helperText={!intronBpValid ? 'Not a number' : ''}\n          error={!intronBpValid}\n          onChange={event => setIntronBp(event.target.value)}\n        />\n        <TextField\n          label=\"Number of bases up/down stream of feature to display\"\n          className={classes.formElt}\n          value={upDownBp}\n          helperText={!upDownBpValid ? 'Not a number' : ''}\n          error={!upDownBpValid}\n          onChange={event => setUpDownBp(event.target.value)}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button\n          onClick={() =>\n            handleClose({\n              upDownBp: +upDownBp,\n              intronBp: +intronBp,\n            })\n          }\n          disabled={!intronBpValid || !upDownBpValid}\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Submit\n        </Button>\n        <Button\n          onClick={() => handleClose()}\n          color=\"secondary\"\n          autoFocus\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","formElt","margin","spacing","width","dialogContent","SequenceFeatureSettingsDialog","handleClose","intronBp","intronBpArg","upDownBp","upDownBpArg","classes","setIntronBp","useState","setUpDownBp","intronBpValid","Number","isNaN","upDownBpValid","React","Dialog","maxWidth","open","onClose","title","DialogContent","className","TextField","label","value","helperText","error","onChange","event","target","DialogActions","Button","onClick","disabled","color","variant","autoFocus"],"sourceRoot":""}