{"version":3,"file":"static/js/4599.ee608151.chunk.js","mappings":"+PAsBA,IAAMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,oBAAqB,CACnBC,MAAO,IACPC,OAAQH,EAAMI,QAAQ,IAEzB,IAEKC,GAAgBC,EAAAA,EAAAA,WAAS,SAAsBC,GAQjD,IAnBcC,EAYhBC,EAAIF,EAAJE,KACAC,EAAOH,EAAPG,QACAC,EAAeJ,EAAfI,gBAMAC,EAAgDF,EAAxCG,oBAAqBC,OAAS,IAAAF,EAAG,GAAEA,EACrCG,GAAOC,EAAAA,EAAAA,gBAAeP,EAAM,QAC5BQ,GAAgBD,EAAAA,EAAAA,gBAAeP,EAAM,iBACrCS,EAAQJ,EAAUK,MAAK,SAAAC,GAAI,OAAIL,IAASK,EAAKL,IAAI,IACvD,OACEM,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAEfC,SACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CACPC,UAAWP,EACXQ,SAAU,WAGA,IAADC,EAFHT,EACFP,EAAgBF,GAEM,QAAtBkB,EAAAjB,EAAQkB,sBAAc,IAAAD,GAAtBA,EAAAE,KAAAnB,EAAyBD,EAE7B,EACAqB,MAAM,YAGVC,MAAO,CACLhB,EACAE,EAAce,OAAM,IAAAC,QA1CVzB,EA0C0BS,EAAciB,KAAK,KAzCtD1B,EAAKwB,OAAS,GAAE,GAAAC,OAAMzB,EAAK2B,MAAM,EAAG,IAAG,OAAQ3B,GAyCY,KAAM,IAEjE4B,QAAO,SAAAC,GAAC,QAAMA,CAAC,IACfH,KAAK,MAnBHzB,EAAK6B,aAsBhB,IAEMC,GAAiBjC,EAAAA,EAAAA,WAAS,SAAwBkC,GAMpD,IALF9B,EAAO8B,EAAP9B,QACAC,EAAe6B,EAAf7B,gBAKQ8B,EAAY3C,IAAZ2C,QACR,OACEpB,EAAAA,EAAAA,KAAA,OAAKqB,UAAWD,EAAQxC,oBAAoB0C,SACxCjC,EAAQkC,YAAYZ,OAGpBtB,EAAQkC,YAAYC,KAAI,SAACpC,EAAMqC,GAAG,OAChCzB,EAAAA,EAAAA,KAAA,OAAAsB,UACEtB,EAAAA,EAAAA,KAAChB,EAAa,CACZI,KAAMA,EACNC,QAASA,EACTC,gBAAiBA,KAJXF,EAAKM,KAAO,IAAM+B,EAMtB,KATRzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAU,CAAAJ,SAAC,0BAcpB,IAEMK,GAAyB1C,EAAAA,EAAAA,WAAS,SAAA2C,GAQpC,IAPFvC,EAAOuC,EAAPvC,QACAwC,EAAWD,EAAXC,YACAvC,EAAesC,EAAftC,gBAMA,OACEwC,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CACLC,MAAI,EACJC,QAASJ,EACTK,SAAS,KACTC,MAAM,0BAAyBb,SAAA,EAE/BQ,EAAAA,EAAAA,MAACM,EAAAA,EAAa,CAAAd,SAAA,EACZtB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAU,CAAAJ,SAAC,iDACZtB,EAAAA,EAAAA,KAACkB,EAAc,CAAC7B,QAASA,EAASC,gBAAiBA,QAErDU,EAAAA,EAAAA,KAACqC,EAAAA,EAAa,CAAAf,UACZtB,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CACLC,QAAS,kBAAMV,GAAa,EAC5BW,QAAQ,YACR/B,MAAM,UAASa,SAChB,cAMT,IAEA,W","sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/dialogs/ToggleConnectionsDialog.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  Button,\n  Checkbox,\n  DialogContent,\n  DialogActions,\n  FormControlLabel,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nfunction ellipses(slug: string) {\n  return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug\n}\n\nconst useStyles = makeStyles()(theme => ({\n  connectionContainer: {\n    width: 500,\n    margin: theme.spacing(4),\n  },\n}))\n\nconst ConnectionRow = observer(function ConnectionRow({\n  conf,\n  session,\n  breakConnection,\n}: {\n  conf: AnyConfigurationModel\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  const { connectionInstances: instances = [] } = session\n  const name = readConfObject(conf, 'name')\n  const assemblyNames = readConfObject(conf, 'assemblyNames')\n  const found = instances.find(conn => name === conn.name)\n  return (\n    <FormControlLabel\n      key={conf.connectionId}\n      control={\n        <Checkbox\n          checked={!!found}\n          onChange={() => {\n            if (found) {\n              breakConnection(conf)\n            } else {\n              session.makeConnection?.(conf)\n            }\n          }}\n          color=\"primary\"\n        />\n      }\n      label={[\n        name,\n        assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',\n      ]\n        .filter(f => !!f)\n        .join(' ')}\n    />\n  )\n})\n\nconst ConnectionList = observer(function ConnectionsList({\n  session,\n  breakConnection,\n}: {\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  const { classes } = useStyles()\n  return (\n    <div className={classes.connectionContainer}>\n      {!session.connections.length ? (\n        <Typography>No connections found</Typography>\n      ) : (\n        session.connections.map((conf, idx) => (\n          <div key={conf.name + '_' + idx}>\n            <ConnectionRow\n              conf={conf}\n              session={session}\n              breakConnection={breakConnection}\n            />\n          </div>\n        ))\n      )}\n    </div>\n  )\n})\n\nconst ToggleConnectionDialog = observer(function ({\n  session,\n  handleClose,\n  breakConnection,\n}: {\n  handleClose: () => void\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  return (\n    <Dialog\n      open\n      onClose={handleClose}\n      maxWidth=\"lg\"\n      title=\"Turn on/off connections\"\n    >\n      <DialogContent>\n        <Typography>Use the checkbox to turn on/off connections</Typography>\n        <ConnectionList session={session} breakConnection={breakConnection} />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => handleClose()}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default ToggleConnectionDialog\n"],"names":["useStyles","makeStyles","theme","connectionContainer","width","margin","spacing","ConnectionRow","observer","_ref","slug","conf","session","breakConnection","_session$connectionIn","connectionInstances","instances","name","readConfObject","assemblyNames","found","find","conn","_jsx","FormControlLabel","control","Checkbox","checked","onChange","_session$makeConnecti","makeConnection","call","color","label","length","concat","join","slice","filter","f","connectionId","ConnectionList","_ref2","classes","className","children","connections","map","idx","Typography","ToggleConnectionDialog","_ref3","handleClose","_jsxs","Dialog","open","onClose","maxWidth","title","DialogContent","DialogActions","Button","onClick","variant"],"sourceRoot":""}