{"version":3,"file":"static/js/5758.13dda43b.chunk.js","mappings":"8XA2CMA,EAAAA,WACJ,WAAoBC,IAAgC,oBAAhCA,WAAAA,EAEpB,OAFqD,+DAErD,WAAWC,EAAkBC,GAA7B,2FACyCC,KAAKH,WAAWI,KACrDC,EAAOC,YAAYJ,GACnB,EACAA,EACAD,GALJ,uBACkBM,EADlB,EACUC,OAAWC,EADrB,EACqBA,UADrB,kBAQSF,EAAEC,OAAOE,MAAMH,EAAEI,WAAYJ,EAAEI,WAAaF,IARrD,qGAFqD,MAErD,EAHIV,GAcC,SAASa,EAAsBC,GACpC,OAAO,IAAId,GAAyBe,EAAAA,EAAAA,cAAaD,IAClD,IAEoBE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAYnB,WACEC,EACAC,EACAC,GACC,IAAD,mBACA,cAAMF,EAAQC,EAAeC,IAhBvBC,SAeN,EAEA,IAAMC,GAAcC,EAAAA,EAAAA,gBAAeL,EAAQ,eAF3C,OAGA,EAAKG,IAAM,IAAIG,EAAAA,EAAS,CACtBC,KAAMX,EAAsBQ,KAJ9B,EAoEsC,OA9DvC,gEAED,WAAoBI,GAApB,qFACwCA,GAAQ,IAAtCC,gBAAAA,OADV,MAC2B,aAD3B,GAEiB,2BAFjB,SAGuBtB,KAAKgB,IAAIO,cAHhC,cAGQC,EAHR,OAIEF,EAAe,IAJjB,kBAKSE,GALT,mGAFC,IAED,0DAQA,WAAuBH,GAAvB,yFACoBrB,KAAKyB,MAAMJ,GAD/B,cACQK,EADR,OAEmCA,EAAzBC,YAAgBC,GAF1B,OAEmCF,EAFnC,qBAGSE,GAHT,mGARA,IAQA,4DAMA,WAAkBP,GAAlB,uFACyBrB,KAAKyB,MAAMJ,GADpC,cACQQ,EADR,yBAESA,EAASF,YAAYG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,SAF7C,mGANA,IAMA,8DAKA,WAAoBC,EAAiBZ,GAArC,+FACyBrB,KAAKyB,MAAMJ,GADpC,OAKE,IAJMQ,EADR,OAEUK,EAAgBL,EAAhBK,YACJC,EAAmBD,EAAYA,EAAYnC,OAAS,GAE/CqC,EAAIF,EAAYnC,OAAS,EAAGqC,GAAK,EAAGA,GAAK,GAC1CC,EAAIH,EAAYE,KACb,EAAIH,IACXE,EAAmBE,GARzB,yBAWSF,GAXT,qGALA,IAKA,yBAcA,SAAYG,GAAwC,IAAD,OAAvBjB,EAAuB,uDAAJ,GAC7C,OAAOkB,EAAAA,EAAAA,kBAAgB,mCAAgB,WAAMC,GAAN,8FACpBT,EAAoBO,EAA7BG,QAAcC,EAAeJ,EAAfI,MAAOC,EAAQL,EAARK,IACrBC,EAAuDvB,EAAvDuB,WAF6B,EAE0BvB,EAA3CY,QAAAA,OAFiB,MAEP,EAFO,IAE0BZ,EAA9BC,eAAAA,OAFI,MAEa,aAFb,WAGnB,EAAKuB,cAAcZ,GAAWW,GAAc,KAAOvB,GAHhC,cAG/ByB,EAH+B,OAIrCxB,EAAe,yBAJsB,SAMf,EAAKN,IAAI+B,kBAC7B,KACA,CAAEL,MAAAA,EAAOX,IAAAA,EAAKY,IAAAA,GACd,CAAED,MAAAA,EAAOX,IAAAA,EAAKY,IAAAA,GACd,KACAG,GAXmC,cAa7BE,SAAQ,SAAAC,GACdT,EAASU,KAAKD,MAEhB3B,EAAe,IACfkB,EAASW,WAjB4B,4CAAhB,sDAkBpB9B,EAAK+B,U,qEAIV,WAA2BC,GAA3B,0FACS,CAAEC,eAAgB,IAD3B,8F,IAAA,2BAIA,gBAAwC,EApFrB1C,CAAmB2C,EAAAA,yB","sources":["../../../plugins/hic/src/HicAdapter/HicAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region, FileLocation } from '@jbrowse/core/util/types'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { Instance } from 'mobx-state-tree'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport type { GenericFilehandle } from 'generic-filehandle'\nimport HicStraw from 'hic-straw'\nimport MyConfigSchema from './configSchema'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\ninterface ContactRecord {\n  bin1: number\n  bin2: number\n  counts: number\n}\n\ninterface HicMetadata {\n  chromosomes: {\n    name: string\n    length: number\n    id: number\n  }[]\n  resolutions: number[]\n}\ninterface Ref {\n  chr: string\n  start: number\n  end: number\n}\n\ninterface HicOptions extends BaseOptions {\n  resolution?: number\n  bpPerPx?: number\n}\n\n// wraps generic-filehandle so the read function only takes a position and length\n// in some ways, generic-filehandle wishes it was just this but it has\n// to adapt to the node.js fs promises API\nclass GenericFilehandleWrapper {\n  constructor(private filehandle: GenericFilehandle) {}\n\n  async read(position: number, length: number) {\n    const { buffer: b, bytesRead } = await this.filehandle.read(\n      Buffer.allocUnsafe(length),\n      0,\n      length,\n      position,\n    )\n    // xref https://stackoverflow.com/a/31394257/2129219\n    return b.buffer.slice(b.byteOffset, b.byteOffset + bytesRead)\n  }\n}\nexport function openFilehandleWrapper(location: FileLocation) {\n  return new GenericFilehandleWrapper(openLocation(location))\n}\n\nexport default class HicAdapter extends BaseFeatureDataAdapter {\n  private hic: {\n    getContactRecords: (\n      normalize: string,\n      ref: Ref,\n      ref2: Ref,\n      units: string,\n      binsize: number,\n    ) => Promise<ContactRecord[]>\n    getMetaData: () => Promise<HicMetadata>\n  }\n\n  public constructor(\n    config: Instance<typeof MyConfigSchema>,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const hicLocation = readConfObject(config, 'hicLocation')\n    this.hic = new HicStraw({\n      file: openFilehandleWrapper(hicLocation),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    statusCallback('Downloading .hic header')\n    const result = await this.hic.getMetaData()\n    statusCallback('')\n    return result\n  }\n\n  public async getHeader(opts?: BaseOptions) {\n    const ret = await this.setup(opts)\n    const { chromosomes, ...rest } = ret\n    return rest\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    return metadata.chromosomes.map(chr => chr.name)\n  }\n\n  async getResolution(bpPerPx: number, opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    const { resolutions } = metadata\n    let chosenResolution = resolutions[resolutions.length - 1]\n\n    for (let i = resolutions.length - 1; i >= 0; i -= 1) {\n      const r = resolutions[i]\n      if (r <= 2 * bpPerPx) {\n        chosenResolution = r\n      }\n    }\n    return chosenResolution\n  }\n\n  getFeatures(region: Region, opts: HicOptions = {}) {\n    return ObservableCreate<ContactRecord>(async observer => {\n      const { refName: chr, start, end } = region\n      const { resolution, bpPerPx = 1, statusCallback = () => {} } = opts\n      const res = await this.getResolution(bpPerPx / (resolution || 1000), opts)\n      statusCallback('Downloading .hic data')\n\n      const records = await this.hic.getContactRecords(\n        'KR',\n        { start, chr, end },\n        { start, chr, end },\n        'BP',\n        res,\n      )\n      records.forEach(record => {\n        observer.next(record)\n      })\n      statusCallback('')\n      observer.complete()\n    }, opts.signal) as any // eslint-disable-line @typescript-eslint/no-explicit-any\n  }\n\n  // don't do feature stats estimation, similar to bigwigadapter\n  async estimateRegionsStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["GenericFilehandleWrapper","filehandle","position","length","this","read","Buffer","allocUnsafe","b","buffer","bytesRead","slice","byteOffset","openFilehandleWrapper","location","openLocation","HicAdapter","config","getSubAdapter","pluginManager","hic","hicLocation","readConfObject","HicStraw","file","opts","statusCallback","getMetaData","result","setup","ret","chromosomes","rest","metadata","map","chr","name","bpPerPx","resolutions","chosenResolution","i","r","region","ObservableCreate","observer","refName","start","end","resolution","getResolution","res","getContactRecords","forEach","record","next","complete","signal","_regions","featureDensity","BaseFeatureDataAdapter"],"sourceRoot":""}