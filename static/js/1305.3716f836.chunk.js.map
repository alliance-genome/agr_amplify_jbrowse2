{"version":3,"file":"static/js/1305.3716f836.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/HierarchicalTrackSelector.tsx"],"sourcesContent":["import React, {\n  Suspense,\n  lazy,\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n} from 'react'\nimport {\n  Checkbox,\n  Fab,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  TextField,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport ClearIcon from '@material-ui/icons/Clear'\nimport AddIcon from '@material-ui/icons/Add'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MoreIcon from '@material-ui/icons/MoreHoriz'\nimport { Cable } from '@jbrowse/core/ui/Icons'\n\n// other\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport JBrowseMenu from '@jbrowse/core/ui/Menu'\nimport {\n  getSession,\n  isSessionModelWithWidgets,\n  isSessionModelWithConnections,\n  isSessionWithAddTracks,\n} from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { VariableSizeTree } from 'react-vtree'\n\n// locals\nimport { TreeNode, HierarchicalTrackSelectorModel } from '../model'\n\n// lazy components\nconst CloseConnectionDialog = lazy(() => import('./CloseConnectionDialog'))\nconst DeleteConnectionDialog = lazy(() => import('./DeleteConnectionDialog'))\nconst ManageConnectionsDialog = lazy(() => import('./ManageConnectionsDialog'))\nconst ToggleConnectionsDialog = lazy(() => import('./ToggleConnectionsDialog'))\n\nconst useStyles = makeStyles(theme => ({\n  searchBox: {\n    margin: theme.spacing(2),\n  },\n  menuIcon: {\n    marginRight: theme.spacing(1),\n    marginBottom: 0,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(6),\n    right: theme.spacing(6),\n  },\n  compactCheckbox: {\n    padding: 0,\n  },\n\n  checkboxLabel: {\n    marginRight: 0,\n    '&:hover': {\n      backgroundColor: '#eee',\n    },\n  },\n\n  // this accordionBase element's small padding is used to give a margin to\n  // accordionColor it a \"margin\" because the virtualized elements can't really\n  // use margin in a conventional way (it doesn't affect layout)\n  accordionBase: {\n    display: 'flex',\n  },\n\n  accordionCard: {\n    padding: 3,\n    cursor: 'pointer',\n    display: 'flex',\n  },\n\n  nestingLevelMarker: {\n    position: 'absolute',\n    borderLeft: '1.5px solid #555',\n  },\n  // accordionColor set's display:flex so that the child accordionText use\n  // vertically centered text\n  accordionColor: {\n    background: theme.palette.tertiary?.main,\n    color: theme.palette.tertiary?.contrastText,\n    width: '100%',\n    display: 'flex',\n    paddingLeft: 5,\n  },\n\n  // margin:auto 0 to center text vertically\n  accordionText: {\n    margin: 'auto 0',\n  },\n}))\n\ninterface MoreInfoArgs {\n  target: HTMLElement\n  id: string\n  conf: AnyConfigurationModel\n}\n\n// An individual node in the track selector. Note: manually sets cursor:\n// pointer improves usability for what can be clicked\nfunction Node(props: {\n  data: {\n    isLeaf: boolean\n    nestingLevel: number\n    checked: boolean\n    id: string\n    name: string\n    onChange: Function\n    toggleCollapse: (arg: string) => void\n    conf: AnyConfigurationModel\n    onMoreInfo: (arg: MoreInfoArgs) => void\n    drawerPosition: unknown\n  }\n  isOpen: boolean\n  style?: { height: number }\n  setOpen: (arg: boolean) => void\n}) {\n  const { data, isOpen, style, setOpen } = props\n  const {\n    isLeaf,\n    nestingLevel,\n    checked,\n    id,\n    name,\n    onChange,\n    toggleCollapse,\n    conf,\n    onMoreInfo,\n    drawerPosition,\n  } = data\n\n  const classes = useStyles()\n  const width = 10\n  const marginLeft = nestingLevel * width + (isLeaf ? width : 0)\n  const unsupported =\n    name?.endsWith('(Unsupported)') || name?.endsWith('(Unknown)')\n  const description = (conf && readConfObject(conf, ['description'])) || ''\n\n  return (\n    <div style={style} className={!isLeaf ? classes.accordionBase : undefined}>\n      {new Array(nestingLevel).fill(0).map((_, idx) => (\n        <div\n          key={`mark-${idx}`}\n          style={{ left: idx * width + 4, height: style?.height }}\n          className={classes.nestingLevelMarker}\n        />\n      ))}\n      <div\n        className={!isLeaf ? classes.accordionCard : undefined}\n        onClick={() => {\n          toggleCollapse(id)\n          setOpen(!isOpen)\n        }}\n        style={{\n          marginLeft,\n          whiteSpace: 'nowrap',\n          width: '100%',\n        }}\n      >\n        <div className={!isLeaf ? classes.accordionColor : undefined}>\n          {!isLeaf ? (\n            <div className={classes.accordionText}>\n              <Typography>\n                {isOpen ? <ArrowDropDownIcon /> : <ArrowRightIcon />}\n                {name}\n              </Typography>\n            </div>\n          ) : (\n            <>\n              <Tooltip\n                title={description}\n                placement={drawerPosition === 'left' ? 'right' : 'left'}\n              >\n                <FormControlLabel\n                  className={classes.checkboxLabel}\n                  control={\n                    <Checkbox\n                      className={classes.compactCheckbox}\n                      checked={checked}\n                      onChange={() => onChange(id)}\n                      color=\"primary\"\n                      disabled={unsupported}\n                      inputProps={{\n                        // @ts-ignore\n                        'data-testid': `htsTrackEntry-${id}`,\n                      }}\n                    />\n                  }\n                  label={name}\n                />\n              </Tooltip>\n              <IconButton\n                onClick={e => onMoreInfo({ target: e.currentTarget, id, conf })}\n                color=\"secondary\"\n                data-testid={`htsTrackEntryMenu-${id}`}\n              >\n                <MoreIcon />\n              </IconButton>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction getNodeData(\n  node: TreeNode,\n  nestingLevel: number,\n  extra: Record<string, unknown>,\n) {\n  const isLeaf = !!node.conf\n  return {\n    data: {\n      defaultHeight: isLeaf ? 22 : 40,\n      isLeaf,\n      isOpenByDefault: true,\n      nestingLevel,\n      ...node,\n      ...extra,\n    },\n    nestingLevel,\n    node,\n  }\n}\n\ntype NodeData = ReturnType<typeof getNodeData>\n\n// this is the main tree component for the hierarchical track selector in note:\n// in jbrowse-web the toolbar is position=\"sticky\" which means the autosizer\n// includes the height of the toolbar, so we subtract the given offsets\nconst HierarchicalTree = observer(\n  ({\n    height,\n    tree,\n    model,\n  }: {\n    height: number\n    tree: TreeNode\n    model: HierarchicalTrackSelectorModel\n  }) => {\n    const { filterText, view } = model\n    const treeRef = useRef<NodeData>(null)\n    const [info, setMoreInfo] = useState<MoreInfoArgs>()\n    const session = getSession(model)\n    const { drawerPosition } = session\n\n    const extra = useMemo(\n      () => ({\n        onChange: (trackId: string) => view.toggleTrack(trackId),\n        toggleCollapse: (pathName: string) => model.toggleCategory(pathName),\n        onMoreInfo: setMoreInfo,\n        drawerPosition,\n      }),\n      [view, model, drawerPosition],\n    )\n    const treeWalker = useCallback(\n      function* treeWalker() {\n        for (let i = 0; i < tree.children.length; i++) {\n          const r = tree.children[i]\n          yield getNodeData(r, 0, extra)\n        }\n\n        while (true) {\n          // @ts-ignore\n          const parentMeta = yield\n\n          for (let i = 0; i < parentMeta.node.children.length; i++) {\n            const curr = parentMeta.node.children[i]\n            yield getNodeData(curr, parentMeta.nestingLevel + 1, extra)\n          }\n        }\n      },\n      [tree, extra],\n    )\n\n    const conf = info?.conf\n    const menuItems = (conf && session.getTrackActionMenuItems?.(conf)) || []\n\n    useEffect(() => {\n      // @ts-ignore\n      treeRef.current.recomputeTree({\n        refreshNodes: true,\n        useDefaultHeight: true,\n      })\n    }, [tree, filterText])\n    return (\n      <>\n        {/* @ts-ignore */}\n        <VariableSizeTree ref={treeRef} treeWalker={treeWalker} height={height}>\n          {/* @ts-ignore */}\n          {Node}\n        </VariableSizeTree>\n        <JBrowseMenu\n          anchorEl={info?.target}\n          menuItems={menuItems}\n          onMenuItemClick={(_event, callback) => {\n            callback()\n            setMoreInfo(undefined)\n          }}\n          open={Boolean(info)}\n          onClose={() => setMoreInfo(undefined)}\n        />\n      </>\n    )\n  },\n)\n\n// Don't use autosizer in jest and instead hardcode a height, otherwise fails\n// jest tests\nconst AutoSizedHierarchicalTree = ({\n  tree,\n  model,\n  offset,\n}: {\n  tree: TreeNode\n  model: HierarchicalTrackSelectorModel\n  offset: number\n}) => {\n  return typeof jest === 'undefined' ? (\n    <AutoSizer disableWidth>\n      {({ height }) => {\n        return (\n          <HierarchicalTree\n            height={height - offset}\n            model={model}\n            tree={tree}\n          />\n        )\n      }}\n    </AutoSizer>\n  ) : (\n    <HierarchicalTree height={9000} model={model} tree={tree} />\n  )\n}\n\nconst Wrapper = ({\n  overrideDimensions,\n  children,\n}: {\n  overrideDimensions?: { width: number; height: number }\n  children: React.ReactNode\n}) => {\n  return overrideDimensions ? (\n    <div style={{ ...overrideDimensions }}>{children}</div>\n  ) : (\n    <>{children}</>\n  )\n}\nconst HierarchicalTrackSelectorContainer = observer(\n  ({\n    model,\n    toolbarHeight,\n    overrideDimensions,\n  }: {\n    model: HierarchicalTrackSelectorModel\n    toolbarHeight: number\n    overrideDimensions?: { width: number; height: number }\n  }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null)\n\n    function handleFabClose() {\n      setAnchorEl(null)\n    }\n    const hasConnections = isSessionModelWithConnections(session)\n    const hasAddTrack = isSessionWithAddTracks(session)\n    return (\n      <Wrapper overrideDimensions={overrideDimensions}>\n        <HierarchicalTrackSelector\n          model={model}\n          toolbarHeight={toolbarHeight}\n        />\n        {hasAddTrack || hasConnections ? (\n          <>\n            <Fab\n              color=\"secondary\"\n              className={classes.fab}\n              onClick={event => setAnchorEl(event.currentTarget)}\n            >\n              <AddIcon />\n            </Fab>\n            <Menu\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={() => setAnchorEl(null)}\n            >\n              {hasConnections ? (\n                <MenuItem\n                  onClick={() => {\n                    handleFabClose()\n                    if (isSessionModelWithWidgets(session)) {\n                      session.showWidget(\n                        session.addWidget(\n                          'AddConnectionWidget',\n                          'addConnectionWidget',\n                        ),\n                      )\n                    }\n                  }}\n                >\n                  Add connection\n                </MenuItem>\n              ) : null}\n              {hasAddTrack ? (\n                <MenuItem\n                  onClick={() => {\n                    handleFabClose()\n                    if (isSessionModelWithWidgets(session)) {\n                      session.showWidget(\n                        session.addWidget('AddTrackWidget', 'addTrackWidget', {\n                          view: model.view.id,\n                        }),\n                      )\n                    }\n                  }}\n                >\n                  Add track\n                </MenuItem>\n              ) : null}\n            </Menu>\n          </>\n        ) : null}\n      </Wrapper>\n    )\n  },\n)\n\nconst HierarchicalTrackSelectorHeader = observer(\n  ({\n    model,\n    setHeaderHeight,\n    setAssemblyIdx,\n    assemblyIdx,\n  }: {\n    model: HierarchicalTrackSelectorModel\n    setHeaderHeight: (n: number) => void\n    setAssemblyIdx: (n: number) => void\n    assemblyIdx: number\n  }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [connectionAnchorEl, setConnectionAnchorEl] =\n      useState<HTMLButtonElement>()\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLButtonElement>()\n    const [modalInfo, setModalInfo] = useState<{\n      connectionConf: AnyConfigurationModel\n      safelyBreakConnection: Function\n      dereferenceTypeCount: { [key: string]: number }\n      name: string\n    }>()\n    const [deleteDialogDetails, setDeleteDialogDetails] = useState<{\n      name: string\n      connectionConf: AnyConfigurationModel\n    }>()\n    const [connectionManagerOpen, setConnectionManagerOpen] = useState(false)\n    const [connectionToggleOpen, setConnectionToggleOpen] = useState(false)\n    const { assemblyNames } = model\n    const assemblyName = assemblyNames[assemblyIdx]\n\n    function breakConnection(\n      connectionConf: AnyConfigurationModel,\n      deletingConnection?: boolean,\n    ) {\n      const name = readConfObject(connectionConf, 'name')\n\n      // @ts-ignore\n      const result = session.prepareToBreakConnection(connectionConf)\n      if (result) {\n        const [safelyBreakConnection, dereferenceTypeCount] = result\n        if (Object.keys(dereferenceTypeCount).length > 0) {\n          setModalInfo({\n            connectionConf,\n            safelyBreakConnection,\n            dereferenceTypeCount,\n            name,\n          })\n        } else {\n          safelyBreakConnection()\n        }\n      }\n      if (deletingConnection) {\n        setDeleteDialogDetails({ name, connectionConf })\n      }\n    }\n\n    const connectionMenuItems = [\n      {\n        label: 'Turn on/off connections...',\n        onClick: () => setConnectionToggleOpen(true),\n      },\n    ]\n\n    if (isSessionModelWithConnections(session)) {\n      connectionMenuItems.unshift({\n        label: 'Add connection',\n        onClick: () => {\n          if (isSessionModelWithWidgets(session)) {\n            const widget = session.addWidget(\n              'AddConnectionWidget',\n              'addConnectionWidget',\n            )\n            session.showWidget(widget)\n          }\n        },\n      })\n\n      connectionMenuItems.push({\n        label: 'Delete connections...',\n        onClick: () => setConnectionManagerOpen(true),\n      })\n    }\n\n    const assemblyMenuItems =\n      assemblyNames.length > 1\n        ? [\n            {\n              label: 'Select assembly...',\n              subMenu: assemblyNames.map((name, idx) => ({\n                label: name,\n                onClick: () => setAssemblyIdx(idx),\n              })),\n            },\n          ]\n        : []\n\n    const menuItems = [\n      {\n        label: 'Add track...',\n        onClick: () => {\n          if (isSessionModelWithWidgets(session)) {\n            const widget = session.addWidget(\n              'AddTrackWidget',\n              'addTrackWidget',\n              {\n                view: model.view.id,\n              },\n            )\n            session.showWidget(widget)\n          }\n        },\n      },\n\n      ...assemblyMenuItems,\n    ]\n\n    return (\n      <div\n        ref={ref => setHeaderHeight(ref?.getBoundingClientRect().height || 0)}\n        data-testid=\"hierarchical_track_selector\"\n      >\n        <div style={{ display: 'flex' }}>\n          {isSessionWithAddTracks(session) && (\n            <IconButton\n              className={classes.menuIcon}\n              onClick={event => setMenuAnchorEl(event.currentTarget)}\n            >\n              <MenuIcon />\n            </IconButton>\n          )}\n\n          {session.makeConnection && (\n            <IconButton\n              className={classes.menuIcon}\n              onClick={event => setConnectionAnchorEl(event.currentTarget)}\n            >\n              <Cable />\n            </IconButton>\n          )}\n\n          <TextField\n            className={classes.searchBox}\n            label=\"Filter tracks\"\n            value={model.filterText}\n            onChange={event => model.setFilterText(event.target.value)}\n            fullWidth\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton color=\"secondary\" onClick={model.clearFilterText}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n        <JBrowseMenu\n          anchorEl={connectionAnchorEl}\n          open={Boolean(connectionAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setConnectionAnchorEl(undefined)\n          }}\n          onClose={() => setConnectionAnchorEl(undefined)}\n          menuItems={connectionMenuItems}\n        />\n        <JBrowseMenu\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setMenuAnchorEl(undefined)\n          }}\n          onClose={() => setMenuAnchorEl(undefined)}\n          menuItems={menuItems}\n        />\n        <Suspense fallback={<div />}>\n          {modalInfo ? (\n            <CloseConnectionDialog\n              modalInfo={modalInfo}\n              setModalInfo={setModalInfo}\n            />\n          ) : deleteDialogDetails ? (\n            <DeleteConnectionDialog\n              handleClose={() => setDeleteDialogDetails(undefined)}\n              deleteDialogDetails={deleteDialogDetails}\n              session={session}\n            />\n          ) : null}\n          {connectionManagerOpen ? (\n            <ManageConnectionsDialog\n              handleClose={() => setConnectionManagerOpen(false)}\n              breakConnection={breakConnection}\n              session={session}\n            />\n          ) : null}\n          {connectionToggleOpen ? (\n            <ToggleConnectionsDialog\n              handleClose={() => setConnectionToggleOpen(false)}\n              session={session}\n              breakConnection={breakConnection}\n              assemblyName={assemblyName}\n            />\n          ) : null}\n        </Suspense>\n      </div>\n    )\n  },\n)\nconst HierarchicalTrackSelector = observer(\n  ({\n    model,\n    toolbarHeight = 0,\n  }: {\n    model: HierarchicalTrackSelectorModel\n    toolbarHeight?: number\n  }) => {\n    const [assemblyIdx, setAssemblyIdx] = useState(0)\n    const [headerHeight, setHeaderHeight] = useState(0)\n\n    const { assemblyNames } = model\n    const assemblyName = assemblyNames[assemblyIdx]\n    return assemblyName ? (\n      <>\n        <HierarchicalTrackSelectorHeader\n          model={model}\n          setHeaderHeight={setHeaderHeight}\n          setAssemblyIdx={setAssemblyIdx}\n          assemblyIdx={assemblyIdx}\n        />\n        <AutoSizedHierarchicalTree\n          tree={model.hierarchy(assemblyName)}\n          model={model}\n          offset={toolbarHeight + headerHeight}\n        />\n      </>\n    ) : null\n  },\n)\n\nexport default HierarchicalTrackSelectorContainer\n"],"names":["CloseConnectionDialog","lazy","DeleteConnectionDialog","ManageConnectionsDialog","ToggleConnectionsDialog","useStyles","makeStyles","theme","searchBox","margin","spacing","menuIcon","marginRight","marginBottom","fab","position","bottom","right","compactCheckbox","padding","checkboxLabel","backgroundColor","accordionBase","display","accordionCard","cursor","nestingLevelMarker","borderLeft","accordionColor","background","palette","tertiary","main","color","contrastText","width","paddingLeft","accordionText","Node","props","data","isOpen","style","setOpen","isLeaf","nestingLevel","checked","id","name","onChange","toggleCollapse","conf","onMoreInfo","drawerPosition","classes","marginLeft","unsupported","endsWith","description","readConfObject","className","undefined","Array","fill","map","_","idx","left","height","onClick","whiteSpace","title","placement","control","disabled","inputProps","label","e","target","currentTarget","getNodeData","node","extra","defaultHeight","isOpenByDefault","HierarchicalTree","observer","tree","model","filterText","view","treeRef","useRef","useState","info","setMoreInfo","session","getSession","useMemo","trackId","toggleTrack","pathName","toggleCategory","treeWalker","useCallback","i","children","length","r","parentMeta","curr","menuItems","getTrackActionMenuItems","useEffect","current","recomputeTree","refreshNodes","useDefaultHeight","ref","anchorEl","onMenuItemClick","_event","callback","open","Boolean","onClose","AutoSizedHierarchicalTree","offset","jest","disableWidth","Wrapper","overrideDimensions","HierarchicalTrackSelectorContainer","toolbarHeight","setAnchorEl","handleFabClose","hasConnections","isSessionModelWithConnections","hasAddTrack","isSessionWithAddTracks","HierarchicalTrackSelector","event","isSessionModelWithWidgets","showWidget","addWidget","HierarchicalTrackSelectorHeader","setHeaderHeight","setAssemblyIdx","assemblyIdx","connectionAnchorEl","setConnectionAnchorEl","menuAnchorEl","setMenuAnchorEl","modalInfo","setModalInfo","deleteDialogDetails","setDeleteDialogDetails","connectionManagerOpen","setConnectionManagerOpen","connectionToggleOpen","setConnectionToggleOpen","assemblyNames","assemblyName","breakConnection","connectionConf","deletingConnection","result","prepareToBreakConnection","safelyBreakConnection","dereferenceTypeCount","Object","keys","connectionMenuItems","unshift","widget","push","assemblyMenuItems","subMenu","getBoundingClientRect","makeConnection","value","setFilterText","fullWidth","InputProps","endAdornment","clearFilterText","Suspense","fallback","handleClose","headerHeight","hierarchy"],"sourceRoot":""}