{"version":3,"file":"static/js/2439.ea8e29cd.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AssemblyManager/AssemblyTable.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyAddForm.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyEditor.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyManager.tsx","../../../node_modules/@mui/icons-material/ArrowBackIos.js","../../../node_modules/@mui/icons-material/Create.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport CreateIcon from '@mui/icons-material/Create'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()(() => ({\n  table: {\n    minWidth: 500,\n    minHeight: 150,\n  },\n  buttonCell: {\n    padding: 3,\n  },\n  button: {\n    display: 'inline-block',\n    padding: 3,\n    minHeight: 0,\n    minWidth: 0,\n  },\n}))\n\nconst AssemblyTable = observer(\n  ({\n    rootModel,\n    setIsAssemblyBeingEdited,\n    setAssemblyBeingEdited,\n  }: {\n    rootModel: {\n      jbrowse: {\n        removeAssemblyConf: (arg: string) => void\n        assemblies: AnyConfigurationModel[]\n      }\n    }\n    setIsAssemblyBeingEdited(arg: boolean): void\n    setAssemblyBeingEdited(arg: AnyConfigurationModel): void\n  }) => {\n    const { classes } = useStyles()\n\n    function removeAssembly(name: string) {\n      rootModel.jbrowse.removeAssemblyConf(name)\n    }\n\n    const rows = rootModel.jbrowse.assemblies.map(assembly => {\n      const name = readConfObject(assembly, 'name')\n      const displayName = readConfObject(assembly, 'displayName')\n      const aliases = readConfObject(assembly, 'aliases')\n      return (\n        <TableRow key={name}>\n          <TableCell>{name}</TableCell>\n          <TableCell>{displayName}</TableCell>\n          <TableCell>{aliases ? aliases.toString() : ''}</TableCell>\n          <TableCell className={classes.buttonCell}>\n            <IconButton\n              data-testid={`${name}-edit`}\n              className={classes.button}\n              onClick={() => {\n                setIsAssemblyBeingEdited(true)\n                setAssemblyBeingEdited(assembly)\n              }}\n            >\n              <CreateIcon color=\"primary\" />\n            </IconButton>\n            <IconButton\n              data-testid={`${name}-delete`}\n              className={classes.button}\n              onClick={() => {\n                removeAssembly(name)\n              }}\n            >\n              <DeleteIcon color=\"error\" />\n            </IconButton>\n          </TableCell>\n        </TableRow>\n      )\n    })\n\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant=\"h5\">Name</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Display name</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Aliases</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Actions</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    )\n  },\n)\n\nexport default AssemblyTable\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport FileSelector from '@jbrowse/core/ui/FileSelector'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { Button, Grid, MenuItem, Paper, TextField } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport AddIcon from '@mui/icons-material/Add'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  paper: {\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n  createButton: {\n    marginTop: '1em',\n    justifyContent: 'center',\n  },\n  paperContent: {\n    flex: 'auto',\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(1),\n    overflow: 'auto',\n  },\n}))\n\nconst AdapterSelector = observer(\n  ({\n    adapterSelection,\n    setAdapterSelection,\n    adapterTypes,\n  }: {\n    adapterSelection: string\n    setAdapterSelection: Function\n    adapterTypes: string[]\n  }) => {\n    return (\n      <TextField\n        value={adapterSelection}\n        label=\"Type\"\n        select\n        helperText=\"Type of adapter to use\"\n        fullWidth\n        onChange={event => {\n          setAdapterSelection(event.target.value)\n        }}\n      >\n        {adapterTypes.map(str => (\n          <MenuItem key={str} value={str}>\n            {str}\n          </MenuItem>\n        ))}\n      </TextField>\n    )\n  },\n)\n\nconst AdapterInput = observer(\n  ({\n    adapterSelection,\n    fastaLocation,\n    setFastaLocation,\n    faiLocation,\n    setFaiLocation,\n    gziLocation,\n    setGziLocation,\n    twoBitLocation,\n    setTwoBitLocation,\n    chromSizesLocation,\n    setChromSizesLocation,\n  }: {\n    adapterSelection: string\n    fastaLocation: FileLocation\n    setFastaLocation: Function\n    faiLocation: FileLocation\n    setFaiLocation: Function\n    gziLocation: FileLocation\n    setGziLocation: Function\n    twoBitLocation: FileLocation\n    setTwoBitLocation: Function\n    chromSizesLocation: FileLocation\n    setChromSizesLocation: Function\n  }) => {\n    if (\n      adapterSelection === 'IndexedFastaAdapter' ||\n      adapterSelection === 'BgzipFastaAdapter'\n    ) {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"fastaLocation\"\n              location={fastaLocation}\n              setLocation={loc => setFastaLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"faiLocation\"\n              location={faiLocation}\n              setLocation={loc => setFaiLocation(loc)}\n            />\n          </Grid>\n          {adapterSelection === 'BgzipFastaAdapter' ? (\n            <Grid item>\n              <FileSelector\n                name=\"gziLocation\"\n                location={gziLocation}\n                setLocation={loc => setGziLocation(loc)}\n              />\n            </Grid>\n          ) : null}\n        </Grid>\n      )\n    }\n\n    if (adapterSelection === 'TwoBitAdapter') {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"twoBitLocation\"\n              location={twoBitLocation}\n              setLocation={loc => setTwoBitLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\"\n              location={chromSizesLocation}\n              setLocation={loc => setChromSizesLocation(loc)}\n            />\n          </Grid>\n        </Grid>\n      )\n    }\n\n    return null\n  },\n)\n\nconst blank = { uri: '' } as FileLocation\n\nconst AssemblyAddForm = observer(\n  ({\n    rootModel,\n    setFormOpen,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    setFormOpen: Function\n  }) => {\n    const { classes } = useStyles()\n\n    const adapterTypes = [\n      'IndexedFastaAdapter',\n      'BgzipFastaAdapter',\n      'TwoBitAdapter',\n    ]\n\n    const [assemblyName, setAssemblyName] = useState('')\n    const [assemblyDisplayName, setAssemblyDisplayName] = useState('')\n    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0])\n    const [fastaLocation, setFastaLocation] = useState(blank)\n    const [faiLocation, setFaiLocation] = useState(blank)\n    const [gziLocation, setGziLocation] = useState(blank)\n    const [twoBitLocation, setTwoBitLocation] = useState(blank)\n    const [chromSizesLocation, setChromSizesLocation] = useState(blank)\n\n    function createAssembly() {\n      if (assemblyName === '') {\n        rootModel.session.notify(\"Can't create an assembly without a name\")\n      } else {\n        setFormOpen(false)\n        let newAssembly\n        if (adapterSelection === 'IndexedFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'IndexedFastaAdapter',\n                fastaLocation,\n                faiLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'BgzipFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'BgzipFastaAdapter',\n                fastaLocation,\n                faiLocation,\n                gziLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'TwoBitAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'TwoBitAdapter',\n                twoBitLocation,\n                chromSizesLocation,\n              },\n            },\n          }\n        }\n        rootModel.jbrowse.addAssemblyConf(newAssembly)\n        rootModel.session.notify(\n          `Successfully added ${assemblyName} assembly to JBrowse 2`,\n          'success',\n        )\n      }\n    }\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <TextField\n            id=\"assembly-name\"\n            inputProps={{ 'data-testid': 'assembly-name' }}\n            label=\"Assembly name\"\n            helperText=\"The assembly name e.g. hg38\"\n            variant=\"outlined\"\n            value={assemblyName}\n            onChange={event => setAssemblyName(event.target.value)}\n          />\n          <TextField\n            id=\"assembly-name\"\n            inputProps={{ 'data-testid': 'assembly-display-name' }}\n            label=\"Assembly display name\"\n            helperText='A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"'\n            variant=\"outlined\"\n            value={assemblyDisplayName}\n            onChange={event => setAssemblyDisplayName(event.target.value)}\n          />\n          <AdapterSelector\n            adapterSelection={adapterSelection}\n            setAdapterSelection={setAdapterSelection}\n            adapterTypes={adapterTypes}\n          />\n          <div className={classes.paperContent}>\n            <AdapterInput\n              adapterSelection={adapterSelection}\n              fastaLocation={fastaLocation}\n              setFastaLocation={setFastaLocation}\n              faiLocation={faiLocation}\n              setFaiLocation={setFaiLocation}\n              gziLocation={gziLocation}\n              setGziLocation={setGziLocation}\n              twoBitLocation={twoBitLocation}\n              setTwoBitLocation={setTwoBitLocation}\n              chromSizesLocation={chromSizesLocation}\n              setChromSizesLocation={setChromSizesLocation}\n            />\n          </div>\n        </Paper>\n        <Grid container className={classes.createButton}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<AddIcon />}\n              onClick={createAssembly}\n            >\n              Create new assembly\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  },\n)\n\nexport default AssemblyAddForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\n\nconst AssemblyEditor = observer(\n  ({\n    assembly,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assembly: any\n  }) => {\n    return <ConfigurationEditor model={{ target: assembly }} />\n  },\n)\n\nexport default AssemblyEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n} from '@mui/material'\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos'\nimport CloseIcon from '@mui/icons-material/Close'\nimport AddIcon from '@mui/icons-material/Add'\n\nimport AssemblyTable from './AssemblyTable'\nimport AssemblyAddForm from './AssemblyAddForm'\nimport AssemblyEditor from './AssemblyEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  titleBox: {\n    color: '#fff',\n    backgroundColor: theme.palette.primary.main,\n    textAlign: 'center',\n  },\n  dialogContent: {\n    width: '100%',\n  },\n  backButton: {\n    color: '#fff',\n    position: 'absolute',\n    left: theme.spacing(4),\n    top: theme.spacing(4),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nconst AssemblyManager = observer(\n  ({\n    rootModel,\n    onClose,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    onClose: (arg: boolean) => void\n  }) => {\n    const { classes } = useStyles()\n    const [isFormOpen, setFormOpen] = useState(false)\n    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false)\n    const [assemblyBeingEdited, setAssemblyBeingEdited] =\n      useState<AnyConfigurationModel>()\n\n    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited\n\n    return (\n      <Dialog open onClose={() => onClose(false)}>\n        <DialogTitle className={classes.titleBox}>\n          {showAssemblyTable ? 'Assembly manager' : null}\n          {isFormOpen ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setFormOpen(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              Add new assembly\n            </>\n          ) : null}\n          {isAssemblyBeingEdited ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setIsAssemblyBeingEdited(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              {returnAssemblyName(assemblyBeingEdited)}\n            </>\n          ) : null}\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={() => onClose(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <div className={classes.dialogContent}>\n            {showAssemblyTable ? (\n              <AssemblyTable\n                rootModel={rootModel}\n                setIsAssemblyBeingEdited={setIsAssemblyBeingEdited}\n                setAssemblyBeingEdited={setAssemblyBeingEdited}\n              />\n            ) : null}\n            {isAssemblyBeingEdited ? (\n              <AssemblyEditor assembly={assemblyBeingEdited} />\n            ) : null}\n            {isFormOpen ? (\n              <AssemblyAddForm\n                rootModel={rootModel}\n                setFormOpen={setFormOpen}\n              />\n            ) : null}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          {showAssemblyTable ? (\n            <>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => onClose(false)}\n              >\n                Close\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                startIcon={<AddIcon />}\n                onClick={() => setFormOpen(true)}\n              >\n                Add new assembly\n              </Button>\n            </>\n          ) : null}\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction returnAssemblyName(assembly: any) {\n  if (assembly !== undefined) {\n    return assembly.name\n  }\n  return null\n}\n\nexport default AssemblyManager\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.67 3.87 9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z\"\n}), 'ArrowBackIos');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\n\nexports.default = _default;"],"names":["useStyles","makeStyles","table","minWidth","minHeight","buttonCell","padding","button","display","observer","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","classes","rows","jbrowse","assemblies","map","assembly","name","readConfObject","displayName","aliases","TableRow","TableCell","toString","className","IconButton","onClick","Create","color","removeAssemblyConf","removeAssembly","Delete","TableContainer","component","Paper","Table","TableHead","Typography","variant","TableBody","theme","root","flexGrow","overflow","spacing","paper","margin","createButton","marginTop","justifyContent","paperContent","flex","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","value","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","chromSizesLocation","setChromSizesLocation","Grid","container","item","FileSelector","location","setLocation","loc","blank","uri","setFormOpen","useState","assemblyName","setAssemblyName","assemblyDisplayName","setAssemblyDisplayName","id","inputProps","Button","startIcon","Add","newAssembly","session","notify","sequence","adapter","type","addAssemblyConf","model","titleBox","backgroundColor","palette","primary","main","textAlign","dialogContent","width","backButton","position","left","top","closeButton","right","grey","returnAssemblyName","undefined","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","open","DialogTitle","ArrowBackIos","Close","DialogContent","DialogActions","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}