{"version":3,"sources":["../../../plugins/sequence/src/TwoBitAdapter/TwoBitAdapter.ts"],"names":["TwoBitAdapter","config","getSubAdapter","pluginManager","twobit","chromSizesData","initChromSizes","TwoBitFile","filehandle","openLocation","readConfObject","conf","this","uri","file","readFile","data","Object","fromEntries","split","filter","line","trim","map","undefined","keys","getSequenceNames","refName","start","end","getSequenceSizes","refSizes","ObservableCreate","observer","a","getSequenceSize","size","regionEnd","Math","min","getSequence","seq","next","SimpleFeature","id","complete","BaseSequenceAdapter"],"mappings":"gSAWqBA,E,kDA4BnB,WACEC,EACAC,EACAC,GACA,kCACA,cAAMF,EAAQC,EAAeC,IAhCvBC,YA+BN,IA3BQC,oBA2BR,EAEA,EAAKA,eAAiB,EAAKC,iBAC3B,EAAKF,OAAS,IAAIG,IAAW,CAC3BC,WAAYC,uBACVC,yBAAeT,EAAQ,kBACvB,EAAKE,iBANT,E,yFAzBF,2FAKmB,kCAJXQ,EAAOD,yBAAeE,KAAKX,OAAQ,uBAIhCY,KAAuD,KAAbF,EAAKE,IAL1D,uBAMUC,EAAOL,uBAAaE,EAAMC,KAAKT,eANzC,SAOuBW,EAAKC,SAAS,QAPrC,cAOUC,EAPV,yBAQWC,OAAOC,YAAP,OACLF,QADK,IACLA,OADK,EACLA,EACIG,MAAM,MACPC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,UACtBC,KAAI,SAAAF,GACH,MAAuBA,EAAKF,MAAM,MAAlC,mBACA,MAAO,CADP,iBAbV,qCAkBSK,GAlBT,gD,sHAoCA,oGAC+BZ,KAAKP,eADpC,YACQA,EADR,iDAGWY,OAAOQ,KAAKpB,IAHvB,gCAKSO,KAAKR,OAAOsB,oBALrB,gD,qHAQA,sGAC+Bd,KAAKP,eADpC,YACQA,EADR,iDAGWY,OAAOQ,KAAKpB,GAAgBkB,KAAI,SAAAI,GAAO,MAAK,CACjDA,UACAC,MAAO,EACPC,IAAKxB,EAAesB,QAN1B,uBASyBf,KAAKR,OAAO0B,mBATrC,cASQC,EATR,yBAUSd,OAAOQ,KAAKM,GAAUR,KAAI,SAAAI,GAAO,MAAK,CAC3CA,UACAC,MAAO,EACPC,IAAKE,EAASJ,QAblB,gD,+EAsBA,YAA8D,WAAzCA,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,IACnC,OAAOG,2BAAgB,uCAAU,WAAMC,GAAN,mBAAAC,EAAA,sEACZ,EAAK9B,OAAO+B,gBAAgBR,GADhB,cACzBS,EADyB,OAEzBC,OAAqBb,IAATY,EAAqBE,KAAKC,IAAIH,EAAMP,GAAOA,EAF9B,SAGb,EAAKzB,OAAOoC,YAAYb,EAASC,EAAOS,GAH3B,QAGzBI,EAHyB,SAK7BR,EAASS,KACP,IAAIC,IAAc,CAChBC,GAAI,GAAF,OAAKjB,EAAL,YAAgBC,EAAhB,YAAyBS,GAC3BrB,KAAM,CAAEW,UAASC,QAAOC,IAAKQ,EAAWI,UAI9CR,EAASY,WAZsB,2CAAV,yD,2BAqBzB,gB,GA/FyCC","file":"static/js/78.5491e8e8.chunk.js","sourcesContent":["import { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TwoBitFile } from '@gmod/twobit'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class TwoBitAdapter extends BaseSequenceAdapter {\n  private twobit: TwoBitFile\n\n  // the chromSizesData can be used to speed up loading since TwoBit has to do\n  // many range requests at startup to perform the getRegions request\n  protected chromSizesData: Promise<Record<string, number> | undefined>\n\n  private async initChromSizes() {\n    const conf = readConfObject(this.config, 'chromSizesLocation')\n    // check against default and empty in case someone makes the field blank in\n    // config editor, may want better way to check \"optional config slots\" in\n    // future\n    if (conf.uri !== '/path/to/default.chrom.sizes' && conf.uri !== '') {\n      const file = openLocation(conf, this.pluginManager)\n      const data = await file.readFile('utf8')\n      return Object.fromEntries(\n        data\n          ?.split('\\n')\n          .filter(line => !!line.trim())\n          .map(line => {\n            const [name, length] = line.split('\\t')\n            return [name, +length]\n          }),\n      )\n    }\n    return undefined\n  }\n\n  constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    this.chromSizesData = this.initChromSizes()\n    this.twobit = new TwoBitFile({\n      filehandle: openLocation(\n        readConfObject(config, 'twoBitLocation'),\n        this.pluginManager,\n      ),\n    })\n  }\n\n  public async getRefNames() {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData)\n    }\n    return this.twobit.getSequenceNames()\n  }\n\n  public async getRegions(): Promise<NoAssemblyRegion[]> {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData).map(refName => ({\n        refName,\n        start: 0,\n        end: chromSizesData[refName],\n      }))\n    }\n    const refSizes = await this.twobit.getSequenceSizes()\n    return Object.keys(refSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: refSizes[refName],\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.twobit.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const seq = await this.twobit.getSequence(refName, start, regionEnd)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}