{"version":3,"file":"static/js/1702.f641c8e4.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/DraggableDialog.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SourcesGrid.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SetColorDialog.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import React from 'react'\nimport {\n  Dialog,\n  DialogTitle,\n  IconButton,\n  Divider,\n  DialogProps,\n  Paper,\n  PaperProps,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\nimport Draggable from 'react-draggable'\n\n// icons\nimport CloseIcon from '@mui/icons-material/Close'\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\n// draggable dialog demo https://mui.com/material-ui/react-dialog/#draggable-dialog\nfunction PaperComponent(props: PaperProps) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog\n      {...props}\n      PaperComponent={PaperComponent}\n      aria-labelledby=\"draggable-dialog-title\" // this area is important for the draggable functionality\n    >\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","import React, { useState } from 'react'\nimport { Button } from '@mui/material'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport { DataGrid, GridCellParams } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport { moveUp, moveDown } from './util'\nimport { Source } from '../../util'\n\n// icons\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const { classes } = useStyles()\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [selected, setSelected] = useState([] as string[])\n\n  // @ts-expect-error\n  const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0]\n  const [widgetColor, setWidgetColor] = useState('blue')\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div>\n      <Button\n        disabled={!selected.length}\n        onClick={event => setAnchorEl(event.currentTarget)}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        onClick={() => onChange(moveUp([...rows], selected))}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        onClick={() => onChange(moveDown([...rows], selected))}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        onClick={() => onChange(moveUp([...rows], selected, rows.length))}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        onClick={() => onChange(moveDown([...rows], selected, rows.length))}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          selected.forEach(id => {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          })\n\n          onChange([...rows])\n        }}\n        onClose={() => setAnchorEl(null)}\n      />\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          getRowId={row => row.name}\n          checkboxSelection\n          disableRowSelectionOnClick\n          onRowSelectionModelChange={arg => setSelected(arg as string[])}\n          rows={rows}\n          rowHeight={25}\n          columnHeaderHeight={33}\n          columns={[\n            {\n              field: 'color',\n              headerName: 'Color',\n              renderCell: params => {\n                const { value, id } = params\n                return (\n                  <ColorPicker\n                    color={value || 'blue'}\n                    onChange={c => {\n                      const elt = rows.find(f => f.name === id)\n                      if (elt) {\n                        elt.color = c\n                      }\n                      onChange([...rows])\n                    }}\n                  />\n                )\n              },\n            },\n            {\n              field: 'name',\n              sortingOrder: [null],\n              headerName: 'Name',\n              width: measureGridWidth(rows.map(r => r.name)),\n            },\n            ...Object.keys(rest).map(val => ({\n              field: val,\n              sortingOrder: [null],\n              renderCell: (params: GridCellParams) => {\n                const { value } = params\n                return (\n                  <div className={classes.cell}>\n                    <SanitizedHTML html={getStr(value)} />\n                  </div>\n                )\n              },\n              // @ts-ignore\n              width: measureGridWidth(rows.map(r => r[val])),\n            })),\n          ]}\n          sortModel={\n            [\n              /* we control the sort as a controlled component using onSortModelChange */\n            ]\n          }\n          onSortModelChange={args => {\n            const sort = args[0]\n            const idx = (currSort.idx + 1) % 2\n            const field = sort?.field || currSort.field\n            setCurrSort({ idx, field })\n            onChange(\n              field\n                ? [...rows].sort((a, b) => {\n                    // @ts-expect-error\n                    const aa = getStr(a[field])\n                    // @ts-expect-error\n                    const bb = getStr(b[field])\n                    return idx === 1\n                      ? aa.localeCompare(bb)\n                      : bb.localeCompare(aa)\n                  })\n                : rows,\n            )\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SourcesGrid\n","import React, { useState } from 'react'\nimport { Button, DialogContent, DialogActions } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport clone from 'clone'\n\n// locals\nimport DraggableDialog from './DraggableDialog'\nimport { Source } from '../../util'\nimport SourcesGrid from './SourcesGrid'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n})\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    sources?: Source[]\n    setLayout: (s: Source[]) => void\n    clearLayout: () => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [currLayout, setCurrLayout] = useState(clone(sources || []))\n  const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', true)\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title={'Multi-wiggle color/arrangement editor'}\n    >\n      <DialogContent className={classes.content}>\n        <Button\n          variant=\"contained\"\n          style={{ float: 'right' }}\n          onClick={() => setShowTips(!showTips)}\n        >\n          {showTips ? 'Hide tips' : 'Show tips'}\n        </Button>\n        <br />\n        {showTips ? (\n          <>\n            Helpful tips\n            <ul>\n              <li>You can select rows in the table with the checkboxes</li>\n              <li>\n                Multi-select is enabled with shift-click and control-click\n              </li>\n              <li>\n                The \"Move selected items up/down\" can re-arrange subtracks\n              </li>\n              <li>\n                Sorting the data grid itself can also re-arrange subtracks\n              </li>\n              <li>Changes are applied when you hit Submit</li>\n              <li>\n                You can click and drag the dialog box to move it on the screen\n              </li>\n              <li>\n                Columns in the table can be hidden using a vertical '...' menu\n                on the right side of each column\n              </li>\n            </ul>\n          </>\n        ) : null}\n        <SourcesGrid\n          rows={currLayout}\n          onChange={setCurrLayout}\n          showTips={showTips}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"inherit\"\n          onClick={() => {\n            model.clearLayout()\n            setCurrLayout(model.sources || [])\n          }}\n        >\n          Clear custom settings\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            setCurrLayout([...(model.sources || [])])\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            model.setLayout(currLayout)\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </DraggableDialog>\n  )\n}\n","import {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\nimport { WiggleDisplayModel } from '../models/model'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","React","Draggable","handle","cancel","Paper","observer","classes","title","children","onClose","Dialog","_extends","ScopedCssBaseline","DialogTitle","style","cursor","id","IconButton","className","onClick","CloseIcon","Divider","cell","whiteSpace","overflow","textOverflow","rows","onChange","showTips","anchorEl","setAnchorEl","useState","selected","setSelected","name","_name","_color","baseUri","_baseUri","rest","widgetColor","setWidgetColor","currSort","setCurrSort","idx","field","Button","disabled","length","event","currentTarget","moveUp","KeyboardArrowUpIcon","moveDown","KeyboardArrowDownIcon","KeyboardDoubleArrowUpIcon","KeyboardDoubleArrowDownIcon","ColorPopover","c","forEach","elt","find","f","height","width","DataGrid","getRowId","row","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","arg","rowHeight","columnHeaderHeight","columns","headerName","renderCell","params","value","ColorPicker","sortingOrder","measureGridWidth","map","r","Object","keys","val","SanitizedHTML","html","getStr","sortModel","onSortModelChange","args","sort","a","b","aa","bb","localeCompare","content","minWidth","SetColorDialog","model","handleClose","sources","currLayout","setCurrLayout","clone","setShowTips","useLocalStorage","DraggableDialog","open","maxWidth","DialogContent","variant","float","SourcesGrid","DialogActions","type","clearLayout","setLayout","arr","sel","by","idxs","l","findIndex","v","lastIdx","old","Math","max","splice","min","trackLabelFontSize","getOffset","prefersOffset","trackLabels","getContainingView","track","getContainingTrack","trackName","getConf","measureText"],"sourceRoot":""}