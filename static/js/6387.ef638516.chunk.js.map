{"version":3,"file":"static/js/6387.ef638516.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/hooks.ts","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeatureDetails.tsx","../../../node_modules/@mui/icons-material/Settings.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { SeqState, ErrorState } from '../util'\nimport { Feature, SimpleFeatureSerialized, getSession } from '../../util'\nimport { getConf } from '../../configuration'\n\nconst BPLIMIT = 500_000\n\ninterface CoordFeat extends SimpleFeatureSerialized {\n  refName: string\n  start: number\n  end: number\n}\n\nexport function useFeatureSequence(\n  model: { view?: { assemblyNames?: string[] } } | undefined,\n  feature: SimpleFeatureSerialized,\n  upDownBp: number,\n  forceLoad: boolean,\n) {\n  const [sequence, setSequence] = useState<SeqState | ErrorState>()\n  const [error, setError] = useState<unknown>()\n  useEffect(() => {\n    let finished = false\n    if (!model) {\n      return () => {}\n    }\n    const { assemblyManager, rpcManager } = getSession(model)\n    const [assemblyName] = model.view?.assemblyNames || []\n    async function fetchSeq(start: number, end: number, refName: string) {\n      const assembly = await assemblyManager.waitForAssembly(assemblyName)\n      if (!assembly) {\n        throw new Error('assembly not found')\n      }\n      const sessionId = 'getSequence'\n      const feats = await rpcManager.call(sessionId, 'CoreGetFeatures', {\n        adapterConfig: getConf(assembly, ['sequence', 'adapter']),\n        sessionId,\n        regions: [\n          {\n            start,\n            end,\n            refName: assembly.getCanonicalRefName(refName),\n            assemblyName,\n          },\n        ],\n      })\n\n      const [feat] = feats as Feature[]\n      return (feat?.get('seq') as string | undefined) || ''\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        const { start, end, refName } = feature as CoordFeat\n\n        if (!forceLoad && end - start > BPLIMIT) {\n          setSequence({\n            error: `Genomic sequence larger than ${BPLIMIT}bp, use \"force load\" button to display`,\n          })\n        } else {\n          const b = start - upDownBp\n          const e = end + upDownBp\n          const seq = await fetchSeq(start, end, refName)\n          const up = await fetchSeq(Math.max(0, b), start, refName)\n          const down = await fetchSeq(end, e, refName)\n          if (!finished) {\n            setSequence({ seq, upstream: up, downstream: down })\n          }\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n\n    return () => {\n      finished = true\n    }\n  }, [feature, model, upDownBp, forceLoad])\n  return { sequence, error }\n}\n","import React, { lazy, useRef, useState, Suspense } from 'react'\nimport {\n  Button,\n  FormControl,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n  Tooltip,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport copy from 'copy-to-clipboard'\n\n// locals\nimport { useLocalStorage } from '../../util'\nimport { BaseProps } from './../types'\nimport { ParentFeat } from '../util'\nimport { LoadingEllipses } from '../../ui'\n\n// icons\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { useFeatureSequence } from './hooks'\n\n// lazies\nconst SettingsDlg = lazy(() => import('./SequenceFeatureSettingsDialog'))\nconst SequencePanel = lazy(() => import('./SequencePanel'))\n\nconst useStyles = makeStyles()(theme => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  formControl: {\n    margin: 0,\n  },\n  container2: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\n// set the key on this component to feature.id to clear state after new feature\n// is selected\nexport default function SequenceFeatureDetails({\n  model,\n  feature: prefeature,\n}: BaseProps) {\n  const { classes } = useStyles()\n  const feature = prefeature as unknown as ParentFeat\n  const seqPanelRef = useRef<HTMLDivElement>(null)\n  const [intronBp, setIntronBp] = useLocalStorage('intronBp', 10)\n  const [upDownBp, setUpDownBp] = useLocalStorage('upDownBp', 500)\n  const [copied, setCopied] = useState(false)\n  const [copiedHtml, setCopiedHtml] = useState(false)\n  const [force, setForce] = useState(false)\n  const hasCDS = feature.subfeatures?.some(sub => sub.type === 'CDS')\n  const hasExon = feature.subfeatures?.some(sub => sub.type === 'exon')\n  const hasExonOrCDS = hasExon || hasCDS\n  const { sequence, error } = useFeatureSequence(\n    model,\n    prefeature,\n    upDownBp,\n    force,\n  )\n\n  const [mode, setMode] = useState(\n    hasCDS ? 'cds' : hasExon ? 'cdna' : 'genomic',\n  )\n\n  const rest = {\n    ...(hasCDS ? { cds: 'CDS' } : {}),\n    ...(hasCDS ? { protein: 'Protein' } : {}),\n    ...(hasExonOrCDS ? { cdna: 'cDNA' } : {}),\n    ...(hasExonOrCDS ? { gene: `Genomic w/ full introns` } : {}),\n    ...(hasExonOrCDS\n      ? {\n          gene_updownstream: `Genomic w/ full introns +/- ${upDownBp}bp up+down stream`,\n        }\n      : {}),\n    ...(hasExonOrCDS\n      ? { gene_collapsed_intron: `Genomic w/ ${intronBp}bp intron` }\n      : {}),\n    ...(hasExonOrCDS\n      ? {\n          gene_updownstream_collapsed_intron: `Genomic w/ ${intronBp}bp intron +/- ${upDownBp}bp up+down stream `,\n        }\n      : {}),\n\n    ...(!hasExonOrCDS ? { genomic: 'Genomic' } : {}),\n    ...(!hasExonOrCDS\n      ? {\n          genomic_sequence_updownstream: `Genomic +/- ${upDownBp}bp up+down stream`,\n        }\n      : {}),\n  }\n\n  return (\n    <div className={classes.container2}>\n      <FormControl className={classes.formControl}>\n        <Select value={mode} onChange={event => setMode(event.target.value)}>\n          {Object.entries(rest).map(([key, val]) => (\n            <MenuItem key={key} value={key}>\n              {val}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl className={classes.formControl}>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          onClick={() => {\n            const ref = seqPanelRef.current\n            if (ref) {\n              copy(ref.textContent || '', { format: 'text/plain' })\n              setCopied(true)\n              setTimeout(() => setCopied(false), 1000)\n            }\n          }}\n        >\n          {copied ? 'Copied to clipboard!' : 'Copy plaintext'}\n        </Button>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <Tooltip title=\"The 'Copy HTML' function retains the colors from the sequence panel but cannot be pasted into some programs like notepad that only expect plain text\">\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            onClick={() => {\n              const ref = seqPanelRef.current\n              if (!ref) {\n                return\n              }\n              copy(ref.innerHTML, { format: 'text/html' })\n              setCopiedHtml(true)\n              setTimeout(() => setCopiedHtml(false), 1000)\n            }}\n          >\n            {copiedHtml ? 'Copied to clipboard!' : 'Copy HTML'}\n          </Button>\n        </Tooltip>\n      </FormControl>\n      <Settings\n        upDownBp={upDownBp}\n        intronBp={intronBp}\n        setIntronBp={setIntronBp}\n        setUpDownBp={setUpDownBp}\n      />\n      <br />\n      {feature.type === 'gene' ? (\n        <Typography>\n          Note: inspect subfeature sequences for protein/CDS computations\n        </Typography>\n      ) : null}\n      {error ? (\n        <Typography color=\"error\">{`${error}`}</Typography>\n      ) : !sequence ? (\n        <LoadingEllipses />\n      ) : sequence ? (\n        'error' in sequence ? (\n          <>\n            <Typography color=\"error\">{sequence.error}</Typography>\n            <Button\n              variant=\"contained\"\n              color=\"inherit\"\n              onClick={() => setForce(true)}\n            >\n              Force load\n            </Button>\n          </>\n        ) : (\n          <Suspense fallback={<LoadingEllipses />}>\n            <SequencePanel\n              ref={seqPanelRef}\n              feature={feature}\n              mode={mode}\n              sequence={sequence}\n              intronBp={intronBp}\n            />\n          </Suspense>\n        )\n      ) : (\n        <Typography>No sequence found</Typography>\n      )}\n    </div>\n  )\n}\n\nfunction Settings({\n  intronBp,\n  upDownBp,\n  setIntronBp,\n  setUpDownBp,\n}: {\n  intronBp: number\n  upDownBp: number\n  setIntronBp: (arg: number) => void\n  setUpDownBp: (arg: number) => void\n}) {\n  const { classes } = useStyles()\n  const [settingsDlgOpen, setSettingsDlgOpen] = useState(false)\n  return (\n    <>\n      <FormControl className={classes.formControl}>\n        <IconButton onClick={() => setSettingsDlgOpen(true)}>\n          <SettingsIcon />\n        </IconButton>\n      </FormControl>\n      {settingsDlgOpen ? (\n        <Suspense fallback={<div />}>\n          <SettingsDlg\n            handleClose={arg => {\n              if (arg) {\n                const { upDownBp, intronBp } = arg\n                setIntronBp(intronBp)\n                setUpDownBp(upDownBp)\n              }\n              setSettingsDlgOpen(false)\n            }}\n            upDownBp={upDownBp}\n            intronBp={intronBp}\n          />\n        </Suspense>\n      ) : null}\n    </>\n  )\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\n}), 'Settings');\nexports.default = _default;"],"names":["BPLIMIT","SettingsDlg","lazy","SequencePanel","useStyles","makeStyles","theme","button","margin","spacing","formControl","container2","marginTop","SequenceFeatureDetails","model","feature","prefeature","classes","seqPanelRef","useRef","intronBp","setIntronBp","useLocalStorage","upDownBp","setUpDownBp","copied","setCopied","useState","copiedHtml","setCopiedHtml","force","setForce","hasCDS","subfeatures","some","sub","type","hasExon","hasExonOrCDS","sequence","error","forceLoad","setSequence","setError","useEffect","finished","assemblyManager","rpcManager","getSession","assemblyName","view","assemblyNames","async","fetchSeq","start","end","refName","assembly","waitForAssembly","Error","sessionId","feats","call","adapterConfig","getConf","regions","getCanonicalRefName","feat","get","undefined","b","e","seq","up","Math","max","down","upstream","downstream","console","useFeatureSequence","mode","setMode","rest","cds","protein","cdna","gene","gene_updownstream","gene_collapsed_intron","gene_updownstream_collapsed_intron","genomic","genomic_sequence_updownstream","React","className","FormControl","Select","value","onChange","event","target","Object","entries","map","key","val","MenuItem","Button","variant","onClick","ref","current","copy","textContent","format","setTimeout","Tooltip","title","innerHTML","Settings","Typography","color","Suspense","fallback","LoadingEllipses","settingsDlgOpen","setSettingsDlgOpen","IconButton","SettingsIcon","handleClose","arg","_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}