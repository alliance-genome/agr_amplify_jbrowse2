{"version":3,"file":"static/js/5304.c9588514.chunk.js","mappings":"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","sources":["../../../node_modules/react-simple-code-editor/src/index.js"],"sourcesContent":["/* @flow */\n/* global global */\n\nimport * as React from 'react';\n\ntype Props = React.ElementConfig<'div'> & {\n  // Props for the component\n  value: string,\n  onValueChange: (value: string) => mixed,\n  highlight: (value: string) => string | React.Node,\n  tabSize: number,\n  insertSpaces: boolean,\n  ignoreTabKey: boolean,\n  padding: number | string,\n  style?: {},\n\n  // Props for the textarea\n  textareaId?: string,\n  autoFocus?: boolean,\n  disabled?: boolean,\n  form?: string,\n  maxLength?: number,\n  minLength?: number,\n  name?: string,\n  placeholder?: string,\n  readOnly?: boolean,\n  required?: boolean,\n  onClick?: (e: MouseEvent) => mixed,\n  onFocus?: (e: FocusEvent) => mixed,\n  onBlur?: (e: FocusEvent) => mixed,\n  onKeyUp?: (e: KeyboardEvent) => mixed,\n  onKeyDown?: (e: KeyboardEvent) => mixed,\n};\n\ntype State = {\n  capture: boolean,\n};\n\ntype Record = {\n  value: string,\n  selectionStart: number,\n  selectionEnd: number,\n};\n\ntype History = {\n  stack: Array<Record & { timestamp: number }>,\n  offset: number,\n};\n\nconst KEYCODE_ENTER = 13;\nconst KEYCODE_TAB = 9;\nconst KEYCODE_BACKSPACE = 8;\nconst KEYCODE_Y = 89;\nconst KEYCODE_Z = 90;\nconst KEYCODE_M = 77;\nconst KEYCODE_PARENS = 57;\nconst KEYCODE_BRACKETS = 219;\nconst KEYCODE_QUOTE = 222;\nconst KEYCODE_BACK_QUOTE = 192;\n\nconst HISTORY_LIMIT = 100;\nconst HISTORY_TIME_GAP = 3000;\n\nconst isWindows = 'navigator' in global && /Win/i.test(navigator.platform);\nconst isMacLike =\n  'navigator' in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\nconst className = 'npm__react-simple-code-editor__textarea';\n\nconst cssText = /* CSS */ `\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.${className}:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .${className} {\n    color: transparent !important;\n  }\n\n  .${className}::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n`;\n\nexport default class Editor extends React.Component<Props, State> {\n  static defaultProps = {\n    tabSize: 2,\n    insertSpaces: true,\n    ignoreTabKey: false,\n    padding: 0,\n  };\n\n  state = {\n    capture: true,\n  };\n\n  componentDidMount() {\n    this._recordCurrentState();\n  }\n\n  _recordCurrentState = () => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Save current state of the input\n    const { value, selectionStart, selectionEnd } = input;\n\n    this._recordChange({\n      value,\n      selectionStart,\n      selectionEnd,\n    });\n  };\n\n  _getLines = (text: string, position: number) =>\n    text.substring(0, position).split('\\n');\n\n  _recordChange = (record: Record, overwrite?: boolean = false) => {\n    const { stack, offset } = this._history;\n\n    if (stack.length && offset > -1) {\n      // When something updates, drop the redo operations\n      this._history.stack = stack.slice(0, offset + 1);\n\n      // Limit the number of operations to 100\n      const count = this._history.stack.length;\n\n      if (count > HISTORY_LIMIT) {\n        const extras = count - HISTORY_LIMIT;\n\n        this._history.stack = stack.slice(extras, count);\n        this._history.offset = Math.max(this._history.offset - extras, 0);\n      }\n    }\n\n    const timestamp = Date.now();\n\n    if (overwrite) {\n      const last = this._history.stack[this._history.offset];\n\n      if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n        // A previous entry exists and was in short interval\n\n        // Match the last word in the line\n        const re = /[^a-z0-9]([a-z0-9]+)$/i;\n\n        // Get the previous line\n        const previous = this._getLines(last.value, last.selectionStart)\n          .pop()\n          .match(re);\n\n        // Get the current line\n        const current = this._getLines(record.value, record.selectionStart)\n          .pop()\n          .match(re);\n\n        if (previous && current && current[1].startsWith(previous[1])) {\n          // The last word of the previous line and current line match\n          // Overwrite previous entry so that undo will remove whole word\n          this._history.stack[this._history.offset] = { ...record, timestamp };\n\n          return;\n        }\n      }\n    }\n\n    // Add the new operation to the stack\n    this._history.stack.push({ ...record, timestamp });\n    this._history.offset++;\n  };\n\n  _updateInput = (record: Record) => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Update values and selection state\n    input.value = record.value;\n    input.selectionStart = record.selectionStart;\n    input.selectionEnd = record.selectionEnd;\n\n    this.props.onValueChange(record.value);\n  };\n\n  _applyEdits = (record: Record) => {\n    // Save last selection state\n    const input = this._input;\n    const last = this._history.stack[this._history.offset];\n\n    if (last && input) {\n      this._history.stack[this._history.offset] = {\n        ...last,\n        selectionStart: input.selectionStart,\n        selectionEnd: input.selectionEnd,\n      };\n    }\n\n    // Save the changes\n    this._recordChange(record);\n    this._updateInput(record);\n  };\n\n  _undoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the previous edit\n    const record = stack[offset - 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.max(offset - 1, 0);\n    }\n  };\n\n  _redoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the next edit\n    const record = stack[offset + 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.min(offset + 1, stack.length - 1);\n    }\n  };\n\n  _handleKeyDown = (e: *) => {\n    const { tabSize, insertSpaces, ignoreTabKey, onKeyDown } = this.props;\n\n    if (onKeyDown) {\n      onKeyDown(e);\n\n      if (e.defaultPrevented) {\n        return;\n      }\n    }\n\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    const tabCharacter = (insertSpaces ? ' ' : '     ').repeat(tabSize);\n\n    if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.state.capture) {\n      // Prevent focus change\n      e.preventDefault();\n\n      if (e.shiftKey) {\n        // Unindent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const nextValue = value\n          .split('\\n')\n          .map((line, i) => {\n            if (\n              i >= startLine &&\n              i <= endLine &&\n              line.startsWith(tabCharacter)\n            ) {\n              return line.substring(tabCharacter.length);\n            }\n\n            return line;\n          })\n          .join('\\n');\n\n        if (value !== nextValue) {\n          const startLineText = linesBeforeCaret[startLine];\n\n          this._applyEdits({\n            value: nextValue,\n            // Move the start cursor if first line in selection was modified\n            // It was modified only if it started with a tab\n            selectionStart: startLineText.startsWith(tabCharacter)\n              ? selectionStart - tabCharacter.length\n              : selectionStart,\n            // Move the end cursor by total number of characters removed\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\n          });\n        }\n      } else if (selectionStart !== selectionEnd) {\n        // Indent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const startLineText = linesBeforeCaret[startLine];\n\n        this._applyEdits({\n          value: value\n            .split('\\n')\n            .map((line, i) => {\n              if (i >= startLine && i <= endLine) {\n                return tabCharacter + line;\n              }\n\n              return line;\n            })\n            .join('\\n'),\n          // Move the start cursor by number of characters added in first line of selection\n          // Don't move it if it there was no text before cursor\n          selectionStart: /\\S/.test(startLineText)\n            ? selectionStart + tabCharacter.length\n            : selectionStart,\n          // Move the end cursor by total number of characters added\n          selectionEnd:\n            selectionEnd + tabCharacter.length * (endLine - startLine + 1),\n        });\n      } else {\n        const updatedSelection = selectionStart + tabCharacter.length;\n\n        this._applyEdits({\n          // Insert tab character at caret\n          value:\n            value.substring(0, selectionStart) +\n            tabCharacter +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_BACKSPACE) {\n      const hasSelection = selectionStart !== selectionEnd;\n      const textBeforeCaret = value.substring(0, selectionStart);\n\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n        // Prevent default delete behaviour\n        e.preventDefault();\n\n        const updatedSelection = selectionStart - tabCharacter.length;\n\n        this._applyEdits({\n          // Remove tab character at caret\n          value:\n            value.substring(0, selectionStart - tabCharacter.length) +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_ENTER) {\n      // Ignore selections\n      if (selectionStart === selectionEnd) {\n        // Get the current line\n        const line = this._getLines(value, selectionStart).pop();\n        const matches = line.match(/^\\s+/);\n\n        if (matches && matches[0]) {\n          e.preventDefault();\n\n          // Preserve indentation on inserting a new line\n          const indent = '\\n' + matches[0];\n          const updatedSelection = selectionStart + indent.length;\n\n          this._applyEdits({\n            // Insert indentation character at caret\n            value:\n              value.substring(0, selectionStart) +\n              indent +\n              value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      }\n    } else if (\n      e.keyCode === KEYCODE_PARENS ||\n      e.keyCode === KEYCODE_BRACKETS ||\n      e.keyCode === KEYCODE_QUOTE ||\n      e.keyCode === KEYCODE_BACK_QUOTE\n    ) {\n      let chars;\n\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n        chars = ['(', ')'];\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\n        if (e.shiftKey) {\n          chars = ['{', '}'];\n        } else {\n          chars = ['[', ']'];\n        }\n      } else if (e.keyCode === KEYCODE_QUOTE) {\n        if (e.shiftKey) {\n          chars = ['\"', '\"'];\n        } else {\n          chars = [\"'\", \"'\"];\n        }\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n        chars = ['`', '`'];\n      }\n\n      // If text is selected, wrap them in the characters\n      if (selectionStart !== selectionEnd && chars) {\n        e.preventDefault();\n\n        this._applyEdits({\n          value:\n            value.substring(0, selectionStart) +\n            chars[0] +\n            value.substring(selectionStart, selectionEnd) +\n            chars[1] +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart,\n          selectionEnd: selectionEnd + 2,\n        });\n      }\n    } else if (\n      (isMacLike\n        ? // Trigger undo with ⌘+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z\n        : // Trigger undo with Ctrl+Z on other platforms\n          e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n      !e.shiftKey &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._undoEdit();\n    } else if (\n      (isMacLike\n        ? // Trigger redo with ⌘+Shift+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n        : isWindows\n          ? // Trigger redo with Ctrl+Y on Windows\n            e.ctrlKey && e.keyCode === KEYCODE_Y\n          : // Trigger redo with Ctrl+Shift+Z on other platforms\n            e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._redoEdit();\n    } else if (\n      e.keyCode === KEYCODE_M &&\n      e.ctrlKey &&\n      (isMacLike ? e.shiftKey : true)\n    ) {\n      e.preventDefault();\n\n      // Toggle capturing tab key so users can focus away\n      this.setState(state => ({\n        capture: !state.capture,\n      }));\n    }\n  };\n\n  _handleChange = (e: *) => {\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    this._recordChange(\n      {\n        value,\n        selectionStart,\n        selectionEnd,\n      },\n      true\n    );\n\n    this.props.onValueChange(value);\n  };\n\n  _history: History = {\n    stack: [],\n    offset: -1,\n  };\n\n  _input: ?HTMLTextAreaElement;\n\n  get session() {\n    return {\n      history: this._history,\n    };\n  }\n\n  set session(session: { history: History }) {\n    this._history = session.history;\n  }\n\n  render() {\n    const {\n      value,\n      style,\n      padding,\n      highlight,\n      textareaId,\n      autoFocus,\n      disabled,\n      form,\n      maxLength,\n      minLength,\n      name,\n      placeholder,\n      readOnly,\n      required,\n      onClick,\n      onFocus,\n      onBlur,\n      onKeyUp,\n      /* eslint-disable no-unused-vars */\n      onKeyDown,\n      onValueChange,\n      tabSize,\n      insertSpaces,\n      ignoreTabKey,\n      /* eslint-enable no-unused-vars */\n      ...rest\n    } = this.props;\n\n    const contentStyle = {\n      paddingTop: padding,\n      paddingRight: padding,\n      paddingBottom: padding,\n      paddingLeft: padding,\n    };\n\n    const highlighted = highlight(value);\n\n    return (\n      <div {...rest} style={{ ...styles.container, ...style }}>\n        <textarea\n          ref={c => (this._input = c)}\n          style={{\n            ...styles.editor,\n            ...styles.textarea,\n            ...contentStyle,\n          }}\n          className={className}\n          id={textareaId}\n          value={value}\n          onChange={this._handleChange}\n          onKeyDown={this._handleKeyDown}\n          onClick={onClick}\n          onKeyUp={onKeyUp}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          disabled={disabled}\n          form={form}\n          maxLength={maxLength}\n          minLength={minLength}\n          name={name}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          required={required}\n          autoFocus={autoFocus}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          data-gramm={false}\n        />\n        <pre\n          aria-hidden=\"true\"\n          style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\n          {...(typeof highlighted === 'string'\n            ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\n            : { children: highlighted })}\n        />\n        {/* eslint-disable-next-line react/no-danger */}\n        <style type=\"text/css\" dangerouslySetInnerHTML={{ __html: cssText }} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    position: 'relative',\n    textAlign: 'left',\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'keep-all',\n    boxSizing: 'border-box',\n    padding: 0,\n    overflow: 'hidden',\n  },\n  textarea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    resize: 'none',\n    color: 'inherit',\n    overflow: 'hidden',\n    MozOsxFontSmoothing: 'grayscale',\n    WebkitFontSmoothing: 'antialiased',\n    WebkitTextFillColor: 'transparent',\n  },\n  highlight: {\n    position: 'relative',\n    pointerEvents: 'none',\n  },\n  editor: {\n    margin: 0,\n    border: 0,\n    background: 'none',\n    boxSizing: 'inherit',\n    display: 'inherit',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontStyle: 'inherit',\n    fontVariantLigatures: 'inherit',\n    fontWeight: 'inherit',\n    letterSpacing: 'inherit',\n    lineHeight: 'inherit',\n    tabSize: 'inherit',\n    textIndent: 'inherit',\n    textRendering: 'inherit',\n    textTransform: 'inherit',\n    whiteSpace: 'inherit',\n    wordBreak: 'inherit',\n  },\n};\n"],"names":["React","KEYCODE_Z","KEYCODE_BRACKETS","KEYCODE_QUOTE","KEYCODE_BACK_QUOTE","HISTORY_LIMIT","HISTORY_TIME_GAP","isWindows","global","test","navigator","platform","isMacLike","className","Editor","state","capture","_recordCurrentState","input","_this","_input","value","selectionStart","selectionEnd","_recordChange","_getLines","text","position","substring","split","record","overwrite","_history","stack","offset","length","slice","count","extras","Math","max","timestamp","Date","now","last","re","previous","pop","match","current","startsWith","push","_updateInput","props","onValueChange","_applyEdits","_undoEdit","_redoEdit","min","_handleKeyDown","e","tabSize","insertSpaces","ignoreTabKey","onKeyDown","defaultPrevented","target","tabCharacter","repeat","keyCode","preventDefault","shiftKey","linesBeforeCaret","startLine","endLine","nextValue","map","line","i","join","startLineText","updatedSelection","hasSelection","endsWith","matches","indent","chars","metaKey","ctrlKey","altKey","setState","_handleChange","this","style","padding","highlight","textareaId","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onClick","onFocus","onBlur","onKeyUp","rest","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","highlighted","styles","container","ref","c","_this2","editor","textarea","id","onChange","autoCapitalize","autoComplete","autoCorrect","spellCheck","dangerouslySetInnerHTML","__html","children","type","history","session","Component","defaultProps","textAlign","whiteSpace","wordBreak","boxSizing","overflow","top","left","height","width","resize","color","MozOsxFontSmoothing","WebkitFontSmoothing","WebkitTextFillColor","pointerEvents","margin","border","background","display","fontFamily","fontSize","fontStyle","fontVariantLigatures","fontWeight","letterSpacing","lineHeight","textIndent","textRendering","textTransform"],"sourceRoot":""}