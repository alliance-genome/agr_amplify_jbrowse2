{"version":3,"file":"static/js/1988.c93ebc8a.chunk.js","mappings":"8VAUA,SAASA,EAAOC,GACd,OAAkB,KAAXA,EAAI,IAAwB,MAAXA,EAAI,IAAyB,IAAXA,EAAI,EAChD,CAEO,SAASC,EACdC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAIJ,EAAKK,MAAM,MACfC,EAAOF,EAAEF,EAAO,EAAI,GACpBK,GAAUH,EAAEF,EAAO,EAAI,GACvBM,GAAQJ,EAAEF,EAAO,EAAI,GACrBO,GAAQL,EAAGF,EAAW,EAAJ,GAClBQ,GAAUN,EAAGF,EAAW,EAAJ,GACpBS,GAAQP,EAAGF,EAAW,EAAJ,GAClBU,EAAOR,EAAE,GACTS,GAAST,EAAE,GACXU,EAAUC,EAAYX,EAAE,IACxBY,EAAUD,EAAYX,EAAE,IACxBa,EAAQb,EAAEc,MAAM,GAChBC,EAAOhB,EACTiB,OAAOC,YAAYlB,EAAMe,MAAM,GAAGI,KAAI,SAACC,EAAGC,GAAG,MAAK,CAACD,EAAGN,EAAMO,GAAK,KACjEP,EAEJ,OAAO,IAAIQ,EAAAA,eAAc,gBACvBC,MAAOnB,EACPoB,IAAKnB,EACLoB,QAAStB,EACTuB,OAAQf,EACRF,KAAAA,GACGO,GAAI,IACPN,MAAAA,EACAZ,SAAAA,EACA6B,KAAM,CAAEF,QAASnB,EAAMiB,MAAOhB,EAAQiB,IAAKhB,EAAMkB,OAAQb,KAE7D,CAEA,SAASD,EAAYc,GACnB,MAAe,MAAXA,EACK,EACa,MAAXA,GACD,EACY,MAAXA,EACF,OAEP,CAEJ,CAAC,IAEoBE,EAAY,qJAUzB,OAVyB,oCACrBC,mBAAa,IAObC,cAEN,CAAC,EAAC,EAmIyB,OAnIzB,0EAIN,qIAE8C,OAFtBC,EAAiB,+BAAG,CAAC,EACrCC,EAAKC,KAAKC,cACVC,EAASF,KAAKG,QAAQ,iBAAgB,UAC1BC,EAAAA,EAAAA,cAAaF,EAAQH,GAAIM,SAASP,GAAK,OAAhD,IACMrC,EADTC,EAAG,QACiB,kCAAS4C,EAAAA,EAAAA,OAAM5C,GAAI,gDAAGA,EAAG,QAAvC,MAAN6C,EAAM,MAEDC,OAAS,WAAW,uBACvB,IAAIC,MAAM,8CAA6C,QAM/D,IAJMC,EAAO,IAAIC,YAAY,OAAQ,CAAEC,OAAO,IAAQC,OAAON,GACvDO,EAAQJ,EAAKzC,MAAM,cAAc8C,QAAO,SAAAC,GAAC,QAAMA,CAAC,IAChDC,EAAc,GAChBC,EAAI,EACDA,EAAIJ,EAAMN,QAAUM,EAAMI,GAAGC,WAAW,KAAMD,IACnDD,EAAYG,KAAKN,EAAMI,IAKzB,IAHMG,EAASJ,EAAYK,KAAK,MAC1BC,EAAS,CAAC,EACVC,EAAS,CAAC,EACTN,EAAIJ,EAAMN,OAAQU,IACjBtD,EAAOkD,EAAMI,GACbO,EAAO7D,EAAKK,MAAM,MAClByD,EAAKD,EAAK,GACVE,EAAKF,EAAK,GACXF,EAAOG,KACVH,EAAOG,GAAM,IAEVF,EAAOG,KACVH,EAAOG,GAAM,IAEfJ,EAAOG,GAAIN,KAAKxD,GAChB4D,EAAOG,GAAIP,KAAKxD,GAE6B,OAAzCgE,EAAc5B,KAAKG,QAAQ,eAAc,kBAExC,CACLkB,OAAAA,EACAE,OAAAA,EACAC,OAAAA,EACAI,YAAAA,IACD,iDACF,kDA7CK,IA6CL,+DAED,4GAMG,OANoB9B,EAAiB,+BAAG,CAAC,EACrCE,KAAKJ,gBACRI,KAAKJ,cAAgBI,KAAK6B,UAAU/B,GAAMgC,OAAM,SAAAC,GAE9C,MADA,EAAKnC,mBAAgBoC,EACfD,CACR,KACD,kBAEM/B,KAAKJ,eAAa,gDAC1B,kDAXA,IAWA,kEAED,2GAA+C,OAAtBE,EAAiB,+BAAG,CAAC,EAAC,SACZE,KAAKiC,SAASnC,GAAK,OAA9B,OAA8B,SAA5CyB,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAM,0BACX,IAAIU,IAAI,GAAD,eAAKlD,OAAOmD,KAAKZ,KAAO,OAAKvC,OAAOmD,KAAKX,QAAS,gDACrE,kDALA,IAKA,gEAED,yGAAsC,OAAtB1B,EAAiB,+BAAG,CAAC,EAAC,SACXE,KAAKiC,SAASnC,GAAK,OAA9B,OAA8B,SAApCuB,EAAM,EAANA,OAAM,kBACPA,GAAM,gDACd,kDALA,IAKA,+DAED,iHACwCrB,KAAKiC,WAAU,OAA1B,GAA0B,SAA7CZ,EAAM,EAANA,SAAQO,EAAW,EAAXA,aACApB,OAAO,CAAD,wCACboB,GAAW,OAGiB,OAD/BQ,EAAOf,EAAOpD,MAAM,cAAc8C,QAAO,SAAAC,GAAC,QAAMA,CAAC,IACjDqB,EAAUD,EAAKA,EAAK5B,OAAS,GAAE,kBACvB,OAAP6B,QAAO,IAAPA,GAAAA,EAASC,SAAS,MACrBD,EACGvD,MAAM,GACNb,MAAM,MACNiB,KAAI,SAAAqD,GAAK,OAAIA,EAAMC,MAAM,SAC5BR,GAAS,iDACd,kDAfA,IAeA,uEAED,WAA+BxC,GAAe,2HACXQ,KAAKiC,WAAU,OAElB,OAFkB,SAAxCV,EAAM,EAANA,OAAQC,EAAM,EAANA,OACViB,EAASlB,EAAO/B,GAChBkD,EAASlB,EAAOhC,GAAQ,SACVQ,KAAK2C,WAAU,OAYnC,IAZM5E,EAAK,OAEL6E,EAAe,IAAIC,EAAAA,GACnBC,EAAa,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQvD,KAAI,SAAC8B,EAAGE,GAE3B,OAAOvD,EAAYqD,EADL,UAAM,EAAK+B,GAAE,YAAIvD,EAAO,YAAI0B,IACV,EAAOnD,EACzC,IACMiF,EAAa,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQxD,KAAI,SAAC8B,EAAGE,GAE3B,OAAOvD,EAAYqD,EADL,UAAM,EAAK+B,GAAE,YAAIvD,EAAO,YAAI0B,IACV,EAAMnD,EACxC,IAESmD,EAAI,EAAGA,EAAI4B,EAAKtC,OAAQU,IACzB+B,EAAMH,EAAK5B,GACjB0B,EAAaM,OAAO,CAACD,EAAIE,IAAI,SAAUF,EAAIE,IAAI,QAASF,GAG1D,IAAS/B,EAAI,EAAGA,EAAI8B,EAAKxC,OAAQU,IACzB+B,EAAMD,EAAK9B,GACjB0B,EAAaM,OAAO,CAACD,EAAIE,IAAI,SAAUF,EAAIE,IAAI,QAASF,GACzD,yBAEML,GAAY,iDACpB,mDA7BA,IA6BA,sEAED,WAA8BpD,GAAe,iFAM1C,OALIQ,KAAKH,cAAcL,KACtBQ,KAAKH,cAAcL,GAAWQ,KAAKoD,iBAAiB5D,GAASsC,OAAM,SAAAC,GAEjE,MADA,EAAKlC,cAAcL,QAAWwC,EACxBD,CACR,KACD,kBACM/B,KAAKH,cAAcL,IAAQ,gDACnC,mDAVA,IAUA,yBAED,SAAmB6D,GAAwC,IAAD,OAAxBvD,EAAiB,uDAAG,CAAC,EACrD,OAAOwD,EAAAA,EAAAA,kBAAgB,yCAAU,WAAMC,GAAQ,kFAClB,OAAnBjE,EAAwB+D,EAAxB/D,MAAOC,EAAiB8D,EAAjB9D,IAAKC,EAAY6D,EAAZ7D,QAAO,SACA,EAAKgE,gBAAgBhE,GAAQ,OAC5C,QADNoD,EAAY,cACN,IAAZA,GAAAA,EAAca,OAAO,CAACnE,EAAOC,IAAMmE,SAAQ,SAAA1C,GAAC,OAAIuC,EAASI,KAAK3C,EAAE,IAChEuC,EAASK,WAAU,2CACpB,mDALsB,GAKpB9D,EAAK+D,OACV,GAAC,2BAED,WAA8B,KAAC,EA7IA,CAASC,EAAAA,wBAArBnE,EAYLoE,aAAe,CAAC,cAAe,c","sources":["../../../plugins/bed/src/BedpeAdapter/BedpeAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature, SimpleFeature } from '@jbrowse/core/util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function featureData(\n  line: string,\n  uniqueId: string,\n  flip: boolean,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const ref1 = l[flip ? 3 : 0]\n  const start1 = +l[flip ? 4 : 1]\n  const end1 = +l[flip ? 5 : 2]\n  const ref2 = +l[!flip ? 3 : 0]\n  const start2 = +l[!flip ? 4 : 1]\n  const end2 = +l[!flip ? 5 : 2]\n  const name = l[6]\n  const score = +l[7]\n  const strand1 = parseStrand(l[8])\n  const strand2 = parseStrand(l[9])\n  const extra = l.slice(9)\n  const rest = names\n    ? Object.fromEntries(names.slice(9).map((n, idx) => [n, extra[idx]]))\n    : extra\n\n  return new SimpleFeature({\n    start: start1,\n    end: end1,\n    refName: ref1,\n    strand: strand1,\n    name,\n    ...rest,\n    score,\n    uniqueId,\n    mate: { refName: ref2, start: start2, end: end2, strand: strand2 },\n  })\n}\n\nfunction parseStrand(strand: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else if (strand === '.') {\n    return 0\n  } else {\n    return undefined\n  }\n}\n\nexport default class BedpeAdapter extends BaseFeatureDataAdapter {\n  protected bedpeFeatures?: Promise<{\n    header: string\n    feats1: Record<string, string[]>\n    feats2: Record<string, string[]>\n    columnNames: string[]\n  }>\n\n  protected intervalTrees: {\n    [key: string]: Promise<IntervalTree | undefined> | undefined\n  } = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedpeLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const feats1 = {} as Record<string, string[]>\n    const feats2 = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const cols = line.split('\\t')\n      const r1 = cols[0]\n      const r2 = cols[3]\n      if (!feats1[r1]) {\n        feats1[r1] = []\n      }\n      if (!feats2[r2]) {\n        feats2[r2] = []\n      }\n      feats1[r1].push(line)\n      feats2[r2].push(line)\n    }\n    const columnNames = this.getConf('columnNames')\n\n    return {\n      header,\n      feats1,\n      feats2,\n      columnNames,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedpeFeatures) {\n      this.bedpeFeatures = this.loadDataP(opts).catch(e => {\n        this.bedpeFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedpeFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { feats1, feats2 } = await this.loadData(opts)\n    return [...new Set([...Object.keys(feats1), ...Object.keys(feats2)])]\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs[defs.length - 1]\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureTreeP(refName: string) {\n    const { feats1, feats2 } = await this.loadData()\n    const lines1 = feats1[refName]\n    const lines2 = feats2[refName]\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret1 = lines1?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, false, names)\n    })\n    const ret2 = lines2?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, true, names)\n    })\n\n    for (let i = 0; i < ret1.length; i++) {\n      const obj = ret1[i]\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n\n    for (let i = 0; i < ret2.length; i++) {\n      const obj = ret2[i]\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n\n    return intervalTree\n  }\n\n  private async loadFeatureTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureTreeP(refName).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["isGzip","buf","featureData","line","uniqueId","flip","names","l","split","ref1","start1","end1","ref2","start2","end2","name","score","strand1","parseStrand","strand2","extra","slice","rest","Object","fromEntries","map","n","idx","SimpleFeature","start","end","refName","strand","mate","BedpeAdapter","bedpeFeatures","intervalTrees","opts","pm","this","pluginManager","bedLoc","getConf","openLocation","readFile","unzip","buffer","length","Error","data","TextDecoder","fatal","decode","lines","filter","f","headerLines","i","startsWith","push","header","join","feats1","feats2","cols","r1","r2","columnNames","loadDataP","catch","e","undefined","loadData","Set","keys","defs","defline","includes","field","trim","lines1","lines2","getNames","intervalTree","IntervalTree","ret1","id","ret2","obj","insert","get","loadFeatureTreeP","query","ObservableCreate","observer","loadFeatureTree","search","forEach","next","complete","signal","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}