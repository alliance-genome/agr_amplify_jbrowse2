{"version":3,"file":"static/js/5098.a3f8ab78.chunk.js","mappings":"wTAEO,SAASA,EAAeC,GAC7B,OAAO,IAAIC,YAAY,QAAS,CAAEC,OAAO,IAAQC,OAAOH,GACzD,SAEcI,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBJ,GAAzB,4FAAyCK,EAAzC,+BAAmD,GAAnD,SACoB,qCAAoBC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,WAD9D,cACQC,EADR,yBAESA,GAAI,QAAEC,UAAU,EAAMC,OAAQ,OAAUN,IAAWO,WACxDb,EAAeC,KAHnB,mEAqCA,SAASa,EACPC,EACAC,EACAC,GAEA,IAIIC,EAJEC,EAAOJ,EAAOK,KAAK,GAAGC,MAAML,GAAcG,MAAQ,GAEpDG,EAAc,OAGlB,IACEJ,GAAYK,EAAAA,EAAAA,gBAAeJ,EAAMF,GACjC,MAAOO,IAYT,OATIN,GAAaA,EAAUO,SAAsC,kBAApBP,EAAUQ,MACrDJ,EAAc,YACL,gBAAgBK,KAAKR,KAC9BG,EAAc,UAMTA,EAGT,SAASM,EACPR,GAMC,IALDd,EAKA,uDALwB,CACtBuB,mBAAmB,EACnBC,qBAAsB,EACtBb,eAAgB,kBAAM,IAKpBc,EAAU,EACRhB,EAAiB,CACrBiB,UAAU,EACVZ,KAAMA,EAAKa,KAAI,SAACC,EAAKC,GACnB,IAAMC,EAAKD,GAAa7B,EAAQuB,kBAAoB,EAAI,GAIxD,OAHIK,EAAIG,OAASN,IACfA,EAAUG,EAAIG,QAET,CACLD,GAAIE,OAAOF,GACXf,MAAOa,EAAID,KAAI,SAACd,EAAMH,GACpB,MAAO,CAAEA,aAAAA,EAAcG,KAAAA,WAOzBoB,EAAsC,GAC5C,GAAIjC,EAAQuB,wBAAsDW,IAAjClC,EAAQwB,qBAAoC,CAC3E,MAAsBf,EAAOK,KAAKqB,OAChCnC,EAAQwB,qBAAuB,EAC/B,GAFF,eAAOY,EAAP,KAKIA,GACFA,EAAYrB,MAAMsB,SAAQ,SAACC,EAAM5B,GAC/BuB,EAAYvB,GAAgB4B,EAAKzB,MAAQ,MAQ/C,IAFA,IAAM0B,EAAoB,GACpBC,EAAqB,GArC3B,WAsCS9B,GACP8B,EAAmBC,KAAK/B,GACxB,IAAMM,EAAcR,EAClBC,EACAC,EACAV,EAAQW,gBAIU,cAAhBK,GACFP,EAAOK,KAAKuB,SAAQ,SAAAT,GAClB,IAAMU,EAAOV,EAAIb,MAAML,GACvB4B,EAAKI,cAAezB,EAAAA,EAAAA,gBAAeqB,EAAKzB,KAAMb,EAAQW,mBAI1D4B,EAAQ7B,GAAgB,CACtBiC,KAAMV,EAAYvB,GAClBkC,SAAU,CACRC,KAAM7B,KAnBHN,EAAe,EAAGA,EAAee,EAASf,GAAgB,EAAI,EAA9DA,GAwBT,MAAO,CACLD,OAAAA,EACA+B,mBAAAA,EACAM,iBAAkB9C,EAAQuB,kBAC1BgB,QAAAA,EACAQ,aAAc/C,EAAQgD,sBAInB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WACLtD,GADK,4FAELK,EAFK,+BAEmB,CACtBuB,mBAAmB,EACnBC,qBAAsB,EACtBb,eAAgB,kBAAM,IALnB,SAQcZ,EAAUJ,GARxB,cAQCmB,EARD,yBASEQ,EAA0BR,EAAMd,IATlC,mEAYA,SAAekD,EAAtB,+CAAO,OAAP,oBAAO,WACLvD,GADK,4FAELK,EAFK,+BAEmB,CACtBuB,mBAAmB,EACnBC,qBAAsB,EACtBb,eAAgB,kBAAM,IALnB,SAQcZ,EAAUJ,EAAQ,CAAEwD,UAAW,OAR7C,cAQCrC,EARD,yBASEQ,EAA0BR,EAAMd,IATlC,qE,6JCtJDoD,EAAmD,CACvD,CAAET,KAAM,QAASE,KAAM,QACvB,CAAEF,KAAM,MAAOE,KAAM,UACrB,CAAEF,KAAM,KAAME,KAAM,QACpB,CAAEF,KAAM,MAAOE,KAAM,QACrB,CAAEF,KAAM,MAAOE,KAAM,QACrB,CAAEF,KAAM,OAAQE,KAAM,UACtB,CAAEF,KAAM,SAAUE,KAAM,QACxB,CAAEF,KAAM,OAAQE,KAAM,QACtB,CAAEF,KAAM,SAAUE,KAAM,SAI1B,SAASQ,EAAeC,EAAgBC,EAAcC,GACpD,IAAMC,EAAaH,EAAUI,UAAUH,GACjCI,EAAa,IAAIC,EAAAA,EAAW,CAChCC,QAASJ,EACTK,OAAQR,EACRxB,GAAG,OAAD,OAAS0B,KAGPO,EAAOR,EAAKS,MAAM,MAAMrC,KAAI,SAAAsC,GAAC,MAAW,MAANA,EAAY,GAAKA,KAezD,OAboB,IAAhBF,EAAKhC,QACPgC,EAAKtB,KAAK,IAEK,CACfX,GAAIE,OAAOwB,EAAa,GACxBd,aAAc,CAAEiB,WAAYA,EAAWO,UACvCnD,MAAOgD,EAAKpC,KAAI,SAACd,EAAMH,GACrB,MAAO,CACLA,aAAAA,EACAG,KAAAA,OAOD,SAASsD,EACdxE,GAMC,IALDK,EAKA,uDALwB,CACtBuB,mBAAmB,EACnBC,qBAAsB,EACtBb,eAAgB,kBAAM,IAGxB,EAAuByD,GAA0B1E,EAAAA,EAAAA,gBAAeC,IAA1D0E,EAAN,EAAMA,OAAQC,EAAd,EAAcA,KACRxD,EAAc,GACdwC,EAAY,IAAIiB,EAAAA,EAAI,CAAEF,OAAAA,IAC5BA,EAAS,GACTC,EAAKN,MAAM,MAAM3B,SAAQ,SAACkB,EAAcC,GAClC,KAAKnC,KAAKkC,IACZzC,EAAK2B,KAAKY,EAAeC,EAAWC,EAAMC,OAG9Cc,EAAO,GASP,IAPA,IAAM7D,EAAiB,CACrBiB,UAAU,EACVZ,KAAAA,GAGI0B,EAA+B,GAC/BD,EAAoB,GACjBiC,EAAI,EAAGA,EAAIpB,EAAerB,OAAQyC,GAAK,EAC9ChC,EAAmBC,KAAK+B,GACxBjC,EAAQiC,GAAK,CACX7B,KAAMS,EAAeoB,GAAG7B,KACxBC,SAAU,CAAEC,KAAMO,EAAeoB,GAAG3B,OAGxC,IAAK,IAAI2B,EAAI,EAAGA,EAAIlB,EAAUmB,QAAQ1C,OAAQyC,GAAK,EAAG,CACpD,IAAME,EAAKtB,EAAerB,OAASyC,EACnChC,EAAmBC,KAAKiC,GACxBnC,EAAQmC,GAAM,CAAE/B,KAAMW,EAAUmB,QAAQD,GAAI5B,SAAU,CAAEC,KAAM,SAahE,OAVAL,EAAmBC,KAAKD,EAAmBT,QAC3CQ,EAAQoC,QAAQ,CACdhC,KAAM,WACNC,SAAU,CAAEC,KAAM,aAClB+B,WAAW,EACXC,uBAAuB,uRAKlB,CACLpE,OAAAA,EACA+B,mBAAAA,EACAM,gBAAgB,EAChBP,QAAAA,EACAQ,aAAc/C,EAAQgD,sBAInB,SAASoB,EAA0BU,GAIxC,IAFA,IACIC,EADAC,EAAiB,EAEdA,EAAiBF,EAAU/C,OAAQiD,GAAkB,EAAG,CAC7D,IAAMC,EAAIH,EAAUE,GACpB,GAAiB,OAAbD,GAA2B,MAANE,EACvB,MAEFF,EAAWE,EAGb,MAAO,CACLZ,OAAQS,EAAUI,OAAO,EAAGF,GAC5BV,KAAMQ,EAAUI,OAAOF","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/VcfImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import VCF from '@gmod/vcf'\nimport { VcfFeature } from '@jbrowse/plugin-variants'\nimport {\n  bufferToString,\n  Row,\n  RowSet,\n  Column,\n  ParseOptions,\n} from './ImportUtils'\n\nconst vcfCoreColumns: { name: string; type: string }[] = [\n  { name: 'CHROM', type: 'Text' }, // 0\n  { name: 'POS', type: 'Number' }, // 1\n  { name: 'ID', type: 'Text' }, // 2\n  { name: 'REF', type: 'Text' }, // 3\n  { name: 'ALT', type: 'Text' }, // 4\n  { name: 'QUAL', type: 'Number' }, // 5\n  { name: 'FILTER', type: 'Text' }, // 6\n  { name: 'INFO', type: 'Text' }, // 7\n  { name: 'FORMAT', type: 'Text' }, // 8\n]\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction vcfRecordToRow(vcfParser: any, line: string, lineNumber: number): Row {\n  const vcfVariant = vcfParser.parseLine(line)\n  const vcfFeature = new VcfFeature({\n    variant: vcfVariant,\n    parser: vcfParser,\n    id: `vcf-${lineNumber}`,\n  })\n\n  const data = line.split('\\t').map(d => (d === '.' ? '' : d))\n  // no format column, add blank\n  if (data.length === 8) {\n    data.push('')\n  }\n  const row: Row = {\n    id: String(lineNumber + 1),\n    extendedData: { vcfFeature: vcfFeature.toJSON() },\n    cells: data.map((text, columnNumber) => {\n      return {\n        columnNumber,\n        text,\n      }\n    }),\n  }\n  return row\n}\n\nexport function parseVcfBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 0,\n    isValidRefName: () => false,\n  },\n) {\n  let { header, body } = splitVcfFileHeaderAndBody(bufferToString(buffer))\n  const rows: Row[] = []\n  const vcfParser = new VCF({ header })\n  header = '' // garbage collect\n  body.split('\\n').forEach((line: string, lineNumber) => {\n    if (/\\S/.test(line)) {\n      rows.push(vcfRecordToRow(vcfParser, line, lineNumber))\n    }\n  })\n  body = '' // garbage collect\n\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows,\n  }\n\n  const columnDisplayOrder: number[] = []\n  const columns: Column[] = []\n  for (let i = 0; i < vcfCoreColumns.length; i += 1) {\n    columnDisplayOrder.push(i)\n    columns[i] = {\n      name: vcfCoreColumns[i].name,\n      dataType: { type: vcfCoreColumns[i].type },\n    }\n  }\n  for (let i = 0; i < vcfParser.samples.length; i += 1) {\n    const oi = vcfCoreColumns.length + i\n    columnDisplayOrder.push(oi)\n    columns[oi] = { name: vcfParser.samples[i], dataType: { type: 'Text' } }\n  }\n\n  columnDisplayOrder.push(columnDisplayOrder.length)\n  columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.extendedData.vcfFeature.refName+':'\\n\n    +row.extendedData.vcfFeature.start+'..'+row.extendedData.vcfFeature.end, extendedData:\\n\n    {refName:row.extendedData.vcfFeature.refName,start:row.extendedData.vcfFeature.start,end:row.extendedData.vcfFeature.end}}`,\n  })\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: true,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport function splitVcfFileHeaderAndBody(wholeFile: string) {\n  // split into header and the rest of the file\n  let headerEndIndex = 0\n  let prevChar\n  for (; headerEndIndex < wholeFile.length; headerEndIndex += 1) {\n    const c = wholeFile[headerEndIndex]\n    if (prevChar === '\\n' && c !== '#') {\n      break\n    }\n    prevChar = c\n  }\n\n  return {\n    header: wholeFile.substr(0, headerEndIndex),\n    body: wholeFile.substr(headerEndIndex),\n  }\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","options","then","module","default","csv","noheader","output","fromString","guessColumnType","rowSet","columnNumber","isValidRefName","parsedLoc","text","rows","cells","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","maxCols","isLoaded","map","row","rowNumber","id","length","String","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","vcfCoreColumns","vcfRecordToRow","vcfParser","line","lineNumber","vcfVariant","parseLine","vcfFeature","VcfFeature","variant","parser","data","split","d","toJSON","parseVcfBuffer","splitVcfFileHeaderAndBody","header","body","VCF","i","samples","oi","unshift","isDerived","derivationFunctionText","wholeFile","prevChar","headerEndIndex","c","substr"],"sourceRoot":""}