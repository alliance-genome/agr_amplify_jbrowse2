{"version":3,"sources":["../../../packages/core/ui/AboutDialog.tsx"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","AboutDialog","config","handleClose","classes","useState","info","setInfo","error","setError","session","getSession","rpcManager","conf","readConfObject","useEffect","aborter","AbortController","signal","cancelled","a","adapterConfig","call","trackId","result","console","abort","trackName","assemblies","forEach","assembly","sequence","configuration","details","header","replace","open","onClose","className","onClick","title","attributes","omit"],"mappings":"+TAiBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,SAAU,WACVC,MAAOH,EAAMI,QAAQ,GACrBC,IAAKL,EAAMI,QAAQ,GACnBE,MAAON,EAAMO,QAAQC,KAAK,UAIf,SAASC,EAAT,GAMZ,IALDC,EAKC,EALDA,OACAC,EAIC,EAJDA,YAKMC,EAAUd,IAChB,EAAwBe,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAUC,qBAAWT,GACnBU,EAAeF,EAAfE,WACFC,EAAOC,yBAAeZ,GAE5Ba,qBAAU,WACR,IAAMC,EAAU,IAAIC,gBACZC,EAAWF,EAAXE,OACJC,GAAY,EAmBhB,OAlBC,sBAAC,8BAAAC,EAAA,sEAEQC,EAAgBP,yBAAeZ,EAAQ,WAF/C,SAGuBU,EAAWU,KAAKpB,EAAOqB,QAAS,cAAe,CAClEF,gBACAH,WALJ,OAGQM,EAHR,OAOOL,GACHZ,EAAQiB,GARZ,gDAWOL,IACHM,QAAQjB,MAAR,MACAC,EAAS,EAAD,KAbZ,wDAAD,GAkBM,WACLO,EAAQU,QACRP,GAAY,KAEb,CAACjB,EAAQU,IAEZ,IAAIe,EAAYb,yBAAeZ,EAAQ,QACA,2BAAnCY,yBAAeZ,EAAQ,UACzByB,EAAY,qBACZjB,EAAQkB,WAAWC,SAAQ,SAAAC,GACrBA,EAASC,WAAa7B,EAAO8B,gBAC/BL,EAAY,uBAAH,OAA0Bb,yBAAegB,EAAU,QAAnD,UAKf,IAAMG,EACY,kBAAT3B,EACH,CACE4B,OAAQ,QAAF,OAAU5B,EACb6B,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAFX,WAIR7B,GAAQ,GACd,OACE,kBAAC,IAAD,CAAQ8B,MAAI,EAACC,QAASlC,GACpB,kBAAC,IAAD,KACGwB,EACD,kBAAC,IAAD,CACEW,UAAWlC,EAAQX,YACnB8C,QAAS,kBAAMpC,MAEf,kBAAC,IAAD,QAGJ,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUqC,MAAM,iBACd,kBAAC,aAAD,CACEC,WAAY5B,EACZ6B,KAAM,CAAC,WAAY,UAAW,eAGxB,OAATpC,EACC,kBAAC,WAAD,CAAUkC,MAAM,aACbhC,EACC,kBAAC,IAAD,CAAYV,MAAM,SAAlB,UAA8BU,IAC3BF,EAGH,kBAAC,aAAD,CAAYmC,WAAYR,IAFxB,wBAKF","file":"static/js/49.9dd0a7db.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { readConfObject } from '../configuration'\nimport { getSession } from '../util'\nimport { BaseCard, Attributes } from '../BaseFeatureWidget/BaseFeatureDetail'\nimport { AnyConfigurationModel } from '../configuration/configurationSchema'\n\ntype FileInfo = Record<string, unknown> | string\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nexport default function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const classes = useStyles()\n  const [info, setInfo] = useState<FileInfo>()\n  const [error, setError] = useState<unknown>()\n  const session = getSession(config)\n  const { rpcManager } = session\n  const conf = readConfObject(config)\n\n  useEffect(() => {\n    const aborter = new AbortController()\n    const { signal } = aborter\n    let cancelled = false\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n          signal,\n        })\n        if (!cancelled) {\n          setInfo(result as FileInfo)\n        }\n      } catch (e) {\n        if (!cancelled) {\n          console.error(e)\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      aborter.abort()\n      cancelled = true\n    }\n  }, [config, rpcManager])\n\n  let trackName = readConfObject(config, 'name')\n  if (readConfObject(config, 'type') === 'ReferenceSequenceTrack') {\n    trackName = 'Reference Sequence'\n    session.assemblies.forEach(assembly => {\n      if (assembly.sequence === config.configuration) {\n        trackName = `Reference Sequence (${readConfObject(assembly, 'name')})`\n      }\n    })\n  }\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')}</pre>`,\n        }\n      : info || {}\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        {trackName}\n        <IconButton\n          className={classes.closeButton}\n          onClick={() => handleClose()}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <BaseCard title=\"Configuration\">\n          <Attributes\n            attributes={conf}\n            omit={['displays', 'baseUri', 'refNames']}\n          />\n        </BaseCard>\n        {info !== null ? (\n          <BaseCard title=\"File info\">\n            {error ? (\n              <Typography color=\"error\">{`${error}`}</Typography>\n            ) : !info ? (\n              'Loading file data...'\n            ) : (\n              <Attributes attributes={details} />\n            )}\n          </BaseCard>\n        ) : null}\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"sourceRoot":""}