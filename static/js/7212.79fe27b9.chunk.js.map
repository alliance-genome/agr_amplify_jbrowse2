{"version":3,"file":"static/js/7212.79fe27b9.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MashMapAdapter/MashMapAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class MashMapAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const outLoc = openLocation(this.getConf('outLocation'), this.pluginManager)\n    const buffer = (await outLoc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    // mashmap produces PAF-like data that is space separated instead of tab\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const fields = line.split(' ')\n        if (fields.length < 9) {\n          // xref https://github.com/marbl/MashMap/issues/38\n          throw new Error('improperly formatted line: ' + line)\n        }\n        const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] =\n          fields\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            mappingQual: +mq,\n          },\n        }\n      })\n  }\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport { zip, isGzip } from '../util'\nconst { getMismatches } = MismatchParser\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n\n// based on \"weighted mean\" method from dotPlotly\n// https://github.com/tpoorten/dotPlotly\n// License for dotPlotly reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction getWeightedMeans(ret: PAFRecord[]) {\n  // in the weighted mean longer alignments factor in more\n  // heavily of all the fragments of a query vs the reference that it mapped\n  // to\n  //\n  // this uses a combined key query+'-'+ref to iteratively map all the\n  // alignments that match a particular ref from a particular query (so 1d\n  // array of what could be a 2d map)\n  //\n  // the result is a single number that says e.g. chr5 from human mapped to\n  // chr5 on mouse with 0.8 quality, and that0.8 is then attached to all the\n  // pieces of chr5 on human that mapped to chr5 on mouse. if chr5 on human\n  // also more weakly mapped to chr6 on mouse, then it would have another\n  // value e.g. 0.6. this can show strong and weak levels of synteny,\n  // especially in polyploidy situations\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nfunction getOrientedMismatches(flip: boolean, cigar: string) {\n  const mismatches = getMismatches(cigar)\n  if (flip) {\n    let startReadjuster = 0\n    return mismatches.map(m => {\n      if (m.type === 'insertion') {\n        m.type = 'deletion'\n        m.length = +m.base\n        m.start += startReadjuster\n        startReadjuster += m.length\n      } else if (m.type === 'deletion') {\n        const len = m.length\n        m.type = 'insertion'\n        m.base = `${len}`\n        m.length = 0\n        m.start += startReadjuster\n        startReadjuster -= len\n      }\n      return m\n    })\n  }\n  return mismatches\n}\n\nclass SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      const cg = this.get('cg')\n      const flip = this.get('flipInsDel')\n\n      return cg ? getOrientedMismatches(flip, cg) : []\n    }\n    return super.get(arg)\n  }\n}\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const [\n          qname,\n          ,\n          qstart,\n          qend,\n          strand,\n          tname,\n          ,\n          tstart,\n          tend,\n          numMatches,\n          blockLen,\n          mappingQual,\n          ...fields\n        ] = line.split('\\t')\n\n        const rest = Object.fromEntries(\n          fields.map(field => {\n            const r = field.indexOf(':')\n            const fieldName = field.slice(0, r)\n            const fieldValue = field.slice(r + 3)\n            return [fieldName, fieldValue]\n          }),\n        )\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            numMatches: +numMatches,\n            blockLen: +blockLen,\n            mappingQual: +mappingQual,\n            ...rest,\n          },\n        } as PAFRecord\n      })\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1 } = extra\n          const flip = index === 0\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: `${i}`,\n              assemblyName: assemblyNames[+!flip],\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand, // : !flip ? strand * -1 : strand,\n\n              // this is a special property of how to interpret CIGAR on PAF,\n              // intrinsic to the data format. the CIGAR is read backwards\n              // for features aligning to the negative strand of the target,\n              // which is actually different than how it works in e.g.\n              // BAM/SAM (which is visible during alignments track read vs ref)\n              revCigar: true,\n\n              // depending on whether the query or target is queried, the\n              // \"rev\" flag\n              flipInsDel: flip,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n              ...extra,\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["isGzip","buf","MashMapAdapter","opts","outLoc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","length","Error","text","TextDecoder","fatal","decode","split","filter","line","map","fields","qname","qstart","qend","strand","tname","tstart","tend","extra","mappingQual","PAFAdapter","getMismatches","MismatchParser","getWeightedMeans","ret","scoreMap","i","entry","key","quals","len","push","blockLen","meanScoreMap","Object","fromEntries","entries","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","reduce","valueSum","weightSum","value","weight","SyntenyFeature","arg","cg","get","flip","cigar","mismatches","startReadjuster","m","type","base","start","getOrientedMismatches","SimpleFeature","setupP","setupPre","catch","e","undefined","pm","pafLocation","numMatches","rest","field","r","indexOf","slice","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","end","qref","refName","complete","mateName","mateStart","mateEnd","doesIntersect2","next","uniqueId","revCigar","flipInsDel","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}