{"version":3,"file":"static/js/3069.d5e95eb8.chunk.js","mappings":"qQAMqBA,EAAmB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CAsBd,OAtBcC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,oBAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAItC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACsC,GACpB,MADVN,EAAMO,KAAKC,QAAQ,aACjBC,KAA0B,4BAAZT,EAAIS,IAAiC,CAAAL,EAAAE,KAAA,eAAAF,EAAAM,OAAA,SAClD,IAAE,cAAAN,EAAAE,KAAA,GAEWK,EAAAA,EAAAA,cAAaX,EAAKO,KAAKK,eAAeC,SAAS,QAAO,OAC7B,OADzCZ,EAAOG,EAAAU,KACPZ,EAAYK,KAAKC,QAAQ,iBAAgBJ,EAAAM,OAAA,SACxCT,EACJc,OACAC,MAAM,cACNC,QAAO,SAAAC,GAAC,QAAMA,IAAMA,EAAEC,WAAW,IAAI,IACrCC,KAAI,SAAAC,GACH,IAAMC,EAAUD,EAAIL,MAAM,MAC1BO,EAAkBD,EAAQE,OAAOtB,EAAW,GAC5C,MAAO,CAAEuB,SADqCC,EAAAA,EAAAA,GAAAH,EAAA,GAAhC,GACID,QAASA,EAAQL,QAAO,SAAAC,GAAC,QAAMA,EAAEH,MAAM,IAC3D,KAAE,wBAAAX,EAAAuB,OAAA,GAAA5B,EAAA,UACL,yBAAAJ,EAAAL,MAAA,KAAAC,UAAA,EApBqC,IAoBrC,CAAAE,IAAA,gBAAAC,MAAA,eAAAkC,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+B,IAAA,OAAAhC,EAAAA,EAAAA,KAAAM,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,wBAAAwB,EAAAH,OAAA,GAAAE,EAAA,KAAwB,yBAAAD,EAAAtC,MAAA,KAAAC,UAAA,EAFvB,MAEuBP,CAAA,CAtBc,CAC9B+C,EAAAA,Y","sources":["../../../plugins/config/src/RefNameAliasAdapter/RefNameAliasAdapter.ts"],"sourcesContent":["import {\n  BaseRefNameAliasAdapter,\n  BaseAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\n\nexport default class RefNameAliasAdapter\n  extends BaseAdapter\n  implements BaseRefNameAliasAdapter\n{\n  async getRefNameAliases() {\n    const loc = this.getConf('location')\n    if (loc.uri === '' || loc.uri === '/path/to/my/aliases.txt') {\n      return []\n    }\n    const results = await openLocation(loc, this.pluginManager).readFile('utf8')\n    const refColumn = this.getConf('refNameColumn')\n    return results\n      .trim()\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && !f.startsWith('#'))\n      .map(row => {\n        const aliases = row.split('\\t')\n        const [refName] = aliases.splice(refColumn, 1)\n        return { refName, aliases: aliases.filter(f => !!f.trim()) }\n      })\n  }\n\n  async freeResources() {}\n}\n"],"names":["RefNameAliasAdapter","_BaseAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_getRefNameAliases","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loc","results","refColumn","wrap","_context","prev","next","this","getConf","uri","abrupt","openLocation","pluginManager","readFile","sent","trim","split","filter","f","startsWith","map","row","aliases","_aliases$splice","splice","refName","_slicedToArray","stop","_freeResources","_callee2","_context2","BaseAdapter"],"sourceRoot":""}