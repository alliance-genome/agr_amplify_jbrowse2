{"version":3,"file":"static/js/376.9616e08a.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MashMapAdapter/MashMapAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class MashMapAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const outLoc = openLocation(this.getConf('outLocation'), this.pluginManager)\n    const buffer = (await outLoc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    // mashmap produces PAF-like data that is space separated instead of tab\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const fields = line.split(' ')\n        if (fields.length < 9) {\n          // xref https://github.com/marbl/MashMap/issues/38\n          throw new Error('improperly formatted line: ' + line)\n        }\n        const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] =\n          fields\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            mappingQual: +mq,\n          },\n        }\n      })\n  }\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nfunction zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\n// based on \"weighted mean\" method from dotPlotly\n// https://github.com/tpoorten/dotPlotly\n// License for dotPlotly reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction getWeightedMeans(ret: PAFRecord[]) {\n  // in the weighted mean longer alignments factor in more\n  // heavily of all the fragments of a query vs the reference that it mapped\n  // to\n  //\n  // this uses a combined key query+'-'+ref to iteratively map all the\n  // alignments that match a particular ref from a particular query (so 1d\n  // array of what could be a 2d map)\n  //\n  // the result is a single number that says e.g. chr5 from human mapped to\n  // chr5 on mouse with 0.8 quality, and that0.8 is then attached to all the\n  // pieces of chr5 on human that mapped to chr5 on mouse. if chr5 on human\n  // also more weakly mapped to chr6 on mouse, then it would have another\n  // value e.g. 0.6. this can show strong and weak levels of synteny,\n  // especially in polyploidy situations\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const [\n          qname,\n          ,\n          qstart,\n          qend,\n          strand,\n          tname,\n          ,\n          tstart,\n          tend,\n          numMatches,\n          blockLen,\n          mappingQual,\n          ...fields\n        ] = line.split('\\t')\n\n        const rest = Object.fromEntries(\n          fields.map(field => {\n            const r = field.indexOf(':')\n            const fieldName = field.slice(0, r)\n            const fieldValue = field.slice(r + 3)\n            return [fieldName, fieldValue]\n          }),\n        )\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            numMatches: +numMatches,\n            blockLen: +blockLen,\n            mappingQual: +mappingQual,\n            ...rest,\n          },\n        } as PAFRecord\n      })\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    let assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      assemblyNames = [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(\n    region: Region,\n    opts: BaseOptions & { config?: AnyConfigurationModel } = {},\n  ) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n      const { assemblyName } = region\n\n      // The index of the assembly name in the region list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(assemblyName)\n      if (index !== -1) {\n        for (let i = 0; i < pafRecords.length; i++) {\n          const r = pafRecords[i]\n          let start = 0\n          let end = 0\n          let refName = ''\n          let mateName = ''\n          let mateStart = 0\n          let mateEnd = 0\n          if (index === 0) {\n            start = r.qstart\n            end = r.qend\n            refName = r.qname\n            mateName = r.tname\n            mateStart = r.tstart\n            mateEnd = r.tend\n          } else {\n            start = r.tstart\n            end = r.tend\n            refName = r.tname\n            mateName = r.qname\n            mateStart = r.qstart\n            mateEnd = r.qend\n          }\n          const { extra, strand } = r\n\n          if (\n            refName === region.refName &&\n            doesIntersect2(region.start, region.end, start, end)\n          ) {\n            const { numMatches, blockLen } = extra\n            observer.next(\n              new SimpleFeature({\n                uniqueId: `${i}`,\n                start,\n                end,\n                refName,\n                strand,\n                revCigar: true,\n                // this is a special property of how to interpret CIGAR on PAF,\n                // intrinsic to the data format. the CIGAR is read backwards\n                // for features aligning to the negative strand of the target,\n                // which is actually different than how it works in e.g.\n                // BAM/SAM (which is visible during alignments track read vs ref)\n                assemblyName,\n\n                // depending on whether the query or target is queried, the \"rev\" flag\n                flipInsDel: index === 0,\n                syntenyId: i,\n                identity: (numMatches || 0) / (blockLen || 1),\n                mate: { start: mateStart, end: mateEnd, refName: mateName },\n                ...extra,\n              }),\n            )\n          }\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["isGzip","buf","MashMapAdapter","opts","outLoc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","length","Error","text","TextDecoder","fatal","decode","split","filter","line","map","fields","qname","qstart","qend","strand","tname","tstart","tend","extra","mappingQual","PAFAdapter","getWeightedMeans","ret","scoreMap","i","entry","key","quals","len","push","blockLen","meanScoreMap","Object","fromEntries","entries","val","vals","a","b","e","zip","weightedMean","meanScore","min","max","Math","tuples","reduce","valueSum","weightSum","value","weight","setupP","setupPre","catch","undefined","pm","pafLocation","numMatches","rest","field","r","indexOf","slice","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","region","ObservableCreate","observer","pafRecords","config","readConfObject","index","start","end","refName","mateName","mateStart","mateEnd","doesIntersect2","next","SimpleFeature","uniqueId","revCigar","flipInsDel","syntenyId","identity","mate","complete","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}