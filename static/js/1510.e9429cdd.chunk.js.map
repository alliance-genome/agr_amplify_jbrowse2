{"version":3,"file":"static/js/1510.e9429cdd.chunk.js","mappings":"wRAgBMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,KAAM,CACJC,OAAQ,EACRC,QAASH,EAAMI,QAAQ,IAEzBC,YAAa,CACXC,SAAU,WACVC,MAAOP,EAAMI,QAAQ,GACrBI,IAAKR,EAAMI,QAAQ,GACnBK,MAAOT,EAAMU,QAAQC,KAAK,MAE7B,IAiED,WAAeC,EAAAA,EAAAA,WA/Df,SAAsBC,GAIpB,IAAQC,EAAYhB,IAAZgB,QACAC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YACf,GAAsBC,EAAAA,EAAAA,UAAS,IAAG,eAA3BC,EAAG,KAAEC,EAAM,KACZC,EAAWF,EAAIG,MAAM,yBAC3B,OACE,UAAC,IAAM,CAACC,MAAI,EAACC,QAASP,EAAY,WAChC,UAAC,IAAW,0BAEV,SAAC,IAAU,CACT,aAAW,QACXQ,UAAWV,EAAQT,YACnBoB,QAAST,EAAY,UAErB,SAAC,IAAS,UAGd,UAAC,IAAa,YACZ,SAAC,IAAU,sCACX,SAAC,IAAU,CAACP,MAAM,gBAAe,kEAGjC,SAAC,IAAS,CACRiB,MAAOR,EACPS,SAAU,SAAAC,GAAK,OAAIT,EAAOS,EAAMC,OAAOH,MAAM,EAC7CI,YAAY,iBACZC,WAAY,CACVC,UAAW,EACX,cAAe,uBAEjBC,MAAsB,IAAff,EAAIgB,SAAiBd,EAC5Be,WAA2B,IAAfjB,EAAIgB,QAAiBd,EAA+B,GAApB,kBAC5CgB,aAAa,MACb,cAAY,mBAEd,UAAC,IAAa,YACZ,SAAC,IAAM,CACLC,QAAQ,YACR5B,MAAM,UACN6B,KAAK,SACLC,WAAS,EACTd,QAAS,WACPV,EAAMyB,YAAY,MAAOtB,GACzBF,GACF,EAAE,qBAIJ,SAAC,IAAM,CACLqB,QAAQ,YACR5B,MAAM,YACNgB,QAAS,kBAAMT,GAAa,EAAC,4BAQzC,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/SortByTag.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport CloseIcon from '@mui/icons-material/Close'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction SortByTagDlg(props: {\n  model: { setSortedBy: Function }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Sort by tag\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Typography>Set the tag to sort by</Typography>\n        <Typography color=\"textSecondary\">\n          Examples: HP for haplotype, RG for read group, etc.\n        </Typography>\n        <TextField\n          value={tag}\n          onChange={event => setTag(event.target.value)}\n          placeholder=\"Enter tag name\"\n          inputProps={{\n            maxLength: 2,\n            'data-testid': 'sort-tag-name-input',\n          }}\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          data-testid=\"sort-tag-name\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            autoFocus\n            onClick={() => {\n              model.setSortedBy('tag', tag)\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\nexport default observer(SortByTagDlg)\n"],"names":["useStyles","makeStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","observer","props","classes","model","handleClose","useState","tag","setTag","validTag","match","open","onClose","className","onClick","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","variant","type","autoFocus","setSortedBy"],"sourceRoot":""}