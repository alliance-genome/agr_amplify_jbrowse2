{"version":3,"file":"static/js/4656.fe29d0f4.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/util.ts","../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport function paf_delta2paf(lines: string[]) {\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]\n    const m = regex.exec(line)\n    if (m !== null) {\n      rname = m[1]\n      qname = m[2]\n      seen_gt = true\n      continue\n    }\n    if (!seen_gt) {\n      continue\n    }\n    const t = line.split(' ')\n    if (t.length === 7) {\n      const t0 = +t[0]\n      const t1 = +t[1]\n      const t2 = +t[2]\n      const t3 = +t[3]\n      const t4 = +t[4]\n      strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n      rs = +(t0 < t1 ? t0 : t1) - 1\n      re = +(t1 > t0 ? t1 : t0)\n      qs = +(t2 < t3 ? t2 : t3) - 1\n      qe = +(t3 > t2 ? t3 : t2)\n      x = y = 0\n      NM = t4\n      cigar = []\n    } else if (t.length === 1) {\n      const d = +t[0]\n      if (d === 0) {\n        let blen = 0\n        const cigar_str = []\n\n        if (re - rs - x !== qe - qs - y) {\n          throw new Error(`inconsistent alignment on line ${i}`)\n        }\n        cigar.push((re - rs - x) << 4)\n        for (let i = 0; i < cigar.length; ++i) {\n          const rlen = cigar[i] >> 4\n          blen += rlen\n          cigar_str.push(rlen + 'MID'.charAt(cigar[i] & 0xf))\n        }\n\n        records.push({\n          qname,\n          qstart: qs,\n          qend: qe,\n          tname: rname,\n          tstart: rs,\n          tend: re,\n          strand,\n          extra: {\n            numMatches: blen - NM,\n            blockLen: blen,\n            mappingQual: 0,\n            NM,\n            cg: cigar_str.join(''),\n          },\n        })\n      } else if (d > 0) {\n        const l = d - 1\n        x += l + 1\n        y += l\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 2) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 2)\n        } // deletion\n      } else {\n        const l = -d - 1\n        x += l\n        y += l + 1\n        if (l > 0) {\n          cigar.push(l << 4)\n        }\n        if (cigar.length > 0 && (cigar[cigar.length - 1] & 0xf) === 1) {\n          cigar[cigar.length - 1] += 1 << 4\n        } else {\n          cigar.push((1 << 4) | 1)\n        } // insertion\n      }\n    }\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_delta2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    return paf_delta2paf(text.split(/\\n|\\r\\n|\\r/).filter(line => !!line))\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["paf_delta2paf","lines","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","i","length","line","m","exec","t","split","t0","t1","t2","t3","d","blen","cigar_str","Error","push","rlen","charAt","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","isGzip","buf","DeltaAdapter","opts","loc","openLocation","this","getConf","pluginManager","readFile","buffer","unzip","text","TextDecoder","fatal","decode","filter","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","arg","get","SimpleFeature","getWeightedMeans","ret","scoreMap","entry","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","reduce","valueSum","weightSum","value","weight","parsePAF","fields","rest","field","r","indexOf","slice","flipCigar","arr","op","swapIndelCigar","replaceAll","parseCigar","setupP","setupPre","catch","e","undefined","pm","pafLocation","assemblyNames","r1","regions","assemblyName","setup","feats","idx","getAssemblyNames","set","Set","add","Array","from","console","warn","query","ObservableCreate","observer","pafRecords","config","readConfObject","index","start","end","qref","refName","complete","mateName","mateStart","mateEnd","flip","doesIntersect2","CIGAR","next","uniqueId","type","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","file","a"],"sourceRoot":""}