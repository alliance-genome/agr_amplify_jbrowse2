{"version":3,"sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","trackAdapter","trackType","classes","type","Typography","className","subadapter","TrackAdapterSelector","observer","model","session","getSession","adapters","getEnv","pluginManager","getElementTypesInGroup","TextField","value","label","helperText","select","fullWidth","onChange","event","setAdapterHint","target","SelectProps","SelectDisplayProps","filter","elt","adapterMetadata","hiddenFromGUI","category","map","MenuItem","key","name","displayName","adaptersList","currentCategory","items","forEach","adapter","push","ListSubheader","categorizeAdapters","UnknownAdapterPrompt","Link","href","rel","TrackTypeSelector","trackTypes","setTrackType","TrackAssemblySelector","assembly","setAssembly","assemblies","conf","readConfObject","trackName","warningMessage","adapterHint","unsupported","UNKNOWN","style","color","setTrackName","inputProps","paper","display","flexDirection","padding","spacer","height","rootModel","getRoot","Paper","description","location","trackData","setLocation","setTrackData","setName","indexTrackData","setIndexTrackData","root","marginTop","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","alertContainer","steps","useState","activeStep","setActiveStep","trackErrorMessage","setTrackErrorMessage","handleNext","a","length","trackId","toLowerCase","replace","Date","now","adminMode","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","sequenceAdapter","getConf","view","showTrack","notify","clearData","hideWidget","handleBack","undefined","isNextDisabled","Stepper","orientation","idx","Step","StepLabel","StepContent","step","getStepContent","Button","disabled","onClick","variant","Alert","severity"],"mappings":"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","file":"static/js/60.f6766a08.chunk.js","sourcesContent":["import React from 'react'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Link,\n  MenuItem,\n  TextField,\n  ListSubheader,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\n\n// locals\nimport { AddTrackModel } from '../model'\nimport { AdapterMetadata } from '@jbrowse/core/pluggableElementTypes/AdapterType'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nfunction StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const classes = useStyles()\n  return trackAdapter.type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter{' '}\n      <code>{trackAdapter.type}</code> with subadapter{' '}\n      <code>{trackAdapter.subadapter?.type}</code>. Please enter a track name\n      and, if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{trackAdapter.type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n\n/**\n * categorizeAdapters takes a list of adapters and sorts their menu item elements under an appropriate ListSubheader\n *  element. In this way, adapters that are from external plugins can have headers that differentiate them from the\n *  out-of-the-box plugins.\n * @param adaptersList - a list of adapters found in the PluginManager\n * @returns a series of JSX elements that are ListSubheaders followed by the adapters\n *   found under that subheader\n */\nfunction categorizeAdapters(\n  adaptersList: { name: string; adapterMetadata: AdapterMetadata }[],\n) {\n  let currentCategory = ''\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: any = []\n  adaptersList.forEach(adapter => {\n    if (adapter.adapterMetadata?.category) {\n      if (currentCategory !== adapter.adapterMetadata?.category) {\n        currentCategory = adapter.adapterMetadata?.category\n        items.push(\n          <ListSubheader\n            key={adapter.adapterMetadata?.category}\n            value={adapter.adapterMetadata?.category}\n          >\n            {adapter.adapterMetadata?.category}\n          </ListSubheader>,\n        )\n      }\n      items.push(\n        <MenuItem key={adapter.name} value={adapter.name}>\n          {adapter.adapterMetadata?.displayName\n            ? adapter.adapterMetadata?.displayName\n            : adapter.name}\n        </MenuItem>,\n      )\n    }\n  })\n  return items\n}\n\nfunction getAdapterTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('adapter') as {\n    name: string\n    adapterMetadata: AdapterMetadata\n  }[]\n}\n\nfunction getTrackTypes(pluginManager: PluginManager) {\n  return pluginManager.getElementTypesInGroup('track') as { name: string }[]\n}\n\nconst TrackAdapterSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackAdapter } = model\n  // prettier-ignore\n  const adapters = getAdapterTypes(getEnv(session).pluginManager)\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackAdapter?.type !== 'UNKNOWN' ? trackAdapter?.type : ''}\n      label=\"adapterType\"\n      helperText=\"Select an adapter type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n      }}\n    >\n      {adapters\n        // Excludes any adapter with the 'adapterMetadata.hiddenFromGUI' property, and anything with the 'adapterMetadata.category' property\n        .filter(\n          elt =>\n            !elt.adapterMetadata?.hiddenFromGUI &&\n            !elt.adapterMetadata?.category,\n        )\n        .map(elt => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.adapterMetadata?.displayName\n              ? elt.adapterMetadata?.displayName\n              : elt.name}\n          </MenuItem>\n        ))}\n      {/* adapters with the 'adapterMetadata.category' property are categorized by the value of the property here */}\n      {categorizeAdapters(\n        adapters.filter(elt => !elt.adapterMetadata?.hiddenFromGUI),\n      )}\n    </TextField>\n  )\n})\n\nfunction UnknownAdapterPrompt({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        JBrowse was not able to guess the adapter type for this data, but it may\n        be in the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector model={model} />\n    </>\n  )\n}\n\nconst TrackTypeSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackType } = model\n  const trackTypes = getTrackTypes(getEnv(session).pluginManager)\n\n  return (\n    <TextField\n      className={classes.spacing}\n      value={trackType}\n      label=\"trackType\"\n      helperText=\"Select a track type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setTrackType(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n      }}\n    >\n      {trackTypes.map(({ name }) => (\n        <MenuItem key={name} value={name}>\n          {name}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst TrackAssemblySelector = observer(\n  ({ model }: { model: AddTrackModel }) => {\n    const session = getSession(model)\n    const { assembly } = model\n    return (\n      <TextField\n        value={assembly}\n        label=\"assemblyName\"\n        helperText=\"Assembly to which the track will be added\"\n        select\n        fullWidth\n        onChange={event => model.setAssembly(event.target.value)}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        }}\n      >\n        {session.assemblies\n          .map(conf => readConfObject(conf, 'name'))\n          .map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n      </TextField>\n    )\n  },\n)\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const { trackName, trackAdapter, trackType, warningMessage, adapterHint } =\n    model\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  }\n\n  if (adapterHint === '' && trackAdapter) {\n    model.setAdapterHint(trackAdapter.type)\n  }\n\n  if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n\n  return (\n    <div>\n      {trackAdapter ? (\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n      ) : null}\n      {warningMessage ? (\n        <Typography style={{ color: 'orange' }}>{warningMessage}</Typography>\n      ) : null}\n      <TextField\n        className={classes.spacing}\n        label=\"trackName\"\n        helperText=\"A name for this track\"\n        fullWidth\n        value={trackName}\n        onChange={event => model.setTrackName(event.target.value)}\n        inputProps={{ 'data-testid': 'trackNameInput' }}\n      />\n      <TrackAdapterSelector model={model} />\n      <TrackTypeSelector model={model} />\n      <TrackAssemblySelector model={model} />\n    </div>\n  )\n}\n\nexport default observer(ConfirmTrack)\n","import React from 'react'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { Paper, makeStyles } from '@material-ui/core'\nimport { AddTrackModel } from '../model'\nimport { getRoot } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const rootModel = getRoot(model)\n\n  return (\n    <Paper className={classes.paper}>\n      <FileSelector\n        name=\"Main file\"\n        description=\"\"\n        location={model.trackData}\n        setLocation={model.setTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n      <div className={classes.spacer} />\n      <FileSelector\n        name=\"Index file\"\n        description=\"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\"\n        location={model.indexTrackData}\n        setLocation={model.setIndexTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n    </Paper>\n  )\n}\n\nexport default observer(TrackSourceSelect)\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { Alert } from '@material-ui/lab'\n\n// locals\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n  const [trackErrorMessage, setTrackErrorMessage] = useState<String>()\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  async function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}${\n      session.adminMode ? '' : '-sessionTrack'\n    }`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n      // @ts-ignore\n      session.addTrackConf({\n        trackId,\n        type: trackType,\n        name: trackName,\n        assemblyNames: [assembly],\n        adapter: {\n          ...trackAdapter,\n          sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n        },\n      })\n      if (model.view) {\n        model.view.showTrack(trackId)\n      } else {\n        session.notify(\n          'Open a new view, or use the track selector in an existing view, to view this track',\n          'info',\n        )\n      }\n      model.clearData()\n      // @ts-ignore\n      session.hideWidget(model)\n    } else {\n      setTrackErrorMessage(\n        'Failed to add track.\\nThe configuration of this file is not currently supported.',\n      )\n    }\n  }\n\n  function handleBack() {\n    setTrackErrorMessage(undefined)\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n              {trackErrorMessage ? (\n                <div className={classes.alertContainer}>\n                  <Alert severity=\"error\">{trackErrorMessage}</Alert>\n                </div>\n              ) : null}\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddTrackWidget)\n"],"sourceRoot":""}