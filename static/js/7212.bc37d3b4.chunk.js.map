{"version":3,"file":"static/js/7212.bc37d3b4.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MashMapAdapter/MashMapAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class MashMapAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const outLoc = openLocation(this.getConf('outLocation'), this.pluginManager)\n    const buffer = (await outLoc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    // mashmap produces PAF-like data that is space separated instead of tab\n    return text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(line => !!line)\n      .map(line => {\n        const fields = line.split(' ')\n        if (fields.length < 9) {\n          // xref https://github.com/marbl/MashMap/issues/38\n          throw new Error('improperly formatted line: ' + line)\n        }\n        const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] =\n          fields\n\n        return {\n          tname,\n          tstart: +tstart,\n          tend: +tend,\n          qname,\n          qstart: +qstart,\n          qend: +qend,\n          strand: strand === '-' ? -1 : 1,\n          extra: {\n            mappingQual: +mq,\n          },\n        }\n      })\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: { [key: string]: { quals: number[]; len: number[] } } = {}\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (let i = 0; i < ret.length; i++) {\n    const entry = ret[i]\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAF(text: string) {\n  return text\n    .split(/\\n|\\r\\n|\\r/)\n    .filter(line => !!line)\n    .map(line => {\n      const [\n        qname,\n        ,\n        qstart,\n        qend,\n        strand,\n        tname,\n        ,\n        tstart,\n        tend,\n        numMatches,\n        blockLen,\n        mappingQual,\n        ...fields\n      ] = line.split('\\t')\n\n      const rest = Object.fromEntries(\n        fields.map(field => {\n          const r = field.indexOf(':')\n          const fieldName = field.slice(0, r)\n          const fieldValue = field.slice(r + 3)\n          return [fieldName, fieldValue]\n        }),\n      )\n\n      return {\n        tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n          numMatches: +numMatches,\n          blockLen: +blockLen,\n          mappingQual: +mappingQual,\n          ...rest,\n        },\n      } as PAFRecord\n    })\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  parsePAF,\n  swapIndelCigar,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const text = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    return parsePAF(text)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-ignore\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (let i = 0; i < feats.length; i++) {\n        set.add(idx === 0 ? feats[i].qname : feats[i].tname)\n      }\n      return Array.from(set)\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n"],"names":["isGzip","buf","MashMapAdapter","_PAFAdapter","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_setupPre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","outLoc","buffer","text","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","length","Error","TextDecoder","fatal","decode","abrupt","split","filter","line","map","fields","_fields","_slicedToArray","qname","qstart","qend","strand","tname","tstart","tend","extra","mappingQual","stop","_x","PAFAdapter","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","scoreMap","i","entry","quals","len","push","blockLen","meanScoreMap","Object","fromEntries","entries","_ref","_ref2","val","weightedMean","zip","meanScore","min","max","Math","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAF","_line$split","_line$split2","_toArray","numMatches","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","op","parseCigar","_BaseFeatureDataAdapt","_this","_len","args","Array","_key","concat","setupP","_setup","_this2","setupPre","catch","e","undefined","_callee2","pm","pafLocation","_context2","_x2","_hasDataForRefName","_callee3","_context3","assemblyNames","_getRefNames","_callee4","_opts$regions","r1","feats","idx","set","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","from","console","warn","query","_this3","ObservableCreate","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","_x3","BaseFeatureDataAdapter","capabilities","parseBed","Map","f","startsWith","name","score","_readFile","file","t1","t2","a"],"sourceRoot":""}