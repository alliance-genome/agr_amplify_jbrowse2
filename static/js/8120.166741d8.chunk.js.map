{"version":3,"file":"static/js/8120.166741d8.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/bgzf-filehandle/src/unzip-pako.ts","../../../node_modules/@gmod/bgzf-filehandle/src/gziIndex.ts","../../../node_modules/@gmod/bgzf-filehandle/src/bgzFilehandle.ts","../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts","../../../node_modules/abortable-promise-cache/esm/AbortablePromiseCache.js","../../../node_modules/abortable-promise-cache/esm/AggregateAbortController.js","../../../node_modules/abortable-promise-cache/esm/AggregateStatusReporter.js","../../../node_modules/abortable-promise-cache/esm/abortcontroller-ponyfill.js","../../../node_modules/abortable-promise-cache/esm/index.js"],"sourcesContent":["import { Buffer } from 'buffer'\n//@ts-ignore\nimport { Z_SYNC_FLUSH, Inflate } from 'pako'\n\ninterface VirtualOffset {\n  blockPosition: number\n  dataPosition: number\n}\ninterface Chunk {\n  minv: VirtualOffset\n  maxv: VirtualOffset\n}\n\n// browserify-zlib, which is the zlib shim used by default in webpacked code,\n// does not properly uncompress bgzf chunks that contain more than\n// one bgzf block, so export an unzip function that uses pako directly\n// if we are running in a browser.\nasync function unzip(inputData: Buffer) {\n  try {\n    let strm\n    let pos = 0\n    let i = 0\n    const chunks = []\n    let totalSize = 0\n    let inflator\n    do {\n      const remainingInput = inputData.subarray(pos)\n      inflator = new Inflate()\n      //@ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      pos += strm.next_in\n      chunks[i] = inflator.result as Uint8Array\n      totalSize += chunks[i].length\n      i += 1\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    return Buffer.from(result)\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to pakounzip, except it does extra counting\n// to return the positions of compressed and decompressed\n// data offsets\nasync function unzipChunk(inputData: Buffer) {\n  try {\n    let strm\n    let cpos = 0\n    let dpos = 0\n    const blocks = []\n    const cpositions = []\n    const dpositions = []\n    do {\n      const remainingInput = inputData.slice(cpos)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = Buffer.from(inflator.result)\n      blocks.push(buffer)\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n\n      cpos += strm.next_in\n      dpos += buffer.length\n    } while (strm.avail_in)\n\n    const buffer = Buffer.concat(blocks)\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\n// similar to unzipChunk above but slices (0,minv.dataPosition) and\n// (maxv.dataPosition,end) off\nasync function unzipChunkSlice(inputData: Buffer, chunk: Chunk) {\n  try {\n    let strm\n    const { minv, maxv } = chunk\n    let cpos = minv.blockPosition\n    let dpos = minv.dataPosition\n    const chunks = []\n    const cpositions = []\n    const dpositions = []\n\n    let totalSize = 0\n    let i = 0\n    do {\n      const remainingInput = inputData.subarray(cpos - minv.blockPosition)\n      const inflator = new Inflate()\n      // @ts-ignore\n      ;({ strm } = inflator)\n      inflator.push(remainingInput, Z_SYNC_FLUSH)\n      if (inflator.err) {\n        throw new Error(inflator.msg)\n      }\n\n      const buffer = inflator.result\n      chunks.push(buffer as Uint8Array)\n      let len = buffer.length\n\n      cpositions.push(cpos)\n      dpositions.push(dpos)\n      if (chunks.length === 1 && minv.dataPosition) {\n        // this is the first chunk, trim it\n        chunks[0] = chunks[0].subarray(minv.dataPosition)\n        len = chunks[0].length\n      }\n      const origCpos = cpos\n      cpos += strm.next_in\n      dpos += len\n\n      if (origCpos >= maxv.blockPosition) {\n        // this is the last chunk, trim it and stop decompressing\n        // note if it is the same block is minv it subtracts that already\n        // trimmed part of the slice length\n\n        chunks[i] = chunks[i].subarray(\n          0,\n          maxv.blockPosition === minv.blockPosition\n            ? maxv.dataPosition - minv.dataPosition + 1\n            : maxv.dataPosition + 1,\n        )\n\n        cpositions.push(cpos)\n        dpositions.push(dpos)\n        totalSize += chunks[i].length\n        break\n      }\n      totalSize += chunks[i].length\n      i++\n    } while (strm.avail_in)\n\n    const result = new Uint8Array(totalSize)\n    for (let i = 0, offset = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset)\n      offset += chunks[i].length\n    }\n    const buffer = Buffer.from(result)\n\n    return { buffer, cpositions, dpositions }\n  } catch (e) {\n    //cleanup error message\n    if (`${e}`.match(/incorrect header check/)) {\n      throw new Error(\n        'problem decompressing block: incorrect gzip header check',\n      )\n    }\n    throw e\n  }\n}\n\nfunction nodeUnzip() {\n  throw new Error('nodeUnzip not implemented.')\n}\n\nexport { unzip, unzipChunk, unzipChunkSlice, unzip as pakoUnzip, nodeUnzip }\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\n// const COMPRESSED_POSITION = 0\nconst UNCOMPRESSED_POSITION = 1\n\nexport default class GziIndex {\n  filehandle: GenericFilehandle\n\n  index?: any\n\n  constructor({\n    filehandle,\n    path,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n  }\n\n  _readLongWithOverflow(buf: Buffer, offset = 0, unsigned = true) {\n    //@ts-ignore\n    const long = Long.fromBytesLE(buf.slice(offset, offset + 8), unsigned)\n    if (\n      long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n      long.lessThan(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new TypeError('integer overflow')\n    }\n\n    return long.toNumber()\n  }\n\n  _getIndex() {\n    if (!this.index) {\n      this.index = this._readIndex()\n    }\n    return this.index\n  }\n\n  async _readIndex() {\n    let buf = Buffer.allocUnsafe(8)\n    await this.filehandle.read(buf, 0, 8, 0)\n    const numEntries = this._readLongWithOverflow(buf, 0, true)\n    if (!numEntries) {\n      return [[0, 0]]\n    }\n\n    const entries = new Array(numEntries + 1)\n    entries[0] = [0, 0]\n\n    // TODO rewrite this to make an index-index that stays in memory\n    const bufSize = 8 * 2 * numEntries\n    if (bufSize > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError('integer overflow')\n    }\n    buf = Buffer.allocUnsafe(bufSize)\n    await this.filehandle.read(buf, 0, bufSize, 8)\n    for (let entryNumber = 0; entryNumber < numEntries; entryNumber += 1) {\n      const compressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16,\n      )\n      const uncompressedPosition = this._readLongWithOverflow(\n        buf,\n        entryNumber * 16 + 8,\n      )\n      entries[entryNumber + 1] = [compressedPosition, uncompressedPosition]\n    }\n\n    return entries\n  }\n\n  async getLastBlock() {\n    const entries = await this._getIndex()\n    if (!entries.length) {\n      return undefined\n    }\n    return entries[entries.length - 1]\n  }\n\n  async getRelevantBlocksForRead(length: number, position: number) {\n    const endPosition = position + length\n    if (length === 0) {\n      return []\n    }\n    const entries = await this._getIndex()\n    const relevant = []\n\n    // binary search to find the block that the\n    // read starts in and extend forward from that\n    const compare = (entry: any, nextEntry: any) => {\n      const uncompressedPosition = entry[UNCOMPRESSED_POSITION]\n      const nextUncompressedPosition = nextEntry\n        ? nextEntry[UNCOMPRESSED_POSITION]\n        : Infinity\n      // block overlaps read start\n      if (\n        uncompressedPosition <= position &&\n        nextUncompressedPosition > position\n      ) {\n        return 0\n        // block is before read start\n      }\n      if (uncompressedPosition < position) {\n        return -1\n      }\n      // block is after read start\n      return 1\n    }\n\n    let lowerBound = 0\n    let upperBound = entries.length - 1\n    let searchPosition = Math.floor(entries.length / 2)\n\n    let comparison = compare(\n      entries[searchPosition],\n      entries[searchPosition + 1],\n    )\n    while (comparison !== 0) {\n      if (comparison > 0) {\n        upperBound = searchPosition - 1\n      } else if (comparison < 0) {\n        lowerBound = searchPosition + 1\n      }\n      searchPosition = Math.ceil((upperBound - lowerBound) / 2) + lowerBound\n      comparison = compare(entries[searchPosition], entries[searchPosition + 1])\n    }\n\n    // here's where we read forward\n    relevant.push(entries[searchPosition])\n    let i = searchPosition + 1\n    for (; i < entries.length; i += 1) {\n      relevant.push(entries[i])\n      if (entries[i][UNCOMPRESSED_POSITION] >= endPosition) {\n        break\n      }\n    }\n    if (relevant[relevant.length - 1][UNCOMPRESSED_POSITION] < endPosition) {\n      relevant.push([])\n    }\n    return relevant\n  }\n}\n","import { Buffer } from 'buffer'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\n// locals\nimport { unzip } from './unzip'\nimport GziIndex from './gziIndex'\n\nexport default class BgzFilehandle {\n  filehandle: GenericFilehandle\n  gzi: GziIndex\n\n  constructor({\n    filehandle,\n    path,\n    gziFilehandle,\n    gziPath,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n    gziFilehandle?: GenericFilehandle\n    gziPath?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('either filehandle or path must be defined')\n    }\n\n    if (!gziFilehandle && !gziPath && !path) {\n      throw new TypeError('either gziFilehandle or gziPath must be defined')\n    }\n\n    this.gzi = new GziIndex({\n      filehandle: gziFilehandle,\n      path: !gziFilehandle && !gziPath && path ? gziPath : `${path}.gzi`,\n    })\n  }\n\n  async stat() {\n    const compressedStat = await this.filehandle.stat()\n    return Object.assign(compressedStat, {\n      size: await this.getUncompressedFileSize(),\n      blocks: undefined,\n      blksize: undefined,\n    })\n  }\n\n  async getUncompressedFileSize() {\n    // read the last block's ISIZE (see gzip RFC),\n    // and add it to its uncompressedPosition\n    const [, uncompressedPosition] = await this.gzi.getLastBlock()\n\n    const { size } = await this.filehandle.stat()\n\n    const buf = Buffer.allocUnsafe(4)\n    // note: there should be a 28-byte EOF marker (an empty block) at\n    // the end of the file, so we skip backward past that\n    const { bytesRead } = await this.filehandle.read(buf, 0, 4, size - 28 - 4)\n    if (bytesRead !== 4) {\n      throw new Error('read error')\n    }\n    const lastBlockUncompressedSize = buf.readUInt32LE(0)\n    return uncompressedPosition + lastBlockUncompressedSize\n  }\n\n  async _readAndUncompressBlock(\n    blockBuffer: Buffer,\n    [compressedPosition]: [number],\n    [nextCompressedPosition]: [number],\n  ) {\n    let next = nextCompressedPosition\n    if (!next) {\n      next = (await this.filehandle.stat()).size\n    }\n\n    // read the compressed data into the block buffer\n    const blockCompressedLength = next - compressedPosition\n\n    await this.filehandle.read(\n      blockBuffer,\n      0,\n      blockCompressedLength,\n      compressedPosition,\n    )\n\n    // uncompress it\n    const unzippedBuffer = await unzip(\n      blockBuffer.slice(0, blockCompressedLength),\n    )\n\n    return unzippedBuffer as Buffer\n  }\n\n  async read(buf: Buffer, offset: number, length: number, position: number) {\n    // get the block positions for this read\n    const blockPositions = await this.gzi.getRelevantBlocksForRead(\n      length,\n      position,\n    )\n    const blockBuffer = Buffer.allocUnsafe(32768 * 2)\n    // uncompress the blocks and read from them one at a time to keep memory usage down\n    let destinationOffset = offset\n    let bytesRead = 0\n    for (\n      let blockNum = 0;\n      blockNum < blockPositions.length - 1;\n      blockNum += 1\n    ) {\n      // eslint-disable-next-line no-await-in-loop\n      const uncompressedBuffer = await this._readAndUncompressBlock(\n        blockBuffer,\n        blockPositions[blockNum],\n        blockPositions[blockNum + 1],\n      )\n      const [, uncompressedPosition] = blockPositions[blockNum]\n      const sourceOffset =\n        uncompressedPosition >= position ? 0 : position - uncompressedPosition\n      const sourceEnd =\n        Math.min(\n          position + length,\n          uncompressedPosition + uncompressedBuffer.length,\n        ) - uncompressedPosition\n      if (sourceOffset >= 0 && sourceOffset < uncompressedBuffer.length) {\n        uncompressedBuffer.copy(buf, destinationOffset, sourceOffset, sourceEnd)\n        destinationOffset += sourceEnd - sourceOffset\n        bytesRead += sourceEnd - sourceOffset\n      }\n    }\n\n    return { bytesRead, buffer: buf }\n  }\n}\n","import Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    if (typeof DOMException !== 'undefined') {\n      // eslint-disable-next-line  no-undef\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif !== 0 ? dif : c0.minv.dataPosition - c1.minv.dataPosition\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  })\n\n  return mergedChunks\n}\n","import { Buffer } from 'buffer'\nexport default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport VirtualOffset from './virtualOffset'\nimport Chunk from './chunk'\n\nexport interface Options {\n  // support having some unknown parts of the options\n  [key: string]: unknown\n  signal?: AbortSignal\n}\n\nexport interface IndexData {\n  refNameToId: Record<string, number>\n  refIdToName: string[]\n  metaChar: string | null\n  columnNumbers: { ref: number; start: number; end: number }\n  coordinateType: string\n  format: string\n  [key: string]: any\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private parseP?: Promise<IndexData>\n\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<IndexData>\n\n  public async getMetadata(opts: Options = {}) {\n    const { indices: _indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this.parseP) {\n      this.parseP = this._parse(opts).catch(e => {\n        this.parseP = undefined\n        throw e\n      })\n    }\n    return this.parseP\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    const idx = await this.parse(opts)\n    return !!idx.indices[seqId]?.binIndex\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { longToNumber, optimizeChunks, checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const buf = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buf)\n    checkAbortSignal(opts.signal)\n\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n      // TODO: do we need to support big-endian TBI files?\n    }\n\n    // number of reference sequences in the index\n    const refCount = bytes.readInt32LE(4)\n    const formatFlags = bytes.readInt32LE(8)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: Record<number, string> = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(12),\n      start: bytes.readInt32LE(16),\n      end: bytes.readInt32LE(20),\n    }\n    const metaValue = bytes.readInt32LE(24)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(28)\n\n    // read sequence dictionary\n    const nameSectionLength = bytes.readInt32LE(32)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: Record<number, Chunk[]> = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return { binIndex, linearIndex, stats }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 16, offset + 24) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: Record<string, number> = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { longToNumber, optimizeChunks } from './util'\n\nimport IndexFile, { Options } from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n  indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.slice(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: Record<string, number> = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip(await this.filehandle.readFile(opts))\n\n    // check TBI magic numbers\n    let csiVersion\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n    const auxLength = bytes.readInt32LE(12)\n    const aux =\n      auxLength && auxLength >= 30\n        ? this.parseAuxData(bytes, 16)\n        : {\n            refIdToName: [],\n            refNameToId: {},\n            metaChar: null,\n            columnNumbers: { ref: 0, start: 1, end: 2 },\n            coordinateType: 'zero-based-half-open',\n            format: 'generic',\n          }\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information\n          // about the reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = bytes.readInt32LE(currOffset + 12)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            // this._findFirstData(data, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 28, offset + 36) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from 'quick-lru'\nimport { Buffer } from 'buffer'\nimport { GenericFilehandle, LocalFile } from 'generic-filehandle'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { checkAbortSignal } from './util'\nimport IndexFile, { Options, IndexData } from './indexFile'\n\nimport Chunk from './chunk'\nimport TBI from './tbi'\nimport CSI from './csi'\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\ninterface ReadChunk {\n  buffer: Buffer\n  cpositions: number[]\n  dpositions: number[]\n}\n\nfunction timeout(time: number) {\n  return new Promise(resolve => setTimeout(resolve, time))\n}\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private chunkSizeLimit: number\n  private yieldTime: number\n  private renameRefSeq: (n: string) => string\n  private chunkCache: AbortablePromiseCache<Chunk, ReadChunk>\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {filehandle} [args.filehandle]\n   * @param {string} [args.tbiPath]\n   * @param {filehandle} [args.tbiFilehandle]\n   * @param {string} [args.csiPath]\n   * @param {filehandle} [args.csiFilehandle]\n   * @param {number} [args.yieldTime] yield to main thread after N milliseconds if reading features is taking a long time to avoid hanging main thread\n   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform\n   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is\n   * not altered, just the names of the reference sequences that are used for querying.\n   */\n  constructor({\n    path,\n    filehandle,\n    tbiPath,\n    tbiFilehandle,\n    csiPath,\n    csiFilehandle,\n    yieldTime = 500,\n    chunkSizeLimit = 50000000,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    tbiPath?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    yieldTime?: number\n    chunkSizeLimit?: number\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath',\n      )\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit\n    this.renameRefSeq = renameRefSeqs\n    this.yieldTime = yieldTime\n    this.chunkCache = new AbortablePromiseCache<Chunk, ReadChunk>({\n      cache: new LRU({ maxSize: Math.floor(chunkCacheSize / (1 << 16)) }),\n      fill: (args: Chunk, signal?: AbortSignal) =>\n        this.readChunk(args, { signal }),\n    })\n  }\n\n  /**\n   * @param refName name of the reference sequence\n   * @param start start of the region (in 0-based half-open coordinates)\n   * @param end end of the region (in 0-based half-open coordinates)\n   * @param opts callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc\n   * @returns promise that is resolved when the whole read is finished, rejected on error\n   */\n  async getLines(\n    refName: string,\n    s: number | undefined,\n    e: number | undefined,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n    if (opts === undefined) {\n      throw new TypeError('line callback must be provided')\n    }\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n      signal = opts.signal\n    }\n    if (refName === undefined) {\n      throw new TypeError('must provide a reference sequence name')\n    }\n    if (!callback) {\n      throw new TypeError('line callback must be provided')\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    const start = s ?? 0\n    const end = e ?? metadata.maxRefLength\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n\n    // check the chunks for any that are over the size limit.  if\n    // any are, don't fetch any of them\n    for (const chunk of chunks) {\n      const size = chunk.fetchedSize()\n      if (size > this.chunkSizeLimit) {\n        throw new Error(\n          `Too much data. Chunk size ${size.toLocaleString()} bytes exceeds chunkSizeLimit of ${this.chunkSizeLimit.toLocaleString()}.`,\n        )\n      }\n    }\n\n    // now go through each chunk and parse and filter the lines out of it\n    let last = Date.now()\n    for (const c of chunks) {\n      let previousStartCoordinate: number | undefined\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n        signal,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n      while (blockStart < buffer.length) {\n        const n = buffer.indexOf('\\n', blockStart)\n        if (n === -1) {\n          break\n        }\n        const b = buffer.slice(blockStart, n)\n        const line = decoder?.decode(b) ?? b.toString()\n\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        // do a small check just to make sure that the lines are really sorted\n        // by start coordinate\n        if (\n          previousStartCoordinate !== undefined &&\n          startCoordinate !== undefined &&\n          previousStartCoordinate > startCoordinate\n        ) {\n          throw new Error(\n            `Lines not sorted by start coordinate (${previousStartCoordinate} > ${startCoordinate}), this file is not usable with Tabix.`,\n          )\n        }\n        previousStartCoordinate = startCoordinate\n\n        if (overlaps) {\n          callback(\n            line.trim(),\n            // cpositions[pos] refers to actual file offset of a bgzip block boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a \"unique\"\n            // address space so that data in that block could never overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset from\n            // that bgzip block boundary, and since the cpositions are multiplied by\n            // (1 << 8) these uncompressed offsets get a unique space\n            cpositions[pos] * (1 << 8) +\n              (blockStart - dpositions[pos]) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so\n          // we must be at the end of the relevant data and we can stop\n          // processing data now\n          return\n        }\n\n        // yield if we have emitted beyond the yield limit\n        if (this.yieldTime && last - Date.now() > this.yieldTime) {\n          last = Date.now()\n          checkAbortSignal(signal)\n          await timeout(1)\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of\n   * the file, which are the bytes up to the first\n   * non-meta line\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } =\n      await this.getMetadata(opts)\n    checkAbortSignal(opts.signal)\n    const maxFetch = (firstDataLine?.blockPosition || 0) + maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header\n    // actually takes up more than one block? this case is not covered here\n\n    const buf = await this._readRegion(0, maxFetch, opts)\n    const bytes = await unzip(buf)\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      return bytes.slice(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the\n   * file, is the portion up to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const bytes = await this.getHeaderBuffer(opts)\n    return bytes.toString('utf8')\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which\n   * they occur in the file. reference sequence renaming is not applied\n   * to these names.\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index,\n   * containing columnNumbers, metaChar, and format\n   * @param {string} regionRefName\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   * @param {array[string]} line\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    metadata: IndexData,\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    const { columnNumbers, metaChar, coordinateType, format } = metadata\n    // skip meta lines\n    if (metaChar && line.startsWith(metaChar)) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast.\n    // basically, we want to avoid doing a split, because if the lines are really long\n    // that could lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    for (let i = 0; i < line.length + 1; i += 1) {\n      if (line[i] === '\\t' || i === line.length) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return { overlaps: false }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return { startCoordinate, overlaps: false }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return { startCoordinate, overlaps: false }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          // this will never match if there is no end column\n          const endCoordinate =\n            format === 'VCF'\n              ? this._getVcfEnd(\n                  startCoordinate,\n                  refSeq,\n                  line.slice(currentColumnStart, i),\n                )\n              : parseInt(line.slice(currentColumnStart, i), 10)\n          if (endCoordinate <= regionStart) {\n            return { overlaps: false }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return { startCoordinate, overlaps: true }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END as being on a different\n    // chromosome\n    //\n    // if CHR2 is on the same chromosome, still ignore it because there should\n    // be another pairwise feature at the end of this one\n    const isTRA = info.includes('SVTYPE=TRA')\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference sequence\n   * @param refSeq reference sequence name\n   * @returns number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  async _readRegion(pos: number, size: number, opts: Options = {}) {\n    const b = Buffer.alloc(size)\n    const { bytesRead, buffer } = await this.filehandle.read(\n      b,\n      0,\n      size,\n      pos,\n      opts,\n    )\n\n    return buffer.slice(0, bytesRead)\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   */\n  async readChunk(c: Chunk, opts: Options = {}) {\n    // fetch the uncompressed data, uncompress carefully a block at a time,\n    // and stop when done\n\n    const data = await this._readRegion(\n      c.minv.blockPosition,\n      c.fetchedSize(),\n      opts,\n    )\n    return unzipChunkSlice(data, c)\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nconst AggregateAbortController_1 = __importDefault(require(\"./AggregateAbortController\"));\nconst AggregateStatusReporter_1 = __importDefault(require(\"./AggregateStatusReporter\"));\nclass AbortablePromiseCache {\n    constructor({ fill, cache, }) {\n        if (typeof fill !== 'function') {\n            throw new TypeError('must pass a fill function');\n        }\n        if (typeof cache !== 'object') {\n            throw new TypeError('must pass a cache object');\n        }\n        if (typeof cache.get !== 'function' ||\n            typeof cache.set !== 'function' ||\n            typeof cache.delete !== 'function') {\n            throw new TypeError('cache must implement get(key), set(key, val), and and delete(key)');\n        }\n        this.cache = cache;\n        this.fillCallback = fill;\n    }\n    static isAbortException(exception) {\n        return (\n        // DOMException\n        exception.name === 'AbortError' ||\n            // standard-ish non-DOM abort exception\n            //@ts-ignore\n            exception.code === 'ERR_ABORTED' ||\n            // stringified DOMException\n            exception.message === 'AbortError: aborted' ||\n            // stringified standard-ish exception\n            exception.message === 'Error: aborted');\n    }\n    evict(key, entry) {\n        if (this.cache.get(key) === entry) {\n            this.cache.delete(key);\n        }\n    }\n    fill(key, data, signal, statusCallback) {\n        const aborter = new AggregateAbortController_1.default();\n        const statusReporter = new AggregateStatusReporter_1.default();\n        statusReporter.addCallback(statusCallback);\n        const newEntry = {\n            aborter: aborter,\n            promise: this.fillCallback(data, aborter.signal, (message) => {\n                statusReporter.callback(message);\n            }),\n            settled: false,\n            statusReporter,\n            get aborted() {\n                return this.aborter.signal.aborted;\n            },\n        };\n        newEntry.aborter.addSignal(signal);\n        // remove the fill from the cache when its abortcontroller fires, if still in there\n        newEntry.aborter.signal.addEventListener('abort', () => {\n            if (!newEntry.settled) {\n                this.evict(key, newEntry);\n            }\n        });\n        // chain off the cached promise to record when it settles\n        newEntry.promise\n            .then(() => {\n            newEntry.settled = true;\n        }, () => {\n            newEntry.settled = true;\n            // if the fill throws an error (including abort) and is still in the cache, remove it\n            this.evict(key, newEntry);\n        })\n            .catch(e => {\n            // this will only be reached if there is some kind of\n            // bad bug in this library\n            console.error(e);\n            throw e;\n        });\n        this.cache.set(key, newEntry);\n    }\n    static checkSinglePromise(promise, signal) {\n        // check just this signal for having been aborted, and abort the\n        // promise if it was, regardless of what happened with the cached\n        // response\n        function checkForSingleAbort() {\n            if (signal && signal.aborted) {\n                throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' });\n            }\n        }\n        return promise.then(result => {\n            checkForSingleAbort();\n            return result;\n        }, error => {\n            checkForSingleAbort();\n            throw error;\n        });\n    }\n    has(key) {\n        return this.cache.has(key);\n    }\n    /**\n     * Callback for getting status of the pending async\n     *\n     * @callback statusCallback\n     * @param {any} status, current status string or message object\n     */\n    /**\n     * @param {any} key cache key to use for this request\n     * @param {any} data data passed as the first argument to the fill callback\n     * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n     * @param {statusCallback} a callback to get the current status of a pending async operation\n     */\n    get(key, data, signal, statusCallback) {\n        if (!signal && data instanceof abortcontroller_ponyfill_1.AbortSignal) {\n            throw new TypeError('second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?');\n        }\n        const cacheEntry = this.cache.get(key);\n        if (cacheEntry) {\n            if (cacheEntry.aborted && !cacheEntry.settled) {\n                // if it's aborted but has not realized it yet, evict it and redispatch\n                this.evict(key, cacheEntry);\n                return this.get(key, data, signal, statusCallback);\n            }\n            if (cacheEntry.settled) {\n                // too late to abort, just return it\n                return cacheEntry.promise;\n            }\n            // request is in-flight, add this signal to its list of signals,\n            // or if there is no signal, the aborter will become non-abortable\n            cacheEntry.aborter.addSignal(signal);\n            cacheEntry.statusReporter.addCallback(statusCallback);\n            return AbortablePromiseCache.checkSinglePromise(cacheEntry.promise, signal);\n        }\n        // if we got here, it is not in the cache. fill.\n        this.fill(key, data, signal, statusCallback);\n        return AbortablePromiseCache.checkSinglePromise(\n        //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n        //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.cache.get(key).promise, signal);\n    }\n    /**\n     * delete the given entry from the cache. if it exists and its fill request has\n     * not yet settled, the fill will be signaled to abort.\n     *\n     * @param {any} key\n     */\n    delete(key) {\n        const cachedEntry = this.cache.get(key);\n        if (cachedEntry) {\n            if (!cachedEntry.settled) {\n                cachedEntry.aborter.abort();\n            }\n            this.cache.delete(key);\n        }\n    }\n    /**\n     * Clear all requests from the cache. Aborts any that have not settled.\n     * @returns {number} count of entries deleted\n     */\n    clear() {\n        // iterate without needing regenerator-runtime\n        const keyIter = this.cache.keys();\n        let deleteCount = 0;\n        for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n            this.delete(result.value);\n            deleteCount += 1;\n        }\n        return deleteCount;\n    }\n}\nexports.default = AbortablePromiseCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nclass NullSignal {\n}\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nclass AggregateAbortController {\n    constructor() {\n        this.signals = new Set();\n        this.abortController = new abortcontroller_ponyfill_1.AbortController();\n    }\n    /**\n     * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n     *  will be treated as a null-signal, and this abortcontroller will no\n     *  longer be abortable.\n     */\n    //@ts-ignore\n    addSignal(signal = new NullSignal()) {\n        if (this.signal.aborted) {\n            throw new Error('cannot add a signal, already aborted!');\n        }\n        // note that a NullSignal will never fire, so if we\n        // have one this thing will never actually abort\n        this.signals.add(signal);\n        if (signal.aborted) {\n            // handle the abort immediately if it is already aborted\n            // for some reason\n            this.handleAborted(signal);\n        }\n        else if (typeof signal.addEventListener === 'function') {\n            signal.addEventListener('abort', () => {\n                this.handleAborted(signal);\n            });\n        }\n    }\n    handleAborted(signal) {\n        this.signals.delete(signal);\n        if (this.signals.size === 0) {\n            this.abortController.abort();\n        }\n    }\n    get signal() {\n        return this.abortController.signal;\n    }\n    abort() {\n        this.abortController.abort();\n    }\n}\nexports.default = AggregateAbortController;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass AggregateStatusReporter {\n    constructor() {\n        this.callbacks = new Set();\n    }\n    addCallback(callback = () => { }) {\n        this.callbacks.add(callback);\n        callback(this.currentMessage);\n    }\n    callback(message) {\n        this.currentMessage = message;\n        this.callbacks.forEach(elt => {\n            elt(message);\n        });\n    }\n}\nexports.default = AggregateStatusReporter;\n","\"use strict\";\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortSignal = exports.AbortController = void 0;\nconst cjs_ponyfill_1 = require(\"abortcontroller-polyfill/dist/cjs-ponyfill\");\nvar getGlobal = function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n};\n//@ts-ignore\nlet AbortController = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortController : getGlobal().AbortController;\nexports.AbortController = AbortController;\n//@ts-ignore\nlet AbortSignal = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortSignal : getGlobal().AbortSignal;\nexports.AbortSignal = AbortSignal;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbortablePromiseCache_1 = __importDefault(require(\"./AbortablePromiseCache\"));\nexports.default = AbortablePromiseCache_1.default;\n"],"names":["async","unzip","inputData","strm","pos","i","chunks","inflator","totalSize","remainingInput","subarray","Inflate","push","Z_SYNC_FLUSH","err","Error","msg","next_in","result","length","avail_in","Uint8Array","offset","set","Buffer","from","e","match","unzipChunkSlice","chunk","minv","maxv","cpos","blockPosition","dpos","dataPosition","cpositions","dpositions","buffer","len","origCpos","GziIndex","constructor","filehandle","path","this","TypeError","_readLongWithOverflow","buf","unsigned","long","slice","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","toNumber","_getIndex","index","_readIndex","allocUnsafe","read","numEntries","entries","Array","bufSize","entryNumber","compressedPosition","uncompressedPosition","getLastBlock","getRelevantBlocksForRead","position","endPosition","relevant","compare","entry","nextEntry","nextUncompressedPosition","Infinity","lowerBound","upperBound","searchPosition","Math","floor","comparison","ceil","BgzFilehandle","gziFilehandle","gziPath","gzi","stat","compressedStat","Object","assign","size","getUncompressedFileSize","blocks","undefined","blksize","bytesRead","readUInt32LE","_readAndUncompressBlock","blockBuffer","nextCompressedPosition","next","blockCompressedLength","blockPositions","destinationOffset","blockNum","uncompressedBuffer","sourceOffset","sourceEnd","min","copy","longToNumber","AbortError","checkAbortSignal","signal","aborted","DOMException","code","optimizeChunks","lowest","mergedChunks","lastChunk","sort","c0","c1","dif","forEach","chunk1","chunk2","compareTo","VirtualOffset","toString","b","args","fromBytes","bytes","bigendian","Chunk","bin","fetchedSize","_fetchedSize","toUniqueString","IndexFile","renameRefSeqs","n","renameRefSeq","getMetadata","opts","indices","_indices","rest","parse","_findFirstData","currentFdl","virtualOffset","parseP","_parse","catch","hasRefSeq","seqId","binIndex","TabixIndex","lineCount","refName","indexData","refId","refNameToId","stats","readFile","refCount","readInt32LE","formatFlags","coordinateType","format","columnNumbers","ref","start","end","metaValue","metaChar","String","fromCharCode","skipLines","nameSectionLength","refIdToName","_parseNameBytes","firstDataLine","currOffset","fill","map","binCount","j","maxBinNumber","chunkCount","parsePseudoBin","k","u","v","linearCount","linearIndex","maxRefLength","maxBlockSize","namesBytes","currRefId","currNameStart","blocksForRange","max","ba","console","warn","overlappingBins","beg","c","nintv","minLin","maxLin","vp","rshift","num","bits","CSI","super","depth","minShift","indexCov","parseAuxData","csiVersion","auxLength","aux","loffset","csi","reg2bins","l","t","s","bins","decoder","TextDecoder","timeout","time","Promise","resolve","setTimeout","TabixIndexedFile","tbiPath","tbiFilehandle","csiPath","csiFilehandle","yieldTime","chunkSizeLimit","chunkCacheSize","chunkCache","cache","maxSize","readChunk","getLines","callback","options","lineCallback","metadata","toLocaleString","last","Date","now","previousStartCoordinate","get","blockStart","indexOf","line","decode","startCoordinate","overlaps","checkLine","trim","getHeaderBuffer","maxFetch","_readRegion","lastNewline","newlineByte","charCodeAt","metaByte","getHeader","getReferenceSequenceNames","regionRefName","regionStart","regionEnd","startsWith","maxColumn","currentColumnNumber","currentColumnStart","refSeq","parseInt","_getVcfEnd","info","endCoordinate","isTRA","includes","prevChar","valueEnd","alloc","data","__importDefault","mod","__esModule","defineProperty","exports","value","abortcontroller_ponyfill_1","AggregateAbortController_1","AggregateStatusReporter_1","AbortablePromiseCache","delete","fillCallback","isAbortException","exception","name","message","evict","key","statusCallback","aborter","default","statusReporter","addCallback","newEntry","promise","settled","addSignal","addEventListener","then","error","checkSinglePromise","checkForSingleAbort","has","AbortSignal","cacheEntry","cachedEntry","abort","clear","keyIter","keys","deleteCount","done","NullSignal","signals","Set","abortController","AbortController","add","handleAborted","callbacks","currentMessage","elt","cjs_ponyfill_1","getGlobal","self","window","g","AbortablePromiseCache_1"],"sourceRoot":""}