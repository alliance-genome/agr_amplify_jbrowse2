{"version":3,"file":"static/js/1294.d7fe17fe.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/AnnotGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantCsqPanel.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantAnnPanel.tsx","../../../plugins/variants/src/VariantFeatureWidget/BreakendOptionDialog.tsx","../../../plugins/variants/src/VariantFeatureWidget/BreakendPanel.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\n\nimport {\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Typography,\n} from '@mui/material'\n\nimport { DataGrid } from '@mui/x-data-grid'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { SimpleFeatureSerialized } from '@jbrowse/core/util/simpleFeature'\n\ninterface Entry {\n  sample: string\n  id: string\n  [key: string]: string\n}\n\nexport default function VariantSamples(props: {\n  feature: SimpleFeatureSerialized\n  descriptions: any\n}) {\n  const { feature, descriptions } = props\n  const [filter, setFilter] = useState<Record<string, string>>({})\n  const [showFilters, setShowFilters] = useState(false)\n  const { samples = {} } = feature as Record<\n    string,\n    Record<string, Record<string, unknown>>\n  >\n  const preFilteredRows = Object.entries(samples)\n  if (!preFilteredRows.length) {\n    return null\n  }\n\n  const infoFields = ['sample', ...Object.keys(preFilteredRows[0][1])].map(\n    field => ({\n      field,\n      description: descriptions.FORMAT?.[field]?.Description,\n    }),\n  )\n\n  let error\n  let rows = [] as Entry[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(\n        row =>\n          ({\n            ...Object.fromEntries(\n              Object.entries(row[1]).map(entry => [entry[0], String(entry[1])]),\n            ),\n            sample: row[0],\n            id: row[0],\n          } as Entry),\n      )\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const val = row[key]\n              const currFilter = filter[key]\n              return currFilter ? val.match(new RegExp(currFilter, 'i')) : true\n            })\n          : true,\n      )\n  } catch (e) {\n    error = e\n  }\n  // disableSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={showFilters}\n            onChange={() => setShowFilters(f => !f)}\n          />\n        }\n        label=\"Show sample filters\"\n      />\n      {showFilters ? (\n        <>\n          <Typography>\n            These filters can use a plain text search or regex style query, e.g.\n            in the genotype field, entering 1 will query for all genotypes that\n            include the first alternate allele e.g. 0|1 or 1|1, entering\n            [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33\n          </Typography>\n          {infoFields.map(({ field }) => (\n            <TextField\n              key={`filter-${field}`}\n              placeholder={`Filter ${field}`}\n              value={filter[field] || ''}\n              onChange={event =>\n                setFilter({ ...filter, [field]: event.target.value })\n              }\n            />\n          ))}\n        </>\n      ) : null}\n      <div style={{ height: 600, width: '100%', overflow: 'auto' }}>\n        <DataGrid\n          rows={rows}\n          columns={infoFields}\n          disableSelectionOnClick\n          rowHeight={25}\n          disableColumnMenu\n        />\n      </div>\n    </BaseCard>\n  )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react'\nimport { DataGrid } from '@mui/x-data-grid'\n\nexport default function VariantAnnotPanel({\n  rows,\n  columns,\n}: {\n  rows: any\n  columns: any[]\n}) {\n  const rowHeight = 25\n  const hideFooter = rows.length < 100\n  const headerHeight = 80\n  return rows.length ? (\n    <div\n      style={{\n        height:\n          Math.min(rows.length, 100) * rowHeight +\n          headerHeight +\n          (hideFooter ? 0 : 50),\n        width: '100%',\n      }}\n    >\n      <DataGrid rowHeight={rowHeight} rows={rows} columns={columns} />\n    </div>\n  ) : null\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport AnnotGrid from './AnnotGrid'\n\nexport default function VariantCsqPanel({\n  feature,\n  descriptions,\n}: {\n  feature: any\n  descriptions: any\n}) {\n  const csqFields = (descriptions?.INFO?.CSQ?.Description?.match(\n    /.*Format: (.*)/,\n  )?.[1].split('|') || []) as string[]\n\n  const csq = (feature.INFO.CSQ || []) as string[]\n  const rows =\n    csq.map((elt, id) => ({\n      id,\n      ...Object.fromEntries(elt.split('|').map((e, i) => [csqFields[i], e])),\n    })) || []\n  const columns = csqFields.map(c => ({\n    field: c,\n  }))\n  return csq.length ? (\n    <BaseCard title=\"CSQ table\">\n      <AnnotGrid rows={rows} columns={columns} />\n    </BaseCard>\n  ) : null\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport AnnotGrid from './AnnotGrid'\n\nexport default function VariantAnnPanel({\n  feature,\n  descriptions,\n}: {\n  feature: any\n  descriptions: any\n}) {\n  const annFields = (descriptions?.INFO?.ANN?.Description?.match(\n    /.*Functional annotations:'(.*)'$/,\n  )?.[1].split('|') || []) as string[]\n  const ann = (feature.INFO.ANN || []) as string[]\n\n  const rows =\n    ann.map((elt, id) => ({\n      id,\n      ...Object.fromEntries(elt.split('|').map((e, i) => [annFields[i], e])),\n    })) || []\n  const columns = annFields.map(c => ({\n    field: c,\n  }))\n  return ann.length ? (\n    <BaseCard title=\"ANN table\">\n      <AnnotGrid rows={rows} columns={columns} />\n    </BaseCard>\n  ) : null\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { getSnapshot } from 'mobx-state-tree'\n// jbrowse\nimport { Dialog } from '@jbrowse/core/ui'\nimport { getSession, Feature } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()({\n  block: {\n    display: 'block',\n  },\n})\n\nfunction BreakendOptionDialog({\n  model,\n  handleClose,\n  feature,\n  viewType,\n}: {\n  model: any\n  handleClose: () => void\n  feature: Feature\n  viewType: any\n}) {\n  const { classes } = useStyles()\n  const [copyTracks, setCopyTracks] = useState(true)\n  const [mirrorTracks, setMirrorTracks] = useState(true)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Breakpoint split view options\">\n      <DialogContent>\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={copyTracks}\n              onChange={() => setCopyTracks(val => !val)}\n            />\n          }\n          label=\"Copy tracks into the new view\"\n        />\n\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={mirrorTracks}\n              onChange={() => setMirrorTracks(val => !val)}\n            />\n          }\n          label=\"Mirror tracks vertically in vertically stacked view\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const { view } = model\n            const session = getSession(model)\n            try {\n              const viewSnapshot = viewType.snapshotFromBreakendFeature(\n                feature,\n                view,\n              )\n              function remapIds(arr: any[]) {\n                return arr.map((v: any) => ({\n                  ...v,\n                  id: v.trackId + '-' + Math.random(),\n                }))\n              }\n              viewSnapshot.views[0].offsetPx -= view.width / 2 + 100\n              viewSnapshot.views[1].offsetPx -= view.width / 2 + 100\n              viewSnapshot.featureData = feature\n              const viewTracks = getSnapshot(view.tracks) as any\n              viewSnapshot.views[0].tracks = remapIds(viewTracks)\n              viewSnapshot.views[1].tracks = remapIds(\n                mirrorTracks ? viewTracks.slice().reverse() : viewTracks,\n              )\n\n              session.addView('BreakpointSplitView', viewSnapshot)\n            } catch (e) {\n              console.error(e)\n              session.notify(`${e}`)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n        <Button\n          onClick={() => handleClose()}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default observer(BreakendOptionDialog)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { Link, Typography } from '@mui/material'\nimport SimpleFeature, {\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport BreakendOptionDialog from './BreakendOptionDialog'\n\nexport default function BreakendPanel(props: {\n  locStrings: string[]\n  model: any\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  const [breakpointDialog, setBreakpointDialog] = useState(false)\n  let viewType\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  const simpleFeature = new SimpleFeature(feature)\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <Typography>Link to linear view of breakend endpoints</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={`${JSON.stringify(locString)}`}>\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              {`LGV - ${locString}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {viewType ? (\n        <div>\n          <Typography>\n            Launch split views with breakend source and target\n          </Typography>\n          <ul>\n            {locStrings.map(locString => (\n              <li key={`${JSON.stringify(locString)}`}>\n                <Link\n                  href=\"#\"\n                  onClick={event => {\n                    event.preventDefault()\n                    setBreakpointDialog(true)\n                  }}\n                >\n                  {`${feature.refName}:${feature.start} // ${locString} (split view)`}\n                </Link>\n              </li>\n            ))}\n          </ul>\n          {breakpointDialog ? (\n            <BreakendOptionDialog\n              model={model}\n              feature={simpleFeature}\n              viewType={viewType}\n              handleClose={() => {\n                setBreakpointDialog(false)\n              }}\n            />\n          ) : null}\n        </div>\n      ) : null}\n    </BaseCard>\n  )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react'\nimport { observer } from 'mobx-react'\nimport { Divider, Paper } from '@mui/material'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { parseBreakend } from '@gmod/vcf'\n\n// locals\nimport VariantSampleGrid from './VariantSampleGrid'\nimport VariantCsqPanel from './VariantCsqPanel'\nimport VariantAnnPanel from './VariantAnnPanel'\nimport BreakendPanel from './BreakendPanel'\n\nfunction VariantFeatureDetails(props: any) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ...rest } = feat\n  const basicDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER:\n      'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n  }\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...basicDescriptions, ...descriptions }}\n        {...props}\n      />\n      <Divider />\n      <VariantCsqPanel feature={rest} descriptions={descriptions} />\n      <Divider />\n      <VariantAnnPanel feature={rest} descriptions={descriptions} />\n      <Divider />\n      {feat.type === 'breakend' ? (\n        <BreakendPanel\n          feature={feat}\n          locStrings={feat.ALT.map(\n            (alt: string) => parseBreakend(alt)?.MatePosition || '',\n          )}\n          model={model}\n        />\n      ) : null}\n      {feat.type === 'translocation' ? (\n        <BreakendPanel\n          feature={feat}\n          model={model}\n          locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n        />\n      ) : null}\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n}\n\nexport default observer(VariantFeatureDetails)\n"],"names":["VariantSamples","props","feature","descriptions","useState","filter","setFilter","showFilters","setShowFilters","samples","preFilteredRows","Object","entries","length","error","infoFields","keys","map","field","description","FORMAT","Description","rows","filters","row","fromEntries","entry","String","sample","id","every","key","val","currFilter","match","RegExp","e","BaseCard","title","Typography","color","FormControlLabel","control","Checkbox","checked","onChange","f","label","TextField","placeholder","value","event","target","style","height","width","overflow","DataGrid","columns","disableSelectionOnClick","rowHeight","disableColumnMenu","VariantAnnotPanel","hideFooter","Math","min","VariantCsqPanel","csqFields","INFO","CSQ","split","csq","elt","i","c","VariantAnnPanel","annFields","ANN","ann","useStyles","makeStyles","block","display","observer","model","handleClose","viewType","classes","copyTracks","setCopyTracks","mirrorTracks","setMirrorTracks","Dialog","open","onClose","DialogContent","className","DialogActions","Button","onClick","view","session","getSession","remapIds","arr","v","trackId","random","viewSnapshot","snapshotFromBreakendFeature","views","offsetPx","featureData","viewTracks","getSnapshot","tracks","slice","reverse","addView","console","notify","variant","autoFocus","BreakendPanel","locStrings","pluginManager","getEnv","breakpointDialog","setBreakpointDialog","getViewType","simpleFeature","SimpleFeature","locString","Link","href","preventDefault","Error","navToLocString","JSON","stringify","refName","start","feat","parse","rest","Paper","FeatureDetails","CHROM","POS","ID","REF","ALT","QUAL","FILTER","Divider","type","alt","parseBreakend","MatePosition","CHR2","END"],"sourceRoot":""}