{"version":3,"file":"static/js/3134.86beea5c.chunk.js","mappings":"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","sources":["../../../plugins/trackhub-registry/src/trackhub-registry/HubDetails.js","../../../plugins/trackhub-registry/src/trackhub-registry/SelectBox.js","../../../plugins/trackhub-registry/src/trackhub-registry/TrackHubRegistrySelect.js","../../../node_modules/@material-ui/icons/Email.js"],"sourcesContent":["import { openLocation } from '@jbrowse/core/util/io'\nimport { HubFile } from '@gmod/ucsc-hub'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Typography from '@material-ui/core/Typography'\nimport EmailIcon from '@material-ui/icons/Email'\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew'\nimport PropTypes from 'prop-types'\nimport DOMPurify from 'dompurify'\nimport React, { useEffect, useState } from 'react'\n\nfunction HubDetails(props) {\n  const [hubFile, setHubFile] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const { hub } = props\n\n  const { url: hubUrl, longLabel, shortLabel } = hub\n\n  useEffect(() => {\n    async function getHubTxt() {\n      let hubTxt\n      try {\n        const hubHandle = openLocation({\n          uri: hubUrl,\n          locationType: 'UriLocation',\n        })\n        hubTxt = await hubHandle.readFile('utf8')\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Error retrieving hub</strong> {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n        return\n      }\n      try {\n        const newHubFile = new HubFile(hubTxt)\n        setHubFile(newHubFile)\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Could not parse genomes file:</strong> <br />\n            {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n      }\n    }\n\n    getHubTxt()\n  }, [hubUrl])\n  if (errorMessage) {\n    return (\n      <Card>\n        <CardContent>\n          <Typography color=\"error\">{errorMessage}</Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n  if (hubFile) {\n    return (\n      <Card>\n        <CardHeader title={shortLabel} />\n        <CardContent>\n          <div __dangerouslySetInnerHTML={DOMPurify.sanitize(longLabel)} />\n        </CardContent>\n        <CardActions>\n          <IconButton\n            href={`mailto:${hubFile.get('email')}`}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            color=\"secondary\"\n          >\n            <EmailIcon />\n          </IconButton>\n          {hubFile.get('descriptionUrl') ? (\n            <IconButton\n              href={\n                new URL(hubFile.get('descriptionUrl'), new URL(hubUrl)).href\n              }\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <OpenInNewIcon color=\"secondary\" />\n            </IconButton>\n          ) : null}\n        </CardActions>\n      </Card>\n    )\n  }\n  return <LinearProgress variant=\"query\" />\n}\n\nHubDetails.propTypes = {\n  hub: PropTypes.shape().isRequired,\n}\n\nexport default HubDetails\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 192,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}))\n\nfunction SelectBox({\n  selectList,\n  selectedItem,\n  handleSelect,\n  label,\n  helpText,\n}) {\n  const classes = useStyles()\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel>{label}</InputLabel>\n      <Select value={selectedItem} onChange={handleSelect}>\n        {selectList.map(item => {\n          let value\n          let description\n          if (item.name) {\n            value = item.name\n            description = `${item.name} (${item.synonyms.join(' ')})`\n          }\n          return (\n            <MenuItem key={description || item} value={value || item}>\n              {description || item}\n            </MenuItem>\n          )\n        })}\n      </Select>\n      <FormHelperText>{selectedItem ? '' : helpText}</FormHelperText>\n    </FormControl>\n  )\n}\n\nSelectBox.propTypes = {\n  selectList: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),\n  ).isRequired,\n  selectedItem: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  helpText: PropTypes.string.isRequired,\n}\n\nexport default SelectBox\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  LinearProgress,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { isAbortException } from '@jbrowse/core/util'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport PropTypes from 'prop-types'\nimport HubDetails from './HubDetails'\nimport SelectBox from './SelectBox'\n\nfunction QueryStatus(props) {\n  const { status } = props\n  return (\n    <>\n      <LinearProgress variant=\"query\" />\n      <Typography>{status}</Typography>\n    </>\n  )\n}\n\nQueryStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n}\n\n// Need this for FormControlLabel to work with Tooltip\n// https://github.com/mui-org/material-ui/issues/2225#issuecomment-460041878\nfunction Wire({ children, ...props }) {\n  return children(props)\n}\n\nconst useStyles = makeStyles(theme => ({\n  hubList: {\n    maxHeight: 400,\n    overflowY: 'auto',\n  },\n  genomeSelector: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nfunction TrackHubRegistrySelect({ model, setModelReady }) {\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [assemblies, setAssemblies] = useState(null)\n  const [selectedSpecies, setSelectedSpecies] = useState('')\n  const [selectedAssembly, setSelectedAssembly] = useState('')\n  const [hubs, setHubs] = useState(new Map())\n  const [allHubsRetrieved, setAllHubsRetrieved] = useState(false)\n  const [selectedHub, setSelectedHub] = useState('')\n  const classes = useStyles()\n\n  useEffect(() => {\n    if (selectedHub) {\n      setModelReady(true)\n    } else {\n      setModelReady(false)\n    }\n  }, [selectedHub, setModelReady])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    async function getAssemblies() {\n      const pingResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/ping',\n        undefined,\n        { signal },\n      )\n      if (!pingResponse) {\n        return\n      }\n      if (pingResponse.ping !== 1) {\n        setErrorMessage('Registry is not available')\n        return\n      }\n      const assembliesResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/assemblies',\n        undefined,\n        { signal },\n      )\n      if (assembliesResponse) {\n        setAssemblies(assembliesResponse)\n      }\n    }\n\n    getAssemblies()\n\n    return () => {\n      controller.abort()\n    }\n  }, [])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    if (!errorMessage) {\n      if (selectedAssembly && !hubs.size) {\n        getHubs(signal, true)\n      } else if (hubs.size && !allHubsRetrieved) {\n        getHubs(signal)\n      }\n    }\n\n    return () => {\n      controller.abort()\n    }\n  })\n\n  async function getHubs(signal, reset) {\n    const entriesPerPage = 10\n    const newHubs = reset ? new Map() : new Map(hubs)\n    const page = Math.floor(hubs.size / entriesPerPage) + 1\n    const response = await doPost(\n      'https://www.trackhubregistry.org/api/search',\n      { page, entries_per_page: entriesPerPage },\n      { body: JSON.stringify({ assembly: selectedAssembly }), signal },\n    )\n    if (response) {\n      for (const item of response.items) {\n        if (item.hub.url.startsWith('ftp://')) {\n          item.error = 'JBrowse cannot add connections from FTP sources'\n        } else {\n          const hub = openLocation({\n            uri: item.hub.url,\n            locationType: 'UriLocation',\n          })\n          try {\n            await hub.stat()\n          } catch (error) {\n            item.error = error.message\n          }\n        }\n        newHubs.set(item.id, item)\n      }\n      setHubs(newHubs)\n      if (newHubs.size === response.total_entries) {\n        setAllHubsRetrieved(true)\n      }\n    }\n  }\n\n  function handleSelectSpecies(event) {\n    setSelectedSpecies(event.target.value)\n    setSelectedAssembly('')\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectAssembly(event) {\n    setSelectedAssembly(event.target.value)\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectHub(event) {\n    const newHub = event.target.value\n    setSelectedHub(newHub)\n    model.target.name.set(hubs.get(newHub).hub.shortLabel)\n    model.target.assemblyNames.set([selectedAssembly])\n    model.target.trackDbId.set(newHub)\n  }\n\n  async function doGet(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(\n        `${url}${urlParams ? `?${urlParams}` : ''}`,\n        options,\n      )\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  async function doPost(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(`${url}${urlParams ? `?${urlParams}` : ''}`, {\n        ...options,\n        method: 'POST',\n      })\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  const renderItems = [\n    <Typography key=\"heading\" variant=\"h6\">\n      The Track Hub Registry\n    </Typography>,\n  ]\n\n  if (errorMessage) {\n    renderItems.push(\n      <Typography key=\"errorMessage\" color=\"error\">\n        {errorMessage}\n      </Typography>,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  if (!assemblies) {\n    renderItems.push(\n      <QueryStatus key=\"queryStatus\" status=\"Connecting to registry...\" />,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  const speciesList = Object.keys(assemblies)\n    .sort()\n    .filter(item => item.toLowerCase().includes('sapiens'))\n\n  renderItems.push(\n    <SelectBox\n      key=\"speciesSelect\"\n      selectList={speciesList}\n      selectedItem={selectedSpecies}\n      handleSelect={handleSelectSpecies}\n      label=\"Species\"\n      helpText=\"Select a species\"\n    />,\n  )\n\n  if (selectedSpecies) {\n    const ret = assemblies[selectedSpecies].filter(\n      s => !(s.name === 'GRCh37' && s.synonyms[0] === 'hg38'),\n    )\n    renderItems.push(\n      <SelectBox\n        key=\"assemblySelect\"\n        selectList={ret}\n        selectedItem={selectedAssembly}\n        handleSelect={handleSelectAssembly}\n        label=\"Assembly\"\n        helpText=\"Select an assembly\"\n      />,\n    )\n  }\n\n  if (selectedAssembly) {\n    renderItems.push(\n      <div key=\"hubSelect\">\n        <FormControl>\n          <FormLabel>Hubs:</FormLabel>\n          <div className={classes.hubList}>\n            <RadioGroup value={selectedHub} onChange={handleSelectHub}>\n              {Array.from(hubs.values())\n                .filter(\n                  hub =>\n                    hub.assembly.name === selectedAssembly ||\n                    hub.assembly.synonyms.includes(selectedAssembly),\n                )\n                .map(hub => {\n                  const {\n                    error,\n                    id,\n                    hub: { shortLabel, longLabel },\n                  } = hub\n                  return (\n                    <Wire key={id} value={id}>\n                      {formControlProps => (\n                        <Tooltip\n                          title={error || <SanitizedHTML html={longLabel} />}\n                          placement=\"left\"\n                          interactive\n                        >\n                          <FormControlLabel\n                            key={id}\n                            value={id}\n                            label={<SanitizedHTML html={shortLabel} />}\n                            disabled={Boolean(error)}\n                            control={<Radio />}\n                            {...formControlProps}\n                          />\n                        </Tooltip>\n                      )}\n                    </Wire>\n                  )\n                })}\n            </RadioGroup>\n          </div>\n        </FormControl>\n      </div>,\n    )\n    if (!allHubsRetrieved) {\n      renderItems.push(<QueryStatus key=\"hubStatus\" status=\"Retrieving hubs\" />)\n    }\n  }\n\n  if (selectedHub) {\n    renderItems.push(\n      <HubDetails key=\"hubDetails\" hub={hubs.get(selectedHub).hub} />,\n    )\n  }\n\n  return <>{renderItems}</>\n}\n\nexport default TrackHubRegistrySelect\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"\n}), 'Email');\n\nexports.default = _default;"],"names":["props","useState","hubFile","setHubFile","errorMessage","setErrorMessage","hub","hubUrl","url","longLabel","shortLabel","useEffect","hubHandle","openLocation","uri","locationType","readFile","hubTxt","message","newHubFile","HubFile","error","getHubTxt","Card","CardContent","Typography","color","CardHeader","title","__dangerouslySetInnerHTML","DOMPurify","CardActions","IconButton","href","get","rel","target","Email","URL","OpenInNew","LinearProgress","variant","useStyles","makeStyles","theme","formControl","minWidth","marginLeft","spacing","marginRight","selectList","selectedItem","handleSelect","label","helpText","classes","FormControl","className","InputLabel","Select","value","onChange","map","item","description","name","synonyms","join","MenuItem","FormHelperText","QueryStatus","status","Wire","children","hubList","maxHeight","overflowY","genomeSelector","marginTop","model","setModelReady","assemblies","setAssemblies","selectedSpecies","setSelectedSpecies","selectedAssembly","setSelectedAssembly","Map","hubs","setHubs","allHubsRetrieved","setAllHubsRetrieved","selectedHub","setSelectedHub","getHubs","signal","reset","newHubs","page","Math","floor","size","doPost","entries_per_page","body","JSON","stringify","assembly","response","items","startsWith","stat","set","id","total_entries","doGet","params","options","urlParams","Object","keys","param","fetch","rawResponse","isAbortException","ok","statusText","json","method","controller","AbortController","undefined","pingResponse","ping","assembliesResponse","getAssemblies","abort","renderItems","push","speciesList","sort","filter","toLowerCase","includes","event","ret","s","FormLabel","RadioGroup","newHub","assemblyNames","trackDbId","Array","from","values","formControlProps","Tooltip","SanitizedHTML","html","placement","interactive","FormControlLabel","disabled","Boolean","control","Radio","_interopRequireDefault","require","_interopRequireWildcard","exports","React","_default","default","createElement","d"],"sourceRoot":""}