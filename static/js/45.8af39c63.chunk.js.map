{"version":3,"sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.js","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.js"],"names":["ConfigureConnection","observer","props","connectionType","model","setModelReady","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","React","Suspense","fallback","target","ConnectionTypeSelect","connectionTypeChoices","setConnectionType","useEffect","name","autoComplete","TextField","value","label","helperText","description","url","IconButton","href","rel","color","select","fullWidth","onChange","event","find","connectionTypeChoice","variant","map","MenuItem","key","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","configModel","setConfigModel","configModelReady","setConfigModelReady","activeStep","setActiveStep","classes","session","getSession","pluginManager","getEnv","handleSetConnectionType","newConnectionType","configSchema","create","connectionId","Date","now","handleNext","length","connectionConf","addConnectionConf","makeConnection","hideWidget","handleFinish","handleBack","className","Stepper","orientation","Step","StepLabel","StepContent","getElementTypesInGroup","Typography","stepContent","Button","disabled","onClick"],"mappings":"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","file":"static/js/45.8af39c63.chunk.js","sourcesContent":["import React, { Suspense } from 'react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { observer } from 'mobx-react'\n\nconst ConfigureConnection = observer(props => {\n  const { connectionType, model, setModelReady } = props\n  const ConfigEditorComponent =\n    connectionType.configEditorComponent || ConfigurationEditor\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <ConfigEditorComponent\n        model={{ target: model }}\n        setModelReady={setModelReady}\n      />\n    </Suspense>\n  )\n})\n\nexport default ConfigureConnection\n","import IconButton from '@material-ui/core/IconButton'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport React, { useEffect } from 'react'\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew'\n\nimport ConnectionType from '@jbrowse/core/pluggableElementTypes/ConnectionType'\n\nfunction ConnectionTypeSelect(props: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType: ConnectionType\n  setConnectionType: Function\n}) {\n  const { connectionTypeChoices, connectionType, setConnectionType } = props\n\n  useEffect(() => {\n    if (!connectionType.name) {\n      setConnectionType(connectionTypeChoices[0])\n    }\n  })\n\n  function handleChange(\n    event: React.ChangeEvent<{ name?: string; value: unknown }>,\n  ): void {\n    setConnectionType(\n      connectionTypeChoices.find(\n        (connectionTypeChoice: ConnectionType) =>\n          connectionTypeChoice.name === event.target.value,\n      ),\n    )\n  }\n  if (!connectionType.name) {\n    return null\n  }\n  return (\n    <form autoComplete=\"off\">\n      <TextField\n        value={connectionType.name}\n        label=\"connectionType\"\n        helperText={\n          connectionType.description ? (\n            <>\n              {connectionType.description}\n              {connectionType.url ? (\n                <IconButton\n                  href={connectionType.url}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  color=\"secondary\"\n                >\n                  <OpenInNewIcon />\n                </IconButton>\n              ) : null}\n            </>\n          ) : null\n        }\n        select\n        fullWidth\n        onChange={handleChange}\n        variant=\"outlined\"\n      >\n        {connectionTypeChoices.map((connectionTypeChoice: ConnectionType) => (\n          <MenuItem\n            key={connectionTypeChoice.name}\n            value={connectionTypeChoice.name}\n          >\n            {connectionTypeChoice.displayName || connectionTypeChoice.name}\n          </MenuItem>\n        ))}\n      </TextField>\n    </form>\n  )\n}\n\nexport default ConnectionTypeSelect\n","import { getSession } from '@jbrowse/core/util'\nimport Button from '@material-ui/core/Button'\nimport Step from '@material-ui/core/Step'\nimport StepContent from '@material-ui/core/StepContent'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Stepper from '@material-ui/core/Stepper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport React, { useState } from 'react'\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nfunction AddConnectionWidget({ model }) {\n  const [connectionType, setConnectionType] = useState({})\n  const [configModel, setConfigModel] = useState({})\n  const [configModelReady, setConfigModelReady] = useState(true)\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n\n  const session = getSession(model)\n\n  const { pluginManager } = getEnv(session)\n\n  function handleSetConnectionType(newConnectionType) {\n    setConnectionType(newConnectionType)\n    setConfigModel(\n      newConnectionType.configSchema.create(\n        {\n          connectionId: `${newConnectionType.name}-${Date.now()}`,\n        },\n        getEnv(model),\n      ),\n    )\n  }\n\n  function stepContent() {\n    switch (activeStep) {\n      case 0:\n        return (\n          <ConnectionTypeSelect\n            connectionTypeChoices={pluginManager.getElementTypesInGroup(\n              'connection',\n            )}\n            connectionType={connectionType}\n            setConnectionType={handleSetConnectionType}\n          />\n        )\n      case 1:\n        return (\n          <ConfigureConnection\n            connectionType={connectionType}\n            model={configModel}\n            setModelReady={setConfigModelReady}\n          />\n        )\n\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep === steps.length - 1) {\n      handleFinish()\n    } else {\n      setActiveStep(activeStep + 1)\n    }\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function handleFinish() {\n    const connectionConf = session.addConnectionConf(configModel)\n    session.makeConnection(connectionConf)\n    session.hideWidget(model)\n  }\n\n  function checkNextEnabled() {\n    if (\n      (activeStep === 0 && connectionType.name) ||\n      (activeStep === 1 && configModel && configModelReady)\n    ) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {stepContent()}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={!checkNextEnabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nAddConnectionWidget.propTypes = {\n  model: MobxPropTypes.observableObject.isRequired,\n}\n\nexport default observer(AddConnectionWidget)\n"],"sourceRoot":""}