{"version":3,"file":"static/js/7658.fbef2779.chunk.js","mappings":"uMAoBe,MAAMA,UAA0BC,EAAAA,uBAG7CC,WAAAA,CACEC,EACAC,EACAC,GAEAC,MAAMH,EAAMC,EAAeC,GAC3B,MAAME,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACnCM,KAAKC,SAAWV,EAAkBW,aAAaJ,GAAS,GAC1D,CAEA,mBAAOI,CAAaC,GAClB,MAAMF,EAAW,IAAIG,IACrB,IAAK,MAAMC,KAASF,EAClB,GAAIE,EAAO,CACT,MAAMC,EAAIN,KAAKO,YAAYF,GACrBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAAST,EAASQ,IAAID,GACrBE,IACHA,EAAS,GACTT,EAASU,IAAIH,EAASE,IAGxBA,EAAOE,KAAKN,EACd,CAIF,IAAK,MAAMO,KAAeZ,EAASa,SACjCD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAGpD,OAAOR,CACT,CAEA,kBAAOM,CAAYW,GACjB,OAAO,IAAIC,EAAAA,EAAcD,EAC3B,CAEA,iBAAME,GACJ,MAAO,IAAIpB,KAAKC,SAASoB,OAC3B,CAEA,uBAAMC,GACJ,MAAO,IAAItB,KAAKC,SAASa,UAAUS,KAAIC,IAAgB,CACrDhB,QAASgB,EAAa,GAAGf,IAAI,WAC7BgB,QAASD,EAAa,GAAGf,IAAI,cAEjC,CAEAiB,WAAAA,CAAYC,GACV,MAAM,QAAEnB,EAAO,MAAEoB,EAAK,IAAEC,GAAQF,EAEhC,OAAOG,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM9B,EAAWD,KAAKC,SAASQ,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKL,EACVK,EAAEG,IAAI,OAASmB,GAAStB,EAAEG,IAAI,SAAWoB,GAC3CG,EAASC,KAAK3B,GAGlB0B,EAASE,UAAU,GAEvB,CAEAC,aAAAA,GAAuC,E","sources":["../../../plugins/config/src/FromConfigAdapter/FromConfigAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport SimpleFeature, {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\n/**\n * Adapter that just returns the features defined in its `features` configuration\n * key, like:\n *   `\"features\": [ { \"refName\": \"ctgA\", \"start\":1, \"end\":20 }, ... ]`\n */\n\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n  protected features: Map<string, Feature[]>\n\n  constructor(\n    conf: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(conf, getSubAdapter, pluginManager)\n    const feats = readConfObject(conf, 'features') as SimpleFeatureSerialized[]\n    this.features = FromConfigAdapter.makeFeatures(feats || [])\n  }\n\n  static makeFeatures(fdata: SimpleFeatureSerialized[]) {\n    const features = new Map<string, Feature[]>()\n    for (const entry of fdata) {\n      if (entry) {\n        const f = this.makeFeature(entry)\n        const refName = f.get('refName') as string\n        let bucket = features.get(refName)\n        if (!bucket) {\n          bucket = []\n          features.set(refName, bucket)\n        }\n\n        bucket.push(f)\n      }\n    }\n\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n      refFeatures.sort((a, b) => a.get('start') - b.get('start'))\n    }\n\n    return features\n  }\n\n  static makeFeature(data: SimpleFeatureSerialized) {\n    return new SimpleFeature(data)\n  }\n\n  async getRefNames() {\n    return [...this.features.keys()]\n  }\n\n  async getRefNameAliases() {\n    return [...this.features.values()].map(featureArray => ({\n      refName: featureArray[0].get('refName'),\n      aliases: featureArray[0].get('aliases'),\n    }))\n  }\n\n  getFeatures(region: NoAssemblyRegion) {\n    const { refName, start, end } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const features = this.features.get(refName) || []\n      for (const f of features) {\n        if (f.get('end') > start && f.get('start') < end) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","feats","readConfObject","this","features","makeFeatures","fdata","Map","entry","f","makeFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","data","SimpleFeature","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources"],"sourceRoot":""}