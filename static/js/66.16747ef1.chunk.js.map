{"version":3,"sources":["../../../plugins/gff3/src/Gff3Adapter/Gff3Adapter.ts"],"names":["isGzip","buf","gffFeatures","openLocation","readConfObject","this","config","pluginManager","readFile","buffer","unzip","length","Error","data","TextDecoder","fatal","decode","lines","split","headerLines","i","startsWith","push","header","join","feats","gff","parseStringSync","parseFeatures","parseComments","parseDirectives","parseSequences","intervalTree","flat","map","f","SimpleFeature","featureData","id","reduce","acc","obj","key","get","IntervalTree","insert","loadDataP","catch","e","undefined","loadData","Object","keys","query","opts","ObservableCreate","observer","a","start","end","refName","search","forEach","next","complete","error","signal","strand","phase","Number","seq_id","score","defaultFields","dataAttributes","attributes","b","toLowerCase","includes","attr","Array","isArray","child_features","subfeatures","childLocs","childLoc","derived_features","BaseFeatureDataAdapter"],"mappings":"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","file":"static/js/66.16747ef1.chunk.js","sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport gff, { GFF3FeatureLineWithRefs } from '@gmod/gff'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gffFeatures?: Promise<{\n    header: string\n    intervalTree: Record<string, IntervalTree>\n  }>\n\n  private async loadDataP() {\n    const buffer = await openLocation(\n      readConfObject(this.config, 'gffLocation'),\n      this.pluginManager,\n    ).readFile()\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    const lines = data.split('\\n')\n    const headerLines = []\n    for (let i = 0; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n\n    const feats = gff.parseStringSync(data, {\n      parseFeatures: true,\n      parseComments: false,\n      parseDirectives: false,\n      parseSequences: false,\n    })\n\n    const intervalTree = feats\n      .flat()\n      .map(\n        (f, i) =>\n          new SimpleFeature({\n            data: this.featureData(f),\n            id: `${this.id}-offset-${i}`,\n          }),\n      )\n      .reduce((acc, obj) => {\n        const key = obj.get('refName')\n        if (!acc[key]) {\n          acc[key] = new IntervalTree()\n        }\n        acc[key].insert([obj.get('start'), obj.get('end')], obj)\n        return acc\n      }, {} as Record<string, IntervalTree>)\n\n    return { header, intervalTree }\n  }\n\n  private async loadData() {\n    if (!this.gffFeatures) {\n      this.gffFeatures = this.loadDataP().catch(e => {\n        this.gffFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gffFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { intervalTree } = await this.loadData()\n    return Object.keys(intervalTree)\n  }\n\n  public async getHeader() {\n    const { header } = await this.loadData()\n    return header\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = query\n        const { intervalTree } = await this.loadData()\n        intervalTree[refName]\n          ?.search([start, end])\n          .forEach(f => observer.next(f))\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  private featureData(data: GFF3FeatureLineWithRefs) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    if (data.strand === '+') {\n      f.strand = 1\n    } else if (data.strand === '-') {\n      f.strand = -1\n    } else if (data.strand === '.') {\n      f.strand = 0\n    } else {\n      f.strand = undefined\n    }\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = [\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ]\n    const dataAttributes = data.attributes || {}\n    Object.keys(dataAttributes).forEach(a => {\n      let b = a.toLowerCase()\n      if (defaultFields.includes(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (dataAttributes[a] !== null) {\n        let attr: string | string[] | undefined = dataAttributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    })\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length) {\n      f.subfeatures = data.child_features\n        .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))\n        .flat()\n    }\n\n    delete f.child_features\n    delete f.data\n    delete f.derived_features\n    delete f.attributes\n    delete f.seq_id\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"sourceRoot":""}