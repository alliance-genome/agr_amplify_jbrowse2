{"version":3,"sources":["../../../plugins/variants/src/VariantFeatureWidget/BreakendOptionDialog.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","block","display","observer","model","handleClose","feature","viewType","classes","useState","copyTracks","setCopyTracks","mirrorTracks","setMirrorTracks","Dialog","open","onClose","DialogTitle","IconButton","className","onClick","Divider","DialogContent","FormControlLabel","control","Checkbox","checked","onChange","val","label","DialogActions","Button","view","session","getSession","viewSnapshot","snapshotFromBreakendFeature","views","offsetPx","width","featureData","viewTracks","getSnapshot","tracks","slice","reverse","addView","e","console","error","notify","variant","autoFocus","VariantSamples","props","filter","setFilter","showFilters","setShowFilters","samples","preFilteredRows","Object","entries","length","infoFields","keys","map","field","rows","filters","row","fromEntries","entry","String","sample","id","every","key","currFilter","match","RegExp","title","Typography","f","TextField","placeholder","value","event","target","style","height","overflow","columns","rowHeight","headerHeight","disableSelectionOnClick","disableColumnMenu","BreakendPanel","locStrings","pluginManager","getEnv","breakpointDialog","setBreakpointDialog","getViewType","simpleFeature","SimpleFeature","locString","JSON","stringify","Link","href","preventDefault","Error","navToLocString","refName","start","descriptions","feat","parse","rest","Paper","CHROM","POS","ID","REF","ALT","QUAL","FILTER","type","alt","parseBreakend","MatePosition","INFO","CHR2","END"],"mappings":"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","file":"static/js/79.a14b18da.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  FormControlLabel,\n  Checkbox,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getSession } from '@jbrowse/core/util'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\n\nconst useStyles = makeStyles(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  block: {\n    display: 'block',\n  },\n}))\n\nfunction BreakendOptionDialog({\n  model,\n  handleClose,\n  feature,\n  viewType,\n}: {\n  model: any\n  handleClose: () => void\n  feature: Feature\n  viewType: any\n}) {\n  const classes = useStyles()\n  const [copyTracks, setCopyTracks] = useState(true)\n  const [mirrorTracks, setMirrorTracks] = useState(true)\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Breakpoint split view options\n        {handleClose ? (\n          <IconButton\n            className={classes.closeButton}\n            onClick={() => handleClose()}\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </DialogTitle>\n      <Divider />\n\n      <DialogContent>\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={copyTracks}\n              onChange={() => setCopyTracks(val => !val)}\n            />\n          }\n          label=\"Copy tracks into the new view\"\n        />\n\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={mirrorTracks}\n              onChange={() => setMirrorTracks(val => !val)}\n            />\n          }\n          label=\"Mirror tracks vertically in vertically stacked view\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const { view } = model\n            const session = getSession(model)\n            try {\n              const viewSnapshot = viewType.snapshotFromBreakendFeature(\n                feature,\n                view,\n              )\n              viewSnapshot.views[0].offsetPx -= view.width / 2 + 100\n              viewSnapshot.views[1].offsetPx -= view.width / 2 + 100\n              viewSnapshot.featureData = feature\n              const viewTracks: any = getSnapshot(view.tracks)\n              viewSnapshot.views[0].tracks = viewTracks\n              viewSnapshot.views[1].tracks = mirrorTracks\n                ? viewTracks.slice().reverse()\n                : viewTracks\n\n              session.addView('BreakpointSplitView', viewSnapshot)\n            } catch (e) {\n              console.error(e)\n              session.notify(`${e}`)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n        <Button\n          onClick={() => handleClose()}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default observer(BreakendOptionDialog)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport {\n  Divider,\n  Link,\n  Paper,\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport SimpleFeature, {\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport { getEnv } from 'mobx-state-tree'\nimport {\n  FeatureDetails,\n  BaseCard,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport BreakendOptionDialog from './BreakendOptionDialog'\nimport { parseBreakend } from '@gmod/vcf'\n\nfunction VariantSamples(props: any) {\n  const [filter, setFilter] = useState<any>({})\n  const [showFilters, setShowFilters] = useState(false)\n  const { feature } = props\n\n  const { samples = {} } = feature\n  const preFilteredRows: any = Object.entries(samples)\n  if (!preFilteredRows.length) {\n    return null\n  }\n  const infoFields = ['sample', ...Object.keys(preFilteredRows[0][1])].map(\n    field => ({\n      field,\n    }),\n  )\n  let error\n  let rows = []\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map((row: any) => ({\n        ...Object.fromEntries(\n          Object.entries(row[1]).map(entry => [entry[0], String(entry[1])]),\n        ),\n        sample: row[0],\n        id: row[0],\n      }))\n      .filter((row: any) => {\n        return filters.length\n          ? filters.every(key => {\n              const val = row[key]\n              const currFilter = filter[key]\n              return currFilter ? val.match(new RegExp(currFilter, 'i')) : true\n            })\n          : true\n      })\n  } catch (e) {\n    error = e\n  }\n  // disableSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={showFilters}\n            onChange={() => setShowFilters(f => !f)}\n          />\n        }\n        label=\"Show sample filters\"\n      />\n      {showFilters ? (\n        <>\n          <Typography>\n            These filters can use a plain text search or regex style query, e.g.\n            in the genotype field, entering 1 will query for all genotypes that\n            include the first alternate allele e.g. 0|1 or 1|1, entering\n            [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33\n          </Typography>\n          {infoFields.map(({ field }) => {\n            return (\n              <TextField\n                key={`filter-${field}`}\n                placeholder={`Filter ${field}`}\n                value={filter[field] || ''}\n                onChange={event =>\n                  setFilter({ ...filter, [field]: event.target.value })\n                }\n              />\n            )\n          })}\n        </>\n      ) : null}\n      <div style={{ height: 600, width: '100%', overflow: 'auto' }}>\n        <DataGrid\n          rows={rows}\n          columns={infoFields}\n          rowHeight={20}\n          headerHeight={25}\n          disableSelectionOnClick\n          disableColumnMenu\n        />\n      </div>\n    </BaseCard>\n  )\n}\n\nfunction BreakendPanel(props: {\n  locStrings: string[]\n  model: any\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  const [breakpointDialog, setBreakpointDialog] = useState(false)\n  let viewType\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  const simpleFeature = new SimpleFeature(feature)\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <Typography>Link to linear view of breakend endpoints</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={`${JSON.stringify(locString)}`}>\n            <Link\n              href=\"#\"\n              onClick={(event: any) => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              {`LGV - ${locString}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {viewType ? (\n        <div>\n          <Typography>\n            Launch split views with breakend source and target\n          </Typography>\n          <ul>\n            {locStrings.map(locString => (\n              <li key={`${JSON.stringify(locString)}`}>\n                <Link\n                  href=\"#\"\n                  onClick={(event: any) => {\n                    event.preventDefault()\n                    setBreakpointDialog(true)\n                  }}\n                >\n                  {`${feature.refName}:${feature.start} // ${locString} (split view)`}\n                </Link>\n              </li>\n            ))}\n          </ul>\n          {breakpointDialog ? (\n            <BreakendOptionDialog\n              model={model}\n              feature={simpleFeature}\n              viewType={viewType}\n              handleClose={() => {\n                setBreakpointDialog(false)\n              }}\n            />\n          ) : null}\n        </div>\n      ) : null}\n    </BaseCard>\n  )\n}\n\nfunction VariantFeatureDetails(props: any) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ...rest } = feat\n  const basicDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER:\n      'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n  }\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...basicDescriptions, ...descriptions }}\n        {...props}\n      />\n      <Divider />\n      {feat.type === 'breakend' ? (\n        <BreakendPanel\n          feature={feat}\n          locStrings={feat.ALT.map(\n            (alt: string) => parseBreakend(alt)?.MatePosition || '',\n          )}\n          model={model}\n        />\n      ) : null}\n      {feat.type === 'translocation' ? (\n        <BreakendPanel\n          feature={feat}\n          model={model}\n          locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n        />\n      ) : null}\n      <VariantSamples feature={feat} {...props} />\n    </Paper>\n  )\n}\n\nexport default observer(VariantFeatureDetails)\n"],"sourceRoot":""}