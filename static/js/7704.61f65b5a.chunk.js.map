{"version":3,"file":"static/js/7704.61f65b5a.chunk.js","mappings":"iSAGM,SAAUA,EAAaC,GAC3B,GACEA,EAAKC,YAAYC,OAAOC,mBACxBH,EAAKI,SAASF,OAAOG,kBAErB,MAAM,IAAIC,MAAM,oBAElB,OAAON,EAAKO,UACd,CAAC,IAEKC,EAAW,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,QAAAC,EAAAA,EAAAA,GAAAR,EAAA,GAAAS,E,SAAAA,GAAQX,QAcnB,SAAUY,EAAiBC,GAC/B,GAAKA,GAIDA,EAAOC,QAAS,CAClB,GAA4B,qBAAjBC,aAET,MAAM,IAAIA,aAAa,UAAW,cAElC,IAAMC,EAAI,IAAId,EAAW,WAEzB,MADAc,EAAEC,KAAO,cACHD,C,CAGZ,CAoBM,SAAUE,EAAeC,EAAiBC,GAC9C,IAAMC,EAAwB,GAC1BC,EAA0B,KAE9B,OAAsB,IAAlBH,EAAOI,OACFJ,GAGTA,EAAOK,MAAK,SAAUC,EAAIC,GACxB,IAAMC,EAAMF,EAAGG,KAAKC,cAAgBH,EAAGE,KAAKC,cAC5C,OAAY,IAARF,EACKA,EAEAF,EAAGG,KAAKE,aAAeJ,EAAGE,KAAKE,YAE1C,IAEAX,EAAOY,SAAQ,SAAAC,GAxBX,IAAyBC,EAAeC,IAyBrCd,GAAUY,EAAMG,KAAKC,UAAUhB,GAAU,KAC1B,OAAdE,GACFD,EAAagB,KAAKL,GAClBV,EAAYU,IA5BWC,EA8BJX,GA9BmBY,EA8BRF,GA5B3BJ,KAAKC,cAAgBI,EAAOE,KAAKN,cAAgB,MACxDK,EAAOC,KAAKN,cAAgBI,EAAOL,KAAKC,cAAgB,IA4B9CG,EAAMG,KAAKC,UAAUd,EAAUa,MAAQ,IACzCb,EAAUa,KAAOH,EAAMG,OAGzBd,EAAagB,KAAKL,GAClBV,EAAYU,IAIpB,IAEOX,EACT,C,8CCjGqBiB,EAAa,WAGhC,SAAAA,EAAYT,EAAuBC,IAAoBvB,EAAAA,EAAAA,GAAA,KAAA+B,GACrDC,KAAKV,cAAgBA,EACrBU,KAAKT,aAAeA,CACtB,CAwBC,OAxBApB,EAAAA,EAAAA,GAAA4B,EAAA,EAAAE,IAAA,WAAAC,MAED,WACE,MAAO,GAAPC,OAAUH,KAAKV,cAAa,KAAAa,OAAIH,KAAKT,aACvC,GAAC,CAAAU,IAAA,YAAAC,MAED,SAAUE,GACR,OACEJ,KAAKV,cAAgBc,EAAEd,eAAiBU,KAAKT,aAAea,EAAEb,YAElE,IAAC,EAAAU,IAAA,MAAAC,MAED,WAEW,IADT,IAAIG,EACAC,EAAI,EAACC,EAAArC,UAAAc,OAFGwB,EAAqB,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAArBF,EAAqBE,GAAAxC,UAAAwC,GAGjC,MAAQL,EAAKC,GAAK,EAChBD,EAAMG,EAAKF,GAEb,KAAOA,EAAIE,EAAKxB,OAAQsB,GAAK,EACvBD,EAAIR,UAAUW,EAAKF,IAAM,IAC3BD,EAAMG,EAAKF,IAGf,OAAOD,CACT,KAACN,CAAA,CA9B+B,GAgC5B,SAAUY,EAAUC,GAA4C,IAA7BC,EAAM3C,UAAAc,OAAA,QAAA8B,IAAA5C,UAAA,GAAAA,UAAA,GAAG,EAChD,GAD4DA,UAAAc,OAAA,QAAA8B,IAAA5C,UAAA,IAAAA,UAAA,GAE1D,MAAM,IAAIT,MAAM,mDAGlB,OAAO,IAAIsC,EACW,cAApBa,EAAMC,EAAS,GACO,WAApBD,EAAMC,EAAS,GACK,SAApBD,EAAMC,EAAS,GACK,MAApBD,EAAMC,EAAS,GACK,IAApBD,EAAMC,EAAS,GACfD,EAAMC,EAAS,GAChBD,EAAMC,EAAS,IAAM,EAAKD,EAAMC,GAErC,CC7CA,IACqBE,EAAK,WAYxB,SAAAA,EACE1B,EACAO,EACAoB,GACuB,IAAvBC,EAAW/C,UAAAc,OAAA,QAAA8B,IAAA5C,UAAA,GAAAA,UAAA,QAAG4C,GAAS9C,EAAAA,EAAAA,GAAA,KAAA+C,GAEvBf,KAAKX,KAAOA,EACZW,KAAKJ,KAAOA,EACZI,KAAKgB,IAAMA,EACXhB,KAAKkB,aAAeD,CACtB,CAyBC,OAzBA9C,EAAAA,EAAAA,GAAA4C,EAAA,EAAAd,IAAA,iBAAAC,MAED,WACE,MAAO,GAAPC,OAAUH,KAAKX,KAAI,MAAAc,OAAKH,KAAKJ,KAAI,UAAAO,OAC/BH,KAAKgB,IACP,kBAAAb,OAAiBH,KAAKiB,cAAa,IACrC,GAAC,CAAAhB,IAAA,WAAAC,MAED,WACE,OAAOF,KAAKmB,gBACd,GAAC,CAAAlB,IAAA,YAAAC,MAED,SAAUE,GACR,OACEJ,KAAKX,KAAKQ,UAAUO,EAAEf,OACtBW,KAAKJ,KAAKC,UAAUO,EAAER,OACtBI,KAAKgB,IAAMZ,EAAEY,GAEjB,GAAC,CAAAf,IAAA,cAAAC,MAED,WACE,YAA0BY,IAAtBd,KAAKkB,aACAlB,KAAKkB,aAEPlB,KAAKJ,KAAKN,cAAgB,MAAYU,KAAKX,KAAKC,aACzD,KAACyB,CAAA,CA/CuB,G,yBCiBIK,EAAS,WAKrC,SAAAA,EAAAC,GAMC,IALCC,EAAUD,EAAVC,WAAUC,EAAAF,EACVG,cAAAA,OAAa,IAAAD,EAAG,SAACE,GAAS,OAAKA,CAAC,EAAAF,GAAAvD,EAAAA,EAAAA,GAAA,KAAAoD,GAKhCpB,KAAKsB,WAAaA,EAClBtB,KAAK0B,aAAeF,CACtB,CA4CC,OA5CArD,EAAAA,EAAAA,GAAAiD,EAAA,EAAAnB,IAAA,cAAAC,MAAA,eAAAyB,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMM,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAjE,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAoC,OAAlBP,EAAAG,EAAAnD,OAAA,QAAA8B,IAAAqB,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACE,EAAAE,KAAA,EAENvC,KAAKwC,MAAMR,GAAK,OAA3B,OAA2BC,EAAAI,EAAAI,KAApCR,EAAPS,QAAYR,GAAIS,EAAAA,EAAAA,GAAAV,EAAAW,GAAAP,EAAAQ,OAAA,SACjBX,GAAI,wBAAAG,EAAAS,OAAA,GAAAf,EAAA,UACZ,yBAAAJ,EAAA1D,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAA+B,IAAA,iBAAAC,MASD,SACE6C,EACAC,GAEA,OAAID,EACKA,EAAWlD,UAAUmD,GAAiB,EACzCA,EACAD,EAEGC,CAEX,GAAC,CAAA/C,IAAA,QAAAC,MAAA,eAAA+C,GAAArB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAoB,IAAA,IAAAlB,EAAAmB,EAAA,KAAAC,EAAAlF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAMG,OANSP,EAAAoB,EAAApE,OAAA,QAAA8B,IAAAsC,EAAA,GAAAA,EAAA,GAAgB,CAAC,EACtBpD,KAAKsD,SACRtD,KAAKsD,OAAStD,KAAKiD,OAAOjB,GAAMuB,OAAM,SAAA9E,GAEpC,MADA0E,EAAKG,YAASxC,EACRrC,CACR,KACD4E,EAAAR,OAAA,SACM7C,KAAKsD,QAAM,wBAAAD,EAAAP,OAAA,GAAAI,EAAA,UACnB,yBAAAD,EAAAhF,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAA+B,IAAA,YAAAC,MAAA,eAAAsD,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA2B,EAAgBC,GAAa,IAAA1B,EAAA2B,EAAAzF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OAAoB,OAAlBP,EAAA2B,EAAA3E,OAAA,QAAA8B,IAAA6C,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAArB,KAAA,EAC9BvC,KAAKwC,MAAMR,GAAK,OAAS,GAAT4B,EAAAC,GAAUH,EAAKE,EAAAE,GAAAF,EAAAnB,KAAbC,QAAOkB,EAAAC,IAAAD,EAAAE,GAAA,CAAAF,EAAArB,KAAA,QAAAqB,EAAAE,GAAW,CAAC,EAAC,cAAAF,EAAAf,OAAA,WAAAe,EAAAE,GAAEC,UAAQ,wBAAAH,EAAAd,OAAA,GAAAW,EAAA,UAClE,gBAAAO,GAAA,OAAAR,EAAAvF,MAAA,KAAAC,UAAA,EAJA,MAIAkD,CAAA,CA1DoC,GCNvC,SAAS6C,EAASC,EAAaC,GAG7B,MAAO,CACL,CAAC,EAAG,GACJ,CAAC,IAJHD,GAAO,IAIQ,IAAK,IAHpBC,GAAO,IAGyB,KAC9B,CAAC,GAAKD,GAAO,IAAK,GAAKC,GAAO,KAC9B,CAAC,IAAMD,GAAO,IAAK,IAAMC,GAAO,KAChC,CAAC,KAAOD,GAAO,IAAK,KAAOC,GAAO,KAClC,CAAC,MAAQD,GAAO,IAAK,MAAQC,GAAO,KAExC,CAAC,IAEoBC,EAAW,SAAAC,IAAAxG,EAAAA,EAAAA,GAAAuG,EAAAC,GAAA,IAAAvG,GAAAC,EAAAA,EAAAA,GAAAqG,GAAA,SAAAA,IAAA,OAAApG,EAAAA,EAAAA,GAAA,KAAAoG,GAAAtG,EAAAG,MAAA,KAAAC,UAAA,CA8N7B,OA9N6BC,EAAAA,EAAAA,GAAAiG,EAAA,EAAAnE,IAAA,YAAAC,MAAA,eAAAoE,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAC9B,SAAAC,EAAgBwC,GAAe,IAAAvC,EAAAwC,EAAAC,EAAAC,EAAAvC,EAAAjE,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAoB,OAAlBP,EAAAG,EAAAnD,OAAA,QAAA8B,IAAAqB,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACE,EAAAE,KAAA,EACzBvC,KAAKwC,MAAMR,GAAK,OAAzB,GAATwC,EAASnC,EAAAI,KACC,CAAFJ,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,UACJ,GAAC,OAGyB,GAD9B4B,EAAQD,EAAUG,YAAYJ,GACxBC,EAAU9B,QAAQ+B,GACpB,CAAFpC,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,UACE,GAAC,QAEE,KAAL6B,EAAUF,EAAU9B,QAAQ+B,GAA5BC,OACG,CAAFrC,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,SACA6B,EAAME,WAAS,eAAAvC,EAAAQ,OAAA,UAEhB,GAAC,yBAAAR,EAAAS,OAAA,GAAAf,EAAA,UACV,gBAAAiC,GAAA,OAAAM,EAAArG,MAAA,KAAAC,UAAA,EAhB6B,IAkB9B,CAAA+B,IAAA,SAAAC,MAAA,eAAA2E,GAAAjD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACA,SAAAoB,IAAA,IAAAlB,EAAA8C,EAAAlE,EAAAmE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAf,EAAAgB,EAAAC,EAAAC,EAAAnD,EAAAS,EAAA,KAAAC,EAAAlF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAA+B,OAAlBP,EAAAoB,EAAApE,OAAA,QAAA8B,IAAAsC,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAd,KAAA,EACXvC,KAAKsB,WAAWwE,SAAS9D,GAAK,OAAvC,OAAH8C,EAAGzB,EAAAZ,KAAAY,EAAAd,KAAG,GACQwD,EAAAA,EAAAA,OAAMjB,GAAI,OAG9B,GAHMlE,EAAKyC,EAAAZ,KACXpE,EAAiB2D,EAAK1D,QAzCR,WA4CVsC,EAAMoF,aAAa,GAAiB,CAAA3C,EAAAd,KAAA,eAChC,IAAI9E,MAAM,kBAAiB,QAcS,GATtCsH,EAAWnE,EAAMqF,YAAY,GAC7BjB,EAAcpE,EAAMqF,YAAY,GAChChB,EACU,MAAdD,EAAwB,uBAAyB,iBAM7CE,EALwC,CAC5C,EAAG,UACH,EAAG,MACH,EAAG,OAEmC,GAAdF,GACb,CAAF3B,EAAAd,KAAA,eACH,IAAI9E,MAAM,qCAAD0C,OAAsC6E,IAAc,QAoEnE,OAlEIG,EAAgB,CACpBe,IAAKtF,EAAMqF,YAAY,IACvBE,MAAOvF,EAAMqF,YAAY,IACzB9B,IAAKvD,EAAMqF,YAAY,KAEnBb,EAAYxE,EAAMqF,YAAY,IACtB,EACRZ,EAAe,MACfC,EAAYc,KAAAC,IAAG,EAAM,IACrBd,EAAWH,EAAYkB,OAAOC,aAAanB,GAAa,KACxDI,EAAY5E,EAAMqF,YAAY,IAG9BR,EAAoB7E,EAAMqF,YAAY,IAAGP,EACV1F,KAAKwG,gBACxC5F,EAAM6F,MAAM,GAAI,GAAKhB,IADfd,EAAWe,EAAXf,YAAagB,EAAWD,EAAXC,YAKjBC,EAAa,GAAKH,EAEhB/C,EAAU,IAAIjC,MAAMsE,GAAU2B,KAAK,GAAGC,KAAI,WAE9C,IAAMC,EAAWhG,EAAMqF,YAAYL,GACnCA,GAAc,EAGd,IAFA,IACIlB,EADEX,EAAuC,CAAC,EAErC8C,EAAI,EAAGA,EAAID,EAAUC,GAAK,EAAG,CACpC,IAAM7F,EAAMJ,EAAMoF,aAAaJ,GAE/B,GADAA,GAAc,EACV5E,EAAMqE,MACR,MAAM,IAAI5H,MACR,8DAEG,GAAY4H,QAARrE,EAA0B,CACnC,IAAM8F,EAAalG,EAAMqF,YAAYL,GACrCA,GAAc,EACK,IAAfkB,IACFpC,EAAQvB,EAAK4D,eAAenG,EAAOgF,IAErCA,GAAc,GAAKkB,C,KACd,CACL,IAAMA,EAAalG,EAAMqF,YAAYL,GACrCA,GAAc,EAEd,IADA,IAAMhH,EAAS,IAAI6B,MAAMqG,GAChBE,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EAAG,CACtC,IAAMC,EAAItG,EAAUC,EAAOgF,GACrBsB,EAAIvG,EAAUC,EAAOgF,EAAa,GACxCA,GAAc,GACdC,EAAgB1C,EAAKgE,eAAetB,EAAeoB,GACnDrI,EAAOoI,GAAK,IAAIjG,EAAMkG,EAAGC,EAAGlG,E,CAE9B+C,EAAS/C,GAAOpC,C,EAKpB,IAAMwI,EAAcxG,EAAMqF,YAAYL,GACtCA,GAAc,EAEd,IADA,IAAMyB,EAAc,IAAI5G,MAAM2G,GACrBJ,EAAI,EAAGA,EAAII,EAAaJ,GAAK,EACpCK,EAAYL,GAAKrG,EAAUC,EAAOgF,GAClCA,GAAc,EACdC,EAAgB1C,EAAKgE,eAAetB,EAAewB,EAAYL,IAEjE,MAAO,CAAEjD,SAAAA,EAAUsD,YAAAA,EAAa3C,MAAAA,EAClC,IAAErB,EAAAR,OAAA,SAEK,CACLH,QAAAA,EACA6C,SAAAA,EACAF,aAAAA,EACAC,aAAAA,EACAE,UAAAA,EACAK,cAAAA,EACAV,cAAAA,EACAF,eAAAA,EACAC,OAAAA,EACAS,YAAAA,EACAhB,YAAAA,EACA2C,aAAc,QACf,yBAAAjE,EAAAP,OAAA,GAAAI,EAAA,UACF,yBAAA2B,EAAA5G,MAAA,KAAAC,UAAA,EA5GD,IA4GC,CAAA+B,IAAA,iBAAAC,MAED,SAAeU,EAAeC,GAO5B,MAAO,CAAE+D,UANS1H,EAChBqK,IAAAA,YACE3G,EAAM6F,MAAM5F,EAAS,GAAIA,EAAS,KAClC,IAIN,GAAC,CAAAZ,IAAA,kBAAAC,MAED,SAAgBsH,GAKd,IAJA,IAAIC,EAAY,EACZC,EAAgB,EACd/B,EAAwB,GACxBhB,EAAyC,CAAC,EACvCrE,EAAI,EAAGA,EAAIkH,EAAWxI,OAAQsB,GAAK,EAC1C,IAAKkH,EAAWlH,GAAI,CAClB,GAAIoH,EAAgBpH,EAAG,CACrB,IAAIiE,EAAUiD,EAAWG,SAAS,OAAQD,EAAepH,GACzDiE,EAAUvE,KAAK0B,aAAa6C,GAC5BoB,EAAY8B,GAAalD,EACzBI,EAAYJ,GAAWkD,C,CAEzBC,EAAgBpH,EAAI,EACpBmH,GAAa,C,CAGjB,MAAO,CAAE9C,YAAAA,EAAagB,YAAAA,EACxB,GAAC,CAAA1F,IAAA,iBAAAC,MAAA,eAAA0H,GAAAhG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA2B,EACEc,EACAlE,EACAwH,GAAW,IAAA7F,EAAAwC,EAAAC,EAAAqD,EAAAC,EAAAnJ,EAAAoJ,EAAAC,EAAAC,EAAA/B,EAAAhC,EAAAnD,EAAAmH,EAAAC,EAAAC,EAAAxJ,EAAAyJ,EAAAC,EAAAjI,EAAAkI,EAAA7E,EAAAzF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OAKV,OAJDP,EAAA2B,EAAA3E,OAAA,QAAA8B,IAAA6C,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAEbtD,EAAM,IACRA,EAAM,GACPuD,EAAArB,KAAA,EAEuBvC,KAAKwC,MAAMR,GAAK,OAAzB,GAATwC,EAASZ,EAAAnB,KACC,CAAFmB,EAAArB,KAAA,eAAAqB,EAAAf,OAAA,SACL,IAAE,OAGwB,GAD7B4B,EAAQD,EAAUG,YAAYJ,GAC9BuD,EAAKtD,EAAU9B,QAAQ+B,GACpB,CAAFb,EAAArB,KAAA,gBAAAqB,EAAAf,OAAA,SACE,IAAE,SAGOiF,EAAGT,YAAYrI,OAC7B8I,EAAGT,YACDhH,GAtMa,IAsMYyH,EAAGT,YAAYrI,OACpC8I,EAAGT,YAAYrI,OAAS,EACxBqB,GAxMS,IA0Mf,IAAIN,EAAc,EAAG,KAEvB0I,QAAQC,KAAK,4CAKTX,EAAkB9D,EAAS5D,EAAKwH,GAChCjJ,EAAkB,GAExBoJ,GAAAW,EAAAA,EAAAA,GAC2BZ,GAAe,IAA1C,IAAAC,EAAAY,MAAAX,EAAAD,EAAAvG,KAAAoH,MACE,IAD0CX,GAAAY,EAAAA,EAAAA,GAAAb,EAAA/H,MAAA,GAAhCiG,EAAK+B,EAAA,GAAE/D,EAAG+D,EAAA,GACXlH,EAAMmF,EAAOnF,GAAOmD,EAAKnD,IAChC,GAAI8G,EAAG/D,SAAS/C,GAEd,IADMmH,EAAYL,EAAG/D,SAAS/C,GACrBoH,EAAI,EAAGA,EAAID,EAAUnJ,SAAUoJ,EACtCxJ,EAAOkB,KAAK,IAAIiB,EAAMoH,EAAUC,GAAG/I,KAAM8I,EAAUC,GAAGxI,KAAMoB,GAOpE,OAAA+H,GAAAf,EAAAvJ,EAAAsK,EAAA,SAAAf,EAAAgB,GAAA,CAKA,IAJMX,EAAQP,EAAGT,YAAYrI,OACzBH,EAAS,KACPyJ,EAASlC,KAAK/F,IAAIA,GAAO,GAAIgI,EAAQ,GACrCE,EAASnC,KAAK/F,IAAIwH,GAAO,GAAIQ,EAAQ,GAClC/H,EAAIgI,EAAQhI,GAAKiI,IAAUjI,GAC5BkI,EAAKV,EAAGT,YAAY/G,OAEnBzB,GAAU2J,EAAG3I,UAAUhB,GAAU,KACpCA,EAAS2J,GAGd,OAAA5E,EAAAf,OAAA,SAEMlE,EAAeC,EAAQC,IAAO,yBAAA+E,EAAAd,OAAA,GAAAW,EAAA,UACtC,gBAAAwF,EAAAC,EAAAC,GAAA,OAAAvB,EAAA3J,MAAA,KAAAC,UAAA,EAlEA,MAkEAkG,CAAA,CA9N6B,CAAQhD,G,WCXxC,SAASgI,EAAOC,EAAaC,GAC3B,OAAOlD,KAAKmD,MAAMF,EAAGjD,KAAAC,IAAG,EAAKiD,GAC/B,CAAC,IAEoBE,EAAI,SAAAnF,IAAAxG,EAAAA,EAAAA,GAAA2L,EAAAnF,GAAA,IAAAvG,GAAAC,EAAAA,EAAAA,GAAAyL,GAIvB,SAAAA,EAAYhJ,GAAS,IAAA2C,EAIF,OAJEnF,EAAAA,EAAAA,GAAA,KAAAwL,IACnBrG,EAAArF,EAAA2L,KAAA,KAAMjJ,IACD6E,aAAe,EACpBlC,EAAKuG,MAAQ,EACbvG,EAAKwG,SAAW,EAACxG,CACnB,CA2OC,OA3OAhF,EAAAA,EAAAA,GAAAqL,EAAA,EAAAvJ,IAAA,YAAAC,MAAA,eAAAoE,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAC,EAAgBwC,GAAe,IAAAvC,EAAAwC,EAAAC,EAAAC,EAAAvC,EAAAjE,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAoB,OAAlBP,EAAAG,EAAAnD,OAAA,QAAA8B,IAAAqB,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACE,EAAAE,KAAA,EACzBvC,KAAKwC,MAAMR,GAAK,OAAzB,GAATwC,EAASnC,EAAAI,KACC,CAAFJ,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,UACJ,GAAC,OAGyB,GAD9B4B,EAAQD,EAAUG,YAAYJ,GACxBC,EAAU9B,QAAQ+B,GACpB,CAAFpC,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,UACE,GAAC,QAEE,KAAL6B,EAAUF,EAAU9B,QAAQ+B,GAA5BC,OACG,CAAFrC,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,SACA6B,EAAME,WAAS,eAAAvC,EAAAQ,OAAA,UAEhB,GAAC,yBAAAR,EAAAS,OAAA,GAAAf,EAAA,UACV,gBAAAiC,GAAA,OAAAM,EAAArG,MAAA,KAAAC,UAAA,EAhBA,IAgBA,CAAA+B,IAAA,WAAAC,MAAA,eAAA0J,GAAAhI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAoB,IAAA,OAAArB,EAAAA,EAAAA,KAAAO,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,aACQ,IAAI9E,MAAM,uCAAsC,wBAAA4F,EAAAP,OAAA,GAAAI,EAAA,KACvD,yBAAA0G,EAAA3L,MAAA,KAAAC,UAAA,EAHA,IAGA,CAAA+B,IAAA,eAAAC,MAED,SAAaU,EAAeC,GAC1B,IAAMmE,EAAcpE,EAAMqF,YAAYpF,GAChCoE,EACU,MAAdD,EAAwB,uBAAyB,iBAC7CE,EAAS,CAAE,EAAG,UAAW,EAAG,MAAO,EAAG,OAAsB,GAAdF,GACpD,IAAKE,EACH,MAAM,IAAIzH,MAAM,qCAAD0C,OAAsC6E,IAEvD,IAAMG,EAAgB,CACpBe,IAAKtF,EAAMqF,YAAYpF,EAAS,GAChCsF,MAAOvF,EAAMqF,YAAYpF,EAAS,GAClCsD,IAAKvD,EAAMqF,YAAYpF,EAAS,KAE5BuE,EAAYxE,EAAMqF,YAAYpF,EAAS,IACvC0E,EAAWH,EAAYkB,OAAOC,aAAanB,GAAa,KACxDI,EAAY5E,EAAMqF,YAAYpF,EAAS,IACvC4E,EAAoB7E,EAAMqF,YAAYpF,EAAS,IAErD6E,EAAqC1F,KAAKwG,gBACxC5F,EAAM6F,MAAM5F,EAAS,GAAIA,EAAS,GAAK4E,IAGzC,MAAO,CACLE,YALiBD,EAAXC,YAMNhB,YAN8Be,EAAXf,YAOnBa,UAAAA,EACAD,SAAAA,EACAJ,cAAAA,EACAD,OAAAA,EACAD,eAAAA,EAEJ,GAAC,CAAAhF,IAAA,kBAAAC,MAED,SAAgBsH,GAKd,IAJA,IAAIC,EAAY,EACZC,EAAgB,EACd/B,EAAc,GACdhB,EAAyC,CAAC,EACvCrE,EAAI,EAAGA,EAAIkH,EAAWxI,OAAQsB,GAAK,EAC1C,IAAKkH,EAAWlH,GAAI,CAClB,GAAIoH,EAAgBpH,EAAG,CACrB,IAAIiE,EAAUiD,EAAWG,SAAS,OAAQD,EAAepH,GACzDiE,EAAUvE,KAAK0B,aAAa6C,GAC5BoB,EAAY8B,GAAalD,EACzBI,EAAYJ,GAAWkD,C,CAEzBC,EAAgBpH,EAAI,EACpBmH,GAAa,C,CAGjB,MAAO,CAAE9C,YAAAA,EAAagB,YAAAA,EACxB,GAEA,CAAA1F,IAAA,SAAAC,MAAA,eAAA2E,GAAAjD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAEA,SAAA2B,IAAA,IAAAzB,EAAApB,EAAAiJ,EAAAvE,EAAAwE,EAAAC,EAAAhF,EAAAc,EAAAD,EAAAlD,EAAAsH,EAAA,KAAArG,EAAAzF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OAC2B,OADdP,EAAA2B,EAAA3E,OAAA,QAAA8B,IAAA6C,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAE,GACTiC,EAAAA,MAAKnC,EAAArB,KAAA,EAAQvC,KAAKsB,WAAWwE,SAAS9D,GAAK,cAAA4B,EAAAC,GAAAD,EAAAnB,KAAAmB,EAAArB,KAAA,KAAAqB,EAAAE,IAAAF,EAAAC,IAAA,OAApD,GAhGI,YAgGTjD,EAAKgD,EAAAnB,MAIDuD,aAAa,GAAiB,CAAApC,EAAArB,KAAA,SACtCsH,EAAa,EAACjG,EAAArB,KAAA,oBApGD,WAqGJ3B,EAAMoF,aAAa,GAAiB,CAAApC,EAAArB,KAAA,SAC7CsH,EAAa,EAACjG,EAAArB,KAAA,uBAER,IAAI9E,MAAM,kBAAiB,QAwDjC,OApDFuC,KAAK2J,SAAW/I,EAAMqF,YAAY,GAClCjG,KAAK0J,MAAQ9I,EAAMqF,YAAY,GAC/BjG,KAAKqF,eAAiB,GAAyB,GAAlBrF,KAAK0J,MAAQ,IAAW,GAAK,EACpDpE,EAAYc,KAAAC,IAAG,EAAMrG,KAAK2J,SAAwB,EAAb3J,KAAK0J,OAC1CI,EAAYlJ,EAAMqF,YAAY,IAC9B8D,EACJD,GAAaA,GAAa,GACtB9J,KAAKiK,aAAarJ,EAAO,IACzB,CACE+E,YAAa,GACbhB,YAAa,CAAC,EACdY,SAAU,KACVJ,cAAe,CAAEe,IAAK,EAAGC,MAAO,EAAGhC,IAAK,GACxCc,eAAgB,uBAChBC,OAAQ,WAEVH,EAAWnE,EAAMqF,YAAY,GAAK6D,GAIpClE,EAAa,GAAKkE,EAAY,EAC5BpH,EAAU,IAAIjC,MAAMsE,GAAU2B,KAAK,GAAGC,KAAI,WAE9C,IAAMC,EAAWhG,EAAMqF,YAAYL,GACnCA,GAAc,EAGd,IAFA,IACIlB,EADEX,EAAuC,CAAC,EAErC8C,EAAI,EAAGA,EAAID,EAAUC,GAAK,EAAG,CACpC,IAAM7F,EAAMJ,EAAMoF,aAAaJ,GAC/B,GAAI5E,EAAMgJ,EAAK3E,aAGbX,EAAQsF,EAAKjD,eAAenG,EAAOgF,EAAa,GAChDA,GAAc,OACT,CACL,IAAMsE,EAAUvJ,EAAUC,EAAOgF,EAAa,GAC9CC,EAAgBmE,EAAK7C,eAAetB,EAAeqE,GACnD,IAAMpD,EAAalG,EAAMqF,YAAYL,EAAa,IAClDA,GAAc,GAEd,IADA,IAAMhH,EAAS,IAAI6B,MAAMqG,GAChBE,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EAAG,CACtC,IAAMC,EAAItG,EAAUC,EAAOgF,GACrBsB,EAAIvG,EAAUC,EAAOgF,EAAa,GACxCA,GAAc,GAEdhH,EAAOoI,GAAK,IAAIjG,EAAMkG,EAAGC,EAAGlG,E,CAE9B+C,EAAS/C,GAAOpC,C,EAIpB,MAAO,CAAEmF,SAAAA,EAAUW,MAAAA,EACrB,IAAEd,EAAAf,OAAA,UAAAsH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAGGJ,GAAG,IACNK,KAAK,EACLrF,SAAAA,EACAuC,aAAc,MACdzB,cAAAA,EACAgE,WAAAA,EACAnH,QAAAA,EACAgH,MAAO1J,KAAK0J,MACZrE,aAAcrF,KAAKqF,aACnBC,aAAAA,KAAY,yBAAA1B,EAAAd,OAAA,GAAAW,EAAA,UAEf,yBAAAoB,EAAA5G,MAAA,KAAAC,UAAA,EAlFD,IAkFC,CAAA+B,IAAA,iBAAAC,MAED,SAAeU,EAAeC,GAO5B,MAAO,CAAE+D,UANS1H,EAChBqK,IAAAA,YACE3G,EAAM6F,MAAM5F,EAAS,GAAIA,EAAS,KAClC,IAIN,GAAC,CAAAZ,IAAA,iBAAAC,MAAA,eAAA0H,GAAAhG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAuI,EACE9F,EACAlE,EACAwH,GAAW,IAAA7F,EAAAwC,EAAAC,EAAAqD,EAAAC,EAAAnJ,EAAAoJ,EAAAC,EAAAC,EAAA/B,EAAAhC,EAAAnD,EAAAmH,EAAAC,EAAAkC,EAAApM,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAmI,GAAA,cAAAA,EAAAjI,KAAAiI,EAAAhI,MAAA,OAKV,OAJDP,EAAAsI,EAAAtL,OAAA,QAAA8B,IAAAwJ,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAEbjK,EAAM,IACRA,EAAM,GACPkK,EAAAhI,KAAA,EAEuBvC,KAAKwC,MAAMR,GAAK,OAAzB,GAATwC,EAAS+F,EAAA9H,KACC,CAAF8H,EAAAhI,KAAA,eAAAgI,EAAA1H,OAAA,SACL,IAAE,OAGwB,GAD7B4B,EAAQD,EAAUG,YAAYJ,GAC9BuD,EAAKtD,EAAU9B,QAAQ+B,GACpB,CAAF8F,EAAAhI,KAAA,gBAAAgI,EAAA1H,OAAA,SACE,IAAE,QAKLkF,EAAkB/H,KAAKiE,SAAS5D,EAAKwH,GACrCjJ,EAAkB,GAExBoJ,GAAAW,EAAAA,EAAAA,GAC2BZ,GAAe,IAA1C,IAAAC,EAAAY,MAAAX,EAAAD,EAAAvG,KAAAoH,MACE,IAD0CX,GAAAY,EAAAA,EAAAA,GAAAb,EAAA/H,MAAA,GAAhCiG,EAAK+B,EAAA,GAAE/D,EAAG+D,EAAA,GACXlH,EAAMmF,EAAOnF,GAAOmD,EAAKnD,IAChC,GAAI8G,EAAG/D,SAAS/C,GAEd,IADMmH,EAAYL,EAAG/D,SAAS/C,GACrBoH,EAAI,EAAGA,EAAID,EAAUnJ,SAAUoJ,EACtCxJ,EAAOkB,KAAK,IAAIiB,EAAMoH,EAAUC,GAAG/I,KAAM8I,EAAUC,GAAGxI,KAAMoB,GAInE,OAAA+H,GAAAf,EAAAvJ,EAAAsK,EAAA,SAAAf,EAAAgB,GAAA,QAAAuB,EAAA1H,OAAA,SAEMlE,EAAeC,EAAQ,IAAImB,EAAc,EAAG,KAAG,yBAAAwK,EAAAzH,OAAA,GAAAuH,EAAA,UACvD,gBAAApB,EAAAC,EAAAC,GAAA,OAAAvB,EAAA3J,MAAA,KAAAC,UAAA,EAxCA,IA0CD,CAAA+B,IAAA,WAAAC,MAGA,SAASgE,EAAaC,IACpBD,GAAO,GACG,IACRA,EAAM,GAEJC,EAAGiC,KAAAC,IAAG,EAAK,MACblC,EAAGiC,KAAAC,IAAG,EAAK,KAEblC,GAAO,EAKP,IAJA,IA5OyBmF,EA4OrBkB,EAAI,EACJC,EAAI,EACJ7B,EAAI5I,KAAK2J,SAAwB,EAAb3J,KAAK0J,MACvBgB,EAAO,GACNF,GAAKxK,KAAK0J,MAAOd,GAAK,EAAG6B,IAhPPnB,EAgP0B,EAAJkB,EAAH,EA/OpCpE,KAAAC,IAAG,EAAKiD,IA+OuCkB,GAAK,EAAG,CAC7D,IAAMpK,EAAIqK,EAAIrB,EAAOlF,EAAK0E,GACpBnK,EAAIgM,EAAIrB,EAAOjF,EAAKyE,GAC1B,GAAInK,EAAI2B,EAAIsK,EAAK1L,OAASgB,KAAKqF,aAC7B,MAAM,IAAI5H,MAAM,SAAD0C,OACJ+D,EAAG,KAAA/D,OAAIgE,EAAG,oDAAAhE,OAAmDH,KAAK2J,SAAQ,YAAAxJ,OAAWH,KAAK0J,MAAK,6DAG5GgB,EAAK5K,KAAK,CAACM,EAAG3B,G,CAEhB,OAAOiM,CACT,KAAClB,CAAA,CApPsB,CAAQpI,GCN3BuJ,EACmB,qBAAhBC,YAA8B,IAAIA,YAAY,cAAW9J,EAclE,SAAS+J,EAAQC,GACf,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAK,GACzD,CAAC,IACoBI,EAAgB,WAqBnC,SAAAA,EAAA7J,GAsBC,IAAA8B,EAAA,KArBCgI,EAAI9J,EAAJ8J,KACA7J,EAAUD,EAAVC,WACA8J,EAAO/J,EAAP+J,QACAC,EAAahK,EAAbgK,cACAC,EAAOjK,EAAPiK,QACAC,EAAalK,EAAbkK,cAAaC,EAAAnK,EACboK,UAAAA,OAAS,IAAAD,EAAG,IAAGA,EAAAE,EAAArK,EACfsK,eAAAA,OAAc,IAAAD,EAAG,IAAQA,EAAAnK,EAAAF,EACzBG,cAAAA,OAAa,IAAAD,EAAG,SAAAE,GAAC,OAAIA,CAAC,EAAAF,EAAAqK,EAAAvK,EACtBwK,eAAAA,OAAc,IAAAD,EAAG,EAACxF,KAAAC,IAAG,EAAK,IAAEuF,EAa5B,IAb4B5N,EAAAA,EAAAA,GAAA,KAAAkN,GAaxB5J,EACFtB,KAAKsB,WAAaA,MACb,KAAI6J,EAGT,MAAM,IAAIW,UAAU,0CAFpB9L,KAAKsB,WAAa,IAAIyK,EAAAA,GAAUZ,E,CAKlC,GAAIE,EACFrL,KAAKgM,MAAQ,IAAIC,EAAI,CACnB3K,WAAY+J,EACZ7J,cAAAA,SAEG,GAAI+J,EACTvL,KAAKgM,MAAQ,IAAIxC,EAAI,CACnBlI,WAAYiK,EACZ/J,cAAAA,SAEG,GAAI4J,EACTpL,KAAKgM,MAAQ,IAAIC,EAAI,CACnB3K,WAAY,IAAIyK,EAAAA,GAAUX,GAC1B5J,cAAAA,SAEG,GAAI8J,EACTtL,KAAKgM,MAAQ,IAAIxC,EAAI,CACnBlI,WAAY,IAAIyK,EAAAA,GAAUT,GAC1B9J,cAAAA,QAEG,KAAI2J,EAMT,MAAM,IAAIW,UACR,yEANF9L,KAAKgM,MAAQ,IAAIC,EAAI,CACnB3K,WAAY,IAAIyK,EAAAA,GAAU,GAAD5L,OAAIgL,EAAI,SACjC3J,cAAAA,G,CAQJxB,KAAK2L,eAAiBA,EACtB3L,KAAK0B,aAAeF,EACpBxB,KAAKyL,UAAYA,EACjBzL,KAAKkM,WAAa,IAAIC,IAAJ,CAA4C,CAC5DC,MAAO,IAAIC,IAAJ,CAAQ,CAAEC,QAASlG,KAAKmD,MAAMsC,EAAiB,SACtDnF,KAAM,SAAClG,EAAalC,GAAoB,OACtC6E,EAAKoJ,UAAU/L,EAAM,CAAElC,OAAAA,GAAS,GAEtC,CA+XC,OA7XDH,EAAAA,EAAAA,GAAA+M,EAAA,EAAAjL,IAAA,WAAAC,MAAA,eAAAsM,GAAA5K,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAOA,SAAAC,EACEwC,EACA4B,EACAhC,EACAnC,GAAqC,IAAA1D,EAAAmO,EAAAC,EAAAC,EAAA/N,EAAA0B,EAAAsM,EAAAC,EAAAC,EAAAC,EAAA3E,EAAA4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5L,EAAArB,EAAAkN,EAAAC,EAAAC,EAAAC,EAAA,OAAA5L,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGZ,GAArBkK,EAAmB,CAAC,EAEJ,qBAATzK,EAAoB,CAAAK,EAAAE,KAAA,cACvB,IAAIuJ,UAAU,kCAAiC,OAOtD,GALmB,oBAAT9J,EACT0K,EAAW1K,GAEXyK,EAAUzK,EACV0K,EAAW1K,EAAK0L,mBAEF5M,IAAZyD,EAAqB,CAAAlC,EAAAE,KAAA,cACjB,IAAIuJ,UAAU,0CAAyC,UAE1DY,EAAU,CAAFrK,EAAAE,KAAA,cACL,IAAIuJ,UAAU,kCAAiC,cAAAzJ,EAAAE,KAAA,GAGhCvC,KAAKgM,MAAM2B,YAAYlB,GAAQ,QAOrD,GAPKE,EAAQtK,EAAAI,KACdpE,EAAiBC,GACZ6H,IACHA,EAAQ,GAELhC,IACHA,EAAMwI,EAASrH,cAEXa,GAAShC,EAAG,CAAA9B,EAAAE,KAAA,eACV,IAAIuJ,UACR,8EACD,WAEC3F,IAAUhC,EAAG,CAAA9B,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,yBAAAR,EAAAE,KAAA,GAIIvC,KAAKgM,MAAM4B,eAAerJ,EAAS4B,EAAOhC,EAAKsI,GAAQ,QAAtE7N,EAAMyD,EAAAI,KACZpE,EAAiBC,GAIRgC,EAAI,EAAC,aAAEA,EAAI1B,EAAOI,QAAM,CAAAqD,EAAAE,KAAA,SACK,MAA9BqK,EAAOhO,EAAO0B,GAAGW,eACZjB,KAAK2L,gBAAc,CAAAtJ,EAAAE,KAAA,eACtB,IAAI9E,MAAM,6BAAD0C,OACgByM,EAAKiB,iBAAgB,qCAAA1N,OAAoCH,KAAK2L,eAAekC,iBAAgB,MAC3H,QAL8BvN,GAAK,EAAC+B,EAAAE,KAAA,iBAUrCsK,EAAOiB,KAAKC,MACPjB,EAAW,EAAC,aAAEA,EAAWlO,EAAOI,QAAM,CAAAqD,EAAAE,KAAA,SAEnB,OADtBwK,OAA2C,EACzC3E,EAAIxJ,EAAOkO,GAASzK,EAAAE,KAAA,GACuBvC,KAAKkM,WAAW8B,IAC/D5F,EAAET,WACFS,GACD,QAAA4E,EAAA3K,EAAAI,KAHOwK,EAAMD,EAANC,OAAQC,EAAUF,EAAVE,WAAYC,EAAUH,EAAVG,WAK5B9O,EAAiBC,GACb8O,EAAa,EACbC,EAAM,EAAC,aACJD,EAAaH,EAAOjO,QAAM,CAAAqD,EAAAE,KAAA,SACW,IAC/B,KADLd,EAAIwL,EAAOgB,QAAQ,KAAMb,IACnB,CAAA/K,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,oBAMZ,GAHMzC,EAAI6M,EAAOxG,MAAM2G,EAAY3L,GAC7B6L,GAAc,OAAP3C,QAAO,IAAPA,OAAO,EAAPA,EAASuD,OAAO9N,KAAMA,EAAEuH,WAEjCwF,EAAY,CACd,KAAOC,EAAahF,EAAE/I,KAAKE,cAAgB4N,EAAWE,OACtDA,G,CAaF,GAVAE,EACsCvN,KAAKmO,UACzCxB,EACApI,EACA4B,EACAhC,EACAmJ,GALME,EAAeD,EAAfC,gBAAiBC,EAAQF,EAARE,gBAWK3M,IAA5BiM,QACoBjM,IAApB0M,GACAT,EAA0BS,GAAe,CAAAnL,EAAAE,KAAA,eAEnC,IAAI9E,MAAM,yCAAD0C,OAC4B4M,EAAuB,OAAA5M,OAAMqN,EAAe,2CACtF,QAEsC,GAAzCT,EAA0BS,GAEtBC,EAAU,CAAFpL,EAAAE,KAAA,SACVmK,EACEY,EAAKc,OASa,IAAlBlB,EAAWG,IACRD,EAAaD,EAAWE,IACzBjF,EAAE/I,KAAKE,aACP,GACH8C,EAAAE,KAAA,2BAC4BzB,IAApB0M,GAAiCA,GAAmBrJ,GAAG,CAAA9B,EAAAE,KAAA,gBAAAF,EAAAQ,OAAA,uBAQ9D7C,KAAKyL,WAAaoB,EAAOiB,KAAKC,MAAQ/N,KAAKyL,WAAS,CAAApJ,EAAAE,KAAA,SAE9B,OADxBsK,EAAOiB,KAAKC,MACZ1P,EAAiBC,GAAO+D,EAAAE,KAAA,GAClBsI,EAAQ,GAAE,QAElBuC,EAAa3L,EAAI,EAACY,EAAAE,KAAA,iBA3E2BuK,GAAY,EAACzK,EAAAE,KAAA,kCAAAF,EAAAS,OAAA,GAAAf,EAAA,UA8E/D,gBAAAiC,EAAAiF,EAAAC,EAAAC,GAAA,OAAAqD,EAAAvO,MAAA,KAAAC,UAAA,EA/ID,IA+IC,CAAA+B,IAAA,cAAAC,MAAA,eAAAyB,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAoB,IAAA,IAAAlB,EAAAoB,EAAAlF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAAoC,OAAlBP,EAAAoB,EAAApE,OAAA,QAAA8B,IAAAsC,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAR,OAAA,SAC3B7C,KAAKgM,MAAM2B,YAAY3L,IAAK,wBAAAqB,EAAAP,OAAA,GAAAI,EAAA,UACpC,yBAAAvB,EAAA1D,MAAA,KAAAC,UAAA,EAJA,IAMD,CAAA+B,IAAA,kBAAAC,MAAA,eAAAmO,GAAAzM,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAA2B,IAAA,IAAAzB,EAAAsM,EAAAzI,EAAAN,EAAA+B,EAAAiH,EAAA3N,EAAA4N,EAAAC,EAAAC,EAAApO,EAAAqD,EAAAzF,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OAAwC,OAAlBP,EAAA2B,EAAA3E,OAAA,QAAA8B,IAAA6C,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAArB,KAAA,EACkBvC,KAAK2N,YAC3D3L,GACD,OAID,OAJCsM,EAAA1K,EAAAnB,KAFOoD,EAAayI,EAAbzI,cAAeN,EAAQ+I,EAAR/I,SAAU+B,EAAYgH,EAAZhH,aAGjCjJ,EAAiB2D,EAAK1D,QAChBiQ,IAAyB,OAAb1I,QAAa,IAAbA,OAAa,EAAbA,EAAevG,gBAAiB,GAAKgI,EAEvD1D,EAAArB,KAAA,GAEkBvC,KAAK2O,YAAY,EAAGJ,EAAUvM,GAAK,QACxB,OADzBpB,EAAKgD,EAAAnB,KACTpE,EAAiB2D,EAAK1D,QAAOsF,EAAAtB,KAAA,GAAAsB,EAAArB,KAAA,IAEbwD,EAAAA,EAAAA,OAAMnF,GAAM,QAA1BA,EAAKgD,EAAAnB,KAAAmB,EAAArB,KAAG,GAAH,cAEW,MAFXqB,EAAAtB,KAAG,GAAHsB,EAAAE,GAAAF,EAAA,UAEL6E,QAAQmG,MAAKhL,EAAAE,IACP,IAAIrG,MACR,6BAAA0C,OAC6ByD,EAAAE,GAAEpF,KAAI,kBAAAyB,OAAiBoO,EAAQ,MAAApO,OAAAyD,EAAAE,KAC7D,YAICyB,EAAU,CAAF3B,EAAArB,KAAA,SAENiM,GAAe,EACbC,EAAc,KAAKI,WAAW,GAC9BH,EAAWnJ,EAASsJ,WAAW,GAC5BvO,EAAI,EAAC,aAAEA,EAAIM,EAAM5B,QAAM,CAAA4E,EAAArB,KAAA,YAC1BjC,IAAMkO,EAAc,GAAK5N,EAAMN,KAAOoO,EAAQ,CAAA9K,EAAArB,KAAA,gBAAAqB,EAAAf,OAAA,oBAG9CjC,EAAMN,KAAOmO,IACfD,EAAclO,GACf,QAN+BA,GAAK,EAACsD,EAAArB,KAAA,iBAQxC3B,EAAQA,EAAM6F,MAAM,EAAG+H,EAAc,GAAE,eAAA5K,EAAAf,OAAA,SAElCjC,GAAK,yBAAAgD,EAAAd,OAAA,GAAAW,EAAA,oBACb,yBAAA4K,EAAApQ,MAAA,KAAAC,UAAA,EA3CD,IA6CA,CAAA+B,IAAA,YAAAC,MAAA,eAAA4O,GAAAlN,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAAuI,IAAA,IAAArI,EAAApB,EAAA0J,EAAApM,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAmI,GAAA,cAAAA,EAAAjI,KAAAiI,EAAAhI,MAAA,OAAkC,OAAlBP,EAAAsI,EAAAtL,OAAA,QAAA8B,IAAAwJ,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAhI,KAAA,EACZvC,KAAK+O,gBAAgB/M,GAAK,OAAnC,OAALpB,EAAK2J,EAAA9H,KAAA8H,EAAA1H,OAAA,SACJjC,EAAM+G,SAAS,SAAO,wBAAA4C,EAAAzH,OAAA,GAAAuH,EAAA,UAC9B,yBAAAyE,EAAA7Q,MAAA,KAAAC,UAAA,EATD,IAWA,CAAA+B,IAAA,4BAAAC,MAAA,eAAA8O,GAAApN,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAAmN,IAAA,IAAAjN,EAAA2K,EAAAuC,EAAAhR,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAA+M,GAAA,cAAAA,EAAA7M,KAAA6M,EAAA5M,MAAA,OAAkD,OAAlBP,EAAAkN,EAAAlQ,OAAA,QAAA8B,IAAAoO,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAA5M,KAAA,EACzBvC,KAAK2N,YAAY3L,GAAK,OAA/B,OAAR2K,EAAQwC,EAAA1M,KAAA0M,EAAAtM,OAAA,SACP8J,EAAShH,aAAW,wBAAAwJ,EAAArM,OAAA,GAAAmM,EAAA,UAC5B,yBAAAD,EAAA/Q,MAAA,KAAAC,UAAA,EARD,IAUA,CAAA+B,IAAA,YAAAC,MAUA,SACEyM,EACAyC,EACAC,EACAC,EACAhC,GAEA,IAAQnI,EAAoDwH,EAApDxH,cAAeI,EAAqCoH,EAArCpH,SAAUN,EAA2B0H,EAA3B1H,eAAgBC,EAAWyH,EAAXzH,OAEjD,GAAIoI,EAAKiC,OAAO,KAAOhK,EACrB,MAAO,CAAEkI,UAAU,GAIrB,IAAMvH,EAAoBf,EAApBe,IAAKC,EAAehB,EAAfgB,MAAOhC,EAAQgB,EAARhB,IACb+B,IACHA,EAAM,GAEHC,IACHA,EAAQ,GAELhC,IACHA,EAAM,GAEO,QAAXe,IACFf,EAAM,GAYR,IAVA,IAAMqL,EAAYpJ,KAAKyB,IAAI3B,EAAKC,EAAOhC,GAMnCsL,EAAsB,EACtBC,EAAqB,EACrBC,EAAS,GACTnC,GAAmBoC,IACdtP,EAAI,EAAGA,EAAIgN,EAAKtO,OAAS,EAAGsB,GAAK,EACxC,GAAgB,OAAZgN,EAAKhN,IAAeA,IAAMgN,EAAKtO,OAAQ,CACzC,GAAIyQ,IAAwBvJ,GAC1B,GACElG,KAAK0B,aAAa4L,EAAK7G,MAAMiJ,EAAoBpP,MACjD8O,EAEA,MAAO,CAAE3B,UAAU,QAEhB,GAAIgC,IAAwBtJ,EAAO,CAMxC,GALAqH,EAAkBqC,SAASvC,EAAK7G,MAAMiJ,EAAoBpP,GAAI,IAEvC,mBAAnB2E,IACFuI,GAAmB,GAEjBA,GAAmB8B,EACrB,MAAO,CAAE9B,gBAAAA,EAAiBC,UAAU,GAEtC,IAAY,IAARtJ,GAAaA,IAAQgC,IAEnBqH,EAAkB,GAAK6B,EACzB,MAAO,CAAE7B,gBAAAA,EAAiBC,UAAU,E,MAGnC,GAAe,QAAXvI,GAA4C,IAAxBuK,EAC7BE,EAASrC,EAAK7G,MAAMiJ,EAAoBpP,QACnC,GAAImP,IAAwBtL,EAAK,CAYtC,IATe,QAAXe,EACclF,KAAK8P,WACnBtC,EACAmC,EACArC,EAAK7G,MAAMiJ,EAAoBpP,IAGjBuP,SAASvC,EAAK7G,MAAMiJ,EAAoBpP,GAAI,MAEzC+O,EACnB,MAAO,CAAE5B,UAAU,E,CAKvB,GAFAiC,EAAqBpP,EAAI,GACzBmP,GAAuB,GACGD,EACxB,K,CAIN,MAAO,CAAEhC,gBAAAA,EAAiBC,UAAU,EACtC,GAAC,CAAAxN,IAAA,aAAAC,MAED,SAAWsN,EAAyBmC,EAAgBI,GAClD,IAAIC,EAAgBxC,EAAkBmC,EAAO3Q,OAMvCiR,GAAwC,IAAhCF,EAAK9B,QAAQ,cAC3B,GAAgB,MAAZ8B,EAAK,IAAeE,GAajB,GAAIA,EACT,OAAOzC,EAAkB,OAZzB,IADA,IAAI0C,EAAW,IACNrJ,EAAI,EAAGA,EAAIkJ,EAAK/Q,OAAQ6H,GAAK,EAAG,CACvC,GAAiB,MAAbqJ,GAA6C,SAAzBH,EAAKtJ,MAAMI,EAAGA,EAAI,GAAe,CACvD,IAAIsJ,EAAWJ,EAAK9B,QAAQ,IAAKpH,IACf,IAAdsJ,IACFA,EAAWJ,EAAK/Q,QAElBgR,EAAgBH,SAASE,EAAKtJ,MAAMI,EAAI,EAAGsJ,GAAW,IACtD,K,CAEFD,EAAWH,EAAKlJ,E,CAKpB,OAAOmJ,CACT,GAEA,CAAA/P,IAAA,YAAAC,MAAA,eAAAoE,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAAsO,EAAgB7L,GAAe,IAAAvC,EAAAqO,EAAAnS,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAkO,GAAA,cAAAA,EAAAhO,KAAAgO,EAAA/N,MAAA,OAAoB,OAAlBP,EAAAqO,EAAArR,OAAA,QAAA8B,IAAAuP,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAzN,OAAA,SAC1C7C,KAAKgM,MAAMpH,UAAUL,EAASvC,IAAK,wBAAAsO,EAAAxN,OAAA,GAAAsN,EAAA,UAC3C,gBAAAG,GAAA,OAAAjM,EAAArG,MAAA,KAAAC,UAAA,EAPD,IAOC,CAAA+B,IAAA,cAAAC,MAAA,eAAAsQ,GAAA5O,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA2O,EAAkBpD,EAAaT,GAAY,IAAA5K,EAAA5B,EAAAsQ,EAAAC,EAAA1D,EAAA2D,EAAA1S,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAyO,GAAA,cAAAA,EAAAvO,KAAAuO,EAAAtO,MAAA,OACb,OADeP,EAAA4O,EAAA5R,OAAA,QAAA8B,IAAA8P,EAAA,GAAAA,EAAA,GAAgB,CAAC,EACtDxQ,EAAI0Q,EAAAA,OAAOC,MAAMnE,GAAKiE,EAAAtO,KAAA,EACQvC,KAAKsB,WAAW0P,KAClD5Q,EACA,EACAwM,EACAS,EACArL,GACD,OANwB,OAMxB0O,EAAAG,EAAApO,KANOkO,EAASD,EAATC,UAAW1D,EAAMyD,EAANzD,OAAM4D,EAAAhO,OAAA,SAQlBoK,EAAOxG,MAAM,EAAGkK,IAAU,wBAAAE,EAAA/N,OAAA,GAAA2N,EAAA,UAClC,gBAAAQ,EAAAC,GAAA,OAAAV,EAAAvS,MAAA,KAAAC,UAAA,EAbA,IAeD,CAAA+B,IAAA,YAAAC,MAAA,eAAAiR,GAAAvP,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAIA,SAAAsP,EAAgBhJ,GAAQ,IAAApG,EAAAqP,EAAAC,EAAApT,UAAA,OAAA2D,EAAAA,EAAAA,KAAAO,MAAA,SAAAmP,GAAA,cAAAA,EAAAjP,KAAAiP,EAAAhP,MAAA,OAAoB,OAAlBP,EAAAsP,EAAAtS,OAAA,QAAA8B,IAAAwQ,EAAA,GAAAA,EAAA,GAAgB,CAAC,EAACC,EAAAhP,KAAA,EAIvBvC,KAAK2O,YACtBvG,EAAE/I,KAAKC,cACP8I,EAAEnH,cACFe,GACD,OAJS,OAAJqP,EAAIE,EAAA9O,KAAA8O,EAAAjP,KAAG,EAAHiP,EAAA1O,OAAA,UAMD2O,EAAAA,EAAAA,iBAAgBH,EAAMjJ,IAAE,aAAAmJ,EAAAjP,KAAA,EAAAiP,EAAAzN,GAAAyN,EAAA,SAEzB,IAAI9T,MAAM,yBAAD0C,OAA0BiI,EAAET,WAAU,KAAAxH,OAAAoR,EAAAzN,KAAQ,yBAAAyN,EAAAzO,OAAA,GAAAsO,EAAA,kBAEhE,gBAAAK,GAAA,OAAAN,EAAAlT,MAAA,KAAAC,UAAA,EAlBD,MAkBCgN,CAAA,CA1dkC,E,wBChCxB,IAAAlN,EAAA0T,EAAAA,OAAAA,QAAAvT,EAAAuT,EAAAA,OAAAA,QACTC,EAAmB3R,MAAQA,KAAK2R,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACxD,EACAE,OAAOC,eAAeC,EAAS,aAAc,CAAE9R,OAAO,IACtD,IAAM+R,EAA6BP,EAAQ,OACrCQ,EAA6BP,EAAgBD,EAAQ,QACrDS,EAA4BR,EAAgBD,EAAQ,OACpDvF,EAAqB,WACvB,SAAAA,EAAA9K,GAA8B,IAAhBqF,EAAIrF,EAAJqF,KAAM0F,EAAK/K,EAAL+K,MAChB,GADqBpO,EAAA,KAAAmO,GACD,oBAATzF,EACP,MAAM,IAAIoF,UAAU,6BAExB,GAAqB,kBAAVM,EACP,MAAM,IAAIN,UAAU,4BAExB,GAAyB,oBAAdM,EAAM4B,KACQ,oBAAd5B,EAAMgG,KACW,oBAAjBhG,EAAMiG,OACb,MAAM,IAAIvG,UAAU,qEAExB9L,KAAKoM,MAAQA,EACbpM,KAAKsS,aAAe5L,CACxB,CAyEC,OAzEAvI,EAAAgO,EAAA,EAAAlM,IAAA,QAAAC,MAaD,SAAMD,EAAKsS,GACHvS,KAAKoM,MAAM4B,IAAI/N,KAASsS,GACxBvS,KAAKoM,MAAMiG,OAAOpS,EAE1B,GAAC,CAAAA,IAAA,OAAAC,MACD,SAAKD,EAAKoR,EAAM/S,EAAQkU,GAAgB,IAAArP,EAAA,KAC9BsP,EAAU,IAAIP,EAA2BQ,QACzCC,EAAiB,IAAIR,EAA0BO,QACrDC,EAAeC,YAAYJ,GAC3B,IAAMK,EAAW,CACbJ,QAASA,EACTK,QAAS9S,KAAKsS,aAAajB,EAAMoB,EAAQnU,QAAQ,SAACyU,GAC9CJ,EAAejG,SAASqG,EAC5B,IACAC,SAAS,EACTL,eAAAA,EACA,WAAIpU,GACA,OAAOyB,KAAKyS,QAAQnU,OAAOC,OAC/B,GAEJsU,EAASJ,QAAQQ,UAAU3U,GAE3BuU,EAASJ,QAAQnU,OAAO4U,iBAAiB,SAAS,WACzCL,EAASG,SACV7P,EAAKgQ,MAAMlT,EAAK4S,EAExB,IAEAA,EAASC,QACJM,MAAK,WACNP,EAASG,SAAU,CACvB,IAAG,WACCH,EAASG,SAAU,EAEnB7P,EAAKgQ,MAAMlT,EAAK4S,EACpB,IACKtP,OAAM,SAAA9E,GAIP,MADAgK,QAAQmG,MAAMnQ,GACRA,CACV,IACAuB,KAAKoM,MAAMgG,IAAInS,EAAK4S,EACxB,GAAC,CAAA5S,IAAA,MAAAC,MAkBD,SAAID,GACA,OAAOD,KAAKoM,MAAMiH,IAAIpT,EAC1B,GAOA,CAAAA,IAAA,MAAAC,MAMA,SAAID,EAAKoR,EAAM/S,EAAQkU,GACnB,IAAKlU,GAAU+S,aAAgBY,EAA2BqB,YACtD,MAAM,IAAIxH,UAAU,yGAExB,IAAMyH,EAAavT,KAAKoM,MAAM4B,IAAI/N,GAClC,OAAIsT,EACIA,EAAWhV,UAAYgV,EAAWP,SAElChT,KAAKmT,MAAMlT,EAAKsT,GACTvT,KAAKgO,IAAI/N,EAAKoR,EAAM/S,EAAQkU,IAEnCe,EAAWP,QAEJO,EAAWT,SAItBS,EAAWd,QAAQQ,UAAU3U,GAC7BiV,EAAWZ,eAAeC,YAAYJ,GAC/BrG,EAAsBqH,mBAAmBD,EAAWT,QAASxU,KAGxE0B,KAAK0G,KAAKzG,EAAKoR,EAAM/S,EAAQkU,GACtBrG,EAAsBqH,mBAG7BxT,KAAKoM,MAAM4B,IAAI/N,GAAK6S,QAASxU,GACjC,GACA,CAAA2B,IAAA,SAAAC,MAMA,SAAOD,GACH,IAAMwT,EAAczT,KAAKoM,MAAM4B,IAAI/N,GAC/BwT,IACKA,EAAYT,SACbS,EAAYhB,QAAQiB,QAExB1T,KAAKoM,MAAMiG,OAAOpS,GAE1B,GACA,CAAAA,IAAA,QAAAC,MAIA,WAII,IAFA,IAAMyT,EAAU3T,KAAKoM,MAAMwH,OACvBC,EAAc,EACTC,EAASH,EAAQpR,QAASuR,EAAOjL,KAAMiL,EAASH,EAAQpR,OAC7DvC,KAAKqS,OAAOyB,EAAO5T,OACnB2T,GAAe,EAEnB,OAAOA,CACX,IAAC,EAAA5T,IAAA,mBAAAC,MAhJD,SAAwB6T,GACpB,MAEmB,eAAnBA,EAAUC,MAGa,gBAAnBD,EAAUrV,MAEY,wBAAtBqV,EAAUhB,SAEY,mBAAtBgB,EAAUhB,OAClB,GAAC,CAAA9S,IAAA,qBAAAC,MA6CD,SAA0B4S,EAASxU,GAI/B,SAAS2V,IACL,GAAI3V,GAAUA,EAAOC,QACjB,MAAMuT,OAAOoC,OAAO,IAAIzW,MAAM,WAAY,CAAEiB,KAAM,eAE1D,CACA,OAAOoU,EAAQM,MAAK,SAAAU,GAEhB,OADAG,IACOH,CACX,IAAG,SAAAlF,GAEC,MADAqF,IACMrF,CACV,GACJ,KAACzC,CAAA,CAxFsB,GAkK3B6F,EAAAA,QAAkB7F,C,wBC1KL,IAAAhO,EAAAuT,EAAAA,OAAAA,QAAA1T,EAAA0T,EAAAA,OAAAA,QACbI,OAAOC,eAAeC,EAAS,aAAc,CAAE9R,OAAO,IACtD,IAAM+R,EAA6BP,EAAQ,OACrCyC,EAAUhW,GAAA,SAAAgW,IAAAnW,EAAA,KAAAmW,EAAA,IAMVC,EAAwB,WAC1B,SAAAA,IAAcpW,EAAA,KAAAoW,GACVpU,KAAKqU,QAAU,IAAIC,IACnBtU,KAAKuU,gBAAkB,IAAItC,EAA2BuC,eAC1D,CAoCC,OA9BDrW,EAAAiW,EAAA,EAAAnU,IAAA,YAAAC,MACA,WAAqC,IAAAiD,EAAA,KAA3B7E,EAAMJ,UAAAc,OAAA,QAAA8B,IAAA5C,UAAA,GAAAA,UAAA,GAAG,IAAIiW,EACnB,GAAInU,KAAK1B,OAAOC,QACZ,MAAM,IAAId,MAAM,yCAIpBuC,KAAKqU,QAAQI,IAAInW,GACbA,EAAOC,QAGPyB,KAAK0U,cAAcpW,GAEqB,oBAA5BA,EAAO4U,kBACnB5U,EAAO4U,iBAAiB,SAAS,WAC7B/P,EAAKuR,cAAcpW,EACvB,GAER,GAAC,CAAA2B,IAAA,gBAAAC,MACD,SAAc5B,GACV0B,KAAKqU,QAAQhC,OAAO/T,GACM,IAAtB0B,KAAKqU,QAAQzH,MACb5M,KAAKuU,gBAAgBb,OAE7B,GAAC,CAAAzT,IAAA,SAAA+N,IACD,WACI,OAAOhO,KAAKuU,gBAAgBjW,MAChC,GAAC,CAAA2B,IAAA,QAAAC,MACD,WACIF,KAAKuU,gBAAgBb,OACzB,KAACU,CAAA,CAxCyB,GA0C9BpC,EAAAA,QAAkBoC,C,uBCnDL,IAAApW,EAAA0T,EAAAA,OAAAA,QAAAvT,EAAAuT,EAAAA,OAAAA,QACbI,OAAOC,eAAeC,EAAS,aAAc,CAAE9R,OAAO,IAAQ,IACxDyU,EAAuB,WACzB,SAAAA,IAAc3W,EAAA,KAAA2W,GACV3U,KAAK4U,UAAY,IAAIN,GACzB,CAUC,OAVAnW,EAAAwW,EAAA,EAAA1U,IAAA,cAAAC,MACD,WAAkC,IAAtBwM,EAAQxO,UAAAc,OAAA,QAAA8B,IAAA5C,UAAA,GAAAA,UAAA,GAAG,WAAQ,EAC3B8B,KAAK4U,UAAUH,IAAI/H,GACnBA,EAAS1M,KAAK6U,eAClB,GAAC,CAAA5U,IAAA,WAAAC,MACD,SAAS6S,GACL/S,KAAK6U,eAAiB9B,EACtB/S,KAAK4U,UAAUpV,SAAQ,SAAAsV,GACnBA,EAAI/B,EACR,GACJ,KAAC4B,CAAA,CAbwB,GAe7B3C,EAAAA,QAAkB2C,C,wBCflB7C,OAAOC,eAAeC,EAAS,aAAc,CAAE9R,OAAO,IACtD8R,EAAQsB,YAActB,EAAQwC,qBAAkB,EAChD,IAAMO,EAAiBrD,EAAQ,OAC3BsD,EAAY,WAIZ,GAAoB,qBAATC,KACP,OAAOA,KAEX,GAAsB,qBAAXC,OACP,OAAOA,OAEX,GAAsB,qBAAXC,EAAAA,EACP,OAAOA,EAAAA,EAEX,MAAM,IAAI1X,MAAM,iCACpB,EAEI+W,EAAyD,qBAAhCQ,IAAYR,gBAAkCO,EAAeP,gBAAkBQ,IAAYR,gBACxHxC,EAAQwC,gBAAkBA,EAE1B,IAAIlB,EAAqD,qBAAhC0B,IAAYR,gBAAkCO,EAAezB,YAAc0B,IAAY1B,YAChHtB,EAAQsB,YAAcA,C,wBCxBtB,IAAI3B,EAAmB3R,MAAQA,KAAK2R,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACxD,EACAE,OAAOC,eAAeC,EAAS,aAAc,CAAE9R,OAAO,IACtD,IAAMkV,EAA0BzD,EAAgBD,EAAQ,QACxDM,EAAAA,QAAkBoD,EAAwB1C,O","sources":["../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts","../../../node_modules/abortable-promise-cache/esm/AbortablePromiseCache.js","../../../node_modules/abortable-promise-cache/esm/AggregateAbortController.js","../../../node_modules/abortable-promise-cache/esm/AggregateStatusReporter.js","../../../node_modules/abortable-promise-cache/esm/abortcontroller-ponyfill.js","../../../node_modules/abortable-promise-cache/esm/index.js"],"sourcesContent":["import Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    if (typeof DOMException !== 'undefined') {\n      // eslint-disable-next-line  no-undef\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    if (dif !== 0) {\n      return dif\n    } else {\n      return c0.minv.dataPosition - c1.minv.dataPosition\n    }\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  })\n\n  return mergedChunks\n}\n","import { Buffer } from 'buffer'\nexport default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  /**\n   * @param {VirtualOffset} minv\n   * @param {VirtualOffset} maxv\n   * @param {number} bin\n   * @param {number} [fetchedSize]\n   */\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport VirtualOffset from './virtualOffset'\nimport Chunk from './chunk'\n\nexport interface Options {\n  // support having some unknown parts of the options\n  [key: string]: unknown\n  signal?: AbortSignal\n}\n\nexport interface IndexData {\n  refNameToId: { [key: string]: number }\n  refIdToName: string[]\n  metaChar: string | null\n  columnNumbers: { ref: number; start: number; end: number }\n  coordinateType: string\n  format: string\n  [key: string]: any\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private parseP?: Promise<IndexData>\n\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<IndexData>\n\n  public async getMetadata(opts: Options = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this.parseP) {\n      this.parseP = this._parse(opts).catch(e => {\n        this.parseP = undefined\n        throw e\n      })\n    }\n    return this.parseP\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    return !!((await this.parse(opts)).indices[seqId] || {}).binIndex\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { longToNumber, optimizeChunks, checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const buf = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buf)\n    checkAbortSignal(opts.signal)\n\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n      // TODO: do we need to support big-endian TBI files?\n    }\n\n    // number of reference sequences in the index\n    const refCount = bytes.readInt32LE(4)\n    const formatFlags = bytes.readInt32LE(8)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: { [key: number]: string } = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(12),\n      start: bytes.readInt32LE(16),\n      end: bytes.readInt32LE(20),\n    }\n    const metaValue = bytes.readInt32LE(24)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(28)\n\n    // read sequence dictionary\n    const nameSectionLength = bytes.readInt32LE(32)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: number]: Chunk[] } = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return { binIndex, linearIndex, stats }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 16, offset + 24) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { longToNumber, optimizeChunks } from './util'\n\nimport IndexFile, { Options } from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n  async indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.slice(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip((await this.filehandle.readFile(opts)) as Buffer)\n\n    // check TBI magic numbers\n    let csiVersion\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n    const auxLength = bytes.readInt32LE(12)\n    const aux =\n      auxLength && auxLength >= 30\n        ? this.parseAuxData(bytes, 16)\n        : {\n            refIdToName: [],\n            refNameToId: {},\n            metaChar: null,\n            columnNumbers: { ref: 0, start: 1, end: 2 },\n            coordinateType: 'zero-based-half-open',\n            format: 'generic',\n          }\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: string]: Chunk[] } = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information\n          // about the reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = bytes.readInt32LE(currOffset + 12)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            // this._findFirstData(data, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 28, offset + 36) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from 'quick-lru'\nimport { Buffer } from 'buffer'\nimport { GenericFilehandle, LocalFile } from 'generic-filehandle'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { checkAbortSignal } from './util'\nimport IndexFile, { Options, IndexData } from './indexFile'\n\nimport Chunk from './chunk'\nimport TBI from './tbi'\nimport CSI from './csi'\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8') : undefined\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\ninterface ReadChunk {\n  buffer: Buffer\n  cpositions: number[]\n  dpositions: number[]\n}\n\nfunction timeout(time: number) {\n  return new Promise(resolve => setTimeout(resolve, time))\n}\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private chunkSizeLimit: number\n  private yieldTime: number\n  private renameRefSeq: (n: string) => string\n  private chunkCache: AbortablePromiseCache<Chunk, ReadChunk>\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {filehandle} [args.filehandle]\n   * @param {string} [args.tbiPath]\n   * @param {filehandle} [args.tbiFilehandle]\n   * @param {string} [args.csiPath]\n   * @param {filehandle} [args.csiFilehandle]\n   * @param {number} [args.yieldTime] yield to main thread after N milliseconds if reading features is taking a long time to avoid hanging main thread\n   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform\n   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is\n   * not altered, just the names of the reference sequences that are used for querying.\n   */\n  constructor({\n    path,\n    filehandle,\n    tbiPath,\n    tbiFilehandle,\n    csiPath,\n    csiFilehandle,\n    yieldTime = 500,\n    chunkSizeLimit = 50000000,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    tbiPath?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    yieldTime?: number\n    chunkSizeLimit?: number\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath',\n      )\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit\n    this.renameRefSeq = renameRefSeqs\n    this.yieldTime = yieldTime\n    this.chunkCache = new AbortablePromiseCache<Chunk, ReadChunk>({\n      cache: new LRU({ maxSize: Math.floor(chunkCacheSize / (1 << 16)) }),\n      fill: (args: Chunk, signal?: AbortSignal) =>\n        this.readChunk(args, { signal }),\n    })\n  }\n\n  /**\n   * @param refName name of the reference sequence\n   * @param start start of the region (in 0-based half-open coordinates)\n   * @param end end of the region (in 0-based half-open coordinates)\n   * @param opts callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc\n   * @returns promise that is resolved when the whole read is finished, rejected on error\n   */\n  async getLines(\n    refName: string,\n    start: number,\n    end: number,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n    if (typeof opts === 'undefined') {\n      throw new TypeError('line callback must be provided')\n    }\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n    }\n    if (refName === undefined) {\n      throw new TypeError('must provide a reference sequence name')\n    }\n    if (!callback) {\n      throw new TypeError('line callback must be provided')\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = metadata.maxRefLength\n    }\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n\n    // check the chunks for any that are over the size limit.  if\n    // any are, don't fetch any of them\n    for (let i = 0; i < chunks.length; i += 1) {\n      const size = chunks[i].fetchedSize()\n      if (size > this.chunkSizeLimit) {\n        throw new Error(\n          `Too much data. Chunk size ${size.toLocaleString()} bytes exceeds chunkSizeLimit of ${this.chunkSizeLimit.toLocaleString()}.`,\n        )\n      }\n    }\n\n    // now go through each chunk and parse and filter the lines out of it\n    let last = Date.now()\n    for (let chunkNum = 0; chunkNum < chunks.length; chunkNum += 1) {\n      let previousStartCoordinate: number | undefined\n      const c = chunks[chunkNum]\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n      while (blockStart < buffer.length) {\n        const n = buffer.indexOf('\\n', blockStart)\n        if (n === -1) {\n          break\n        }\n        const b = buffer.slice(blockStart, n)\n        const line = decoder?.decode(b) || b.toString()\n\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        // do a small check just to make sure that the lines are really sorted\n        // by start coordinate\n        if (\n          previousStartCoordinate !== undefined &&\n          startCoordinate !== undefined &&\n          previousStartCoordinate > startCoordinate\n        ) {\n          throw new Error(\n            `Lines not sorted by start coordinate (${previousStartCoordinate} > ${startCoordinate}), this file is not usable with Tabix.`,\n          )\n        }\n        previousStartCoordinate = startCoordinate\n\n        if (overlaps) {\n          callback(\n            line.trim(),\n            // cpositions[pos] refers to actual file offset of a bgzip block boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a \"unique\"\n            // address space so that data in that block could never overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset from\n            // that bgzip block boundary, and since the cpositions are multiplied by\n            // (1 << 8) these uncompressed offsets get a unique space\n            cpositions[pos] * (1 << 8) +\n              (blockStart - dpositions[pos]) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so\n          // we must be at the end of the relevant data and we can stop\n          // processing data now\n          return\n        }\n\n        // yield if we have emitted beyond the yield limit\n        if (this.yieldTime && last - Date.now() > this.yieldTime) {\n          last = Date.now()\n          checkAbortSignal(signal)\n          await timeout(1)\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of\n   * the file, which are the bytes up to the first\n   * non-meta line\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } = await this.getMetadata(\n      opts,\n    )\n    checkAbortSignal(opts.signal)\n    const maxFetch = (firstDataLine?.blockPosition || 0) + maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header\n    // actually takes up more than one block? this case is not covered here\n\n    let bytes = await this._readRegion(0, maxFetch, opts)\n    checkAbortSignal(opts.signal)\n    try {\n      bytes = await unzip(bytes)\n    } catch (e) {\n      console.error(e)\n      throw new Error(\n        //@ts-ignore\n        `error decompressing block ${e.code} at 0 (length ${maxFetch}) ${e}`,\n      )\n    }\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      bytes = bytes.slice(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the\n   * file, is the portion up to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const bytes = await this.getHeaderBuffer(opts)\n    return bytes.toString('utf8')\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which\n   * they occur in the file. reference sequence renaming is not applied\n   * to these names.\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index,\n   * containing columnNumbers, metaChar, and format\n   * @param {string} regionRefName\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   * @param {array[string]} line\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    metadata: IndexData,\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    const { columnNumbers, metaChar, coordinateType, format } = metadata\n    // skip meta lines\n    if (line.charAt(0) === metaChar) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast.\n    // basically, we want to avoid doing a split, because if the lines are really long\n    // that could lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    for (let i = 0; i < line.length + 1; i += 1) {\n      if (line[i] === '\\t' || i === line.length) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return { overlaps: false }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return { startCoordinate, overlaps: false }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return { startCoordinate, overlaps: false }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          let endCoordinate\n          // this will never match if there is no end column\n          if (format === 'VCF') {\n            endCoordinate = this._getVcfEnd(\n              startCoordinate,\n              refSeq,\n              line.slice(currentColumnStart, i),\n            )\n          } else {\n            endCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          }\n          if (endCoordinate <= regionStart) {\n            return { overlaps: false }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return { startCoordinate, overlaps: true }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END\n    // as being on a different chromosome\n    // if CHR2 is on the same chromosome, still ignore it\n    // because there should be another pairwise feature\n    // at the end of this one\n    const isTRA = info.indexOf('SVTYPE=TRA') !== -1\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference sequence\n   * @param refSeq reference sequence name\n   * @returns number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  async _readRegion(pos: number, size: number, opts: Options = {}) {\n    const b = Buffer.alloc(size)\n    const { bytesRead, buffer } = await this.filehandle.read(\n      b,\n      0,\n      size,\n      pos,\n      opts,\n    )\n\n    return buffer.slice(0, bytesRead)\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   */\n  async readChunk(c: Chunk, opts: Options = {}) {\n    // fetch the uncompressed data, uncompress carefully a block at a time,\n    // and stop when done\n\n    const data = await this._readRegion(\n      c.minv.blockPosition,\n      c.fetchedSize(),\n      opts,\n    )\n    try {\n      return unzipChunkSlice(data, c)\n    } catch (e) {\n      throw new Error(`error decompressing c ${c.toString()} ${e}`)\n    }\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nconst AggregateAbortController_1 = __importDefault(require(\"./AggregateAbortController\"));\nconst AggregateStatusReporter_1 = __importDefault(require(\"./AggregateStatusReporter\"));\nclass AbortablePromiseCache {\n    constructor({ fill, cache, }) {\n        if (typeof fill !== 'function') {\n            throw new TypeError('must pass a fill function');\n        }\n        if (typeof cache !== 'object') {\n            throw new TypeError('must pass a cache object');\n        }\n        if (typeof cache.get !== 'function' ||\n            typeof cache.set !== 'function' ||\n            typeof cache.delete !== 'function') {\n            throw new TypeError('cache must implement get(key), set(key, val), and and delete(key)');\n        }\n        this.cache = cache;\n        this.fillCallback = fill;\n    }\n    static isAbortException(exception) {\n        return (\n        // DOMException\n        exception.name === 'AbortError' ||\n            // standard-ish non-DOM abort exception\n            //@ts-ignore\n            exception.code === 'ERR_ABORTED' ||\n            // stringified DOMException\n            exception.message === 'AbortError: aborted' ||\n            // stringified standard-ish exception\n            exception.message === 'Error: aborted');\n    }\n    evict(key, entry) {\n        if (this.cache.get(key) === entry) {\n            this.cache.delete(key);\n        }\n    }\n    fill(key, data, signal, statusCallback) {\n        const aborter = new AggregateAbortController_1.default();\n        const statusReporter = new AggregateStatusReporter_1.default();\n        statusReporter.addCallback(statusCallback);\n        const newEntry = {\n            aborter: aborter,\n            promise: this.fillCallback(data, aborter.signal, (message) => {\n                statusReporter.callback(message);\n            }),\n            settled: false,\n            statusReporter,\n            get aborted() {\n                return this.aborter.signal.aborted;\n            },\n        };\n        newEntry.aborter.addSignal(signal);\n        // remove the fill from the cache when its abortcontroller fires, if still in there\n        newEntry.aborter.signal.addEventListener('abort', () => {\n            if (!newEntry.settled) {\n                this.evict(key, newEntry);\n            }\n        });\n        // chain off the cached promise to record when it settles\n        newEntry.promise\n            .then(() => {\n            newEntry.settled = true;\n        }, () => {\n            newEntry.settled = true;\n            // if the fill throws an error (including abort) and is still in the cache, remove it\n            this.evict(key, newEntry);\n        })\n            .catch(e => {\n            // this will only be reached if there is some kind of\n            // bad bug in this library\n            console.error(e);\n            throw e;\n        });\n        this.cache.set(key, newEntry);\n    }\n    static checkSinglePromise(promise, signal) {\n        // check just this signal for having been aborted, and abort the\n        // promise if it was, regardless of what happened with the cached\n        // response\n        function checkForSingleAbort() {\n            if (signal && signal.aborted) {\n                throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' });\n            }\n        }\n        return promise.then(result => {\n            checkForSingleAbort();\n            return result;\n        }, error => {\n            checkForSingleAbort();\n            throw error;\n        });\n    }\n    has(key) {\n        return this.cache.has(key);\n    }\n    /**\n     * Callback for getting status of the pending async\n     *\n     * @callback statusCallback\n     * @param {any} status, current status string or message object\n     */\n    /**\n     * @param {any} key cache key to use for this request\n     * @param {any} data data passed as the first argument to the fill callback\n     * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n     * @param {statusCallback} a callback to get the current status of a pending async operation\n     */\n    get(key, data, signal, statusCallback) {\n        if (!signal && data instanceof abortcontroller_ponyfill_1.AbortSignal) {\n            throw new TypeError('second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?');\n        }\n        const cacheEntry = this.cache.get(key);\n        if (cacheEntry) {\n            if (cacheEntry.aborted && !cacheEntry.settled) {\n                // if it's aborted but has not realized it yet, evict it and redispatch\n                this.evict(key, cacheEntry);\n                return this.get(key, data, signal, statusCallback);\n            }\n            if (cacheEntry.settled) {\n                // too late to abort, just return it\n                return cacheEntry.promise;\n            }\n            // request is in-flight, add this signal to its list of signals,\n            // or if there is no signal, the aborter will become non-abortable\n            cacheEntry.aborter.addSignal(signal);\n            cacheEntry.statusReporter.addCallback(statusCallback);\n            return AbortablePromiseCache.checkSinglePromise(cacheEntry.promise, signal);\n        }\n        // if we got here, it is not in the cache. fill.\n        this.fill(key, data, signal, statusCallback);\n        return AbortablePromiseCache.checkSinglePromise(\n        //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n        //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.cache.get(key).promise, signal);\n    }\n    /**\n     * delete the given entry from the cache. if it exists and its fill request has\n     * not yet settled, the fill will be signaled to abort.\n     *\n     * @param {any} key\n     */\n    delete(key) {\n        const cachedEntry = this.cache.get(key);\n        if (cachedEntry) {\n            if (!cachedEntry.settled) {\n                cachedEntry.aborter.abort();\n            }\n            this.cache.delete(key);\n        }\n    }\n    /**\n     * Clear all requests from the cache. Aborts any that have not settled.\n     * @returns {number} count of entries deleted\n     */\n    clear() {\n        // iterate without needing regenerator-runtime\n        const keyIter = this.cache.keys();\n        let deleteCount = 0;\n        for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n            this.delete(result.value);\n            deleteCount += 1;\n        }\n        return deleteCount;\n    }\n}\nexports.default = AbortablePromiseCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nclass NullSignal {\n}\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nclass AggregateAbortController {\n    constructor() {\n        this.signals = new Set();\n        this.abortController = new abortcontroller_ponyfill_1.AbortController();\n    }\n    /**\n     * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n     *  will be treated as a null-signal, and this abortcontroller will no\n     *  longer be abortable.\n     */\n    //@ts-ignore\n    addSignal(signal = new NullSignal()) {\n        if (this.signal.aborted) {\n            throw new Error('cannot add a signal, already aborted!');\n        }\n        // note that a NullSignal will never fire, so if we\n        // have one this thing will never actually abort\n        this.signals.add(signal);\n        if (signal.aborted) {\n            // handle the abort immediately if it is already aborted\n            // for some reason\n            this.handleAborted(signal);\n        }\n        else if (typeof signal.addEventListener === 'function') {\n            signal.addEventListener('abort', () => {\n                this.handleAborted(signal);\n            });\n        }\n    }\n    handleAborted(signal) {\n        this.signals.delete(signal);\n        if (this.signals.size === 0) {\n            this.abortController.abort();\n        }\n    }\n    get signal() {\n        return this.abortController.signal;\n    }\n    abort() {\n        this.abortController.abort();\n    }\n}\nexports.default = AggregateAbortController;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass AggregateStatusReporter {\n    constructor() {\n        this.callbacks = new Set();\n    }\n    addCallback(callback = () => { }) {\n        this.callbacks.add(callback);\n        callback(this.currentMessage);\n    }\n    callback(message) {\n        this.currentMessage = message;\n        this.callbacks.forEach(elt => {\n            elt(message);\n        });\n    }\n}\nexports.default = AggregateStatusReporter;\n","\"use strict\";\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortSignal = exports.AbortController = void 0;\nconst cjs_ponyfill_1 = require(\"abortcontroller-polyfill/dist/cjs-ponyfill\");\nvar getGlobal = function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n};\n//@ts-ignore\nlet AbortController = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortController : getGlobal().AbortController;\nexports.AbortController = AbortController;\n//@ts-ignore\nlet AbortSignal = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortSignal : getGlobal().AbortSignal;\nexports.AbortSignal = AbortSignal;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbortablePromiseCache_1 = __importDefault(require(\"./AbortablePromiseCache\"));\nexports.default = AbortablePromiseCache_1.default;\n"],"names":["longToNumber","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","Error","toNumber","AbortError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","checkAbortSignal","signal","aborted","DOMException","e","code","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","length","sort","c0","c1","dif","minv","blockPosition","dataPosition","forEach","chunk","chunk1","chunk2","maxv","compareTo","push","VirtualOffset","this","key","value","concat","b","min","i","_len","args","Array","_key","fromBytes","bytes","offset","undefined","Chunk","bin","fetchedSize","_fetchedSize","toUniqueString","IndexFile","_ref","filehandle","_ref$renameRefSeqs","renameRefSeqs","n","renameRefSeq","_getMetadata","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_yield$this$parse","rest","_args","wrap","_context","prev","next","parse","sent","indices","_objectWithoutProperties","_excluded","abrupt","stop","currentFdl","virtualOffset","_parse","_callee2","_this","_args2","_context2","parseP","catch","_hasRefSeq","_callee3","seqId","_args3","_context3","t1","t0","binIndex","_x","reg2bins","beg","end","TabixIndex","_IndexFile","_lineCount","refName","indexData","refId","stats","refNameToId","lineCount","_parse2","buf","refCount","formatFlags","coordinateType","format","columnNumbers","metaValue","maxBinNumber","maxRefLength","metaChar","skipLines","nameSectionLength","_this$_parseNameBytes","refIdToName","currOffset","firstDataLine","readFile","unzip","readUInt32LE","readInt32LE","ref","start","Math","pow","String","fromCharCode","_parseNameBytes","slice","fill","map","binCount","j","chunkCount","parsePseudoBin","k","u","v","_findFirstData","linearCount","linearIndex","maxBlockSize","Long","namesBytes","currRefId","currNameStart","toString","_blocksForRange","max","ba","overlappingBins","_iterator","_step","_step$value","binChunks","c","nintv","minLin","maxLin","vp","console","warn","_createForOfIteratorHelper","s","done","_slicedToArray","err","f","_x2","_x3","_x4","rshift","num","bits","floor","CSI","call","depth","minShift","_indexCov","csiVersion","auxLength","aux","_this2","parseAuxData","loffset","_objectSpread","csi","_callee4","_args4","_context4","l","t","bins","decoder","TextDecoder","timeout","time","Promise","resolve","setTimeout","TabixIndexedFile","path","tbiPath","tbiFilehandle","csiPath","csiFilehandle","_ref$yieldTime","yieldTime","_ref$chunkSizeLimit","chunkSizeLimit","_ref$chunkCacheSize","chunkCacheSize","TypeError","LocalFile","index","TBI","chunkCache","AbortablePromiseCache","cache","LRU","maxSize","readChunk","_getLines","options","callback","metadata","size","last","chunkNum","previousStartCoordinate","_yield$this$chunkCach","buffer","cpositions","dpositions","blockStart","pos","line","_this$checkLine","startCoordinate","overlaps","lineCallback","getMetadata","blocksForRange","toLocaleString","Date","now","get","indexOf","decode","checkLine","trim","_getHeaderBuffer","_yield$this$getMetada","maxFetch","lastNewline","newlineByte","metaByte","_readRegion","error","charCodeAt","_getHeader","getHeaderBuffer","_getReferenceSequenceNames","_callee5","_args5","_context5","regionRefName","regionStart","regionEnd","charAt","maxColumn","currentColumnNumber","currentColumnStart","refSeq","Infinity","parseInt","_getVcfEnd","info","endCoordinate","isTRA","prevChar","valueEnd","_callee6","_args6","_context6","_x5","_readRegion2","_callee7","_yield$this$filehandl","bytesRead","_args7","_context7","Buffer","alloc","read","_x6","_x7","_readChunk","_callee8","data","_args8","_context8","unzipChunkSlice","_x8","require","__importDefault","mod","__esModule","Object","defineProperty","exports","abortcontroller_ponyfill_1","AggregateAbortController_1","AggregateStatusReporter_1","set","delete","fillCallback","entry","statusCallback","aborter","default","statusReporter","addCallback","newEntry","promise","message","settled","addSignal","addEventListener","evict","then","has","AbortSignal","cacheEntry","checkSinglePromise","cachedEntry","abort","keyIter","keys","deleteCount","result","exception","name","checkForSingleAbort","assign","NullSignal","AggregateAbortController","signals","Set","abortController","AbortController","add","handleAborted","AggregateStatusReporter","callbacks","currentMessage","elt","cjs_ponyfill_1","getGlobal","self","window","global","AbortablePromiseCache_1"],"sourceRoot":""}