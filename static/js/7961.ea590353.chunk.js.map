{"version":3,"file":"static/js/7961.ea590353.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ExportSvgDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { ExportSvgOptions } from '../model'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage('svg-' + key, val)\n}\n\nexport default function ExportSvgDlg({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  const [error, setError] = useState<unknown>()\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => setFilename(event.target.value)}\n        />\n        <br />\n\n        <TextField\n          select\n          label=\"Track label positioning\"\n          variant=\"outlined\"\n          value={trackLabels}\n          style={{ width: 150 }}\n          onChange={event => setTrackLabels(event.target.value)}\n        >\n          <MenuItem value=\"offset\">Offset</MenuItem>\n          <MenuItem value=\"overlay\">Overlay</MenuItem>\n          <MenuItem value=\"left\">Left</MenuItem>\n          <MenuItem value=\"none\">None</MenuItem>\n        </TextField>\n        <br />\n        {session.allThemes ? (\n          <TextField\n            select\n            label=\"Theme\"\n            variant=\"outlined\"\n            value={themeName}\n            onChange={event => setThemeName(event.target.value)}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => setRasterizeLayers(val => !val)}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClose()}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n                trackLabels,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["LoadingMessage","_jsxs","children","_jsx","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDlg","_ref","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","_useState","useState","_useState2","_slicedToArray","rasterizeLayers","setRasterizeLayers","_useState3","_useState4","loading","setLoading","_useSvgLocal","_useSvgLocal2","filename","setFilename","_useSvgLocal3","_useSvgLocal4","trackLabels","setTrackLabels","_useSvgLocal5","themeName","_useSvgLocal6","setThemeName","_useState5","_useState6","error","setError","Dialog","open","onClose","title","DialogContent","ErrorMessage","TextField","helperText","value","onChange","event","target","select","label","variant","width","MenuItem","allThemes","Object","entries","map","_ref2","_ref3","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","color","onClick","type","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","undefined","exportSvg","t0","console","finish","stop"],"sourceRoot":""}