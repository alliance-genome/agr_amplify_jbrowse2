{"version":3,"file":"static/js/6319.3c2a7cb5.chunk.js","mappings":"uRAeMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAa,SAAAC,GAAK,MAAK,CACvCC,KAAM,CACJC,MAAO,KAETC,YAAa,CACXC,SAAU,WACVC,MAAOL,EAAMM,QAAQ,GACrBC,IAAKP,EAAMM,QAAQ,GACnBE,MAAOR,EAAMS,QAAQC,KAAK,MARM,IA6EpC,WAAeC,EAAAA,EAAAA,WAjEf,SAAuBC,GAIrB,IAAQC,EAAYf,IAAZe,QACAC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YACf,GAAsBC,EAAAA,EAAAA,UAAS,IAA/B,eAAOC,EAAP,KAAYC,EAAZ,KACMC,EAAWF,EAAIG,MAAM,yBAE3B,OACE,UAAC,IAAD,CAAQC,MAAI,EAACC,QAASP,EAAtB,WACE,UAAC,IAAD,2BAEE,SAAC,IAAD,CACE,aAAW,QACXQ,UAAWV,EAAQV,YACnBqB,QAAST,EAHX,UAKE,SAAC,IAAD,UAGJ,UAAC,IAAD,CAAeU,MAAO,CAAEC,UAAW,UAAnC,WACE,SAAC,IAAD,uCACA,SAAC,IAAD,CAAYlB,MAAM,gBAAlB,uJAKA,SAAC,IAAD,CACEmB,MAAOV,EACPW,SAAU,SAAAC,GAAK,OAAIX,EAAOW,EAAMC,OAAOH,MAAxB,EACfI,YAAY,iBACZC,WAAY,CACVC,UAAW,EACX,cAAe,wBAEjBC,MAAsB,IAAfjB,EAAIkB,SAAiBhB,EAC5BiB,WAA2B,IAAfnB,EAAIkB,QAAiBhB,EAA+B,GAApB,kBAC5CkB,aAAa,MACb,cAAY,oBAEd,UAAC,IAAD,YACE,SAAC,IAAD,CACEC,QAAQ,YACR9B,MAAM,UACNgB,QAAS,WACPV,EAAMyB,eAAe,CACnBC,KAAM,MACNvB,IAAAA,IAEFF,GACD,EACD0B,UAAWtB,EAVb,qBAcA,SAAC,IAAD,CAAQmB,QAAQ,YAAY9B,MAAM,YAAYgB,QAAST,EAAvD,4BAOT,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByTag.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogActions,\n  DialogTitle,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport CloseIcon from '@mui/icons-material/Close'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    width: 300,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction ColorByTagDlg(props: {\n  model: { setColorScheme: Function }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Color by tag\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <Typography>Enter tag to color by: </Typography>\n        <Typography color=\"textSecondary\">\n          Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case)\n          for minimap2 read strand, HP for haplotype, RG for read group, etc.\n        </Typography>\n\n        <TextField\n          value={tag}\n          onChange={event => setTag(event.target.value)}\n          placeholder=\"Enter tag name\"\n          inputProps={{\n            maxLength: 2,\n            'data-testid': 'color-tag-name-input',\n          }}\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          data-testid=\"color-tag-name\"\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              model.setColorScheme({\n                type: 'tag',\n                tag,\n              })\n              handleClose()\n            }}\n            disabled={!validTag}\n          >\n            Submit\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(ColorByTagDlg)\n"],"names":["useStyles","makeStyles","theme","root","width","closeButton","position","right","spacing","top","color","palette","grey","observer","props","classes","model","handleClose","useState","tag","setTag","validTag","match","open","onClose","className","onClick","style","overflowX","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","variant","setColorScheme","type","disabled"],"sourceRoot":""}